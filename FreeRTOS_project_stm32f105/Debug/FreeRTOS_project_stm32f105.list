
FreeRTOS_project_stm32f105.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003430  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003620  08003620  00013620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036d0  080036d0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080036d0  080036d0  000136d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036d8  080036d8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036d8  080036d8  000136d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036dc  080036dc  000136dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080036e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001460  20000010  080036f0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001470  080036f0  00021470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f18a  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266d  00000000  00000000  0002f1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00031830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00032850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4fd  00000000  00000000  00033778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010322  00000000  00000000  00052c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbba0  00000000  00000000  00062f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011eb37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004318  00000000  00000000  0011eb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08003608 	.word	0x08003608

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08003608 	.word	0x08003608

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b976 	b.w	8000534 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000296:	fbb8 f7f1 	udiv	r7, r8, r1
 800029a:	fa1f fe8c 	uxth.w	lr, ip
 800029e:	fb01 8817 	mls	r8, r1, r7, r8
 80002a2:	fb07 f00e 	mul.w	r0, r7, lr
 80002a6:	0c23      	lsrs	r3, r4, #16
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	4298      	cmp	r0, r3
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x66>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f107 35ff 	add.w	r5, r7, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4298      	cmp	r0, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	3f02      	subs	r7, #2
 80002c4:	4463      	add	r3, ip
 80002c6:	1a1b      	subs	r3, r3, r0
 80002c8:	fbb3 f0f1 	udiv	r0, r3, r1
 80002cc:	fb01 3310 	mls	r3, r1, r0, r3
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002da:	45a6      	cmp	lr, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8109 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8106 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	2100      	movs	r1, #0
 80002f6:	eba4 040e 	sub.w	r4, r4, lr
 80002fa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	2300      	movs	r3, #0
 8000302:	40d4      	lsrs	r4, r2
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80fc 	bhi.w	800052c <__udivmoddi4+0x2cc>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 000c 	sub.w	r0, r1, ip
 800035a:	2101      	movs	r1, #1
 800035c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000360:	fa1f fe8c 	uxth.w	lr, ip
 8000364:	fbb0 f3f7 	udiv	r3, r0, r7
 8000368:	fb07 0013 	mls	r0, r7, r3, r0
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80ce 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000392:	fb07 5510 	mls	r5, r7, r0, r5
 8000396:	fb0e fe00 	mul.w	lr, lr, r0
 800039a:	b2a4      	uxth	r4, r4
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80b6 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d6:	fbba f8f9 	udiv	r8, sl, r9
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e2:	408d      	lsls	r5, r1
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	431d      	orrs	r5, r3
 80003ea:	fa00 f301 	lsl.w	r3, r0, r1
 80003ee:	fb08 f00e 	mul.w	r0, r8, lr
 80003f2:	0c2c      	lsrs	r4, r5, #16
 80003f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f8:	42a0      	cmp	r0, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a0      	cmp	r0, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1a24      	subs	r4, r4, r0
 800041a:	fbb4 f0f9 	udiv	r0, r4, r9
 800041e:	fb09 4410 	mls	r4, r9, r0, r4
 8000422:	fb00 fe0e 	mul.w	lr, r0, lr
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 35ff 	add.w	r5, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9502 	umull	r9, r5, r0, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2d0>
 800045c:	ebb3 0208 	subs.w	r2, r3, r8
 8000460:	eb64 040e 	sbc.w	r4, r4, lr
 8000464:	fa22 f301 	lsr.w	r3, r2, r1
 8000468:	fa04 f707 	lsl.w	r7, r4, r7
 800046c:	431f      	orrs	r7, r3
 800046e:	40cc      	lsrs	r4, r1
 8000470:	e9c6 7400 	strd	r7, r4, [r6]
 8000474:	2100      	movs	r1, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa8>
 8000478:	fa0c fc02 	lsl.w	ip, ip, r2
 800047c:	f1c2 0120 	rsb	r1, r2, #32
 8000480:	fa25 f301 	lsr.w	r3, r5, r1
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa20 f101 	lsr.w	r1, r0, r1
 800048c:	4095      	lsls	r5, r2
 800048e:	430d      	orrs	r5, r1
 8000490:	fbb3 f1f7 	udiv	r1, r3, r7
 8000494:	fb07 3311 	mls	r3, r7, r1, r3
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	0c28      	lsrs	r0, r5, #16
 800049e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004a2:	fb01 f30e 	mul.w	r3, r1, lr
 80004a6:	4283      	cmp	r3, r0
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0000 	adds.w	r0, ip, r0
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4283      	cmp	r3, r0
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4460      	add	r0, ip
 80004c0:	1ac0      	subs	r0, r0, r3
 80004c2:	fbb0 f3f7 	udiv	r3, r0, r7
 80004c6:	fb07 0013 	mls	r0, r7, r3, r0
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004d0:	fb03 f00e 	mul.w	r0, r3, lr
 80004d4:	42a8      	cmp	r0, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42a8      	cmp	r0, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1a28      	subs	r0, r5, r0
 80004ec:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	462f      	mov	r7, r5
 80004fa:	e6e4      	b.n	80002c6 <__udivmoddi4+0x66>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f9      	b.n	80002f4 <__udivmoddi4+0x94>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4643      	mov	r3, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4628      	mov	r0, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e747      	b.n	80003b6 <__udivmoddi4+0x156>
 8000526:	3b02      	subs	r3, #2
 8000528:	4465      	add	r5, ip
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x12c>
 800052c:	4608      	mov	r0, r1
 800052e:	e706      	b.n	800033e <__udivmoddi4+0xde>
 8000530:	4631      	mov	r1, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa8>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4a06      	ldr	r2, [pc, #24]	; (8000560 <vApplicationGetIdleTaskMemory+0x28>)
 8000548:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	4a05      	ldr	r2, [pc, #20]	; (8000564 <vApplicationGetIdleTaskMemory+0x2c>)
 800054e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	2000002c 	.word	0x2000002c
 8000564:	20000080 	.word	0x20000080

08000568 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b096      	sub	sp, #88	; 0x58
 800056c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800056e:	f000 faa7 	bl	8000ac0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000572:	f000 f84b 	bl	800060c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000576:	f000 f8c1 	bl	80006fc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800057a:	f000 f895 	bl	80006a8 <MX_USART2_UART_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <main+0x8c>)
 8000580:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000584:	461d      	mov	r5, r3
 8000586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000592:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fe4b 	bl	8002234 <osThreadCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <main+0x90>)
 80005a2:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task2 */
	osThreadDef(Task2, Task2_Init, osPriorityNormal, 0, 128);
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <main+0x94>)
 80005a6:	f107 0420 	add.w	r4, r7, #32
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fe38 	bl	8002234 <osThreadCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <main+0x98>)
 80005c8:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task3 */
	osThreadDef(Task3, Task3_Init, osPriorityNormal, 0, 128);
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <main+0x9c>)
 80005cc:	1d3c      	adds	r4, r7, #4
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task3Handle = osThreadCreate(osThread(Task3), NULL);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fe27 	bl	8002234 <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <main+0xa0>)
 80005ea:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80005ec:	f001 fe1b 	bl	8002226 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x88>
 80005f2:	bf00      	nop
 80005f4:	0800363c 	.word	0x0800363c
 80005f8:	200002cc 	.word	0x200002cc
 80005fc:	08003658 	.word	0x08003658
 8000600:	200002d0 	.word	0x200002d0
 8000604:	08003674 	.word	0x08003674
 8000608:	200002d4 	.word	0x200002d4

0800060c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	2238      	movs	r2, #56	; 0x38
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 ffec 	bl	80035f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000636:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800064e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000654:	2300      	movs	r3, #0
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0318 	add.w	r3, r7, #24
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fd01 	bl	8001064 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x60>
	{
		Error_Handler();
 8000668:	f000 f8f4 	bl	8000854 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2102      	movs	r1, #2
 8000686:	4618      	mov	r0, r3
 8000688:	f001 f802 	bl	8001690 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000692:	f000 f8df 	bl	8000854 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <SystemClock_Config+0x98>)
 8000698:	2201      	movs	r2, #1
 800069a:	601a      	str	r2, [r3, #0]
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	; 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	42420070 	.word	0x42420070

080006a8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_USART2_UART_Init+0x50>)
 80006b0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006e0:	f001 fcae 	bl	8002040 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80006ea:	f000 f8b3 	bl	8000854 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000288 	.word	0x20000288
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_GPIO_Init+0x78>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a17      	ldr	r2, [pc, #92]	; (8000774 <MX_GPIO_Init+0x78>)
 8000716:	f043 0320 	orr.w	r3, r3, #32
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_GPIO_Init+0x78>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0320 	and.w	r3, r3, #32
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_GPIO_Init+0x78>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a11      	ldr	r2, [pc, #68]	; (8000774 <MX_GPIO_Init+0x78>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_GPIO_Init+0x78>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_GPIO_Init+0x7c>)
 8000748:	f000 fc74 	bl	8001034 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800074c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000750:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2302      	movs	r3, #2
 800075c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_GPIO_Init+0x7c>)
 8000766:	f000 fae1 	bl	8000d2c <HAL_GPIO_Init>

}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000
 8000778:	40010800 	.word	0x40010800

0800077c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{

		i++;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <StartDefaultTask+0x50>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a10      	ldr	r2, [pc, #64]	; (80007cc <StartDefaultTask+0x50>)
 800078c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000794:	480e      	ldr	r0, [pc, #56]	; (80007d0 <StartDefaultTask+0x54>)
 8000796:	f000 fc4d 	bl	8001034 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800079a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079e:	f000 f9c1 	bl	8000b24 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a8:	4809      	ldr	r0, [pc, #36]	; (80007d0 <StartDefaultTask+0x54>)
 80007aa:	f000 fc43 	bl	8001034 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80007ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b2:	f000 f9b7 	bl	8000b24 <HAL_Delay>
		if(i==3){
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <StartDefaultTask+0x50>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d102      	bne.n	80007c4 <StartDefaultTask+0x48>
			task2=1;
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <StartDefaultTask+0x58>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f001 fd81 	bl	80022cc <osDelay>
		i++;
 80007ca:	e7db      	b.n	8000784 <StartDefaultTask+0x8>
 80007cc:	20000284 	.word	0x20000284
 80007d0:	40010800 	.word	0x40010800
 80007d4:	20000280 	.word	0x20000280

080007d8 <Task2_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task2_Init */
void Task2_Init(void const * argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task2_Init */
	/* Infinite loop */
	for(;;)
	{
		if(task2==1){
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <Task2_Init+0x40>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d013      	beq.n	8000810 <Task2_Init+0x38>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ee:	480b      	ldr	r0, [pc, #44]	; (800081c <Task2_Init+0x44>)
 80007f0:	f000 fc20 	bl	8001034 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80007f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f8:	f000 f994 	bl	8000b24 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <Task2_Init+0x44>)
 8000804:	f000 fc16 	bl	8001034 <HAL_GPIO_WritePin>
			HAL_Delay(1000);}
 8000808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080c:	f000 f98a 	bl	8000b24 <HAL_Delay>
		osDelay(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f001 fd5b 	bl	80022cc <osDelay>
		if(task2==1){
 8000816:	e7e3      	b.n	80007e0 <Task2_Init+0x8>
 8000818:	20000280 	.word	0x20000280
 800081c:	40010800 	.word	0x40010800

08000820 <Task3_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task3_Init */
void Task3_Init(void const * argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task3_Init */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000828:	2001      	movs	r0, #1
 800082a:	f001 fd4f 	bl	80022cc <osDelay>
 800082e:	e7fb      	b.n	8000828 <Task3_Init+0x8>

08000830 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d101      	bne.n	8000846 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000842:	f000 f953 	bl	8000aec <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40012c00 	.word	0x40012c00

08000854 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_MspInit+0x4c>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	4a10      	ldr	r2, [pc, #64]	; (80008ac <HAL_MspInit+0x4c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6193      	str	r3, [r2, #24]
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <HAL_MspInit+0x4c>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_MspInit+0x4c>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <HAL_MspInit+0x4c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_MspInit+0x4c>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	210f      	movs	r1, #15
 800089a:	f06f 0001 	mvn.w	r0, #1
 800089e:	f000 fa1a 	bl	8000cd6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <HAL_UART_MspInit+0x88>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d12f      	bne.n	8000930 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <HAL_UART_MspInit+0x8c>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	4a19      	ldr	r2, [pc, #100]	; (800093c <HAL_UART_MspInit+0x8c>)
 80008d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008da:	61d3      	str	r3, [r2, #28]
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_UART_MspInit+0x8c>)
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_UART_MspInit+0x8c>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <HAL_UART_MspInit+0x8c>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_UART_MspInit+0x8c>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000900:	2304      	movs	r3, #4
 8000902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <HAL_UART_MspInit+0x90>)
 8000914:	f000 fa0a 	bl	8000d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000918:	2308      	movs	r3, #8
 800091a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <HAL_UART_MspInit+0x90>)
 800092c:	f000 f9fe 	bl	8000d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000930:	bf00      	nop
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40004400 	.word	0x40004400
 800093c:	40021000 	.word	0x40021000
 8000940:	40010800 	.word	0x40010800

08000944 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800095a:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <HAL_InitTick+0xd0>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <HAL_InitTick+0xd0>)
 8000960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <HAL_InitTick+0xd0>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000972:	f107 020c 	add.w	r2, r7, #12
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f001 f8b5 	bl	8001aec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000982:	f001 f89f 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 8000986:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098a:	4a23      	ldr	r2, [pc, #140]	; (8000a18 <HAL_InitTick+0xd4>)
 800098c:	fba2 2303 	umull	r2, r3, r2, r3
 8000990:	0c9b      	lsrs	r3, r3, #18
 8000992:	3b01      	subs	r3, #1
 8000994:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <HAL_InitTick+0xd8>)
 8000998:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <HAL_InitTick+0xdc>)
 800099a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <HAL_InitTick+0xd8>)
 800099e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009a4:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <HAL_InitTick+0xd8>)
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <HAL_InitTick+0xd8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_InitTick+0xd8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <HAL_InitTick+0xd8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009bc:	4817      	ldr	r0, [pc, #92]	; (8000a1c <HAL_InitTick+0xd8>)
 80009be:	f001 f8e3 	bl	8001b88 <HAL_TIM_Base_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d11b      	bne.n	8000a08 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009d0:	4812      	ldr	r0, [pc, #72]	; (8000a1c <HAL_InitTick+0xd8>)
 80009d2:	f001 f931 	bl	8001c38 <HAL_TIM_Base_Start_IT>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d111      	bne.n	8000a08 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80009e4:	2019      	movs	r0, #25
 80009e6:	f000 f992 	bl	8000d0e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d808      	bhi.n	8000a02 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	2019      	movs	r0, #25
 80009f6:	f000 f96e 	bl	8000cd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <HAL_InitTick+0xe0>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	e002      	b.n	8000a08 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3730      	adds	r7, #48	; 0x30
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000
 8000a18:	431bde83 	.word	0x431bde83
 8000a1c:	200002d8 	.word	0x200002d8
 8000a20:	40012c00 	.word	0x40012c00
 8000a24:	20000004 	.word	0x20000004

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
	...

08000a54 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <TIM1_UP_IRQHandler+0x10>)
 8000a5a:	f001 f947 	bl	8001cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200002d8 	.word	0x200002d8

08000a68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <Reset_Handler>:
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <LoopFillZerobss+0x12>)
 8000a76:	490d      	ldr	r1, [pc, #52]	; (8000aac <LoopFillZerobss+0x16>)
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <LoopFillZerobss+0x1a>)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:
 8000a7e:	58d4      	ldr	r4, [r2, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:
 8000a84:	18c4      	adds	r4, r0, r3
 8000a86:	428c      	cmp	r4, r1
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <LoopFillZerobss+0x1e>)
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	; (8000ab8 <LoopFillZerobss+0x22>)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:
 8000a96:	42a2      	cmp	r2, r4
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>
 8000a9a:	f7ff ffe5 	bl	8000a68 <SystemInit>
 8000a9e:	f002 fd87 	bl	80035b0 <__libc_init_array>
 8000aa2:	f7ff fd61 	bl	8000568 <main>
 8000aa6:	4770      	bx	lr
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000010 	.word	0x20000010
 8000ab0:	080036e0 	.word	0x080036e0
 8000ab4:	20000010 	.word	0x20000010
 8000ab8:	20001470 	.word	0x20001470

08000abc <ADC1_2_IRQHandler>:
 8000abc:	e7fe      	b.n	8000abc <ADC1_2_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_Init+0x28>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x28>)
 8000aca:	f043 0310 	orr.w	r3, r3, #16
 8000ace:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f8f5 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	200f      	movs	r0, #15
 8000ad8:	f7ff ff34 	bl	8000944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fec0 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x1c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x20>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <HAL_IncTick+0x20>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000320 	.word	0x20000320

08000b10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <HAL_GetTick+0x10>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	20000320 	.word	0x20000320

08000b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff fff0 	bl	8000b10 <HAL_GetTick>
 8000b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d005      	beq.n	8000b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_Delay+0x44>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4a:	bf00      	nop
 8000b4c:	f7ff ffe0 	bl	8000b10 <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d8f7      	bhi.n	8000b4c <HAL_Delay+0x28>
  {
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4906      	ldr	r1, [pc, #24]	; (8000c04 <__NVIC_EnableIRQ+0x34>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	; (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	; 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff4f 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff64 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ffb2 	bl	8000c5c <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff81 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff57 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b08b      	sub	sp, #44	; 0x2c
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3e:	e169      	b.n	8001014 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d40:	2201      	movs	r2, #1
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	69fa      	ldr	r2, [r7, #28]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f040 8158 	bne.w	800100e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a9a      	ldr	r2, [pc, #616]	; (8000fcc <HAL_GPIO_Init+0x2a0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d05e      	beq.n	8000e26 <HAL_GPIO_Init+0xfa>
 8000d68:	4a98      	ldr	r2, [pc, #608]	; (8000fcc <HAL_GPIO_Init+0x2a0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d875      	bhi.n	8000e5a <HAL_GPIO_Init+0x12e>
 8000d6e:	4a98      	ldr	r2, [pc, #608]	; (8000fd0 <HAL_GPIO_Init+0x2a4>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d058      	beq.n	8000e26 <HAL_GPIO_Init+0xfa>
 8000d74:	4a96      	ldr	r2, [pc, #600]	; (8000fd0 <HAL_GPIO_Init+0x2a4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d86f      	bhi.n	8000e5a <HAL_GPIO_Init+0x12e>
 8000d7a:	4a96      	ldr	r2, [pc, #600]	; (8000fd4 <HAL_GPIO_Init+0x2a8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d052      	beq.n	8000e26 <HAL_GPIO_Init+0xfa>
 8000d80:	4a94      	ldr	r2, [pc, #592]	; (8000fd4 <HAL_GPIO_Init+0x2a8>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d869      	bhi.n	8000e5a <HAL_GPIO_Init+0x12e>
 8000d86:	4a94      	ldr	r2, [pc, #592]	; (8000fd8 <HAL_GPIO_Init+0x2ac>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d04c      	beq.n	8000e26 <HAL_GPIO_Init+0xfa>
 8000d8c:	4a92      	ldr	r2, [pc, #584]	; (8000fd8 <HAL_GPIO_Init+0x2ac>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d863      	bhi.n	8000e5a <HAL_GPIO_Init+0x12e>
 8000d92:	4a92      	ldr	r2, [pc, #584]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d046      	beq.n	8000e26 <HAL_GPIO_Init+0xfa>
 8000d98:	4a90      	ldr	r2, [pc, #576]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d85d      	bhi.n	8000e5a <HAL_GPIO_Init+0x12e>
 8000d9e:	2b12      	cmp	r3, #18
 8000da0:	d82a      	bhi.n	8000df8 <HAL_GPIO_Init+0xcc>
 8000da2:	2b12      	cmp	r3, #18
 8000da4:	d859      	bhi.n	8000e5a <HAL_GPIO_Init+0x12e>
 8000da6:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <HAL_GPIO_Init+0x80>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000e27 	.word	0x08000e27
 8000db0:	08000e01 	.word	0x08000e01
 8000db4:	08000e13 	.word	0x08000e13
 8000db8:	08000e55 	.word	0x08000e55
 8000dbc:	08000e5b 	.word	0x08000e5b
 8000dc0:	08000e5b 	.word	0x08000e5b
 8000dc4:	08000e5b 	.word	0x08000e5b
 8000dc8:	08000e5b 	.word	0x08000e5b
 8000dcc:	08000e5b 	.word	0x08000e5b
 8000dd0:	08000e5b 	.word	0x08000e5b
 8000dd4:	08000e5b 	.word	0x08000e5b
 8000dd8:	08000e5b 	.word	0x08000e5b
 8000ddc:	08000e5b 	.word	0x08000e5b
 8000de0:	08000e5b 	.word	0x08000e5b
 8000de4:	08000e5b 	.word	0x08000e5b
 8000de8:	08000e5b 	.word	0x08000e5b
 8000dec:	08000e5b 	.word	0x08000e5b
 8000df0:	08000e09 	.word	0x08000e09
 8000df4:	08000e1d 	.word	0x08000e1d
 8000df8:	4a79      	ldr	r2, [pc, #484]	; (8000fe0 <HAL_GPIO_Init+0x2b4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dfe:	e02c      	b.n	8000e5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	623b      	str	r3, [r7, #32]
          break;
 8000e06:	e029      	b.n	8000e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	623b      	str	r3, [r7, #32]
          break;
 8000e10:	e024      	b.n	8000e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	3308      	adds	r3, #8
 8000e18:	623b      	str	r3, [r7, #32]
          break;
 8000e1a:	e01f      	b.n	8000e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	330c      	adds	r3, #12
 8000e22:	623b      	str	r3, [r7, #32]
          break;
 8000e24:	e01a      	b.n	8000e5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d102      	bne.n	8000e34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	623b      	str	r3, [r7, #32]
          break;
 8000e32:	e013      	b.n	8000e5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d105      	bne.n	8000e48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69fa      	ldr	r2, [r7, #28]
 8000e44:	611a      	str	r2, [r3, #16]
          break;
 8000e46:	e009      	b.n	8000e5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	615a      	str	r2, [r3, #20]
          break;
 8000e52:	e003      	b.n	8000e5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
          break;
 8000e58:	e000      	b.n	8000e5c <HAL_GPIO_Init+0x130>
          break;
 8000e5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	2bff      	cmp	r3, #255	; 0xff
 8000e60:	d801      	bhi.n	8000e66 <HAL_GPIO_Init+0x13a>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	e001      	b.n	8000e6a <HAL_GPIO_Init+0x13e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2bff      	cmp	r3, #255	; 0xff
 8000e70:	d802      	bhi.n	8000e78 <HAL_GPIO_Init+0x14c>
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	e002      	b.n	8000e7e <HAL_GPIO_Init+0x152>
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	3b08      	subs	r3, #8
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	210f      	movs	r1, #15
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	401a      	ands	r2, r3
 8000e90:	6a39      	ldr	r1, [r7, #32]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 80b1 	beq.w	800100e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eac:	4b4d      	ldr	r3, [pc, #308]	; (8000fe4 <HAL_GPIO_Init+0x2b8>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a4c      	ldr	r2, [pc, #304]	; (8000fe4 <HAL_GPIO_Init+0x2b8>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b4a      	ldr	r3, [pc, #296]	; (8000fe4 <HAL_GPIO_Init+0x2b8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ec4:	4a48      	ldr	r2, [pc, #288]	; (8000fe8 <HAL_GPIO_Init+0x2bc>)
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a40      	ldr	r2, [pc, #256]	; (8000fec <HAL_GPIO_Init+0x2c0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d013      	beq.n	8000f18 <HAL_GPIO_Init+0x1ec>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a3f      	ldr	r2, [pc, #252]	; (8000ff0 <HAL_GPIO_Init+0x2c4>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d00d      	beq.n	8000f14 <HAL_GPIO_Init+0x1e8>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a3e      	ldr	r2, [pc, #248]	; (8000ff4 <HAL_GPIO_Init+0x2c8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d007      	beq.n	8000f10 <HAL_GPIO_Init+0x1e4>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a3d      	ldr	r2, [pc, #244]	; (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d101      	bne.n	8000f0c <HAL_GPIO_Init+0x1e0>
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e006      	b.n	8000f1a <HAL_GPIO_Init+0x1ee>
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	e004      	b.n	8000f1a <HAL_GPIO_Init+0x1ee>
 8000f10:	2302      	movs	r3, #2
 8000f12:	e002      	b.n	8000f1a <HAL_GPIO_Init+0x1ee>
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <HAL_GPIO_Init+0x1ee>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f1c:	f002 0203 	and.w	r2, r2, #3
 8000f20:	0092      	lsls	r2, r2, #2
 8000f22:	4093      	lsls	r3, r2
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f2a:	492f      	ldr	r1, [pc, #188]	; (8000fe8 <HAL_GPIO_Init+0x2bc>)
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d006      	beq.n	8000f52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f44:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	492c      	ldr	r1, [pc, #176]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	600b      	str	r3, [r1, #0]
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f52:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	4928      	ldr	r1, [pc, #160]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	4922      	ldr	r1, [pc, #136]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	604b      	str	r3, [r1, #4]
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f7a:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	491e      	ldr	r1, [pc, #120]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d006      	beq.n	8000fa2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	4918      	ldr	r1, [pc, #96]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	608b      	str	r3, [r1, #8]
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fa2:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	4914      	ldr	r1, [pc, #80]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000fac:	4013      	ands	r3, r2
 8000fae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d021      	beq.n	8001000 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	490e      	ldr	r1, [pc, #56]	; (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	60cb      	str	r3, [r1, #12]
 8000fc8:	e021      	b.n	800100e <HAL_GPIO_Init+0x2e2>
 8000fca:	bf00      	nop
 8000fcc:	10320000 	.word	0x10320000
 8000fd0:	10310000 	.word	0x10310000
 8000fd4:	10220000 	.word	0x10220000
 8000fd8:	10210000 	.word	0x10210000
 8000fdc:	10120000 	.word	0x10120000
 8000fe0:	10110000 	.word	0x10110000
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40010c00 	.word	0x40010c00
 8000ff4:	40011000 	.word	0x40011000
 8000ff8:	40011400 	.word	0x40011400
 8000ffc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_GPIO_Init+0x304>)
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	43db      	mvns	r3, r3
 8001008:	4909      	ldr	r1, [pc, #36]	; (8001030 <HAL_GPIO_Init+0x304>)
 800100a:	4013      	ands	r3, r2
 800100c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	3301      	adds	r3, #1
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	fa22 f303 	lsr.w	r3, r2, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	f47f ae8e 	bne.w	8000d40 <HAL_GPIO_Init+0x14>
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	372c      	adds	r7, #44	; 0x2c
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	40010400 	.word	0x40010400

08001034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001050:	e003      	b.n	800105a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	041a      	lsls	r2, r3, #16
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	611a      	str	r2, [r3, #16]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e304      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 8087 	beq.w	8001192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001084:	4b92      	ldr	r3, [pc, #584]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b04      	cmp	r3, #4
 800108e:	d00c      	beq.n	80010aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001090:	4b8f      	ldr	r3, [pc, #572]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	2b08      	cmp	r3, #8
 800109a:	d112      	bne.n	80010c2 <HAL_RCC_OscConfig+0x5e>
 800109c:	4b8c      	ldr	r3, [pc, #560]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a8:	d10b      	bne.n	80010c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010aa:	4b89      	ldr	r3, [pc, #548]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d06c      	beq.n	8001190 <HAL_RCC_OscConfig+0x12c>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d168      	bne.n	8001190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e2de      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ca:	d106      	bne.n	80010da <HAL_RCC_OscConfig+0x76>
 80010cc:	4b80      	ldr	r3, [pc, #512]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a7f      	ldr	r2, [pc, #508]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e02e      	b.n	8001138 <HAL_RCC_OscConfig+0xd4>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x98>
 80010e2:	4b7b      	ldr	r3, [pc, #492]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a7a      	ldr	r2, [pc, #488]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	4b78      	ldr	r3, [pc, #480]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a77      	ldr	r2, [pc, #476]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e01d      	b.n	8001138 <HAL_RCC_OscConfig+0xd4>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001104:	d10c      	bne.n	8001120 <HAL_RCC_OscConfig+0xbc>
 8001106:	4b72      	ldr	r3, [pc, #456]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a71      	ldr	r2, [pc, #452]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800110c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b6f      	ldr	r3, [pc, #444]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a6e      	ldr	r2, [pc, #440]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e00b      	b.n	8001138 <HAL_RCC_OscConfig+0xd4>
 8001120:	4b6b      	ldr	r3, [pc, #428]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a6a      	ldr	r2, [pc, #424]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a67      	ldr	r2, [pc, #412]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d013      	beq.n	8001168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fce6 	bl	8000b10 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fce2 	bl	8000b10 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e292      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	4b5d      	ldr	r3, [pc, #372]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0xe4>
 8001166:	e014      	b.n	8001192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fcd2 	bl	8000b10 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fcce 	bl	8000b10 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	; 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e27e      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x10c>
 800118e:	e000      	b.n	8001192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d063      	beq.n	8001266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800119e:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00b      	beq.n	80011c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011aa:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d11c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x18c>
 80011b6:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d116      	bne.n	80011f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HAL_RCC_OscConfig+0x176>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d001      	beq.n	80011da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e252      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011da:	4b3d      	ldr	r3, [pc, #244]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4939      	ldr	r1, [pc, #228]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	e03a      	b.n	8001266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d020      	beq.n	800123a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f8:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <HAL_RCC_OscConfig+0x270>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fe:	f7ff fc87 	bl	8000b10 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001206:	f7ff fc83 	bl	8000b10 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e233      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4927      	ldr	r1, [pc, #156]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 8001234:	4313      	orrs	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
 8001238:	e015      	b.n	8001266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <HAL_RCC_OscConfig+0x270>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fc66 	bl	8000b10 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001248:	f7ff fc62 	bl	8000b10 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e212      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d03a      	beq.n	80012e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d019      	beq.n	80012ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_RCC_OscConfig+0x274>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001280:	f7ff fc46 	bl	8000b10 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001288:	f7ff fc42 	bl	8000b10 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e1f2      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_RCC_OscConfig+0x26c>)
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f000 fc50 	bl	8001b4c <RCC_Delay>
 80012ac:	e01c      	b.n	80012e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_RCC_OscConfig+0x274>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b4:	f7ff fc2c 	bl	8000b10 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ba:	e00f      	b.n	80012dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc28 	bl	8000b10 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d908      	bls.n	80012dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e1d8      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	42420000 	.word	0x42420000
 80012d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012dc:	4b9b      	ldr	r3, [pc, #620]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1e9      	bne.n	80012bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80a6 	beq.w	8001442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012fa:	4b94      	ldr	r3, [pc, #592]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10d      	bne.n	8001322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b91      	ldr	r3, [pc, #580]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a90      	ldr	r2, [pc, #576]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	61d3      	str	r3, [r2, #28]
 8001312:	4b8e      	ldr	r3, [pc, #568]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800131e:	2301      	movs	r3, #1
 8001320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001322:	4b8b      	ldr	r3, [pc, #556]	; (8001550 <HAL_RCC_OscConfig+0x4ec>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132a:	2b00      	cmp	r3, #0
 800132c:	d118      	bne.n	8001360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132e:	4b88      	ldr	r3, [pc, #544]	; (8001550 <HAL_RCC_OscConfig+0x4ec>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a87      	ldr	r2, [pc, #540]	; (8001550 <HAL_RCC_OscConfig+0x4ec>)
 8001334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800133a:	f7ff fbe9 	bl	8000b10 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001342:	f7ff fbe5 	bl	8000b10 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b64      	cmp	r3, #100	; 0x64
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e195      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	4b7e      	ldr	r3, [pc, #504]	; (8001550 <HAL_RCC_OscConfig+0x4ec>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d106      	bne.n	8001376 <HAL_RCC_OscConfig+0x312>
 8001368:	4b78      	ldr	r3, [pc, #480]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4a77      	ldr	r2, [pc, #476]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6213      	str	r3, [r2, #32]
 8001374:	e02d      	b.n	80013d2 <HAL_RCC_OscConfig+0x36e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10c      	bne.n	8001398 <HAL_RCC_OscConfig+0x334>
 800137e:	4b73      	ldr	r3, [pc, #460]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4a72      	ldr	r2, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	4b70      	ldr	r3, [pc, #448]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4a6f      	ldr	r2, [pc, #444]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001390:	f023 0304 	bic.w	r3, r3, #4
 8001394:	6213      	str	r3, [r2, #32]
 8001396:	e01c      	b.n	80013d2 <HAL_RCC_OscConfig+0x36e>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	2b05      	cmp	r3, #5
 800139e:	d10c      	bne.n	80013ba <HAL_RCC_OscConfig+0x356>
 80013a0:	4b6a      	ldr	r3, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4a69      	ldr	r2, [pc, #420]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6213      	str	r3, [r2, #32]
 80013ac:	4b67      	ldr	r3, [pc, #412]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4a66      	ldr	r2, [pc, #408]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6213      	str	r3, [r2, #32]
 80013b8:	e00b      	b.n	80013d2 <HAL_RCC_OscConfig+0x36e>
 80013ba:	4b64      	ldr	r3, [pc, #400]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a63      	ldr	r2, [pc, #396]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	6213      	str	r3, [r2, #32]
 80013c6:	4b61      	ldr	r3, [pc, #388]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4a60      	ldr	r2, [pc, #384]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013cc:	f023 0304 	bic.w	r3, r3, #4
 80013d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d015      	beq.n	8001406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7ff fb99 	bl	8000b10 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e0:	e00a      	b.n	80013f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e2:	f7ff fb95 	bl	8000b10 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e143      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f8:	4b54      	ldr	r3, [pc, #336]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0ee      	beq.n	80013e2 <HAL_RCC_OscConfig+0x37e>
 8001404:	e014      	b.n	8001430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7ff fb83 	bl	8000b10 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140c:	e00a      	b.n	8001424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140e:	f7ff fb7f 	bl	8000b10 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f241 3288 	movw	r2, #5000	; 0x1388
 800141c:	4293      	cmp	r3, r2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e12d      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001424:	4b49      	ldr	r3, [pc, #292]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1ee      	bne.n	800140e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d105      	bne.n	8001442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001436:	4b45      	ldr	r3, [pc, #276]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	4a44      	ldr	r2, [pc, #272]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800143c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001440:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 808c 	beq.w	8001564 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800144c:	4b3f      	ldr	r3, [pc, #252]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001458:	d10e      	bne.n	8001478 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800145a:	4b3c      	ldr	r3, [pc, #240]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001462:	2b08      	cmp	r3, #8
 8001464:	d108      	bne.n	8001478 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001466:	4b39      	ldr	r3, [pc, #228]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800146e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001472:	d101      	bne.n	8001478 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e103      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	2b02      	cmp	r3, #2
 800147e:	d14e      	bne.n	800151e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800148c:	4b2f      	ldr	r3, [pc, #188]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0ef      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80014a0:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <HAL_RCC_OscConfig+0x4f0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb33 	bl	8000b10 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80014ae:	f7ff fb2f 	bl	8000b10 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b64      	cmp	r3, #100	; 0x64
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0df      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f0      	bne.n	80014ae <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80014cc:	4b1f      	ldr	r3, [pc, #124]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d8:	491c      	ldr	r1, [pc, #112]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4918      	ldr	r1, [pc, #96]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_RCC_OscConfig+0x4f0>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fb0b 	bl	8000b10 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80014fe:	f7ff fb07 	bl	8000b10 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b64      	cmp	r3, #100	; 0x64
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e0b7      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x49a>
 800151c:	e022      	b.n	8001564 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_RCC_OscConfig+0x4f0>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff faee 	bl	8000b10 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001536:	e00f      	b.n	8001558 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001538:	f7ff faea 	bl	8000b10 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d908      	bls.n	8001558 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e09a      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	40007000 	.word	0x40007000
 8001554:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001558:	4b4b      	ldr	r3, [pc, #300]	; (8001688 <HAL_RCC_OscConfig+0x624>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e9      	bne.n	8001538 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 8088 	beq.w	800167e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800156e:	4b46      	ldr	r3, [pc, #280]	; (8001688 <HAL_RCC_OscConfig+0x624>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b08      	cmp	r3, #8
 8001578:	d068      	beq.n	800164c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d14d      	bne.n	800161e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b42      	ldr	r3, [pc, #264]	; (800168c <HAL_RCC_OscConfig+0x628>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fac2 	bl	8000b10 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff fabe 	bl	8000b10 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e06e      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a2:	4b39      	ldr	r3, [pc, #228]	; (8001688 <HAL_RCC_OscConfig+0x624>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b6:	d10f      	bne.n	80015d8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80015b8:	4b33      	ldr	r3, [pc, #204]	; (8001688 <HAL_RCC_OscConfig+0x624>)
 80015ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	4931      	ldr	r1, [pc, #196]	; (8001688 <HAL_RCC_OscConfig+0x624>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015c6:	4b30      	ldr	r3, [pc, #192]	; (8001688 <HAL_RCC_OscConfig+0x624>)
 80015c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ca:	f023 020f 	bic.w	r2, r3, #15
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	492d      	ldr	r1, [pc, #180]	; (8001688 <HAL_RCC_OscConfig+0x624>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_RCC_OscConfig+0x624>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	430b      	orrs	r3, r1
 80015ea:	4927      	ldr	r1, [pc, #156]	; (8001688 <HAL_RCC_OscConfig+0x624>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f0:	4b26      	ldr	r3, [pc, #152]	; (800168c <HAL_RCC_OscConfig+0x628>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff fa8b 	bl	8000b10 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fe:	f7ff fa87 	bl	8000b10 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e037      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_RCC_OscConfig+0x624>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x59a>
 800161c:	e02f      	b.n	800167e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161e:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_RCC_OscConfig+0x628>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fa74 	bl	8000b10 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162c:	f7ff fa70 	bl	8000b10 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e020      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_RCC_OscConfig+0x624>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x5c8>
 800164a:	e018      	b.n	800167e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e013      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_RCC_OscConfig+0x624>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	429a      	cmp	r2, r3
 800166a:	d106      	bne.n	800167a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001676:	429a      	cmp	r2, r3
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000
 800168c:	42420060 	.word	0x42420060

08001690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0d0      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a4:	4b6a      	ldr	r3, [pc, #424]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d910      	bls.n	80016d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b67      	ldr	r3, [pc, #412]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 0207 	bic.w	r2, r3, #7
 80016ba:	4965      	ldr	r1, [pc, #404]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b63      	ldr	r3, [pc, #396]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0b8      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ec:	4b59      	ldr	r3, [pc, #356]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a58      	ldr	r2, [pc, #352]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001704:	4b53      	ldr	r3, [pc, #332]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a52      	ldr	r2, [pc, #328]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800170e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001710:	4b50      	ldr	r3, [pc, #320]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	494d      	ldr	r1, [pc, #308]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d040      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b47      	ldr	r3, [pc, #284]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d115      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e07f      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174e:	4b41      	ldr	r3, [pc, #260]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e073      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175e:	4b3d      	ldr	r3, [pc, #244]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e06b      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176e:	4b39      	ldr	r3, [pc, #228]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f023 0203 	bic.w	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4936      	ldr	r1, [pc, #216]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001780:	f7ff f9c6 	bl	8000b10 <HAL_GetTick>
 8001784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	e00a      	b.n	800179e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001788:	f7ff f9c2 	bl	8000b10 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e053      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 020c 	and.w	r2, r3, #12
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d1eb      	bne.n	8001788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017b0:	4b27      	ldr	r3, [pc, #156]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d210      	bcs.n	80017e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 0207 	bic.w	r2, r3, #7
 80017c6:	4922      	ldr	r1, [pc, #136]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e032      	b.n	8001846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4916      	ldr	r1, [pc, #88]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	490e      	ldr	r1, [pc, #56]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	4313      	orrs	r3, r2
 800181c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800181e:	f000 f821 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 8001822:	4602      	mov	r2, r0
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	490a      	ldr	r1, [pc, #40]	; (8001858 <HAL_RCC_ClockConfig+0x1c8>)
 8001830:	5ccb      	ldrb	r3, [r1, r3]
 8001832:	fa22 f303 	lsr.w	r3, r2, r3
 8001836:	4a09      	ldr	r2, [pc, #36]	; (800185c <HAL_RCC_ClockConfig+0x1cc>)
 8001838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_RCC_ClockConfig+0x1d0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f880 	bl	8000944 <HAL_InitTick>

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40022000 	.word	0x40022000
 8001854:	40021000 	.word	0x40021000
 8001858:	080036b8 	.word	0x080036b8
 800185c:	20000000 	.word	0x20000000
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001868:	b09d      	sub	sp, #116	; 0x74
 800186a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800186c:	4b81      	ldr	r3, [pc, #516]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x210>)
 800186e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001874:	c407      	stmia	r4!, {r0, r1, r2}
 8001876:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001878:	4b7f      	ldr	r3, [pc, #508]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x214>)
 800187a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800187e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	667b      	str	r3, [r7, #100]	; 0x64
 8001888:	2300      	movs	r3, #0
 800188a:	663b      	str	r3, [r7, #96]	; 0x60
 800188c:	2300      	movs	r3, #0
 800188e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001890:	2300      	movs	r3, #0
 8001892:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	65bb      	str	r3, [r7, #88]	; 0x58
 800189c:	2300      	movs	r3, #0
 800189e:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018a0:	4b76      	ldr	r3, [pc, #472]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x218>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d002      	beq.n	80018b6 <HAL_RCC_GetSysClockFreq+0x52>
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d003      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x58>
 80018b4:	e0d4      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018b6:	4b72      	ldr	r3, [pc, #456]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x21c>)
 80018b8:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80018ba:	e0d4      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018be:	0c9b      	lsrs	r3, r3, #18
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	3340      	adds	r3, #64	; 0x40
 80018c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018ca:	4413      	add	r3, r2
 80018cc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80018d0:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80b9 	beq.w	8001a50 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80018de:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x218>)
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3340      	adds	r3, #64	; 0x40
 80018e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018ec:	4413      	add	r3, r2
 80018ee:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80018f2:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80018f4:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x218>)
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 8095 	beq.w	8001a2c <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001902:	4b5e      	ldr	r3, [pc, #376]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x218>)
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	3301      	adds	r3, #1
 800190e:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001910:	4b5a      	ldr	r3, [pc, #360]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x218>)
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3302      	adds	r3, #2
 800191c:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800191e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001920:	2200      	movs	r2, #0
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	61fa      	str	r2, [r7, #28]
 8001926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001928:	2200      	movs	r2, #0
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
 800192c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800192e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001932:	4622      	mov	r2, r4
 8001934:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001938:	4684      	mov	ip, r0
 800193a:	fb0c f202 	mul.w	r2, ip, r2
 800193e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001942:	468c      	mov	ip, r1
 8001944:	4618      	mov	r0, r3
 8001946:	4621      	mov	r1, r4
 8001948:	4603      	mov	r3, r0
 800194a:	fb03 f30c 	mul.w	r3, r3, ip
 800194e:	4413      	add	r3, r2
 8001950:	4602      	mov	r2, r0
 8001952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001954:	fba2 8901 	umull	r8, r9, r2, r1
 8001958:	444b      	add	r3, r9
 800195a:	4699      	mov	r9, r3
 800195c:	4642      	mov	r2, r8
 800195e:	464b      	mov	r3, r9
 8001960:	f04f 0000 	mov.w	r0, #0
 8001964:	f04f 0100 	mov.w	r1, #0
 8001968:	0159      	lsls	r1, r3, #5
 800196a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800196e:	0150      	lsls	r0, r2, #5
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	ebb2 0508 	subs.w	r5, r2, r8
 8001978:	eb63 0609 	sbc.w	r6, r3, r9
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	01b3      	lsls	r3, r6, #6
 8001986:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 800198a:	01aa      	lsls	r2, r5, #6
 800198c:	ebb2 0a05 	subs.w	sl, r2, r5
 8001990:	eb63 0b06 	sbc.w	fp, r3, r6
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019a8:	4692      	mov	sl, r2
 80019aa:	469b      	mov	fp, r3
 80019ac:	eb1a 0308 	adds.w	r3, sl, r8
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	eb4b 0309 	adc.w	r3, fp, r9
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019c4:	4629      	mov	r1, r5
 80019c6:	024b      	lsls	r3, r1, #9
 80019c8:	4620      	mov	r0, r4
 80019ca:	4629      	mov	r1, r5
 80019cc:	4604      	mov	r4, r0
 80019ce:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80019d2:	4601      	mov	r1, r0
 80019d4:	024a      	lsls	r2, r1, #9
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019dc:	2200      	movs	r2, #0
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	617a      	str	r2, [r7, #20]
 80019e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019e4:	2200      	movs	r2, #0
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	60fa      	str	r2, [r7, #12]
 80019ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80019ee:	4622      	mov	r2, r4
 80019f0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80019f4:	4645      	mov	r5, r8
 80019f6:	fb05 f202 	mul.w	r2, r5, r2
 80019fa:	464e      	mov	r6, r9
 80019fc:	4625      	mov	r5, r4
 80019fe:	461c      	mov	r4, r3
 8001a00:	4623      	mov	r3, r4
 8001a02:	fb03 f306 	mul.w	r3, r3, r6
 8001a06:	4413      	add	r3, r2
 8001a08:	4622      	mov	r2, r4
 8001a0a:	4644      	mov	r4, r8
 8001a0c:	fba2 2404 	umull	r2, r4, r2, r4
 8001a10:	627c      	str	r4, [r7, #36]	; 0x24
 8001a12:	623a      	str	r2, [r7, #32]
 8001a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a16:	4413      	add	r3, r2
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a1e:	f7fe fc07 	bl	8000230 <__aeabi_uldivmod>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4613      	mov	r3, r2
 8001a28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a2a:	e007      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a2e:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x21c>)
 8001a30:	fb03 f202 	mul.w	r2, r3, r2
 8001a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001a3c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001a40:	461a      	mov	r2, r3
 8001a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d108      	bne.n	8001a5a <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 8001a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a4a:	085b      	lsrs	r3, r3, #1
 8001a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a4e:	e004      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a52:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x220>)
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 8001a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a5c:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8001a5e:	e002      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x21c>)
 8001a62:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8001a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3774      	adds	r7, #116	; 0x74
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a72:	bf00      	nop
 8001a74:	08003690 	.word	0x08003690
 8001a78:	080036a0 	.word	0x080036a0
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	007a1200 	.word	0x007a1200
 8001a84:	003d0900 	.word	0x003d0900

08001a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b02      	ldr	r3, [pc, #8]	; (8001a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	20000000 	.word	0x20000000

08001a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001aa0:	f7ff fff2 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	4903      	ldr	r1, [pc, #12]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	080036c8 	.word	0x080036c8

08001ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ac8:	f7ff ffde 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	0adb      	lsrs	r3, r3, #11
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4903      	ldr	r1, [pc, #12]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	080036c8 	.word	0x080036c8

08001aec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	220f      	movs	r2, #15
 8001afa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_RCC_GetClockConfig+0x58>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0203 	and.w	r2, r3, #3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_RCC_GetClockConfig+0x58>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_RCC_GetClockConfig+0x58>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <HAL_RCC_GetClockConfig+0x58>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	08db      	lsrs	r3, r3, #3
 8001b26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_RCC_GetClockConfig+0x5c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0207 	and.w	r2, r3, #7
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40022000 	.word	0x40022000

08001b4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <RCC_Delay+0x34>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <RCC_Delay+0x38>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0a5b      	lsrs	r3, r3, #9
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b68:	bf00      	nop
  }
  while (Delay --);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	60fa      	str	r2, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f9      	bne.n	8001b68 <RCC_Delay+0x1c>
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000000 	.word	0x20000000
 8001b84:	10624dd3 	.word	0x10624dd3

08001b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e041      	b.n	8001c1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f839 	bl	8001c26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f000 f9bc 	bl	8001f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d001      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e03f      	b.n	8001cd0 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <HAL_TIM_Base_Start_IT+0xa4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_TIM_Base_Start_IT+0x62>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7a:	d00e      	beq.n	8001c9a <HAL_TIM_Base_Start_IT+0x62>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <HAL_TIM_Base_Start_IT+0xa8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d009      	beq.n	8001c9a <HAL_TIM_Base_Start_IT+0x62>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <HAL_TIM_Base_Start_IT+0xac>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d004      	beq.n	8001c9a <HAL_TIM_Base_Start_IT+0x62>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d111      	bne.n	8001cbe <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b06      	cmp	r3, #6
 8001caa:	d010      	beq.n	8001cce <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cbc:	e007      	b.n	8001cce <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0201 	orr.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40012c00 	.word	0x40012c00
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	40000800 	.word	0x40000800
 8001ce8:	40000c00 	.word	0x40000c00

08001cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d122      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d11b      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0202 	mvn.w	r2, #2
 8001d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8ed 	bl	8001f0e <HAL_TIM_IC_CaptureCallback>
 8001d34:	e005      	b.n	8001d42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8e0 	bl	8001efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f8ef 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d122      	bne.n	8001d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d11b      	bne.n	8001d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0204 	mvn.w	r2, #4
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8c3 	bl	8001f0e <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8b6 	bl	8001efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f8c5 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d122      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d11b      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0208 	mvn.w	r2, #8
 8001dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f899 	bl	8001f0e <HAL_TIM_IC_CaptureCallback>
 8001ddc:	e005      	b.n	8001dea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f88c 	bl	8001efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f89b 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d122      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b10      	cmp	r3, #16
 8001e0a:	d11b      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0210 	mvn.w	r2, #16
 8001e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2208      	movs	r2, #8
 8001e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f86f 	bl	8001f0e <HAL_TIM_IC_CaptureCallback>
 8001e30:	e005      	b.n	8001e3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f862 	bl	8001efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f871 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d10e      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d107      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0201 	mvn.w	r2, #1
 8001e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe fce0 	bl	8000830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7a:	2b80      	cmp	r3, #128	; 0x80
 8001e7c:	d10e      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e88:	2b80      	cmp	r3, #128	; 0x80
 8001e8a:	d107      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8c9 	bl	800202e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea6:	2b40      	cmp	r3, #64	; 0x40
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	2b40      	cmp	r3, #64	; 0x40
 8001eb6:	d107      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f835 	bl	8001f32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	2b20      	cmp	r3, #32
 8001ee2:	d107      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0220 	mvn.w	r2, #32
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f894 	bl	800201c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a2d      	ldr	r2, [pc, #180]	; (800200c <TIM_Base_SetConfig+0xc8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00f      	beq.n	8001f7c <TIM_Base_SetConfig+0x38>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f62:	d00b      	beq.n	8001f7c <TIM_Base_SetConfig+0x38>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a2a      	ldr	r2, [pc, #168]	; (8002010 <TIM_Base_SetConfig+0xcc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d007      	beq.n	8001f7c <TIM_Base_SetConfig+0x38>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a29      	ldr	r2, [pc, #164]	; (8002014 <TIM_Base_SetConfig+0xd0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d003      	beq.n	8001f7c <TIM_Base_SetConfig+0x38>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a28      	ldr	r2, [pc, #160]	; (8002018 <TIM_Base_SetConfig+0xd4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d108      	bne.n	8001f8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a1e      	ldr	r2, [pc, #120]	; (800200c <TIM_Base_SetConfig+0xc8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00f      	beq.n	8001fb6 <TIM_Base_SetConfig+0x72>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9c:	d00b      	beq.n	8001fb6 <TIM_Base_SetConfig+0x72>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <TIM_Base_SetConfig+0xcc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <TIM_Base_SetConfig+0x72>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <TIM_Base_SetConfig+0xd0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d003      	beq.n	8001fb6 <TIM_Base_SetConfig+0x72>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a19      	ldr	r2, [pc, #100]	; (8002018 <TIM_Base_SetConfig+0xd4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d108      	bne.n	8001fc8 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a07      	ldr	r2, [pc, #28]	; (800200c <TIM_Base_SetConfig+0xc8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d103      	bne.n	8001ffc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	615a      	str	r2, [r3, #20]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40000400 	.word	0x40000400
 8002014:	40000800 	.word	0x40000800
 8002018:	40000c00 	.word	0x40000c00

0800201c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e03f      	b.n	80020d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe fc22 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2224      	movs	r2, #36	; 0x24
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f829 	bl	80020dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002116:	f023 030c 	bic.w	r3, r3, #12
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	430b      	orrs	r3, r1
 8002122:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a2c      	ldr	r2, [pc, #176]	; (80021f0 <UART_SetConfig+0x114>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d103      	bne.n	800214c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002144:	f7ff fcbe 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	e002      	b.n	8002152 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800214c:	f7ff fca6 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 8002150:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	009a      	lsls	r2, r3, #2
 800215c:	441a      	add	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <UART_SetConfig+0x118>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	0119      	lsls	r1, r3, #4
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	009a      	lsls	r2, r3, #2
 800217c:	441a      	add	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	fbb2 f2f3 	udiv	r2, r2, r3
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <UART_SetConfig+0x118>)
 800218a:	fba3 0302 	umull	r0, r3, r3, r2
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2064      	movs	r0, #100	; 0x64
 8002192:	fb00 f303 	mul.w	r3, r0, r3
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	3332      	adds	r3, #50	; 0x32
 800219c:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <UART_SetConfig+0x118>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a8:	4419      	add	r1, r3
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	009a      	lsls	r2, r3, #2
 80021b4:	441a      	add	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <UART_SetConfig+0x118>)
 80021c2:	fba3 0302 	umull	r0, r3, r3, r2
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2064      	movs	r0, #100	; 0x64
 80021ca:	fb00 f303 	mul.w	r3, r0, r3
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	3332      	adds	r3, #50	; 0x32
 80021d4:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <UART_SetConfig+0x118>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	f003 020f 	and.w	r2, r3, #15
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	440a      	add	r2, r1
 80021e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40013800 	.word	0x40013800
 80021f4:	51eb851f 	.word	0x51eb851f

080021f8 <makeFreeRtosPriority>:
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800220a:	2b84      	cmp	r3, #132	; 0x84
 800220c:	d005      	beq.n	800221a <makeFreeRtosPriority+0x22>
 800220e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4413      	add	r3, r2
 8002216:	3303      	adds	r3, #3
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <osKernelStart>:
 8002226:	b580      	push	{r7, lr}
 8002228:	af00      	add	r7, sp, #0
 800222a:	f000 fad1 	bl	80027d0 <vTaskStartScheduler>
 800222e:	2300      	movs	r3, #0
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}

08002234 <osThreadCreate>:
 8002234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af04      	add	r7, sp, #16
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d020      	beq.n	8002288 <osThreadCreate+0x54>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d01c      	beq.n	8002288 <osThreadCreate+0x54>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685c      	ldr	r4, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681d      	ldr	r5, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691e      	ldr	r6, [r3, #16]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ffc9 	bl	80021f8 <makeFreeRtosPriority>
 8002266:	4601      	mov	r1, r0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6992      	ldr	r2, [r2, #24]
 8002270:	9202      	str	r2, [sp, #8]
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	9100      	str	r1, [sp, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	4632      	mov	r2, r6
 800227a:	4629      	mov	r1, r5
 800227c:	4620      	mov	r0, r4
 800227e:	f000 f8e8 	bl	8002452 <xTaskCreateStatic>
 8002282:	4603      	mov	r3, r0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	e01c      	b.n	80022c2 <osThreadCreate+0x8e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685c      	ldr	r4, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681d      	ldr	r5, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	b29e      	uxth	r6, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ffab 	bl	80021f8 <makeFreeRtosPriority>
 80022a2:	4602      	mov	r2, r0
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	9200      	str	r2, [sp, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4632      	mov	r2, r6
 80022b0:	4629      	mov	r1, r5
 80022b2:	4620      	mov	r0, r4
 80022b4:	f000 f929 	bl	800250a <xTaskCreate>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d001      	beq.n	80022c2 <osThreadCreate+0x8e>
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <osThreadCreate+0x90>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022cc <osDelay>:
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <osDelay+0x16>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	e000      	b.n	80022e4 <osDelay+0x18>
 80022e2:	2301      	movs	r3, #1
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fa3f 	bl	8002768 <vTaskDelay>
 80022ea:	2300      	movs	r3, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <vListInitialise>:
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f103 0208 	add.w	r2, r3, #8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f103 0208 	add.w	r2, r3, #8
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	60da      	str	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f103 0208 	add.w	r2, r3, #8
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	611a      	str	r2, [r3, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <vListInitialiseItem>:
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <vListInsertEnd>:
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	611a      	str	r2, [r3, #16]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <vListInsert>:
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a6:	d103      	bne.n	80023b0 <vListInsert+0x20>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e00c      	b.n	80023ca <vListInsert+0x3a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3308      	adds	r3, #8
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	e002      	b.n	80023be <vListInsert+0x2e>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d2f6      	bcs.n	80023b8 <vListInsert+0x28>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	611a      	str	r2, [r3, #16]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <uxListRemove>:
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6892      	ldr	r2, [r2, #8]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6852      	ldr	r2, [r2, #4]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	429a      	cmp	r2, r3
 800242a:	d103      	bne.n	8002434 <uxListRemove+0x34>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	1e5a      	subs	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <xTaskCreateStatic>:
 8002452:	b580      	push	{r7, lr}
 8002454:	b08e      	sub	sp, #56	; 0x38
 8002456:	af04      	add	r7, sp, #16
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <xTaskCreateStatic+0x2a>
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	623b      	str	r3, [r7, #32]
 8002478:	bf00      	nop
 800247a:	e7fe      	b.n	800247a <xTaskCreateStatic+0x28>
 800247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <xTaskCreateStatic+0x46>
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	bf00      	nop
 8002496:	e7fe      	b.n	8002496 <xTaskCreateStatic+0x44>
 8002498:	2354      	movs	r3, #84	; 0x54
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b54      	cmp	r3, #84	; 0x54
 80024a0:	d00a      	beq.n	80024b8 <xTaskCreateStatic+0x66>
 80024a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	bf00      	nop
 80024b6:	e7fe      	b.n	80024b6 <xTaskCreateStatic+0x64>
 80024b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01e      	beq.n	80024fc <xTaskCreateStatic+0xaa>
 80024be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01b      	beq.n	80024fc <xTaskCreateStatic+0xaa>
 80024c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	2202      	movs	r2, #2
 80024d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80024d6:	2300      	movs	r3, #0
 80024d8:	9303      	str	r3, [sp, #12]
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	9302      	str	r3, [sp, #8]
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f850 	bl	8002594 <prvInitialiseNewTask>
 80024f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024f6:	f000 f8cd 	bl	8002694 <prvAddNewTaskToReadyList>
 80024fa:	e001      	b.n	8002500 <xTaskCreateStatic+0xae>
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	4618      	mov	r0, r3
 8002504:	3728      	adds	r7, #40	; 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <xTaskCreate>:
 800250a:	b580      	push	{r7, lr}
 800250c:	b08c      	sub	sp, #48	; 0x30
 800250e:	af04      	add	r7, sp, #16
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	603b      	str	r3, [r7, #0]
 8002516:	4613      	mov	r3, r2
 8002518:	80fb      	strh	r3, [r7, #6]
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fe6e 	bl	8003200 <pvPortMalloc>
 8002524:	6178      	str	r0, [r7, #20]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00e      	beq.n	800254a <xTaskCreate+0x40>
 800252c:	2054      	movs	r0, #84	; 0x54
 800252e:	f000 fe67 	bl	8003200 <pvPortMalloc>
 8002532:	61f8      	str	r0, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <xTaskCreate+0x38>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
 8002540:	e005      	b.n	800254e <xTaskCreate+0x44>
 8002542:	6978      	ldr	r0, [r7, #20]
 8002544:	f000 ff20 	bl	8003388 <vPortFree>
 8002548:	e001      	b.n	800254e <xTaskCreate+0x44>
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d017      	beq.n	8002584 <xTaskCreate+0x7a>
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800255c:	88fa      	ldrh	r2, [r7, #6]
 800255e:	2300      	movs	r3, #0
 8002560:	9303      	str	r3, [sp, #12]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	9302      	str	r3, [sp, #8]
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f80e 	bl	8002594 <prvInitialiseNewTask>
 8002578:	69f8      	ldr	r0, [r7, #28]
 800257a:	f000 f88b 	bl	8002694 <prvAddNewTaskToReadyList>
 800257e:	2301      	movs	r3, #1
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	e002      	b.n	800258a <xTaskCreate+0x80>
 8002584:	f04f 33ff 	mov.w	r3, #4294967295
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4618      	mov	r0, r3
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <prvInitialiseNewTask>:
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025ac:	3b01      	subs	r3, #1
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f023 0307 	bic.w	r3, r3, #7
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <prvInitialiseNewTask+0x48>
 80025c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ca:	f383 8811 	msr	BASEPRI, r3
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	f3bf 8f4f 	dsb	sy
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	bf00      	nop
 80025da:	e7fe      	b.n	80025da <prvInitialiseNewTask+0x46>
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	e012      	b.n	8002608 <prvInitialiseNewTask+0x74>
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4413      	add	r3, r2
 80025e8:	7819      	ldrb	r1, [r3, #0]
 80025ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	4413      	add	r3, r2
 80025f0:	3334      	adds	r3, #52	; 0x34
 80025f2:	460a      	mov	r2, r1
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	4413      	add	r3, r2
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <prvInitialiseNewTask+0x7c>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3301      	adds	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b0f      	cmp	r3, #15
 800260c:	d9e9      	bls.n	80025e2 <prvInitialiseNewTask+0x4e>
 800260e:	e000      	b.n	8002612 <prvInitialiseNewTask+0x7e>
 8002610:	bf00      	nop
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	2b06      	cmp	r3, #6
 800261e:	d901      	bls.n	8002624 <prvInitialiseNewTask+0x90>
 8002620:	2306      	movs	r3, #6
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
 8002624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002628:	62da      	str	r2, [r3, #44]	; 0x2c
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800262e:	645a      	str	r2, [r3, #68]	; 0x44
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	2200      	movs	r2, #0
 8002634:	649a      	str	r2, [r3, #72]	; 0x48
 8002636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002638:	3304      	adds	r3, #4
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fe79 	bl	8002332 <vListInitialiseItem>
 8002640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002642:	3318      	adds	r3, #24
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fe74 	bl	8002332 <vListInitialiseItem>
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800264e:	611a      	str	r2, [r3, #16]
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	f1c3 0207 	rsb	r2, r3, #7
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	619a      	str	r2, [r3, #24]
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	2200      	movs	r2, #0
 8002664:	64da      	str	r2, [r3, #76]	; 0x4c
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	68f9      	ldr	r1, [r7, #12]
 8002672:	69b8      	ldr	r0, [r7, #24]
 8002674:	f000 fc0e 	bl	8002e94 <pxPortInitialiseStack>
 8002678:	4602      	mov	r2, r0
 800267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <prvInitialiseNewTask+0xf6>
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	bf00      	nop
 800268c:	3720      	adds	r7, #32
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <prvAddNewTaskToReadyList>:
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	f000 fcee 	bl	800307c <vPortEnterCritical>
 80026a0:	4b2a      	ldr	r3, [pc, #168]	; (800274c <prvAddNewTaskToReadyList+0xb8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	4a29      	ldr	r2, [pc, #164]	; (800274c <prvAddNewTaskToReadyList+0xb8>)
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b29      	ldr	r3, [pc, #164]	; (8002750 <prvAddNewTaskToReadyList+0xbc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <prvAddNewTaskToReadyList+0x32>
 80026b2:	4a27      	ldr	r2, [pc, #156]	; (8002750 <prvAddNewTaskToReadyList+0xbc>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <prvAddNewTaskToReadyList+0xb8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d110      	bne.n	80026e2 <prvAddNewTaskToReadyList+0x4e>
 80026c0:	f000 fac0 	bl	8002c44 <prvInitialiseTaskLists>
 80026c4:	e00d      	b.n	80026e2 <prvAddNewTaskToReadyList+0x4e>
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <prvAddNewTaskToReadyList+0xc0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <prvAddNewTaskToReadyList+0x4e>
 80026ce:	4b20      	ldr	r3, [pc, #128]	; (8002750 <prvAddNewTaskToReadyList+0xbc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	429a      	cmp	r2, r3
 80026da:	d802      	bhi.n	80026e2 <prvAddNewTaskToReadyList+0x4e>
 80026dc:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <prvAddNewTaskToReadyList+0xbc>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <prvAddNewTaskToReadyList+0xc4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3301      	adds	r3, #1
 80026e8:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <prvAddNewTaskToReadyList+0xc4>)
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	2201      	movs	r2, #1
 80026f2:	409a      	lsls	r2, r3
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <prvAddNewTaskToReadyList+0xc8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	4a18      	ldr	r2, [pc, #96]	; (800275c <prvAddNewTaskToReadyList+0xc8>)
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4a15      	ldr	r2, [pc, #84]	; (8002760 <prvAddNewTaskToReadyList+0xcc>)
 800270c:	441a      	add	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3304      	adds	r3, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4610      	mov	r0, r2
 8002716:	f7ff fe18 	bl	800234a <vListInsertEnd>
 800271a:	f000 fcdf 	bl	80030dc <vPortExitCritical>
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <prvAddNewTaskToReadyList+0xc0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00e      	beq.n	8002744 <prvAddNewTaskToReadyList+0xb0>
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <prvAddNewTaskToReadyList+0xbc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	429a      	cmp	r2, r3
 8002732:	d207      	bcs.n	8002744 <prvAddNewTaskToReadyList+0xb0>
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <prvAddNewTaskToReadyList+0xd0>)
 8002736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000424 	.word	0x20000424
 8002750:	20000324 	.word	0x20000324
 8002754:	20000430 	.word	0x20000430
 8002758:	20000440 	.word	0x20000440
 800275c:	2000042c 	.word	0x2000042c
 8002760:	20000328 	.word	0x20000328
 8002764:	e000ed04 	.word	0xe000ed04

08002768 <vTaskDelay>:
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d017      	beq.n	80027aa <vTaskDelay+0x42>
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <vTaskDelay+0x60>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <vTaskDelay+0x30>
 8002782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	bf00      	nop
 8002796:	e7fe      	b.n	8002796 <vTaskDelay+0x2e>
 8002798:	f000 f87a 	bl	8002890 <vTaskSuspendAll>
 800279c:	2100      	movs	r1, #0
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fb12 	bl	8002dc8 <prvAddCurrentTaskToDelayedList>
 80027a4:	f000 f882 	bl	80028ac <xTaskResumeAll>
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d107      	bne.n	80027c0 <vTaskDelay+0x58>
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <vTaskDelay+0x64>)
 80027b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	2000044c 	.word	0x2000044c
 80027cc:	e000ed04 	.word	0xe000ed04

080027d0 <vTaskStartScheduler>:
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af04      	add	r7, sp, #16
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	463a      	mov	r2, r7
 80027e0:	1d39      	adds	r1, r7, #4
 80027e2:	f107 0308 	add.w	r3, r7, #8
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fd fea6 	bl	8000538 <vApplicationGetIdleTaskMemory>
 80027ec:	6839      	ldr	r1, [r7, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	9202      	str	r2, [sp, #8]
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	2300      	movs	r3, #0
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	2300      	movs	r3, #0
 80027fc:	460a      	mov	r2, r1
 80027fe:	491e      	ldr	r1, [pc, #120]	; (8002878 <vTaskStartScheduler+0xa8>)
 8002800:	481e      	ldr	r0, [pc, #120]	; (800287c <vTaskStartScheduler+0xac>)
 8002802:	f7ff fe26 	bl	8002452 <xTaskCreateStatic>
 8002806:	4603      	mov	r3, r0
 8002808:	4a1d      	ldr	r2, [pc, #116]	; (8002880 <vTaskStartScheduler+0xb0>)
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <vTaskStartScheduler+0xb0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <vTaskStartScheduler+0x4a>
 8002814:	2301      	movs	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	e001      	b.n	800281e <vTaskStartScheduler+0x4e>
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d116      	bne.n	8002852 <vTaskStartScheduler+0x82>
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	bf00      	nop
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <vTaskStartScheduler+0xb4>)
 800283a:	f04f 32ff 	mov.w	r2, #4294967295
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <vTaskStartScheduler+0xb8>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <vTaskStartScheduler+0xbc>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f000 fba4 	bl	8002f98 <xPortStartScheduler>
 8002850:	e00e      	b.n	8002870 <vTaskStartScheduler+0xa0>
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d10a      	bne.n	8002870 <vTaskStartScheduler+0xa0>
 800285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	bf00      	nop
 800286e:	e7fe      	b.n	800286e <vTaskStartScheduler+0x9e>
 8002870:	bf00      	nop
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	080036b0 	.word	0x080036b0
 800287c:	08002c15 	.word	0x08002c15
 8002880:	20000448 	.word	0x20000448
 8002884:	20000444 	.word	0x20000444
 8002888:	20000430 	.word	0x20000430
 800288c:	20000428 	.word	0x20000428

08002890 <vTaskSuspendAll>:
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <vTaskSuspendAll+0x18>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3301      	adds	r3, #1
 800289a:	4a03      	ldr	r2, [pc, #12]	; (80028a8 <vTaskSuspendAll+0x18>)
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	2000044c 	.word	0x2000044c

080028ac <xTaskResumeAll>:
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <xTaskResumeAll+0x114>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <xTaskResumeAll+0x2c>
 80028c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	bf00      	nop
 80028d6:	e7fe      	b.n	80028d6 <xTaskResumeAll+0x2a>
 80028d8:	f000 fbd0 	bl	800307c <vPortEnterCritical>
 80028dc:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <xTaskResumeAll+0x114>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	4a37      	ldr	r2, [pc, #220]	; (80029c0 <xTaskResumeAll+0x114>)
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <xTaskResumeAll+0x114>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d161      	bne.n	80029b2 <xTaskResumeAll+0x106>
 80028ee:	4b35      	ldr	r3, [pc, #212]	; (80029c4 <xTaskResumeAll+0x118>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d05d      	beq.n	80029b2 <xTaskResumeAll+0x106>
 80028f6:	e02e      	b.n	8002956 <xTaskResumeAll+0xaa>
 80028f8:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <xTaskResumeAll+0x11c>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3318      	adds	r3, #24
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fd7b 	bl	8002400 <uxListRemove>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3304      	adds	r3, #4
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fd76 	bl	8002400 <uxListRemove>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	2201      	movs	r2, #1
 800291a:	409a      	lsls	r2, r3
 800291c:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <xTaskResumeAll+0x120>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4313      	orrs	r3, r2
 8002922:	4a2a      	ldr	r2, [pc, #168]	; (80029cc <xTaskResumeAll+0x120>)
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <xTaskResumeAll+0x124>)
 8002934:	441a      	add	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3304      	adds	r3, #4
 800293a:	4619      	mov	r1, r3
 800293c:	4610      	mov	r0, r2
 800293e:	f7ff fd04 	bl	800234a <vListInsertEnd>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <xTaskResumeAll+0x128>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	429a      	cmp	r2, r3
 800294e:	d302      	bcc.n	8002956 <xTaskResumeAll+0xaa>
 8002950:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <xTaskResumeAll+0x12c>)
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <xTaskResumeAll+0x11c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1cc      	bne.n	80028f8 <xTaskResumeAll+0x4c>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <xTaskResumeAll+0xbc>
 8002964:	f000 fa0c 	bl	8002d80 <prvResetNextTaskUnblockTime>
 8002968:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <xTaskResumeAll+0x130>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d010      	beq.n	8002996 <xTaskResumeAll+0xea>
 8002974:	f000 f836 	bl	80029e4 <xTaskIncrementTick>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <xTaskResumeAll+0xd8>
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <xTaskResumeAll+0x12c>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f1      	bne.n	8002974 <xTaskResumeAll+0xc8>
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <xTaskResumeAll+0x130>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <xTaskResumeAll+0x12c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <xTaskResumeAll+0x106>
 800299e:	2301      	movs	r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <xTaskResumeAll+0x134>)
 80029a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f000 fb93 	bl	80030dc <vPortExitCritical>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	2000044c 	.word	0x2000044c
 80029c4:	20000424 	.word	0x20000424
 80029c8:	200003e4 	.word	0x200003e4
 80029cc:	2000042c 	.word	0x2000042c
 80029d0:	20000328 	.word	0x20000328
 80029d4:	20000324 	.word	0x20000324
 80029d8:	20000438 	.word	0x20000438
 80029dc:	20000434 	.word	0x20000434
 80029e0:	e000ed04 	.word	0xe000ed04

080029e4 <xTaskIncrementTick>:
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	4b51      	ldr	r3, [pc, #324]	; (8002b34 <xTaskIncrementTick+0x150>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 808d 	bne.w	8002b12 <xTaskIncrementTick+0x12e>
 80029f8:	4b4f      	ldr	r3, [pc, #316]	; (8002b38 <xTaskIncrementTick+0x154>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3301      	adds	r3, #1
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	4a4d      	ldr	r2, [pc, #308]	; (8002b38 <xTaskIncrementTick+0x154>)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d120      	bne.n	8002a4e <xTaskIncrementTick+0x6a>
 8002a0c:	4b4b      	ldr	r3, [pc, #300]	; (8002b3c <xTaskIncrementTick+0x158>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <xTaskIncrementTick+0x48>
 8002a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1a:	f383 8811 	msr	BASEPRI, r3
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	bf00      	nop
 8002a2a:	e7fe      	b.n	8002a2a <xTaskIncrementTick+0x46>
 8002a2c:	4b43      	ldr	r3, [pc, #268]	; (8002b3c <xTaskIncrementTick+0x158>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <xTaskIncrementTick+0x15c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a41      	ldr	r2, [pc, #260]	; (8002b3c <xTaskIncrementTick+0x158>)
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4a41      	ldr	r2, [pc, #260]	; (8002b40 <xTaskIncrementTick+0x15c>)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <xTaskIncrementTick+0x160>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3301      	adds	r3, #1
 8002a46:	4a3f      	ldr	r2, [pc, #252]	; (8002b44 <xTaskIncrementTick+0x160>)
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	f000 f999 	bl	8002d80 <prvResetNextTaskUnblockTime>
 8002a4e:	4b3e      	ldr	r3, [pc, #248]	; (8002b48 <xTaskIncrementTick+0x164>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d34d      	bcc.n	8002af4 <xTaskIncrementTick+0x110>
 8002a58:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <xTaskIncrementTick+0x158>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <xTaskIncrementTick+0x82>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <xTaskIncrementTick+0x84>
 8002a66:	2300      	movs	r3, #0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <xTaskIncrementTick+0x92>
 8002a6c:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <xTaskIncrementTick+0x164>)
 8002a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e03e      	b.n	8002af4 <xTaskIncrementTick+0x110>
 8002a76:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <xTaskIncrementTick+0x158>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d203      	bcs.n	8002a96 <xTaskIncrementTick+0xb2>
 8002a8e:	4a2e      	ldr	r2, [pc, #184]	; (8002b48 <xTaskIncrementTick+0x164>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	e02e      	b.n	8002af4 <xTaskIncrementTick+0x110>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fcb0 	bl	8002400 <uxListRemove>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d004      	beq.n	8002ab2 <xTaskIncrementTick+0xce>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	3318      	adds	r3, #24
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fca7 	bl	8002400 <uxListRemove>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <xTaskIncrementTick+0x168>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <xTaskIncrementTick+0x168>)
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <xTaskIncrementTick+0x16c>)
 8002ad2:	441a      	add	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f7ff fc35 	bl	800234a <vListInsertEnd>
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <xTaskIncrementTick+0x170>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d3b4      	bcc.n	8002a58 <xTaskIncrementTick+0x74>
 8002aee:	2301      	movs	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	e7b1      	b.n	8002a58 <xTaskIncrementTick+0x74>
 8002af4:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <xTaskIncrementTick+0x170>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afa:	4915      	ldr	r1, [pc, #84]	; (8002b50 <xTaskIncrementTick+0x16c>)
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d907      	bls.n	8002b1c <xTaskIncrementTick+0x138>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	e004      	b.n	8002b1c <xTaskIncrementTick+0x138>
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <xTaskIncrementTick+0x174>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3301      	adds	r3, #1
 8002b18:	4a0f      	ldr	r2, [pc, #60]	; (8002b58 <xTaskIncrementTick+0x174>)
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <xTaskIncrementTick+0x178>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <xTaskIncrementTick+0x144>
 8002b24:	2301      	movs	r3, #1
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	2000044c 	.word	0x2000044c
 8002b38:	20000428 	.word	0x20000428
 8002b3c:	200003dc 	.word	0x200003dc
 8002b40:	200003e0 	.word	0x200003e0
 8002b44:	2000043c 	.word	0x2000043c
 8002b48:	20000444 	.word	0x20000444
 8002b4c:	2000042c 	.word	0x2000042c
 8002b50:	20000328 	.word	0x20000328
 8002b54:	20000324 	.word	0x20000324
 8002b58:	20000434 	.word	0x20000434
 8002b5c:	20000438 	.word	0x20000438

08002b60 <vTaskSwitchContext>:
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <vTaskSwitchContext+0xa0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <vTaskSwitchContext+0x16>
 8002b6e:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <vTaskSwitchContext+0xa4>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e03f      	b.n	8002bf6 <vTaskSwitchContext+0x96>
 8002b76:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <vTaskSwitchContext+0xa4>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <vTaskSwitchContext+0xa8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	72fb      	strb	r3, [r7, #11]
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
 8002b8c:	f1c3 031f 	rsb	r3, r3, #31
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	491e      	ldr	r1, [pc, #120]	; (8002c0c <vTaskSwitchContext+0xac>)
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <vTaskSwitchContext+0x5c>
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	bf00      	nop
 8002bba:	e7fe      	b.n	8002bba <vTaskSwitchContext+0x5a>
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4a11      	ldr	r2, [pc, #68]	; (8002c0c <vTaskSwitchContext+0xac>)
 8002bc8:	4413      	add	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	3308      	adds	r3, #8
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d104      	bne.n	8002bec <vTaskSwitchContext+0x8c>
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4a07      	ldr	r2, [pc, #28]	; (8002c10 <vTaskSwitchContext+0xb0>)
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	2000044c 	.word	0x2000044c
 8002c04:	20000438 	.word	0x20000438
 8002c08:	2000042c 	.word	0x2000042c
 8002c0c:	20000328 	.word	0x20000328
 8002c10:	20000324 	.word	0x20000324

08002c14 <prvIdleTask>:
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	f000 f852 	bl	8002cc4 <prvCheckTasksWaitingTermination>
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <prvIdleTask+0x28>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d9f9      	bls.n	8002c1c <prvIdleTask+0x8>
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <prvIdleTask+0x2c>)
 8002c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	e7f0      	b.n	8002c1c <prvIdleTask+0x8>
 8002c3a:	bf00      	nop
 8002c3c:	20000328 	.word	0x20000328
 8002c40:	e000ed04 	.word	0xe000ed04

08002c44 <prvInitialiseTaskLists>:
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	e00c      	b.n	8002c6a <prvInitialiseTaskLists+0x26>
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <prvInitialiseTaskLists+0x60>)
 8002c5c:	4413      	add	r3, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fb48 	bl	80022f4 <vListInitialise>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3301      	adds	r3, #1
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b06      	cmp	r3, #6
 8002c6e:	d9ef      	bls.n	8002c50 <prvInitialiseTaskLists+0xc>
 8002c70:	480d      	ldr	r0, [pc, #52]	; (8002ca8 <prvInitialiseTaskLists+0x64>)
 8002c72:	f7ff fb3f 	bl	80022f4 <vListInitialise>
 8002c76:	480d      	ldr	r0, [pc, #52]	; (8002cac <prvInitialiseTaskLists+0x68>)
 8002c78:	f7ff fb3c 	bl	80022f4 <vListInitialise>
 8002c7c:	480c      	ldr	r0, [pc, #48]	; (8002cb0 <prvInitialiseTaskLists+0x6c>)
 8002c7e:	f7ff fb39 	bl	80022f4 <vListInitialise>
 8002c82:	480c      	ldr	r0, [pc, #48]	; (8002cb4 <prvInitialiseTaskLists+0x70>)
 8002c84:	f7ff fb36 	bl	80022f4 <vListInitialise>
 8002c88:	480b      	ldr	r0, [pc, #44]	; (8002cb8 <prvInitialiseTaskLists+0x74>)
 8002c8a:	f7ff fb33 	bl	80022f4 <vListInitialise>
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <prvInitialiseTaskLists+0x78>)
 8002c90:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <prvInitialiseTaskLists+0x64>)
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <prvInitialiseTaskLists+0x7c>)
 8002c96:	4a05      	ldr	r2, [pc, #20]	; (8002cac <prvInitialiseTaskLists+0x68>)
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000328 	.word	0x20000328
 8002ca8:	200003b4 	.word	0x200003b4
 8002cac:	200003c8 	.word	0x200003c8
 8002cb0:	200003e4 	.word	0x200003e4
 8002cb4:	200003f8 	.word	0x200003f8
 8002cb8:	20000410 	.word	0x20000410
 8002cbc:	200003dc 	.word	0x200003dc
 8002cc0:	200003e0 	.word	0x200003e0

08002cc4 <prvCheckTasksWaitingTermination>:
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	e019      	b.n	8002d00 <prvCheckTasksWaitingTermination+0x3c>
 8002ccc:	f000 f9d6 	bl	800307c <vPortEnterCritical>
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <prvCheckTasksWaitingTermination+0x50>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fb8f 	bl	8002400 <uxListRemove>
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <prvCheckTasksWaitingTermination+0x54>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <prvCheckTasksWaitingTermination+0x54>)
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <prvCheckTasksWaitingTermination+0x58>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <prvCheckTasksWaitingTermination+0x58>)
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	f000 f9f1 	bl	80030dc <vPortExitCritical>
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f810 	bl	8002d20 <prvDeleteTCB>
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <prvCheckTasksWaitingTermination+0x58>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e1      	bne.n	8002ccc <prvCheckTasksWaitingTermination+0x8>
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200003f8 	.word	0x200003f8
 8002d18:	20000424 	.word	0x20000424
 8002d1c:	2000040c 	.word	0x2000040c

08002d20 <prvDeleteTCB>:
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d108      	bne.n	8002d44 <prvDeleteTCB+0x24>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fb26 	bl	8003388 <vPortFree>
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fb23 	bl	8003388 <vPortFree>
 8002d42:	e018      	b.n	8002d76 <prvDeleteTCB+0x56>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d103      	bne.n	8002d56 <prvDeleteTCB+0x36>
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fb1a 	bl	8003388 <vPortFree>
 8002d54:	e00f      	b.n	8002d76 <prvDeleteTCB+0x56>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d00a      	beq.n	8002d76 <prvDeleteTCB+0x56>
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	bf00      	nop
 8002d74:	e7fe      	b.n	8002d74 <prvDeleteTCB+0x54>
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <prvResetNextTaskUnblockTime>:
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <prvResetNextTaskUnblockTime+0x40>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <prvResetNextTaskUnblockTime+0x14>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <prvResetNextTaskUnblockTime+0x16>
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <prvResetNextTaskUnblockTime+0x24>
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <prvResetNextTaskUnblockTime+0x44>)
 8002d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e008      	b.n	8002db6 <prvResetNextTaskUnblockTime+0x36>
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <prvResetNextTaskUnblockTime+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <prvResetNextTaskUnblockTime+0x44>)
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	200003dc 	.word	0x200003dc
 8002dc4:	20000444 	.word	0x20000444

08002dc8 <prvAddCurrentTaskToDelayedList>:
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
 8002dd2:	4b29      	ldr	r3, [pc, #164]	; (8002e78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fb0e 	bl	8002400 <uxListRemove>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10b      	bne.n	8002e02 <prvAddCurrentTaskToDelayedList+0x3a>
 8002dea:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	2201      	movs	r2, #1
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	4a20      	ldr	r2, [pc, #128]	; (8002e80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d10a      	bne.n	8002e20 <prvAddCurrentTaskToDelayedList+0x58>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <prvAddCurrentTaskToDelayedList+0x58>
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3304      	adds	r3, #4
 8002e16:	4619      	mov	r1, r3
 8002e18:	481a      	ldr	r0, [pc, #104]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002e1a:	f7ff fa96 	bl	800234a <vListInsertEnd>
 8002e1e:	e026      	b.n	8002e6e <prvAddCurrentTaskToDelayedList+0xa6>
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d209      	bcs.n	8002e4c <prvAddCurrentTaskToDelayedList+0x84>
 8002e38:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3304      	adds	r3, #4
 8002e42:	4619      	mov	r1, r3
 8002e44:	4610      	mov	r0, r2
 8002e46:	f7ff faa3 	bl	8002390 <vListInsert>
 8002e4a:	e010      	b.n	8002e6e <prvAddCurrentTaskToDelayedList+0xa6>
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3304      	adds	r3, #4
 8002e56:	4619      	mov	r1, r3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f7ff fa99 	bl	8002390 <vListInsert>
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d202      	bcs.n	8002e6e <prvAddCurrentTaskToDelayedList+0xa6>
 8002e68:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000428 	.word	0x20000428
 8002e7c:	20000324 	.word	0x20000324
 8002e80:	2000042c 	.word	0x2000042c
 8002e84:	20000410 	.word	0x20000410
 8002e88:	200003e0 	.word	0x200003e0
 8002e8c:	200003dc 	.word	0x200003dc
 8002e90:	20000444 	.word	0x20000444

08002e94 <pxPortInitialiseStack>:
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3b04      	subs	r3, #4
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3b04      	subs	r3, #4
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f023 0201 	bic.w	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3b04      	subs	r3, #4
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	4a08      	ldr	r2, [pc, #32]	; (8002ee8 <pxPortInitialiseStack+0x54>)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3b14      	subs	r3, #20
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3b20      	subs	r3, #32
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	08002eed 	.word	0x08002eed

08002eec <prvTaskExitError>:
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <prvTaskExitError+0x54>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efe:	d00a      	beq.n	8002f16 <prvTaskExitError+0x2a>
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	bf00      	nop
 8002f14:	e7fe      	b.n	8002f14 <prvTaskExitError+0x28>
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0fc      	beq.n	8002f2c <prvTaskExitError+0x40>
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	2000000c 	.word	0x2000000c
	...

08002f50 <SVC_Handler>:
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <pxCurrentTCBConst2>)
 8002f52:	6819      	ldr	r1, [r3, #0]
 8002f54:	6808      	ldr	r0, [r1, #0]
 8002f56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f5a:	f380 8809 	msr	PSP, r0
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f04f 0000 	mov.w	r0, #0
 8002f66:	f380 8811 	msr	BASEPRI, r0
 8002f6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002f6e:	4770      	bx	lr

08002f70 <pxCurrentTCBConst2>:
 8002f70:	20000324 	.word	0x20000324
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop

08002f78 <prvPortStartFirstTask>:
 8002f78:	4806      	ldr	r0, [pc, #24]	; (8002f94 <prvPortStartFirstTask+0x1c>)
 8002f7a:	6800      	ldr	r0, [r0, #0]
 8002f7c:	6800      	ldr	r0, [r0, #0]
 8002f7e:	f380 8808 	msr	MSP, r0
 8002f82:	b662      	cpsie	i
 8002f84:	b661      	cpsie	f
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	df00      	svc	0
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	e000ed08 	.word	0xe000ed08

08002f98 <xPortStartScheduler>:
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4b32      	ldr	r3, [pc, #200]	; (8003068 <xPortStartScheduler+0xd0>)
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	607b      	str	r3, [r7, #4]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	22ff      	movs	r2, #255	; 0xff
 8002fae:	701a      	strb	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	70fb      	strb	r3, [r7, #3]
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4b2a      	ldr	r3, [pc, #168]	; (800306c <xPortStartScheduler+0xd4>)
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	4b2a      	ldr	r3, [pc, #168]	; (8003070 <xPortStartScheduler+0xd8>)
 8002fc8:	2207      	movs	r2, #7
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e009      	b.n	8002fe2 <xPortStartScheduler+0x4a>
 8002fce:	4b28      	ldr	r3, [pc, #160]	; (8003070 <xPortStartScheduler+0xd8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	4a26      	ldr	r2, [pc, #152]	; (8003070 <xPortStartScheduler+0xd8>)
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	70fb      	strb	r3, [r7, #3]
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b80      	cmp	r3, #128	; 0x80
 8002fec:	d0ef      	beq.n	8002fce <xPortStartScheduler+0x36>
 8002fee:	4b20      	ldr	r3, [pc, #128]	; (8003070 <xPortStartScheduler+0xd8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f1c3 0307 	rsb	r3, r3, #7
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d00a      	beq.n	8003010 <xPortStartScheduler+0x78>
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	bf00      	nop
 800300e:	e7fe      	b.n	800300e <xPortStartScheduler+0x76>
 8003010:	4b17      	ldr	r3, [pc, #92]	; (8003070 <xPortStartScheduler+0xd8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	4a16      	ldr	r2, [pc, #88]	; (8003070 <xPortStartScheduler+0xd8>)
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <xPortStartScheduler+0xd8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003022:	4a13      	ldr	r2, [pc, #76]	; (8003070 <xPortStartScheduler+0xd8>)
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <xPortStartScheduler+0xdc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a10      	ldr	r2, [pc, #64]	; (8003074 <xPortStartScheduler+0xdc>)
 8003034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <xPortStartScheduler+0xdc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a0d      	ldr	r2, [pc, #52]	; (8003074 <xPortStartScheduler+0xdc>)
 8003040:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	f000 f8b9 	bl	80031bc <vPortSetupTimerInterrupt>
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <xPortStartScheduler+0xe0>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	f7ff ff92 	bl	8002f78 <prvPortStartFirstTask>
 8003054:	f7ff fd84 	bl	8002b60 <vTaskSwitchContext>
 8003058:	f7ff ff48 	bl	8002eec <prvTaskExitError>
 800305c:	2300      	movs	r3, #0
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	e000e400 	.word	0xe000e400
 800306c:	20000450 	.word	0x20000450
 8003070:	20000454 	.word	0x20000454
 8003074:	e000ed20 	.word	0xe000ed20
 8003078:	2000000c 	.word	0x2000000c

0800307c <vPortEnterCritical>:
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	bf00      	nop
 8003096:	4b0f      	ldr	r3, [pc, #60]	; (80030d4 <vPortEnterCritical+0x58>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3301      	adds	r3, #1
 800309c:	4a0d      	ldr	r2, [pc, #52]	; (80030d4 <vPortEnterCritical+0x58>)
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <vPortEnterCritical+0x58>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d10f      	bne.n	80030c8 <vPortEnterCritical+0x4c>
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <vPortEnterCritical+0x5c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <vPortEnterCritical+0x4c>
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	bf00      	nop
 80030c6:	e7fe      	b.n	80030c6 <vPortEnterCritical+0x4a>
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	2000000c 	.word	0x2000000c
 80030d8:	e000ed04 	.word	0xe000ed04

080030dc <vPortExitCritical>:
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <vPortExitCritical+0x4c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <vPortExitCritical+0x24>
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	bf00      	nop
 80030fe:	e7fe      	b.n	80030fe <vPortExitCritical+0x22>
 8003100:	4b09      	ldr	r3, [pc, #36]	; (8003128 <vPortExitCritical+0x4c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3b01      	subs	r3, #1
 8003106:	4a08      	ldr	r2, [pc, #32]	; (8003128 <vPortExitCritical+0x4c>)
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b07      	ldr	r3, [pc, #28]	; (8003128 <vPortExitCritical+0x4c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d105      	bne.n	800311e <vPortExitCritical+0x42>
 8003112:	2300      	movs	r3, #0
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	2000000c 	.word	0x2000000c
 800312c:	00000000 	.word	0x00000000

08003130 <PendSV_Handler>:
 8003130:	f3ef 8009 	mrs	r0, PSP
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <pxCurrentTCBConst>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003140:	6010      	str	r0, [r2, #0]
 8003142:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003146:	f04f 0050 	mov.w	r0, #80	; 0x50
 800314a:	f380 8811 	msr	BASEPRI, r0
 800314e:	f7ff fd07 	bl	8002b60 <vTaskSwitchContext>
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f380 8811 	msr	BASEPRI, r0
 800315a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800315e:	6819      	ldr	r1, [r3, #0]
 8003160:	6808      	ldr	r0, [r1, #0]
 8003162:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003166:	f380 8809 	msr	PSP, r0
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	4770      	bx	lr

08003170 <pxCurrentTCBConst>:
 8003170:	20000324 	.word	0x20000324
 8003174:	bf00      	nop
 8003176:	bf00      	nop

08003178 <SysTick_Handler>:
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	bf00      	nop
 8003192:	f7ff fc27 	bl	80029e4 <xTaskIncrementTick>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <SysTick_Handler+0x2c>
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <SysTick_Handler+0x40>)
 800319e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	2300      	movs	r3, #0
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	bf00      	nop
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	e000ed04 	.word	0xe000ed04

080031bc <vPortSetupTimerInterrupt>:
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
 80031c0:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <vPortSetupTimerInterrupt+0x30>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <vPortSetupTimerInterrupt+0x34>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <vPortSetupTimerInterrupt+0x38>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <vPortSetupTimerInterrupt+0x3c>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	099b      	lsrs	r3, r3, #6
 80031d8:	4a08      	ldr	r2, [pc, #32]	; (80031fc <vPortSetupTimerInterrupt+0x40>)
 80031da:	3b01      	subs	r3, #1
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b03      	ldr	r3, [pc, #12]	; (80031ec <vPortSetupTimerInterrupt+0x30>)
 80031e0:	2207      	movs	r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	e000e010 	.word	0xe000e010
 80031f0:	e000e018 	.word	0xe000e018
 80031f4:	20000000 	.word	0x20000000
 80031f8:	10624dd3 	.word	0x10624dd3
 80031fc:	e000e014 	.word	0xe000e014

08003200 <pvPortMalloc>:
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	; 0x28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	2300      	movs	r3, #0
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	f7ff fb40 	bl	8002890 <vTaskSuspendAll>
 8003210:	4b58      	ldr	r3, [pc, #352]	; (8003374 <pvPortMalloc+0x174>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <pvPortMalloc+0x1c>
 8003218:	f000 f910 	bl	800343c <prvHeapInit>
 800321c:	4b56      	ldr	r3, [pc, #344]	; (8003378 <pvPortMalloc+0x178>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	f040 808e 	bne.w	8003346 <pvPortMalloc+0x146>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01d      	beq.n	800326c <pvPortMalloc+0x6c>
 8003230:	2208      	movs	r2, #8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4413      	add	r3, r2
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	2b00      	cmp	r3, #0
 8003240:	d014      	beq.n	800326c <pvPortMalloc+0x6c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f023 0307 	bic.w	r3, r3, #7
 8003248:	3308      	adds	r3, #8
 800324a:	607b      	str	r3, [r7, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <pvPortMalloc+0x6c>
 8003256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	bf00      	nop
 800326a:	e7fe      	b.n	800326a <pvPortMalloc+0x6a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d069      	beq.n	8003346 <pvPortMalloc+0x146>
 8003272:	4b42      	ldr	r3, [pc, #264]	; (800337c <pvPortMalloc+0x17c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	d864      	bhi.n	8003346 <pvPortMalloc+0x146>
 800327c:	4b40      	ldr	r3, [pc, #256]	; (8003380 <pvPortMalloc+0x180>)
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <pvPortMalloc+0x180>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
 8003286:	e004      	b.n	8003292 <pvPortMalloc+0x92>
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	623b      	str	r3, [r7, #32]
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	d903      	bls.n	80032a4 <pvPortMalloc+0xa4>
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f1      	bne.n	8003288 <pvPortMalloc+0x88>
 80032a4:	4b33      	ldr	r3, [pc, #204]	; (8003374 <pvPortMalloc+0x174>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d04b      	beq.n	8003346 <pvPortMalloc+0x146>
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2208      	movs	r2, #8
 80032b4:	4413      	add	r3, r2
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	1ad2      	subs	r2, r2, r3
 80032c8:	2308      	movs	r3, #8
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d91f      	bls.n	8003310 <pvPortMalloc+0x110>
 80032d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <pvPortMalloc+0xf8>
 80032e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	bf00      	nop
 80032f6:	e7fe      	b.n	80032f6 <pvPortMalloc+0xf6>
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	1ad2      	subs	r2, r2, r3
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	605a      	str	r2, [r3, #4]
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	69b8      	ldr	r0, [r7, #24]
 800330c:	f000 f8f8 	bl	8003500 <prvInsertBlockIntoFreeList>
 8003310:	4b1a      	ldr	r3, [pc, #104]	; (800337c <pvPortMalloc+0x17c>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	4a18      	ldr	r2, [pc, #96]	; (800337c <pvPortMalloc+0x17c>)
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b17      	ldr	r3, [pc, #92]	; (800337c <pvPortMalloc+0x17c>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b18      	ldr	r3, [pc, #96]	; (8003384 <pvPortMalloc+0x184>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d203      	bcs.n	8003332 <pvPortMalloc+0x132>
 800332a:	4b14      	ldr	r3, [pc, #80]	; (800337c <pvPortMalloc+0x17c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a15      	ldr	r2, [pc, #84]	; (8003384 <pvPortMalloc+0x184>)
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <pvPortMalloc+0x178>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	431a      	orrs	r2, r3
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f7ff fab1 	bl	80028ac <xTaskResumeAll>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <pvPortMalloc+0x16a>
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <pvPortMalloc+0x168>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	4618      	mov	r0, r3
 800336e:	3728      	adds	r7, #40	; 0x28
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20001460 	.word	0x20001460
 8003378:	2000146c 	.word	0x2000146c
 800337c:	20001464 	.word	0x20001464
 8003380:	20001458 	.word	0x20001458
 8003384:	20001468 	.word	0x20001468

08003388 <vPortFree>:
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d048      	beq.n	800342c <vPortFree+0xa4>
 800339a:	2308      	movs	r3, #8
 800339c:	425b      	negs	r3, r3
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4413      	add	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	4b21      	ldr	r3, [pc, #132]	; (8003434 <vPortFree+0xac>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <vPortFree+0x44>
 80033b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	bf00      	nop
 80033ca:	e7fe      	b.n	80033ca <vPortFree+0x42>
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <vPortFree+0x62>
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	bf00      	nop
 80033e8:	e7fe      	b.n	80033e8 <vPortFree+0x60>
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <vPortFree+0xac>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d019      	beq.n	800342c <vPortFree+0xa4>
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d115      	bne.n	800342c <vPortFree+0xa4>
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <vPortFree+0xac>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	43db      	mvns	r3, r3
 800340a:	401a      	ands	r2, r3
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	f7ff fa3e 	bl	8002890 <vTaskSuspendAll>
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	4b07      	ldr	r3, [pc, #28]	; (8003438 <vPortFree+0xb0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4413      	add	r3, r2
 800341e:	4a06      	ldr	r2, [pc, #24]	; (8003438 <vPortFree+0xb0>)
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	6938      	ldr	r0, [r7, #16]
 8003424:	f000 f86c 	bl	8003500 <prvInsertBlockIntoFreeList>
 8003428:	f7ff fa40 	bl	80028ac <xTaskResumeAll>
 800342c:	bf00      	nop
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	2000146c 	.word	0x2000146c
 8003438:	20001464 	.word	0x20001464

0800343c <prvHeapInit>:
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <prvHeapInit+0xac>)
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00c      	beq.n	8003470 <prvHeapInit+0x34>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3307      	adds	r3, #7
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0307 	bic.w	r3, r3, #7
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	4a1f      	ldr	r2, [pc, #124]	; (80034e8 <prvHeapInit+0xac>)
 800346c:	4413      	add	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	607b      	str	r3, [r7, #4]
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <prvHeapInit+0xb0>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <prvHeapInit+0xb0>)
 800347c:	2200      	movs	r2, #0
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	4413      	add	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	2208      	movs	r2, #8
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0307 	bic.w	r3, r3, #7
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a15      	ldr	r2, [pc, #84]	; (80034f0 <prvHeapInit+0xb4>)
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <prvHeapInit+0xb4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2200      	movs	r2, #0
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <prvHeapInit+0xb4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	1ad2      	subs	r2, r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <prvHeapInit+0xb4>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <prvHeapInit+0xb8>)
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <prvHeapInit+0xbc>)
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <prvHeapInit+0xc0>)
 80034d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000458 	.word	0x20000458
 80034ec:	20001458 	.word	0x20001458
 80034f0:	20001460 	.word	0x20001460
 80034f4:	20001468 	.word	0x20001468
 80034f8:	20001464 	.word	0x20001464
 80034fc:	2000146c 	.word	0x2000146c

08003500 <prvInsertBlockIntoFreeList>:
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <prvInsertBlockIntoFreeList+0xa8>)
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	e002      	b.n	8003514 <prvInsertBlockIntoFreeList+0x14>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	d8f7      	bhi.n	800350e <prvInsertBlockIntoFreeList+0xe>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	4413      	add	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	429a      	cmp	r2, r3
 800352e:	d108      	bne.n	8003542 <prvInsertBlockIntoFreeList+0x42>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	441a      	add	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	441a      	add	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d118      	bne.n	8003588 <prvInsertBlockIntoFreeList+0x88>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b14      	ldr	r3, [pc, #80]	; (80035ac <prvInsertBlockIntoFreeList+0xac>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d00d      	beq.n	800357e <prvInsertBlockIntoFreeList+0x7e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	441a      	add	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	e008      	b.n	8003590 <prvInsertBlockIntoFreeList+0x90>
 800357e:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <prvInsertBlockIntoFreeList+0xac>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e003      	b.n	8003590 <prvInsertBlockIntoFreeList+0x90>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	d002      	beq.n	800359e <prvInsertBlockIntoFreeList+0x9e>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	20001458 	.word	0x20001458
 80035ac:	20001460 	.word	0x20001460

080035b0 <__libc_init_array>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	2600      	movs	r6, #0
 80035b4:	4d0c      	ldr	r5, [pc, #48]	; (80035e8 <__libc_init_array+0x38>)
 80035b6:	4c0d      	ldr	r4, [pc, #52]	; (80035ec <__libc_init_array+0x3c>)
 80035b8:	1b64      	subs	r4, r4, r5
 80035ba:	10a4      	asrs	r4, r4, #2
 80035bc:	42a6      	cmp	r6, r4
 80035be:	d109      	bne.n	80035d4 <__libc_init_array+0x24>
 80035c0:	f000 f822 	bl	8003608 <_init>
 80035c4:	2600      	movs	r6, #0
 80035c6:	4d0a      	ldr	r5, [pc, #40]	; (80035f0 <__libc_init_array+0x40>)
 80035c8:	4c0a      	ldr	r4, [pc, #40]	; (80035f4 <__libc_init_array+0x44>)
 80035ca:	1b64      	subs	r4, r4, r5
 80035cc:	10a4      	asrs	r4, r4, #2
 80035ce:	42a6      	cmp	r6, r4
 80035d0:	d105      	bne.n	80035de <__libc_init_array+0x2e>
 80035d2:	bd70      	pop	{r4, r5, r6, pc}
 80035d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d8:	4798      	blx	r3
 80035da:	3601      	adds	r6, #1
 80035dc:	e7ee      	b.n	80035bc <__libc_init_array+0xc>
 80035de:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e2:	4798      	blx	r3
 80035e4:	3601      	adds	r6, #1
 80035e6:	e7f2      	b.n	80035ce <__libc_init_array+0x1e>
 80035e8:	080036d8 	.word	0x080036d8
 80035ec:	080036d8 	.word	0x080036d8
 80035f0:	080036d8 	.word	0x080036d8
 80035f4:	080036dc 	.word	0x080036dc

080035f8 <memset>:
 80035f8:	4603      	mov	r3, r0
 80035fa:	4402      	add	r2, r0
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d100      	bne.n	8003602 <memset+0xa>
 8003600:	4770      	bx	lr
 8003602:	f803 1b01 	strb.w	r1, [r3], #1
 8003606:	e7f9      	b.n	80035fc <memset+0x4>

08003608 <_init>:
 8003608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360a:	bf00      	nop
 800360c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360e:	bc08      	pop	{r3}
 8003610:	469e      	mov	lr, r3
 8003612:	4770      	bx	lr

08003614 <_fini>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	bf00      	nop
 8003618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361a:	bc08      	pop	{r3}
 800361c:	469e      	mov	lr, r3
 800361e:	4770      	bx	lr
