
FreeRTOS_project_stm32f105.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7bc  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800b9b0  0800b9b0  0001b9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfd0  0800bfd0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfd0  0800bfd0  0001bfd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfd8  0800bfd8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfd8  0800bfd8  0001bfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfdc  0800bfdc  0001bfdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bfe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c90  200001e8  0800c1c4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001e78  0800c1c4  00021e78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169b4  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000376a  00000000  00000000  00036bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  0003a330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0003b880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227d8  00000000  00000000  0003cc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179ed  00000000  00000000  0005f430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4d18  00000000  00000000  00076e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013bb35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fc4  00000000  00000000  0013bb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001e8 	.word	0x200001e8
 800020c:	00000000 	.word	0x00000000
 8000210:	0800b994 	.word	0x0800b994

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001ec 	.word	0x200001ec
 800022c:	0800b994 	.word	0x0800b994

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_fmul>:
 8000240:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000244:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000248:	bf1e      	ittt	ne
 800024a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800024e:	ea92 0f0c 	teqne	r2, ip
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d06f      	beq.n	8000338 <__aeabi_fmul+0xf8>
 8000258:	441a      	add	r2, r3
 800025a:	ea80 0c01 	eor.w	ip, r0, r1
 800025e:	0240      	lsls	r0, r0, #9
 8000260:	bf18      	it	ne
 8000262:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000266:	d01e      	beq.n	80002a6 <__aeabi_fmul+0x66>
 8000268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800026c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000270:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000274:	fba0 3101 	umull	r3, r1, r0, r1
 8000278:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800027c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000280:	bf3e      	ittt	cc
 8000282:	0049      	lslcc	r1, r1, #1
 8000284:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000288:	005b      	lslcc	r3, r3, #1
 800028a:	ea40 0001 	orr.w	r0, r0, r1
 800028e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000292:	2afd      	cmp	r2, #253	; 0xfd
 8000294:	d81d      	bhi.n	80002d2 <__aeabi_fmul+0x92>
 8000296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800029a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800029e:	bf08      	it	eq
 80002a0:	f020 0001 	biceq.w	r0, r0, #1
 80002a4:	4770      	bx	lr
 80002a6:	f090 0f00 	teq	r0, #0
 80002aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002ae:	bf08      	it	eq
 80002b0:	0249      	lsleq	r1, r1, #9
 80002b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002ba:	3a7f      	subs	r2, #127	; 0x7f
 80002bc:	bfc2      	ittt	gt
 80002be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002c6:	4770      	bxgt	lr
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	3a01      	subs	r2, #1
 80002d2:	dc5d      	bgt.n	8000390 <__aeabi_fmul+0x150>
 80002d4:	f112 0f19 	cmn.w	r2, #25
 80002d8:	bfdc      	itt	le
 80002da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002de:	4770      	bxle	lr
 80002e0:	f1c2 0200 	rsb	r2, r2, #0
 80002e4:	0041      	lsls	r1, r0, #1
 80002e6:	fa21 f102 	lsr.w	r1, r1, r2
 80002ea:	f1c2 0220 	rsb	r2, r2, #32
 80002ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80002f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80002f6:	f140 0000 	adc.w	r0, r0, #0
 80002fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002fe:	bf08      	it	eq
 8000300:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000304:	4770      	bx	lr
 8000306:	f092 0f00 	teq	r2, #0
 800030a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800030e:	bf02      	ittt	eq
 8000310:	0040      	lsleq	r0, r0, #1
 8000312:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000316:	3a01      	subeq	r2, #1
 8000318:	d0f9      	beq.n	800030e <__aeabi_fmul+0xce>
 800031a:	ea40 000c 	orr.w	r0, r0, ip
 800031e:	f093 0f00 	teq	r3, #0
 8000322:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000326:	bf02      	ittt	eq
 8000328:	0049      	lsleq	r1, r1, #1
 800032a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800032e:	3b01      	subeq	r3, #1
 8000330:	d0f9      	beq.n	8000326 <__aeabi_fmul+0xe6>
 8000332:	ea41 010c 	orr.w	r1, r1, ip
 8000336:	e78f      	b.n	8000258 <__aeabi_fmul+0x18>
 8000338:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800033c:	ea92 0f0c 	teq	r2, ip
 8000340:	bf18      	it	ne
 8000342:	ea93 0f0c 	teqne	r3, ip
 8000346:	d00a      	beq.n	800035e <__aeabi_fmul+0x11e>
 8000348:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800034c:	bf18      	it	ne
 800034e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000352:	d1d8      	bne.n	8000306 <__aeabi_fmul+0xc6>
 8000354:	ea80 0001 	eor.w	r0, r0, r1
 8000358:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800035c:	4770      	bx	lr
 800035e:	f090 0f00 	teq	r0, #0
 8000362:	bf17      	itett	ne
 8000364:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000368:	4608      	moveq	r0, r1
 800036a:	f091 0f00 	teqne	r1, #0
 800036e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000372:	d014      	beq.n	800039e <__aeabi_fmul+0x15e>
 8000374:	ea92 0f0c 	teq	r2, ip
 8000378:	d101      	bne.n	800037e <__aeabi_fmul+0x13e>
 800037a:	0242      	lsls	r2, r0, #9
 800037c:	d10f      	bne.n	800039e <__aeabi_fmul+0x15e>
 800037e:	ea93 0f0c 	teq	r3, ip
 8000382:	d103      	bne.n	800038c <__aeabi_fmul+0x14c>
 8000384:	024b      	lsls	r3, r1, #9
 8000386:	bf18      	it	ne
 8000388:	4608      	movne	r0, r1
 800038a:	d108      	bne.n	800039e <__aeabi_fmul+0x15e>
 800038c:	ea80 0001 	eor.w	r0, r0, r1
 8000390:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000394:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000398:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800039c:	4770      	bx	lr
 800039e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003a6:	4770      	bx	lr

080003a8 <__aeabi_drsub>:
 80003a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	e002      	b.n	80003b4 <__adddf3>
 80003ae:	bf00      	nop

080003b0 <__aeabi_dsub>:
 80003b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b4 <__adddf3>:
 80003b4:	b530      	push	{r4, r5, lr}
 80003b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003be:	ea94 0f05 	teq	r4, r5
 80003c2:	bf08      	it	eq
 80003c4:	ea90 0f02 	teqeq	r0, r2
 80003c8:	bf1f      	itttt	ne
 80003ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003da:	f000 80e2 	beq.w	80005a2 <__adddf3+0x1ee>
 80003de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e6:	bfb8      	it	lt
 80003e8:	426d      	neglt	r5, r5
 80003ea:	dd0c      	ble.n	8000406 <__adddf3+0x52>
 80003ec:	442c      	add	r4, r5
 80003ee:	ea80 0202 	eor.w	r2, r0, r2
 80003f2:	ea81 0303 	eor.w	r3, r1, r3
 80003f6:	ea82 0000 	eor.w	r0, r2, r0
 80003fa:	ea83 0101 	eor.w	r1, r3, r1
 80003fe:	ea80 0202 	eor.w	r2, r0, r2
 8000402:	ea81 0303 	eor.w	r3, r1, r3
 8000406:	2d36      	cmp	r5, #54	; 0x36
 8000408:	bf88      	it	hi
 800040a:	bd30      	pophi	{r4, r5, pc}
 800040c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000410:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000414:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000418:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800041c:	d002      	beq.n	8000424 <__adddf3+0x70>
 800041e:	4240      	negs	r0, r0
 8000420:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000424:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000428:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800042c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000430:	d002      	beq.n	8000438 <__adddf3+0x84>
 8000432:	4252      	negs	r2, r2
 8000434:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000438:	ea94 0f05 	teq	r4, r5
 800043c:	f000 80a7 	beq.w	800058e <__adddf3+0x1da>
 8000440:	f1a4 0401 	sub.w	r4, r4, #1
 8000444:	f1d5 0e20 	rsbs	lr, r5, #32
 8000448:	db0d      	blt.n	8000466 <__adddf3+0xb2>
 800044a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044e:	fa22 f205 	lsr.w	r2, r2, r5
 8000452:	1880      	adds	r0, r0, r2
 8000454:	f141 0100 	adc.w	r1, r1, #0
 8000458:	fa03 f20e 	lsl.w	r2, r3, lr
 800045c:	1880      	adds	r0, r0, r2
 800045e:	fa43 f305 	asr.w	r3, r3, r5
 8000462:	4159      	adcs	r1, r3
 8000464:	e00e      	b.n	8000484 <__adddf3+0xd0>
 8000466:	f1a5 0520 	sub.w	r5, r5, #32
 800046a:	f10e 0e20 	add.w	lr, lr, #32
 800046e:	2a01      	cmp	r2, #1
 8000470:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000474:	bf28      	it	cs
 8000476:	f04c 0c02 	orrcs.w	ip, ip, #2
 800047a:	fa43 f305 	asr.w	r3, r3, r5
 800047e:	18c0      	adds	r0, r0, r3
 8000480:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000488:	d507      	bpl.n	800049a <__adddf3+0xe6>
 800048a:	f04f 0e00 	mov.w	lr, #0
 800048e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000492:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000496:	eb6e 0101 	sbc.w	r1, lr, r1
 800049a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049e:	d31b      	bcc.n	80004d8 <__adddf3+0x124>
 80004a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a4:	d30c      	bcc.n	80004c0 <__adddf3+0x10c>
 80004a6:	0849      	lsrs	r1, r1, #1
 80004a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b0:	f104 0401 	add.w	r4, r4, #1
 80004b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004bc:	f080 809a 	bcs.w	80005f4 <__adddf3+0x240>
 80004c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c4:	bf08      	it	eq
 80004c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ca:	f150 0000 	adcs.w	r0, r0, #0
 80004ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004d2:	ea41 0105 	orr.w	r1, r1, r5
 80004d6:	bd30      	pop	{r4, r5, pc}
 80004d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004dc:	4140      	adcs	r0, r0
 80004de:	eb41 0101 	adc.w	r1, r1, r1
 80004e2:	3c01      	subs	r4, #1
 80004e4:	bf28      	it	cs
 80004e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004ea:	d2e9      	bcs.n	80004c0 <__adddf3+0x10c>
 80004ec:	f091 0f00 	teq	r1, #0
 80004f0:	bf04      	itt	eq
 80004f2:	4601      	moveq	r1, r0
 80004f4:	2000      	moveq	r0, #0
 80004f6:	fab1 f381 	clz	r3, r1
 80004fa:	bf08      	it	eq
 80004fc:	3320      	addeq	r3, #32
 80004fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000502:	f1b3 0220 	subs.w	r2, r3, #32
 8000506:	da0c      	bge.n	8000522 <__adddf3+0x16e>
 8000508:	320c      	adds	r2, #12
 800050a:	dd08      	ble.n	800051e <__adddf3+0x16a>
 800050c:	f102 0c14 	add.w	ip, r2, #20
 8000510:	f1c2 020c 	rsb	r2, r2, #12
 8000514:	fa01 f00c 	lsl.w	r0, r1, ip
 8000518:	fa21 f102 	lsr.w	r1, r1, r2
 800051c:	e00c      	b.n	8000538 <__adddf3+0x184>
 800051e:	f102 0214 	add.w	r2, r2, #20
 8000522:	bfd8      	it	le
 8000524:	f1c2 0c20 	rsble	ip, r2, #32
 8000528:	fa01 f102 	lsl.w	r1, r1, r2
 800052c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000530:	bfdc      	itt	le
 8000532:	ea41 010c 	orrle.w	r1, r1, ip
 8000536:	4090      	lslle	r0, r2
 8000538:	1ae4      	subs	r4, r4, r3
 800053a:	bfa2      	ittt	ge
 800053c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000540:	4329      	orrge	r1, r5
 8000542:	bd30      	popge	{r4, r5, pc}
 8000544:	ea6f 0404 	mvn.w	r4, r4
 8000548:	3c1f      	subs	r4, #31
 800054a:	da1c      	bge.n	8000586 <__adddf3+0x1d2>
 800054c:	340c      	adds	r4, #12
 800054e:	dc0e      	bgt.n	800056e <__adddf3+0x1ba>
 8000550:	f104 0414 	add.w	r4, r4, #20
 8000554:	f1c4 0220 	rsb	r2, r4, #32
 8000558:	fa20 f004 	lsr.w	r0, r0, r4
 800055c:	fa01 f302 	lsl.w	r3, r1, r2
 8000560:	ea40 0003 	orr.w	r0, r0, r3
 8000564:	fa21 f304 	lsr.w	r3, r1, r4
 8000568:	ea45 0103 	orr.w	r1, r5, r3
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	f1c4 040c 	rsb	r4, r4, #12
 8000572:	f1c4 0220 	rsb	r2, r4, #32
 8000576:	fa20 f002 	lsr.w	r0, r0, r2
 800057a:	fa01 f304 	lsl.w	r3, r1, r4
 800057e:	ea40 0003 	orr.w	r0, r0, r3
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	fa21 f004 	lsr.w	r0, r1, r4
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	f094 0f00 	teq	r4, #0
 8000592:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000596:	bf06      	itte	eq
 8000598:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800059c:	3401      	addeq	r4, #1
 800059e:	3d01      	subne	r5, #1
 80005a0:	e74e      	b.n	8000440 <__adddf3+0x8c>
 80005a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a6:	bf18      	it	ne
 80005a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005ac:	d029      	beq.n	8000602 <__adddf3+0x24e>
 80005ae:	ea94 0f05 	teq	r4, r5
 80005b2:	bf08      	it	eq
 80005b4:	ea90 0f02 	teqeq	r0, r2
 80005b8:	d005      	beq.n	80005c6 <__adddf3+0x212>
 80005ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80005be:	bf04      	itt	eq
 80005c0:	4619      	moveq	r1, r3
 80005c2:	4610      	moveq	r0, r2
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	ea91 0f03 	teq	r1, r3
 80005ca:	bf1e      	ittt	ne
 80005cc:	2100      	movne	r1, #0
 80005ce:	2000      	movne	r0, #0
 80005d0:	bd30      	popne	{r4, r5, pc}
 80005d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d6:	d105      	bne.n	80005e4 <__adddf3+0x230>
 80005d8:	0040      	lsls	r0, r0, #1
 80005da:	4149      	adcs	r1, r1
 80005dc:	bf28      	it	cs
 80005de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005e2:	bd30      	pop	{r4, r5, pc}
 80005e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e8:	bf3c      	itt	cc
 80005ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ee:	bd30      	popcc	{r4, r5, pc}
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005fc:	f04f 0000 	mov.w	r0, #0
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000606:	bf1a      	itte	ne
 8000608:	4619      	movne	r1, r3
 800060a:	4610      	movne	r0, r2
 800060c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000610:	bf1c      	itt	ne
 8000612:	460b      	movne	r3, r1
 8000614:	4602      	movne	r2, r0
 8000616:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800061a:	bf06      	itte	eq
 800061c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000620:	ea91 0f03 	teqeq	r1, r3
 8000624:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	bf00      	nop

0800062c <__aeabi_ui2d>:
 800062c:	f090 0f00 	teq	r0, #0
 8000630:	bf04      	itt	eq
 8000632:	2100      	moveq	r1, #0
 8000634:	4770      	bxeq	lr
 8000636:	b530      	push	{r4, r5, lr}
 8000638:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800063c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000640:	f04f 0500 	mov.w	r5, #0
 8000644:	f04f 0100 	mov.w	r1, #0
 8000648:	e750      	b.n	80004ec <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_i2d>:
 800064c:	f090 0f00 	teq	r0, #0
 8000650:	bf04      	itt	eq
 8000652:	2100      	moveq	r1, #0
 8000654:	4770      	bxeq	lr
 8000656:	b530      	push	{r4, r5, lr}
 8000658:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800065c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000660:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000664:	bf48      	it	mi
 8000666:	4240      	negmi	r0, r0
 8000668:	f04f 0100 	mov.w	r1, #0
 800066c:	e73e      	b.n	80004ec <__adddf3+0x138>
 800066e:	bf00      	nop

08000670 <__aeabi_f2d>:
 8000670:	0042      	lsls	r2, r0, #1
 8000672:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000676:	ea4f 0131 	mov.w	r1, r1, rrx
 800067a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067e:	bf1f      	itttt	ne
 8000680:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000684:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000688:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800068c:	4770      	bxne	lr
 800068e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000692:	bf08      	it	eq
 8000694:	4770      	bxeq	lr
 8000696:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800069a:	bf04      	itt	eq
 800069c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a0:	4770      	bxeq	lr
 80006a2:	b530      	push	{r4, r5, lr}
 80006a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	e71c      	b.n	80004ec <__adddf3+0x138>
 80006b2:	bf00      	nop

080006b4 <__aeabi_ul2d>:
 80006b4:	ea50 0201 	orrs.w	r2, r0, r1
 80006b8:	bf08      	it	eq
 80006ba:	4770      	bxeq	lr
 80006bc:	b530      	push	{r4, r5, lr}
 80006be:	f04f 0500 	mov.w	r5, #0
 80006c2:	e00a      	b.n	80006da <__aeabi_l2d+0x16>

080006c4 <__aeabi_l2d>:
 80006c4:	ea50 0201 	orrs.w	r2, r0, r1
 80006c8:	bf08      	it	eq
 80006ca:	4770      	bxeq	lr
 80006cc:	b530      	push	{r4, r5, lr}
 80006ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006d2:	d502      	bpl.n	80006da <__aeabi_l2d+0x16>
 80006d4:	4240      	negs	r0, r0
 80006d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e6:	f43f aed8 	beq.w	800049a <__adddf3+0xe6>
 80006ea:	f04f 0203 	mov.w	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000702:	f1c2 0320 	rsb	r3, r2, #32
 8000706:	fa00 fc03 	lsl.w	ip, r0, r3
 800070a:	fa20 f002 	lsr.w	r0, r0, r2
 800070e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000712:	ea40 000e 	orr.w	r0, r0, lr
 8000716:	fa21 f102 	lsr.w	r1, r1, r2
 800071a:	4414      	add	r4, r2
 800071c:	e6bd      	b.n	800049a <__adddf3+0xe6>
 800071e:	bf00      	nop

08000720 <__aeabi_dmul>:
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000726:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072e:	bf1d      	ittte	ne
 8000730:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000734:	ea94 0f0c 	teqne	r4, ip
 8000738:	ea95 0f0c 	teqne	r5, ip
 800073c:	f000 f8de 	bleq	80008fc <__aeabi_dmul+0x1dc>
 8000740:	442c      	add	r4, r5
 8000742:	ea81 0603 	eor.w	r6, r1, r3
 8000746:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800074a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800074e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000752:	bf18      	it	ne
 8000754:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800075c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000760:	d038      	beq.n	80007d4 <__aeabi_dmul+0xb4>
 8000762:	fba0 ce02 	umull	ip, lr, r0, r2
 8000766:	f04f 0500 	mov.w	r5, #0
 800076a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800076e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000772:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000776:	f04f 0600 	mov.w	r6, #0
 800077a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800077e:	f09c 0f00 	teq	ip, #0
 8000782:	bf18      	it	ne
 8000784:	f04e 0e01 	orrne.w	lr, lr, #1
 8000788:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800078c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000790:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000794:	d204      	bcs.n	80007a0 <__aeabi_dmul+0x80>
 8000796:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800079a:	416d      	adcs	r5, r5
 800079c:	eb46 0606 	adc.w	r6, r6, r6
 80007a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b8:	bf88      	it	hi
 80007ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007be:	d81e      	bhi.n	80007fe <__aeabi_dmul+0xde>
 80007c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007c4:	bf08      	it	eq
 80007c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007ca:	f150 0000 	adcs.w	r0, r0, #0
 80007ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d8:	ea46 0101 	orr.w	r1, r6, r1
 80007dc:	ea40 0002 	orr.w	r0, r0, r2
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e8:	bfc2      	ittt	gt
 80007ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007f2:	bd70      	popgt	{r4, r5, r6, pc}
 80007f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f8:	f04f 0e00 	mov.w	lr, #0
 80007fc:	3c01      	subs	r4, #1
 80007fe:	f300 80ab 	bgt.w	8000958 <__aeabi_dmul+0x238>
 8000802:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000806:	bfde      	ittt	le
 8000808:	2000      	movle	r0, #0
 800080a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800080e:	bd70      	pople	{r4, r5, r6, pc}
 8000810:	f1c4 0400 	rsb	r4, r4, #0
 8000814:	3c20      	subs	r4, #32
 8000816:	da35      	bge.n	8000884 <__aeabi_dmul+0x164>
 8000818:	340c      	adds	r4, #12
 800081a:	dc1b      	bgt.n	8000854 <__aeabi_dmul+0x134>
 800081c:	f104 0414 	add.w	r4, r4, #20
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f305 	lsl.w	r3, r0, r5
 8000828:	fa20 f004 	lsr.w	r0, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800083c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000840:	fa21 f604 	lsr.w	r6, r1, r4
 8000844:	eb42 0106 	adc.w	r1, r2, r6
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f1c4 040c 	rsb	r4, r4, #12
 8000858:	f1c4 0520 	rsb	r5, r4, #32
 800085c:	fa00 f304 	lsl.w	r3, r0, r4
 8000860:	fa20 f005 	lsr.w	r0, r0, r5
 8000864:	fa01 f204 	lsl.w	r2, r1, r4
 8000868:	ea40 0002 	orr.w	r0, r0, r2
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000870:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000874:	f141 0100 	adc.w	r1, r1, #0
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f1c4 0520 	rsb	r5, r4, #32
 8000888:	fa00 f205 	lsl.w	r2, r0, r5
 800088c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000890:	fa20 f304 	lsr.w	r3, r0, r4
 8000894:	fa01 f205 	lsl.w	r2, r1, r5
 8000898:	ea43 0302 	orr.w	r3, r3, r2
 800089c:	fa21 f004 	lsr.w	r0, r1, r4
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	fa21 f204 	lsr.w	r2, r1, r4
 80008a8:	ea20 0002 	bic.w	r0, r0, r2
 80008ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008b4:	bf08      	it	eq
 80008b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008ba:	bd70      	pop	{r4, r5, r6, pc}
 80008bc:	f094 0f00 	teq	r4, #0
 80008c0:	d10f      	bne.n	80008e2 <__aeabi_dmul+0x1c2>
 80008c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008c6:	0040      	lsls	r0, r0, #1
 80008c8:	eb41 0101 	adc.w	r1, r1, r1
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf08      	it	eq
 80008d2:	3c01      	subeq	r4, #1
 80008d4:	d0f7      	beq.n	80008c6 <__aeabi_dmul+0x1a6>
 80008d6:	ea41 0106 	orr.w	r1, r1, r6
 80008da:	f095 0f00 	teq	r5, #0
 80008de:	bf18      	it	ne
 80008e0:	4770      	bxne	lr
 80008e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008e6:	0052      	lsls	r2, r2, #1
 80008e8:	eb43 0303 	adc.w	r3, r3, r3
 80008ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008f0:	bf08      	it	eq
 80008f2:	3d01      	subeq	r5, #1
 80008f4:	d0f7      	beq.n	80008e6 <__aeabi_dmul+0x1c6>
 80008f6:	ea43 0306 	orr.w	r3, r3, r6
 80008fa:	4770      	bx	lr
 80008fc:	ea94 0f0c 	teq	r4, ip
 8000900:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000904:	bf18      	it	ne
 8000906:	ea95 0f0c 	teqne	r5, ip
 800090a:	d00c      	beq.n	8000926 <__aeabi_dmul+0x206>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	d1d1      	bne.n	80008bc <__aeabi_dmul+0x19c>
 8000918:	ea81 0103 	eor.w	r1, r1, r3
 800091c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000920:	f04f 0000 	mov.w	r0, #0
 8000924:	bd70      	pop	{r4, r5, r6, pc}
 8000926:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800092a:	bf06      	itte	eq
 800092c:	4610      	moveq	r0, r2
 800092e:	4619      	moveq	r1, r3
 8000930:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000934:	d019      	beq.n	800096a <__aeabi_dmul+0x24a>
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	d102      	bne.n	8000942 <__aeabi_dmul+0x222>
 800093c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000940:	d113      	bne.n	800096a <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	d105      	bne.n	8000954 <__aeabi_dmul+0x234>
 8000948:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800094c:	bf1c      	itt	ne
 800094e:	4610      	movne	r0, r2
 8000950:	4619      	movne	r1, r3
 8000952:	d10a      	bne.n	800096a <__aeabi_dmul+0x24a>
 8000954:	ea81 0103 	eor.w	r1, r1, r3
 8000958:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800095c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000960:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	bd70      	pop	{r4, r5, r6, pc}
 800096a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800096e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000972:	bd70      	pop	{r4, r5, r6, pc}

08000974 <__aeabi_ddiv>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800097a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800097e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000982:	bf1d      	ittte	ne
 8000984:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000988:	ea94 0f0c 	teqne	r4, ip
 800098c:	ea95 0f0c 	teqne	r5, ip
 8000990:	f000 f8a7 	bleq	8000ae2 <__aeabi_ddiv+0x16e>
 8000994:	eba4 0405 	sub.w	r4, r4, r5
 8000998:	ea81 0e03 	eor.w	lr, r1, r3
 800099c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009a4:	f000 8088 	beq.w	8000ab8 <__aeabi_ddiv+0x144>
 80009a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009cc:	429d      	cmp	r5, r3
 80009ce:	bf08      	it	eq
 80009d0:	4296      	cmpeq	r6, r2
 80009d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009da:	d202      	bcs.n	80009e2 <__aeabi_ddiv+0x6e>
 80009dc:	085b      	lsrs	r3, r3, #1
 80009de:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e2:	1ab6      	subs	r6, r6, r2
 80009e4:	eb65 0503 	sbc.w	r5, r5, r3
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a16:	bf22      	ittt	cs
 8000a18:	1ab6      	subcs	r6, r6, r2
 8000a1a:	4675      	movcs	r5, lr
 8000a1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2e:	bf22      	ittt	cs
 8000a30:	1ab6      	subcs	r6, r6, r2
 8000a32:	4675      	movcs	r5, lr
 8000a34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a38:	085b      	lsrs	r3, r3, #1
 8000a3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a46:	bf22      	ittt	cs
 8000a48:	1ab6      	subcs	r6, r6, r2
 8000a4a:	4675      	movcs	r5, lr
 8000a4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a50:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a54:	d018      	beq.n	8000a88 <__aeabi_ddiv+0x114>
 8000a56:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a72:	d1c0      	bne.n	80009f6 <__aeabi_ddiv+0x82>
 8000a74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a78:	d10b      	bne.n	8000a92 <__aeabi_ddiv+0x11e>
 8000a7a:	ea41 0100 	orr.w	r1, r1, r0
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a86:	e7b6      	b.n	80009f6 <__aeabi_ddiv+0x82>
 8000a88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a8c:	bf04      	itt	eq
 8000a8e:	4301      	orreq	r1, r0
 8000a90:	2000      	moveq	r0, #0
 8000a92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a96:	bf88      	it	hi
 8000a98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a9c:	f63f aeaf 	bhi.w	80007fe <__aeabi_dmul+0xde>
 8000aa0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000aa4:	bf04      	itt	eq
 8000aa6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aae:	f150 0000 	adcs.w	r0, r0, #0
 8000ab2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}
 8000ab8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000abc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ac0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ac4:	bfc2      	ittt	gt
 8000ac6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ace:	bd70      	popgt	{r4, r5, r6, pc}
 8000ad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad4:	f04f 0e00 	mov.w	lr, #0
 8000ad8:	3c01      	subs	r4, #1
 8000ada:	e690      	b.n	80007fe <__aeabi_dmul+0xde>
 8000adc:	ea45 0e06 	orr.w	lr, r5, r6
 8000ae0:	e68d      	b.n	80007fe <__aeabi_dmul+0xde>
 8000ae2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ae6:	ea94 0f0c 	teq	r4, ip
 8000aea:	bf08      	it	eq
 8000aec:	ea95 0f0c 	teqeq	r5, ip
 8000af0:	f43f af3b 	beq.w	800096a <__aeabi_dmul+0x24a>
 8000af4:	ea94 0f0c 	teq	r4, ip
 8000af8:	d10a      	bne.n	8000b10 <__aeabi_ddiv+0x19c>
 8000afa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000afe:	f47f af34 	bne.w	800096a <__aeabi_dmul+0x24a>
 8000b02:	ea95 0f0c 	teq	r5, ip
 8000b06:	f47f af25 	bne.w	8000954 <__aeabi_dmul+0x234>
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	e72c      	b.n	800096a <__aeabi_dmul+0x24a>
 8000b10:	ea95 0f0c 	teq	r5, ip
 8000b14:	d106      	bne.n	8000b24 <__aeabi_ddiv+0x1b0>
 8000b16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b1a:	f43f aefd 	beq.w	8000918 <__aeabi_dmul+0x1f8>
 8000b1e:	4610      	mov	r0, r2
 8000b20:	4619      	mov	r1, r3
 8000b22:	e722      	b.n	800096a <__aeabi_dmul+0x24a>
 8000b24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b28:	bf18      	it	ne
 8000b2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b2e:	f47f aec5 	bne.w	80008bc <__aeabi_dmul+0x19c>
 8000b32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b36:	f47f af0d 	bne.w	8000954 <__aeabi_dmul+0x234>
 8000b3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b3e:	f47f aeeb 	bne.w	8000918 <__aeabi_dmul+0x1f8>
 8000b42:	e712      	b.n	800096a <__aeabi_dmul+0x24a>

08000b44 <__gedf2>:
 8000b44:	f04f 3cff 	mov.w	ip, #4294967295
 8000b48:	e006      	b.n	8000b58 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__ledf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	e002      	b.n	8000b58 <__cmpdf2+0x4>
 8000b52:	bf00      	nop

08000b54 <__cmpdf2>:
 8000b54:	f04f 0c01 	mov.w	ip, #1
 8000b58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	bf18      	it	ne
 8000b6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b6e:	d01b      	beq.n	8000ba8 <__cmpdf2+0x54>
 8000b70:	b001      	add	sp, #4
 8000b72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b76:	bf0c      	ite	eq
 8000b78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b7c:	ea91 0f03 	teqne	r1, r3
 8000b80:	bf02      	ittt	eq
 8000b82:	ea90 0f02 	teqeq	r0, r2
 8000b86:	2000      	moveq	r0, #0
 8000b88:	4770      	bxeq	lr
 8000b8a:	f110 0f00 	cmn.w	r0, #0
 8000b8e:	ea91 0f03 	teq	r1, r3
 8000b92:	bf58      	it	pl
 8000b94:	4299      	cmppl	r1, r3
 8000b96:	bf08      	it	eq
 8000b98:	4290      	cmpeq	r0, r2
 8000b9a:	bf2c      	ite	cs
 8000b9c:	17d8      	asrcs	r0, r3, #31
 8000b9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ba2:	f040 0001 	orr.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb0:	d102      	bne.n	8000bb8 <__cmpdf2+0x64>
 8000bb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bb6:	d107      	bne.n	8000bc8 <__cmpdf2+0x74>
 8000bb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc0:	d1d6      	bne.n	8000b70 <__cmpdf2+0x1c>
 8000bc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bc6:	d0d3      	beq.n	8000b70 <__cmpdf2+0x1c>
 8000bc8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_cdrcmple>:
 8000bd0:	4684      	mov	ip, r0
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	4662      	mov	r2, ip
 8000bd6:	468c      	mov	ip, r1
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4663      	mov	r3, ip
 8000bdc:	e000      	b.n	8000be0 <__aeabi_cdcmpeq>
 8000bde:	bf00      	nop

08000be0 <__aeabi_cdcmpeq>:
 8000be0:	b501      	push	{r0, lr}
 8000be2:	f7ff ffb7 	bl	8000b54 <__cmpdf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd01      	pop	{r0, pc}

08000bf0 <__aeabi_dcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cdcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cdcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cdcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffce 	bl	8000bd0 <__aeabi_cdrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_dcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc4 	bl	8000bd0 <__aeabi_cdrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_dcmpun>:
 8000c54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c5c:	d102      	bne.n	8000c64 <__aeabi_dcmpun+0x10>
 8000c5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c62:	d10a      	bne.n	8000c7a <__aeabi_dcmpun+0x26>
 8000c64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c6c:	d102      	bne.n	8000c74 <__aeabi_dcmpun+0x20>
 8000c6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c72:	d102      	bne.n	8000c7a <__aeabi_dcmpun+0x26>
 8000c74:	f04f 0000 	mov.w	r0, #0
 8000c78:	4770      	bx	lr
 8000c7a:	f04f 0001 	mov.w	r0, #1
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_d2uiz>:
 8000c80:	004a      	lsls	r2, r1, #1
 8000c82:	d211      	bcs.n	8000ca8 <__aeabi_d2uiz+0x28>
 8000c84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c88:	d211      	bcs.n	8000cae <__aeabi_d2uiz+0x2e>
 8000c8a:	d50d      	bpl.n	8000ca8 <__aeabi_d2uiz+0x28>
 8000c8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c94:	d40e      	bmi.n	8000cb4 <__aeabi_d2uiz+0x34>
 8000c96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ca2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d102      	bne.n	8000cba <__aeabi_d2uiz+0x3a>
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	4770      	bx	lr
 8000cba:	f04f 0000 	mov.w	r0, #0
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2f>:
 8000cc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cc8:	bf24      	itt	cs
 8000cca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cd2:	d90d      	bls.n	8000cf0 <__aeabi_d2f+0x30>
 8000cd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ce0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ce4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cf4:	d121      	bne.n	8000d3a <__aeabi_d2f+0x7a>
 8000cf6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cfa:	bfbc      	itt	lt
 8000cfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d00:	4770      	bxlt	lr
 8000d02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d0a:	f1c2 0218 	rsb	r2, r2, #24
 8000d0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000d12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d16:	fa20 f002 	lsr.w	r0, r0, r2
 8000d1a:	bf18      	it	ne
 8000d1c:	f040 0001 	orrne.w	r0, r0, #1
 8000d20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d2c:	ea40 000c 	orr.w	r0, r0, ip
 8000d30:	fa23 f302 	lsr.w	r3, r3, r2
 8000d34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d38:	e7cc      	b.n	8000cd4 <__aeabi_d2f+0x14>
 8000d3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d3e:	d107      	bne.n	8000d50 <__aeabi_d2f+0x90>
 8000d40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d44:	bf1e      	ittt	ne
 8000d46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d4e:	4770      	bxne	lr
 8000d50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <__aeabi_frsub>:
 8000d60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000d64:	e002      	b.n	8000d6c <__addsf3>
 8000d66:	bf00      	nop

08000d68 <__aeabi_fsub>:
 8000d68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000d6c <__addsf3>:
 8000d6c:	0042      	lsls	r2, r0, #1
 8000d6e:	bf1f      	itttt	ne
 8000d70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000d74:	ea92 0f03 	teqne	r2, r3
 8000d78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d80:	d06a      	beq.n	8000e58 <__addsf3+0xec>
 8000d82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d8a:	bfc1      	itttt	gt
 8000d8c:	18d2      	addgt	r2, r2, r3
 8000d8e:	4041      	eorgt	r1, r0
 8000d90:	4048      	eorgt	r0, r1
 8000d92:	4041      	eorgt	r1, r0
 8000d94:	bfb8      	it	lt
 8000d96:	425b      	neglt	r3, r3
 8000d98:	2b19      	cmp	r3, #25
 8000d9a:	bf88      	it	hi
 8000d9c:	4770      	bxhi	lr
 8000d9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000daa:	bf18      	it	ne
 8000dac:	4240      	negne	r0, r0
 8000dae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000db2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000db6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000dba:	bf18      	it	ne
 8000dbc:	4249      	negne	r1, r1
 8000dbe:	ea92 0f03 	teq	r2, r3
 8000dc2:	d03f      	beq.n	8000e44 <__addsf3+0xd8>
 8000dc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000dc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000dcc:	eb10 000c 	adds.w	r0, r0, ip
 8000dd0:	f1c3 0320 	rsb	r3, r3, #32
 8000dd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000dd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ddc:	d502      	bpl.n	8000de4 <__addsf3+0x78>
 8000dde:	4249      	negs	r1, r1
 8000de0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000de4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000de8:	d313      	bcc.n	8000e12 <__addsf3+0xa6>
 8000dea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000dee:	d306      	bcc.n	8000dfe <__addsf3+0x92>
 8000df0:	0840      	lsrs	r0, r0, #1
 8000df2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000df6:	f102 0201 	add.w	r2, r2, #1
 8000dfa:	2afe      	cmp	r2, #254	; 0xfe
 8000dfc:	d251      	bcs.n	8000ea2 <__addsf3+0x136>
 8000dfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e06:	bf08      	it	eq
 8000e08:	f020 0001 	biceq.w	r0, r0, #1
 8000e0c:	ea40 0003 	orr.w	r0, r0, r3
 8000e10:	4770      	bx	lr
 8000e12:	0049      	lsls	r1, r1, #1
 8000e14:	eb40 0000 	adc.w	r0, r0, r0
 8000e18:	3a01      	subs	r2, #1
 8000e1a:	bf28      	it	cs
 8000e1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e20:	d2ed      	bcs.n	8000dfe <__addsf3+0x92>
 8000e22:	fab0 fc80 	clz	ip, r0
 8000e26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000e2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e32:	bfaa      	itet	ge
 8000e34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e38:	4252      	neglt	r2, r2
 8000e3a:	4318      	orrge	r0, r3
 8000e3c:	bfbc      	itt	lt
 8000e3e:	40d0      	lsrlt	r0, r2
 8000e40:	4318      	orrlt	r0, r3
 8000e42:	4770      	bx	lr
 8000e44:	f092 0f00 	teq	r2, #0
 8000e48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e4c:	bf06      	itte	eq
 8000e4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e52:	3201      	addeq	r2, #1
 8000e54:	3b01      	subne	r3, #1
 8000e56:	e7b5      	b.n	8000dc4 <__addsf3+0x58>
 8000e58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e60:	bf18      	it	ne
 8000e62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e66:	d021      	beq.n	8000eac <__addsf3+0x140>
 8000e68:	ea92 0f03 	teq	r2, r3
 8000e6c:	d004      	beq.n	8000e78 <__addsf3+0x10c>
 8000e6e:	f092 0f00 	teq	r2, #0
 8000e72:	bf08      	it	eq
 8000e74:	4608      	moveq	r0, r1
 8000e76:	4770      	bx	lr
 8000e78:	ea90 0f01 	teq	r0, r1
 8000e7c:	bf1c      	itt	ne
 8000e7e:	2000      	movne	r0, #0
 8000e80:	4770      	bxne	lr
 8000e82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000e86:	d104      	bne.n	8000e92 <__addsf3+0x126>
 8000e88:	0040      	lsls	r0, r0, #1
 8000e8a:	bf28      	it	cs
 8000e8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e96:	bf3c      	itt	cc
 8000e98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e9c:	4770      	bxcc	lr
 8000e9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ea2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ea6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eaa:	4770      	bx	lr
 8000eac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000eb0:	bf16      	itet	ne
 8000eb2:	4608      	movne	r0, r1
 8000eb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000eb8:	4601      	movne	r1, r0
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	bf06      	itte	eq
 8000ebe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ec2:	ea90 0f01 	teqeq	r0, r1
 8000ec6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000eca:	4770      	bx	lr

08000ecc <__aeabi_ui2f>:
 8000ecc:	f04f 0300 	mov.w	r3, #0
 8000ed0:	e004      	b.n	8000edc <__aeabi_i2f+0x8>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_i2f>:
 8000ed4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ed8:	bf48      	it	mi
 8000eda:	4240      	negmi	r0, r0
 8000edc:	ea5f 0c00 	movs.w	ip, r0
 8000ee0:	bf08      	it	eq
 8000ee2:	4770      	bxeq	lr
 8000ee4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ee8:	4601      	mov	r1, r0
 8000eea:	f04f 0000 	mov.w	r0, #0
 8000eee:	e01c      	b.n	8000f2a <__aeabi_l2f+0x2a>

08000ef0 <__aeabi_ul2f>:
 8000ef0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ef4:	bf08      	it	eq
 8000ef6:	4770      	bxeq	lr
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	e00a      	b.n	8000f14 <__aeabi_l2f+0x14>
 8000efe:	bf00      	nop

08000f00 <__aeabi_l2f>:
 8000f00:	ea50 0201 	orrs.w	r2, r0, r1
 8000f04:	bf08      	it	eq
 8000f06:	4770      	bxeq	lr
 8000f08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f0c:	d502      	bpl.n	8000f14 <__aeabi_l2f+0x14>
 8000f0e:	4240      	negs	r0, r0
 8000f10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f14:	ea5f 0c01 	movs.w	ip, r1
 8000f18:	bf02      	ittt	eq
 8000f1a:	4684      	moveq	ip, r0
 8000f1c:	4601      	moveq	r1, r0
 8000f1e:	2000      	moveq	r0, #0
 8000f20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f24:	bf08      	it	eq
 8000f26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f2e:	fabc f28c 	clz	r2, ip
 8000f32:	3a08      	subs	r2, #8
 8000f34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f38:	db10      	blt.n	8000f5c <__aeabi_l2f+0x5c>
 8000f3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f3e:	4463      	add	r3, ip
 8000f40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f44:	f1c2 0220 	rsb	r2, r2, #32
 8000f48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000f50:	eb43 0002 	adc.w	r0, r3, r2
 8000f54:	bf08      	it	eq
 8000f56:	f020 0001 	biceq.w	r0, r0, #1
 8000f5a:	4770      	bx	lr
 8000f5c:	f102 0220 	add.w	r2, r2, #32
 8000f60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f64:	f1c2 0220 	rsb	r2, r2, #32
 8000f68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000f70:	eb43 0002 	adc.w	r0, r3, r2
 8000f74:	bf08      	it	eq
 8000f76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f7a:	4770      	bx	lr

08000f7c <__gesf2>:
 8000f7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000f80:	e006      	b.n	8000f90 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__lesf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	e002      	b.n	8000f90 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__cmpsf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa0:	bf18      	it	ne
 8000fa2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fa6:	d011      	beq.n	8000fcc <__cmpsf2+0x40>
 8000fa8:	b001      	add	sp, #4
 8000faa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fae:	bf18      	it	ne
 8000fb0:	ea90 0f01 	teqne	r0, r1
 8000fb4:	bf58      	it	pl
 8000fb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fba:	bf88      	it	hi
 8000fbc:	17c8      	asrhi	r0, r1, #31
 8000fbe:	bf38      	it	cc
 8000fc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fc4:	bf18      	it	ne
 8000fc6:	f040 0001 	orrne.w	r0, r0, #1
 8000fca:	4770      	bx	lr
 8000fcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd0:	d102      	bne.n	8000fd8 <__cmpsf2+0x4c>
 8000fd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fd6:	d105      	bne.n	8000fe4 <__cmpsf2+0x58>
 8000fd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fdc:	d1e4      	bne.n	8000fa8 <__cmpsf2+0x1c>
 8000fde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fe2:	d0e1      	beq.n	8000fa8 <__cmpsf2+0x1c>
 8000fe4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <__aeabi_cfrcmple>:
 8000fec:	4684      	mov	ip, r0
 8000fee:	4608      	mov	r0, r1
 8000ff0:	4661      	mov	r1, ip
 8000ff2:	e7ff      	b.n	8000ff4 <__aeabi_cfcmpeq>

08000ff4 <__aeabi_cfcmpeq>:
 8000ff4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ff6:	f7ff ffc9 	bl	8000f8c <__cmpsf2>
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	bf48      	it	mi
 8000ffe:	f110 0f00 	cmnmi.w	r0, #0
 8001002:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001004 <__aeabi_fcmpeq>:
 8001004:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001008:	f7ff fff4 	bl	8000ff4 <__aeabi_cfcmpeq>
 800100c:	bf0c      	ite	eq
 800100e:	2001      	moveq	r0, #1
 8001010:	2000      	movne	r0, #0
 8001012:	f85d fb08 	ldr.w	pc, [sp], #8
 8001016:	bf00      	nop

08001018 <__aeabi_fcmplt>:
 8001018:	f84d ed08 	str.w	lr, [sp, #-8]!
 800101c:	f7ff ffea 	bl	8000ff4 <__aeabi_cfcmpeq>
 8001020:	bf34      	ite	cc
 8001022:	2001      	movcc	r0, #1
 8001024:	2000      	movcs	r0, #0
 8001026:	f85d fb08 	ldr.w	pc, [sp], #8
 800102a:	bf00      	nop

0800102c <__aeabi_fcmple>:
 800102c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001030:	f7ff ffe0 	bl	8000ff4 <__aeabi_cfcmpeq>
 8001034:	bf94      	ite	ls
 8001036:	2001      	movls	r0, #1
 8001038:	2000      	movhi	r0, #0
 800103a:	f85d fb08 	ldr.w	pc, [sp], #8
 800103e:	bf00      	nop

08001040 <__aeabi_fcmpge>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff ffd2 	bl	8000fec <__aeabi_cfrcmple>
 8001048:	bf94      	ite	ls
 800104a:	2001      	movls	r0, #1
 800104c:	2000      	movhi	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_fcmpgt>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff ffc8 	bl	8000fec <__aeabi_cfrcmple>
 800105c:	bf34      	ite	cc
 800105e:	2001      	movcc	r0, #1
 8001060:	2000      	movcs	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_f2iz>:
 8001068:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30f      	bcc.n	8001092 <__aeabi_f2iz+0x2a>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d90d      	bls.n	8001098 <__aeabi_f2iz+0x30>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	bf18      	it	ne
 800108e:	4240      	negne	r0, r0
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2iz+0x3a>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d105      	bne.n	80010ae <__aeabi_f2iz+0x46>
 80010a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010a6:	bf08      	it	eq
 80010a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010ac:	4770      	bx	lr
 80010ae:	f04f 0000 	mov.w	r0, #0
 80010b2:	4770      	bx	lr

080010b4 <__aeabi_f2uiz>:
 80010b4:	0042      	lsls	r2, r0, #1
 80010b6:	d20e      	bcs.n	80010d6 <__aeabi_f2uiz+0x22>
 80010b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010bc:	d30b      	bcc.n	80010d6 <__aeabi_f2uiz+0x22>
 80010be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c6:	d409      	bmi.n	80010dc <__aeabi_f2uiz+0x28>
 80010c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d0:	fa23 f002 	lsr.w	r0, r3, r2
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0000 	mov.w	r0, #0
 80010da:	4770      	bx	lr
 80010dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e0:	d101      	bne.n	80010e6 <__aeabi_f2uiz+0x32>
 80010e2:	0242      	lsls	r2, r0, #9
 80010e4:	d102      	bne.n	80010ec <__aeabi_f2uiz+0x38>
 80010e6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ea:	4770      	bx	lr
 80010ec:	f04f 0000 	mov.w	r0, #0
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <__aeabi_uldivmod>:
 80010f4:	b953      	cbnz	r3, 800110c <__aeabi_uldivmod+0x18>
 80010f6:	b94a      	cbnz	r2, 800110c <__aeabi_uldivmod+0x18>
 80010f8:	2900      	cmp	r1, #0
 80010fa:	bf08      	it	eq
 80010fc:	2800      	cmpeq	r0, #0
 80010fe:	bf1c      	itt	ne
 8001100:	f04f 31ff 	movne.w	r1, #4294967295
 8001104:	f04f 30ff 	movne.w	r0, #4294967295
 8001108:	f000 b9ae 	b.w	8001468 <__aeabi_idiv0>
 800110c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001110:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001114:	f000 f83e 	bl	8001194 <__udivmoddi4>
 8001118:	f8dd e004 	ldr.w	lr, [sp, #4]
 800111c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4605      	mov	r5, r0
 8001128:	460c      	mov	r4, r1
 800112a:	2200      	movs	r2, #0
 800112c:	2300      	movs	r3, #0
 800112e:	4628      	mov	r0, r5
 8001130:	4621      	mov	r1, r4
 8001132:	f7ff fd67 	bl	8000c04 <__aeabi_dcmplt>
 8001136:	b928      	cbnz	r0, 8001144 <__aeabi_d2lz+0x20>
 8001138:	4628      	mov	r0, r5
 800113a:	4621      	mov	r1, r4
 800113c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001140:	f000 b80a 	b.w	8001158 <__aeabi_d2ulz>
 8001144:	4628      	mov	r0, r5
 8001146:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800114a:	f000 f805 	bl	8001158 <__aeabi_d2ulz>
 800114e:	4240      	negs	r0, r0
 8001150:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop

08001158 <__aeabi_d2ulz>:
 8001158:	b5d0      	push	{r4, r6, r7, lr}
 800115a:	2200      	movs	r2, #0
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <__aeabi_d2ulz+0x34>)
 800115e:	4606      	mov	r6, r0
 8001160:	460f      	mov	r7, r1
 8001162:	f7ff fadd 	bl	8000720 <__aeabi_dmul>
 8001166:	f7ff fd8b 	bl	8000c80 <__aeabi_d2uiz>
 800116a:	4604      	mov	r4, r0
 800116c:	f7ff fa5e 	bl	800062c <__aeabi_ui2d>
 8001170:	2200      	movs	r2, #0
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <__aeabi_d2ulz+0x38>)
 8001174:	f7ff fad4 	bl	8000720 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4630      	mov	r0, r6
 800117e:	4639      	mov	r1, r7
 8001180:	f7ff f916 	bl	80003b0 <__aeabi_dsub>
 8001184:	f7ff fd7c 	bl	8000c80 <__aeabi_d2uiz>
 8001188:	4621      	mov	r1, r4
 800118a:	bdd0      	pop	{r4, r6, r7, pc}
 800118c:	3df00000 	.word	0x3df00000
 8001190:	41f00000 	.word	0x41f00000

08001194 <__udivmoddi4>:
 8001194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001198:	9e08      	ldr	r6, [sp, #32]
 800119a:	460d      	mov	r5, r1
 800119c:	4604      	mov	r4, r0
 800119e:	4688      	mov	r8, r1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d14d      	bne.n	8001240 <__udivmoddi4+0xac>
 80011a4:	428a      	cmp	r2, r1
 80011a6:	4694      	mov	ip, r2
 80011a8:	d968      	bls.n	800127c <__udivmoddi4+0xe8>
 80011aa:	fab2 f282 	clz	r2, r2
 80011ae:	b152      	cbz	r2, 80011c6 <__udivmoddi4+0x32>
 80011b0:	fa01 f302 	lsl.w	r3, r1, r2
 80011b4:	f1c2 0120 	rsb	r1, r2, #32
 80011b8:	fa20 f101 	lsr.w	r1, r0, r1
 80011bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80011c0:	ea41 0803 	orr.w	r8, r1, r3
 80011c4:	4094      	lsls	r4, r2
 80011c6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80011ca:	fbb8 f7f1 	udiv	r7, r8, r1
 80011ce:	fa1f fe8c 	uxth.w	lr, ip
 80011d2:	fb01 8817 	mls	r8, r1, r7, r8
 80011d6:	fb07 f00e 	mul.w	r0, r7, lr
 80011da:	0c23      	lsrs	r3, r4, #16
 80011dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011e0:	4298      	cmp	r0, r3
 80011e2:	d90a      	bls.n	80011fa <__udivmoddi4+0x66>
 80011e4:	eb1c 0303 	adds.w	r3, ip, r3
 80011e8:	f107 35ff 	add.w	r5, r7, #4294967295
 80011ec:	f080 811e 	bcs.w	800142c <__udivmoddi4+0x298>
 80011f0:	4298      	cmp	r0, r3
 80011f2:	f240 811b 	bls.w	800142c <__udivmoddi4+0x298>
 80011f6:	3f02      	subs	r7, #2
 80011f8:	4463      	add	r3, ip
 80011fa:	1a1b      	subs	r3, r3, r0
 80011fc:	fbb3 f0f1 	udiv	r0, r3, r1
 8001200:	fb01 3310 	mls	r3, r1, r0, r3
 8001204:	fb00 fe0e 	mul.w	lr, r0, lr
 8001208:	b2a4      	uxth	r4, r4
 800120a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800120e:	45a6      	cmp	lr, r4
 8001210:	d90a      	bls.n	8001228 <__udivmoddi4+0x94>
 8001212:	eb1c 0404 	adds.w	r4, ip, r4
 8001216:	f100 33ff 	add.w	r3, r0, #4294967295
 800121a:	f080 8109 	bcs.w	8001430 <__udivmoddi4+0x29c>
 800121e:	45a6      	cmp	lr, r4
 8001220:	f240 8106 	bls.w	8001430 <__udivmoddi4+0x29c>
 8001224:	4464      	add	r4, ip
 8001226:	3802      	subs	r0, #2
 8001228:	2100      	movs	r1, #0
 800122a:	eba4 040e 	sub.w	r4, r4, lr
 800122e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001232:	b11e      	cbz	r6, 800123c <__udivmoddi4+0xa8>
 8001234:	2300      	movs	r3, #0
 8001236:	40d4      	lsrs	r4, r2
 8001238:	e9c6 4300 	strd	r4, r3, [r6]
 800123c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001240:	428b      	cmp	r3, r1
 8001242:	d908      	bls.n	8001256 <__udivmoddi4+0xc2>
 8001244:	2e00      	cmp	r6, #0
 8001246:	f000 80ee 	beq.w	8001426 <__udivmoddi4+0x292>
 800124a:	2100      	movs	r1, #0
 800124c:	e9c6 0500 	strd	r0, r5, [r6]
 8001250:	4608      	mov	r0, r1
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	fab3 f183 	clz	r1, r3
 800125a:	2900      	cmp	r1, #0
 800125c:	d14a      	bne.n	80012f4 <__udivmoddi4+0x160>
 800125e:	42ab      	cmp	r3, r5
 8001260:	d302      	bcc.n	8001268 <__udivmoddi4+0xd4>
 8001262:	4282      	cmp	r2, r0
 8001264:	f200 80fc 	bhi.w	8001460 <__udivmoddi4+0x2cc>
 8001268:	1a84      	subs	r4, r0, r2
 800126a:	eb65 0303 	sbc.w	r3, r5, r3
 800126e:	2001      	movs	r0, #1
 8001270:	4698      	mov	r8, r3
 8001272:	2e00      	cmp	r6, #0
 8001274:	d0e2      	beq.n	800123c <__udivmoddi4+0xa8>
 8001276:	e9c6 4800 	strd	r4, r8, [r6]
 800127a:	e7df      	b.n	800123c <__udivmoddi4+0xa8>
 800127c:	b902      	cbnz	r2, 8001280 <__udivmoddi4+0xec>
 800127e:	deff      	udf	#255	; 0xff
 8001280:	fab2 f282 	clz	r2, r2
 8001284:	2a00      	cmp	r2, #0
 8001286:	f040 8091 	bne.w	80013ac <__udivmoddi4+0x218>
 800128a:	eba1 000c 	sub.w	r0, r1, ip
 800128e:	2101      	movs	r1, #1
 8001290:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001294:	fa1f fe8c 	uxth.w	lr, ip
 8001298:	fbb0 f3f7 	udiv	r3, r0, r7
 800129c:	fb07 0013 	mls	r0, r7, r3, r0
 80012a0:	0c25      	lsrs	r5, r4, #16
 80012a2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012a6:	fb0e f003 	mul.w	r0, lr, r3
 80012aa:	42a8      	cmp	r0, r5
 80012ac:	d908      	bls.n	80012c0 <__udivmoddi4+0x12c>
 80012ae:	eb1c 0505 	adds.w	r5, ip, r5
 80012b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80012b6:	d202      	bcs.n	80012be <__udivmoddi4+0x12a>
 80012b8:	42a8      	cmp	r0, r5
 80012ba:	f200 80ce 	bhi.w	800145a <__udivmoddi4+0x2c6>
 80012be:	4643      	mov	r3, r8
 80012c0:	1a2d      	subs	r5, r5, r0
 80012c2:	fbb5 f0f7 	udiv	r0, r5, r7
 80012c6:	fb07 5510 	mls	r5, r7, r0, r5
 80012ca:	fb0e fe00 	mul.w	lr, lr, r0
 80012ce:	b2a4      	uxth	r4, r4
 80012d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012d4:	45a6      	cmp	lr, r4
 80012d6:	d908      	bls.n	80012ea <__udivmoddi4+0x156>
 80012d8:	eb1c 0404 	adds.w	r4, ip, r4
 80012dc:	f100 35ff 	add.w	r5, r0, #4294967295
 80012e0:	d202      	bcs.n	80012e8 <__udivmoddi4+0x154>
 80012e2:	45a6      	cmp	lr, r4
 80012e4:	f200 80b6 	bhi.w	8001454 <__udivmoddi4+0x2c0>
 80012e8:	4628      	mov	r0, r5
 80012ea:	eba4 040e 	sub.w	r4, r4, lr
 80012ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012f2:	e79e      	b.n	8001232 <__udivmoddi4+0x9e>
 80012f4:	f1c1 0720 	rsb	r7, r1, #32
 80012f8:	408b      	lsls	r3, r1
 80012fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80012fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8001302:	fa25 fa07 	lsr.w	sl, r5, r7
 8001306:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800130a:	fbba f8f9 	udiv	r8, sl, r9
 800130e:	fa20 f307 	lsr.w	r3, r0, r7
 8001312:	fb09 aa18 	mls	sl, r9, r8, sl
 8001316:	408d      	lsls	r5, r1
 8001318:	fa1f fe8c 	uxth.w	lr, ip
 800131c:	431d      	orrs	r5, r3
 800131e:	fa00 f301 	lsl.w	r3, r0, r1
 8001322:	fb08 f00e 	mul.w	r0, r8, lr
 8001326:	0c2c      	lsrs	r4, r5, #16
 8001328:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800132c:	42a0      	cmp	r0, r4
 800132e:	fa02 f201 	lsl.w	r2, r2, r1
 8001332:	d90b      	bls.n	800134c <__udivmoddi4+0x1b8>
 8001334:	eb1c 0404 	adds.w	r4, ip, r4
 8001338:	f108 3aff 	add.w	sl, r8, #4294967295
 800133c:	f080 8088 	bcs.w	8001450 <__udivmoddi4+0x2bc>
 8001340:	42a0      	cmp	r0, r4
 8001342:	f240 8085 	bls.w	8001450 <__udivmoddi4+0x2bc>
 8001346:	f1a8 0802 	sub.w	r8, r8, #2
 800134a:	4464      	add	r4, ip
 800134c:	1a24      	subs	r4, r4, r0
 800134e:	fbb4 f0f9 	udiv	r0, r4, r9
 8001352:	fb09 4410 	mls	r4, r9, r0, r4
 8001356:	fb00 fe0e 	mul.w	lr, r0, lr
 800135a:	b2ad      	uxth	r5, r5
 800135c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001360:	45a6      	cmp	lr, r4
 8001362:	d908      	bls.n	8001376 <__udivmoddi4+0x1e2>
 8001364:	eb1c 0404 	adds.w	r4, ip, r4
 8001368:	f100 35ff 	add.w	r5, r0, #4294967295
 800136c:	d26c      	bcs.n	8001448 <__udivmoddi4+0x2b4>
 800136e:	45a6      	cmp	lr, r4
 8001370:	d96a      	bls.n	8001448 <__udivmoddi4+0x2b4>
 8001372:	3802      	subs	r0, #2
 8001374:	4464      	add	r4, ip
 8001376:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800137a:	fba0 9502 	umull	r9, r5, r0, r2
 800137e:	eba4 040e 	sub.w	r4, r4, lr
 8001382:	42ac      	cmp	r4, r5
 8001384:	46c8      	mov	r8, r9
 8001386:	46ae      	mov	lr, r5
 8001388:	d356      	bcc.n	8001438 <__udivmoddi4+0x2a4>
 800138a:	d053      	beq.n	8001434 <__udivmoddi4+0x2a0>
 800138c:	2e00      	cmp	r6, #0
 800138e:	d069      	beq.n	8001464 <__udivmoddi4+0x2d0>
 8001390:	ebb3 0208 	subs.w	r2, r3, r8
 8001394:	eb64 040e 	sbc.w	r4, r4, lr
 8001398:	fa22 f301 	lsr.w	r3, r2, r1
 800139c:	fa04 f707 	lsl.w	r7, r4, r7
 80013a0:	431f      	orrs	r7, r3
 80013a2:	40cc      	lsrs	r4, r1
 80013a4:	e9c6 7400 	strd	r7, r4, [r6]
 80013a8:	2100      	movs	r1, #0
 80013aa:	e747      	b.n	800123c <__udivmoddi4+0xa8>
 80013ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80013b0:	f1c2 0120 	rsb	r1, r2, #32
 80013b4:	fa25 f301 	lsr.w	r3, r5, r1
 80013b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013bc:	fa20 f101 	lsr.w	r1, r0, r1
 80013c0:	4095      	lsls	r5, r2
 80013c2:	430d      	orrs	r5, r1
 80013c4:	fbb3 f1f7 	udiv	r1, r3, r7
 80013c8:	fb07 3311 	mls	r3, r7, r1, r3
 80013cc:	fa1f fe8c 	uxth.w	lr, ip
 80013d0:	0c28      	lsrs	r0, r5, #16
 80013d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013d6:	fb01 f30e 	mul.w	r3, r1, lr
 80013da:	4283      	cmp	r3, r0
 80013dc:	fa04 f402 	lsl.w	r4, r4, r2
 80013e0:	d908      	bls.n	80013f4 <__udivmoddi4+0x260>
 80013e2:	eb1c 0000 	adds.w	r0, ip, r0
 80013e6:	f101 38ff 	add.w	r8, r1, #4294967295
 80013ea:	d22f      	bcs.n	800144c <__udivmoddi4+0x2b8>
 80013ec:	4283      	cmp	r3, r0
 80013ee:	d92d      	bls.n	800144c <__udivmoddi4+0x2b8>
 80013f0:	3902      	subs	r1, #2
 80013f2:	4460      	add	r0, ip
 80013f4:	1ac0      	subs	r0, r0, r3
 80013f6:	fbb0 f3f7 	udiv	r3, r0, r7
 80013fa:	fb07 0013 	mls	r0, r7, r3, r0
 80013fe:	b2ad      	uxth	r5, r5
 8001400:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001404:	fb03 f00e 	mul.w	r0, r3, lr
 8001408:	42a8      	cmp	r0, r5
 800140a:	d908      	bls.n	800141e <__udivmoddi4+0x28a>
 800140c:	eb1c 0505 	adds.w	r5, ip, r5
 8001410:	f103 38ff 	add.w	r8, r3, #4294967295
 8001414:	d216      	bcs.n	8001444 <__udivmoddi4+0x2b0>
 8001416:	42a8      	cmp	r0, r5
 8001418:	d914      	bls.n	8001444 <__udivmoddi4+0x2b0>
 800141a:	3b02      	subs	r3, #2
 800141c:	4465      	add	r5, ip
 800141e:	1a28      	subs	r0, r5, r0
 8001420:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001424:	e738      	b.n	8001298 <__udivmoddi4+0x104>
 8001426:	4631      	mov	r1, r6
 8001428:	4630      	mov	r0, r6
 800142a:	e707      	b.n	800123c <__udivmoddi4+0xa8>
 800142c:	462f      	mov	r7, r5
 800142e:	e6e4      	b.n	80011fa <__udivmoddi4+0x66>
 8001430:	4618      	mov	r0, r3
 8001432:	e6f9      	b.n	8001228 <__udivmoddi4+0x94>
 8001434:	454b      	cmp	r3, r9
 8001436:	d2a9      	bcs.n	800138c <__udivmoddi4+0x1f8>
 8001438:	ebb9 0802 	subs.w	r8, r9, r2
 800143c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001440:	3801      	subs	r0, #1
 8001442:	e7a3      	b.n	800138c <__udivmoddi4+0x1f8>
 8001444:	4643      	mov	r3, r8
 8001446:	e7ea      	b.n	800141e <__udivmoddi4+0x28a>
 8001448:	4628      	mov	r0, r5
 800144a:	e794      	b.n	8001376 <__udivmoddi4+0x1e2>
 800144c:	4641      	mov	r1, r8
 800144e:	e7d1      	b.n	80013f4 <__udivmoddi4+0x260>
 8001450:	46d0      	mov	r8, sl
 8001452:	e77b      	b.n	800134c <__udivmoddi4+0x1b8>
 8001454:	4464      	add	r4, ip
 8001456:	3802      	subs	r0, #2
 8001458:	e747      	b.n	80012ea <__udivmoddi4+0x156>
 800145a:	3b02      	subs	r3, #2
 800145c:	4465      	add	r5, ip
 800145e:	e72f      	b.n	80012c0 <__udivmoddi4+0x12c>
 8001460:	4608      	mov	r0, r1
 8001462:	e706      	b.n	8001272 <__udivmoddi4+0xde>
 8001464:	4631      	mov	r1, r6
 8001466:	e6e9      	b.n	800123c <__udivmoddi4+0xa8>

08001468 <__aeabi_idiv0>:
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop

0800146c <MAX31865_Init>:
//P.S. Максимальная скорость spi 5 МГц.
//Также обратите внимание, что Clock Polarity(CLPOL) = Low. Clock Phase(CPHA) = 2 Edge.
/*-------------------------------------------Для работы по spi-----------------------------------------------*/

/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/
void MAX31865_Init(uint8_t num_wires) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
	///Не вижу особого смысла выводить полную настройку модуля, поэтому сделаем
	///небольшое упрощение для конечного пользователя
	///все, что может настроить пользователь - это выбрать тип подключения
	///2,3 или 4 проводное
	/// \param num_wires - тип подключения датчика 2,3 или 4 проводное
	uint8_t MAX31865_Reinitialization_cnt = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]
	MAX31865_Sensor_Error = 0;
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <MAX31865_Init+0xa0>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
	uint8_t MAX31865_Configuration_register_write[] = { 0x80, 0x00 };
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	81bb      	strh	r3, [r7, #12]
	if (num_wires == 2 || num_wires == 4) {
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d002      	beq.n	8001490 <MAX31865_Init+0x24>
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b04      	cmp	r3, #4
 800148e:	d102      	bne.n	8001496 <MAX31865_Init+0x2a>
		MAX31865_Configuration_register_write[1] = 0xC3; //0xC3
 8001490:	23c3      	movs	r3, #195	; 0xc3
 8001492:	737b      	strb	r3, [r7, #13]
 8001494:	e004      	b.n	80014a0 <MAX31865_Init+0x34>
	} else if (num_wires == 3) {
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b03      	cmp	r3, #3
 800149a:	d101      	bne.n	80014a0 <MAX31865_Init+0x34>
		MAX31865_Configuration_register_write[1] = 0xD3; //0xD3
 800149c:	23d3      	movs	r3, #211	; 0xd3
 800149e:	737b      	strb	r3, [r7, #13]
	}
	cs_set();
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MAX31865_Init+0xa4>)
 80014a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014a6:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 80014a8:	f107 010c 	add.w	r1, r7, #12
 80014ac:	2364      	movs	r3, #100	; 0x64
 80014ae:	2202      	movs	r2, #2
 80014b0:	4818      	ldr	r0, [pc, #96]	; (8001514 <MAX31865_Init+0xa8>)
 80014b2:	f003 ff6b 	bl	800538c <HAL_SPI_Transmit>
	cs_reset();
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MAX31865_Init+0xa4>)
 80014b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014bc:	611a      	str	r2, [r3, #16]
	//Дабы достучаться до датчика после подачи питания, т.к. с первого раза инициализация может и не пройти, заведем цикл.
	while (MAX31865_Configuration_info() != 0xD1 && MAX31865_Configuration_info() != 0xC1) {
 80014be:	e014      	b.n	80014ea <MAX31865_Init+0x7e>
		MAX31865_Reinitialization_cnt++;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	3301      	adds	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]

		cs_set();
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MAX31865_Init+0xa4>)
 80014c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014cc:	611a      	str	r2, [r3, #16]
		HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 80014ce:	f107 010c 	add.w	r1, r7, #12
 80014d2:	2364      	movs	r3, #100	; 0x64
 80014d4:	2202      	movs	r2, #2
 80014d6:	480f      	ldr	r0, [pc, #60]	; (8001514 <MAX31865_Init+0xa8>)
 80014d8:	f003 ff58 	bl	800538c <HAL_SPI_Transmit>
		cs_reset();
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MAX31865_Init+0xa4>)
 80014de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014e2:	611a      	str	r2, [r3, #16]

		if (MAX31865_Reinitialization_cnt == 100) {
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d00a      	beq.n	8001500 <MAX31865_Init+0x94>
	while (MAX31865_Configuration_info() != 0xD1 && MAX31865_Configuration_info() != 0xC1) {
 80014ea:	f000 f815 	bl	8001518 <MAX31865_Configuration_info>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2bd1      	cmp	r3, #209	; 0xd1
 80014f2:	d006      	beq.n	8001502 <MAX31865_Init+0x96>
 80014f4:	f000 f810 	bl	8001518 <MAX31865_Configuration_info>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2bc1      	cmp	r3, #193	; 0xc1
 80014fc:	d1e0      	bne.n	80014c0 <MAX31865_Init+0x54>
			break;
		}

	}

}
 80014fe:	e000      	b.n	8001502 <MAX31865_Init+0x96>
			break;
 8001500:	bf00      	nop
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000210 	.word	0x20000210
 8001510:	40010800 	.word	0x40010800
 8001514:	200005c4 	.word	0x200005c4

08001518 <MAX31865_Configuration_info>:
/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/

/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/
uint8_t MAX31865_Configuration_info(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
	///Функция получения информации о конфигурации модуля MAX31865
	///Возвращает значение конфигурации.
	///Не удивляйтесь, если отправите при инициализации 0xC3, а получите 0xC1
	///(см. datasheet MAX31865 стр.14 "The fault status clear bit D1, self-clears to 0.")
	uint8_t read_data = 0x00;
 800151e:	2300      	movs	r3, #0
 8001520:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_Configuration = 0x00;
 8001522:	2300      	movs	r3, #0
 8001524:	71bb      	strb	r3, [r7, #6]
	cs_set();
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MAX31865_Configuration_info+0x40>)
 8001528:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800152c:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &read_data, 1, 100);
 800152e:	1df9      	adds	r1, r7, #7
 8001530:	2364      	movs	r3, #100	; 0x64
 8001532:	2201      	movs	r2, #1
 8001534:	4809      	ldr	r0, [pc, #36]	; (800155c <MAX31865_Configuration_info+0x44>)
 8001536:	f003 ff29 	bl	800538c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &MAX31865_Configuration, 1, 100);
 800153a:	1db9      	adds	r1, r7, #6
 800153c:	2364      	movs	r3, #100	; 0x64
 800153e:	2201      	movs	r2, #1
 8001540:	4806      	ldr	r0, [pc, #24]	; (800155c <MAX31865_Configuration_info+0x44>)
 8001542:	f004 f85f 	bl	8005604 <HAL_SPI_Receive>
	cs_reset();
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <MAX31865_Configuration_info+0x40>)
 8001548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154c:	611a      	str	r2, [r3, #16]
	return MAX31865_Configuration;
 800154e:	79bb      	ldrb	r3, [r7, #6]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40010800 	.word	0x40010800
 800155c:	200005c4 	.word	0x200005c4

08001560 <MAX31865_Get_Temperature>:
/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/

/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/
double MAX31865_Get_Temperature(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
		uint8_t Fault_Status; //Статус неисправности
	};

	struct rx_data_MAX31865 MAX31865_receieve_data;

	uint8_t MAX31865_start_address_of_the_poll = 0x01; //Адрес регистра, с которого начнем чтение данных
 8001566:	2301      	movs	r3, #1
 8001568:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_rx_buffer[7]; //буфер, куда будем складывать приходящие данные
	cs_set();
 800156a:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <MAX31865_Get_Temperature+0xc8>)
 800156c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001570:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &MAX31865_start_address_of_the_poll, 1, 100);
 8001572:	1df9      	adds	r1, r7, #7
 8001574:	2364      	movs	r3, #100	; 0x64
 8001576:	2201      	movs	r2, #1
 8001578:	482c      	ldr	r0, [pc, #176]	; (800162c <MAX31865_Get_Temperature+0xcc>)
 800157a:	f003 ff07 	bl	800538c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, MAX31865_rx_buffer, 7, 100);
 800157e:	4639      	mov	r1, r7
 8001580:	2364      	movs	r3, #100	; 0x64
 8001582:	2207      	movs	r2, #7
 8001584:	4829      	ldr	r0, [pc, #164]	; (800162c <MAX31865_Get_Temperature+0xcc>)
 8001586:	f004 f83d 	bl	8005604 <HAL_SPI_Receive>
	cs_reset();
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <MAX31865_Get_Temperature+0xc8>)
 800158c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001590:	611a      	str	r2, [r3, #16]
	MAX31865_receieve_data.RTD_Resistance_Registers = ((MAX31865_rx_buffer[0] << 8) | MAX31865_rx_buffer[1]) >> 1; //Данные регистров сопротивления
 8001592:	783b      	ldrb	r3, [r7, #0]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	787a      	ldrb	r2, [r7, #1]
 8001598:	4313      	orrs	r3, r2
 800159a:	105b      	asrs	r3, r3, #1
 800159c:	b29b      	uxth	r3, r3
 800159e:	813b      	strh	r3, [r7, #8]
	MAX31865_receieve_data.High_Fault_Threshold = ((MAX31865_rx_buffer[2] << 8) | MAX31865_rx_buffer[3]) >> 1; //Данные верхнего порого неисправности
 80015a0:	78bb      	ldrb	r3, [r7, #2]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	105b      	asrs	r3, r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	817b      	strh	r3, [r7, #10]
	MAX31865_receieve_data.Low_Fault_Threshold = (MAX31865_rx_buffer[4] << 8) | MAX31865_rx_buffer[5]; //Данные нижнего порога неисправности
 80015ae:	793b      	ldrb	r3, [r7, #4]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	797b      	ldrb	r3, [r7, #5]
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	b29b      	uxth	r3, r3
 80015be:	81bb      	strh	r3, [r7, #12]
	MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]; //Статус неисправности
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	73bb      	strb	r3, [r7, #14]
	if (MAX31865_receieve_data.Fault_Status > 0x00) {
 80015c4:	7bbb      	ldrb	r3, [r7, #14]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <MAX31865_Get_Temperature+0x7c>

		/*--------------Здесь Ваши действия по реагированию на ошибку датчика---------------*/
		MAX31865_Sensor_Error = 1;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MAX31865_Get_Temperature+0xd0>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
		//printf("Sensor Error!\r\n");

		/*----Автоматический сброс ошибки----*/
		MAX31865_Init(3);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f7ff ff4b 	bl	800146c <MAX31865_Init>
		MAX31865_Sensor_Error = 0;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MAX31865_Get_Temperature+0xd0>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]

	//printf("RTD Resistance Registers = %X\r\n", MAX31865_receieve_data.RTD_Resistance_Registers);
	//printf("Hight Fault Treshold = %X\r\n", MAX31865_receieve_data.High_Fault_Threshold);
	//printf("Low Fault Treshold = %X\r\n", MAX31865_receieve_data.Low_Fault_Threshold);
	//printf("Fault status = %X\r\n", MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]);
	data = ((double) MAX31865_receieve_data.RTD_Resistance_Registers * MAX31865_Rref ) / (double) 32768.0; // Replace 4000 by 400 for PT100
 80015dc:	893b      	ldrh	r3, [r7, #8]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff f824 	bl	800062c <__aeabi_ui2d>
 80015e4:	a30e      	add	r3, pc, #56	; (adr r3, 8001620 <MAX31865_Get_Temperature+0xc0>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7ff f899 	bl	8000720 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MAX31865_Get_Temperature+0xd4>)
 80015fc:	f7ff f9ba 	bl	8000974 <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//printf("Rrtd = %lf\n", data);
	return MAX31865_Get_Temperature_math(data);
 8001608:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800160c:	f000 f814 	bl	8001638 <MAX31865_Get_Temperature_math>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
}
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	00000000 	.word	0x00000000
 8001624:	407ac800 	.word	0x407ac800
 8001628:	40010800 	.word	0x40010800
 800162c:	200005c4 	.word	0x200005c4
 8001630:	20000210 	.word	0x20000210
 8001634:	40e00000 	.word	0x40e00000

08001638 <MAX31865_Get_Temperature_math>:
/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/

/*===============================================ПРЕОБРАЗОВАНИЕ СОПРОТИВЛЕНИЯ В ТЕМПЕРАТУРУ, СОГЛАСНО ГОСТ 6651-2009===============================================*/
double MAX31865_Get_Temperature_math(double PT100_Resistance) {
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	e9c7 0100 	strd	r0, r1, [r7]
	if (PT100_Resistance >= (double) 100.0) {
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4b72      	ldr	r3, [pc, #456]	; (8001810 <MAX31865_Get_Temperature_math+0x1d8>)
 8001648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800164c:	f7ff faee 	bl	8000c2c <__aeabi_dcmpge>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d03b      	beq.n	80016ce <MAX31865_Get_Temperature_math+0x96>
		double MAX31865_math_Discriminant = (double) 0.00001527480889 - ((double) -0.00000231 * (1 - (PT100_Resistance / MAX31865_PT100_R0 )));
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	4b6d      	ldr	r3, [pc, #436]	; (8001810 <MAX31865_Get_Temperature_math+0x1d8>)
 800165c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001660:	f7ff f988 	bl	8000974 <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	f04f 0000 	mov.w	r0, #0
 800166c:	4969      	ldr	r1, [pc, #420]	; (8001814 <MAX31865_Get_Temperature_math+0x1dc>)
 800166e:	f7fe fe9f 	bl	80003b0 <__aeabi_dsub>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	a351      	add	r3, pc, #324	; (adr r3, 80017c0 <MAX31865_Get_Temperature_math+0x188>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7ff f84e 	bl	8000720 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	a34e      	add	r3, pc, #312	; (adr r3, 80017c8 <MAX31865_Get_Temperature_math+0x190>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7fe fe8f 	bl	80003b4 <__adddf3>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		MAX31865_PT100_T = ((double) -0.0039083 + sqrt(MAX31865_math_Discriminant)) / (double) -0.000001155;
 800169e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016a2:	f009 fad7 	bl	800ac54 <sqrt>
 80016a6:	a34a      	add	r3, pc, #296	; (adr r3, 80017d0 <MAX31865_Get_Temperature_math+0x198>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7fe fe80 	bl	80003b0 <__aeabi_dsub>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	a347      	add	r3, pc, #284	; (adr r3, 80017d8 <MAX31865_Get_Temperature_math+0x1a0>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7ff f959 	bl	8000974 <__aeabi_ddiv>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4954      	ldr	r1, [pc, #336]	; (8001818 <MAX31865_Get_Temperature_math+0x1e0>)
 80016c8:	e9c1 2300 	strd	r2, r3, [r1]
 80016cc:	e06d      	b.n	80017aa <MAX31865_Get_Temperature_math+0x172>
	} else {
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	4b52      	ldr	r3, [pc, #328]	; (800181c <MAX31865_Get_Temperature_math+0x1e4>)
 80016d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016d8:	f009 fa54 	bl	800ab84 <pow>
 80016dc:	a340      	add	r3, pc, #256	; (adr r3, 80017e0 <MAX31865_Get_Temperature_math+0x1a8>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7ff f81d 	bl	8000720 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4614      	mov	r4, r2
 80016ec:	461d      	mov	r5, r3
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <MAX31865_Get_Temperature_math+0x1e8>)
 80016f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016f8:	f009 fa44 	bl	800ab84 <pow>
 80016fc:	a33a      	add	r3, pc, #232	; (adr r3, 80017e8 <MAX31865_Get_Temperature_math+0x1b0>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7ff f80d 	bl	8000720 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4620      	mov	r0, r4
 800170c:	4629      	mov	r1, r5
 800170e:	f7fe fe4f 	bl	80003b0 <__aeabi_dsub>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4614      	mov	r4, r2
 8001718:	461d      	mov	r5, r3
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	4b41      	ldr	r3, [pc, #260]	; (8001824 <MAX31865_Get_Temperature_math+0x1ec>)
 8001720:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001724:	f009 fa2e 	bl	800ab84 <pow>
 8001728:	a331      	add	r3, pc, #196	; (adr r3, 80017f0 <MAX31865_Get_Temperature_math+0x1b8>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7fe fff7 	bl	8000720 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4620      	mov	r0, r4
 8001738:	4629      	mov	r1, r5
 800173a:	f7fe fe39 	bl	80003b0 <__aeabi_dsub>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4614      	mov	r4, r2
 8001744:	461d      	mov	r5, r3
				+ (double) 0.002320232987 * pow(PT100_Resistance, 2) + (double) 2.229927824035 * PT100_Resistance - (double) 242.090854986215;
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800174e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001752:	f009 fa17 	bl	800ab84 <pow>
 8001756:	a328      	add	r3, pc, #160	; (adr r3, 80017f8 <MAX31865_Get_Temperature_math+0x1c0>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe ffe0 	bl	8000720 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4620      	mov	r0, r4
 8001766:	4629      	mov	r1, r5
 8001768:	f7fe fe24 	bl	80003b4 <__adddf3>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4614      	mov	r4, r2
 8001772:	461d      	mov	r5, r3
 8001774:	a322      	add	r3, pc, #136	; (adr r3, 8001800 <MAX31865_Get_Temperature_math+0x1c8>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800177e:	f7fe ffcf 	bl	8000720 <__aeabi_dmul>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4620      	mov	r0, r4
 8001788:	4629      	mov	r1, r5
 800178a:	f7fe fe13 	bl	80003b4 <__adddf3>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	a31c      	add	r3, pc, #112	; (adr r3, 8001808 <MAX31865_Get_Temperature_math+0x1d0>)
 8001798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179c:	f7fe fe08 	bl	80003b0 <__aeabi_dsub>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 80017a4:	491c      	ldr	r1, [pc, #112]	; (8001818 <MAX31865_Get_Temperature_math+0x1e0>)
 80017a6:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return MAX31865_PT100_T;
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <MAX31865_Get_Temperature_math+0x1e0>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	f3af 8000 	nop.w
 80017c0:	ee19ce88 	.word	0xee19ce88
 80017c4:	3ec360af 	.word	0x3ec360af
 80017c8:	dfc928d8 	.word	0xdfc928d8
 80017cc:	3ef0044c 	.word	0x3ef0044c
 80017d0:	4aed641c 	.word	0x4aed641c
 80017d4:	3f700226 	.word	0x3f700226
 80017d8:	ee19ce88 	.word	0xee19ce88
 80017dc:	beb360af 	.word	0xbeb360af
 80017e0:	e63e6cde 	.word	0xe63e6cde
 80017e4:	3df28de3 	.word	0x3df28de3
 80017e8:	5d50ae3a 	.word	0x5d50ae3a
 80017ec:	3e71c852 	.word	0x3e71c852
 80017f0:	6e664b7f 	.word	0x6e664b7f
 80017f4:	3e88c80b 	.word	0x3e88c80b
 80017f8:	998b63de 	.word	0x998b63de
 80017fc:	3f6301e1 	.word	0x3f6301e1
 8001800:	66255dbb 	.word	0x66255dbb
 8001804:	4001d6e4 	.word	0x4001d6e4
 8001808:	48b74f1a 	.word	0x48b74f1a
 800180c:	406e42e8 	.word	0x406e42e8
 8001810:	40590000 	.word	0x40590000
 8001814:	3ff00000 	.word	0x3ff00000
 8001818:	20000208 	.word	0x20000208
 800181c:	40140000 	.word	0x40140000
 8001820:	40100000 	.word	0x40100000
 8001824:	40080000 	.word	0x40080000

08001828 <MAX31865_2_Init>:
//Также обратите внимание, что Clock Polarity(CLPOL) = Low. Clock Phase(CPHA) = 2 Edge.
/*-------------------------------------------Для работы по spi-----------------------------------------------*/


/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/
void MAX31865_2_Init(uint8_t num_wires) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
	///Не вижу особого смысла выводить полную настройку модуля, поэтому сделаем
	///небольшое упрощение для конечного пользователя
	///все, что может настроить пользователь - это выбрать тип подключения
	///2,3 или 4 проводное
	/// \param num_wires - тип подключения датчика 2,3 или 4 проводное
	uint8_t MAX31865_Reinitialization_cnt2 = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
	MAX31865_Sensor_Error2 = 0;
 8001836:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <MAX31865_2_Init+0xa0>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
	uint8_t MAX31865_Configuration_register_write2[] = { 0x80, 0x00 };
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	81bb      	strh	r3, [r7, #12]
	if (num_wires == 2 || num_wires == 4) {
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d002      	beq.n	800184c <MAX31865_2_Init+0x24>
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b04      	cmp	r3, #4
 800184a:	d102      	bne.n	8001852 <MAX31865_2_Init+0x2a>
		MAX31865_Configuration_register_write2[1] = 0xC3; //0xC3
 800184c:	23c3      	movs	r3, #195	; 0xc3
 800184e:	737b      	strb	r3, [r7, #13]
 8001850:	e004      	b.n	800185c <MAX31865_2_Init+0x34>
	} else if (num_wires == 3) {
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d101      	bne.n	800185c <MAX31865_2_Init+0x34>
		MAX31865_Configuration_register_write2[1] = 0xD3; //0xD3
 8001858:	23d3      	movs	r3, #211	; 0xd3
 800185a:	737b      	strb	r3, [r7, #13]
	}
	cs_set2();
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <MAX31865_2_Init+0xa4>)
 800185e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001862:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi3, MAX31865_Configuration_register_write2, 2, 100);
 8001864:	f107 010c 	add.w	r1, r7, #12
 8001868:	2364      	movs	r3, #100	; 0x64
 800186a:	2202      	movs	r2, #2
 800186c:	4818      	ldr	r0, [pc, #96]	; (80018d0 <MAX31865_2_Init+0xa8>)
 800186e:	f003 fd8d 	bl	800538c <HAL_SPI_Transmit>
	cs_reset2();
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MAX31865_2_Init+0xa4>)
 8001874:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001878:	611a      	str	r2, [r3, #16]
	//Дабы достучаться до датчика после подачи питания, т.к. с первого раза инициализация может и не пройти, заведем цикл.
	while (MAX31865_Configuration_info2() != 0xD1 && MAX31865_Configuration_info2() != 0xC1) {
 800187a:	e014      	b.n	80018a6 <MAX31865_2_Init+0x7e>
		MAX31865_Reinitialization_cnt2++;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	3301      	adds	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]

		cs_set2();
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <MAX31865_2_Init+0xa4>)
 8001884:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001888:	611a      	str	r2, [r3, #16]
		HAL_SPI_Transmit(&hspi3, MAX31865_Configuration_register_write2, 2, 100);
 800188a:	f107 010c 	add.w	r1, r7, #12
 800188e:	2364      	movs	r3, #100	; 0x64
 8001890:	2202      	movs	r2, #2
 8001892:	480f      	ldr	r0, [pc, #60]	; (80018d0 <MAX31865_2_Init+0xa8>)
 8001894:	f003 fd7a 	bl	800538c <HAL_SPI_Transmit>
		cs_reset2();
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MAX31865_2_Init+0xa4>)
 800189a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800189e:	611a      	str	r2, [r3, #16]

		if (MAX31865_Reinitialization_cnt2 == 100) {
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b64      	cmp	r3, #100	; 0x64
 80018a4:	d00a      	beq.n	80018bc <MAX31865_2_Init+0x94>
	while (MAX31865_Configuration_info2() != 0xD1 && MAX31865_Configuration_info2() != 0xC1) {
 80018a6:	f000 f815 	bl	80018d4 <MAX31865_Configuration_info2>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2bd1      	cmp	r3, #209	; 0xd1
 80018ae:	d006      	beq.n	80018be <MAX31865_2_Init+0x96>
 80018b0:	f000 f810 	bl	80018d4 <MAX31865_Configuration_info2>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2bc1      	cmp	r3, #193	; 0xc1
 80018b8:	d1e0      	bne.n	800187c <MAX31865_2_Init+0x54>
			break;
		}

	}

}
 80018ba:	e000      	b.n	80018be <MAX31865_2_Init+0x96>
			break;
 80018bc:	bf00      	nop
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000220 	.word	0x20000220
 80018cc:	40010800 	.word	0x40010800
 80018d0:	2000061c 	.word	0x2000061c

080018d4 <MAX31865_Configuration_info2>:
/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/

/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/
uint8_t MAX31865_Configuration_info2(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
	///Функция получения информации о конфигурации модуля MAX31865
	///Возвращает значение конфигурации.
	///Не удивляйтесь, если отправите при инициализации 0xC3, а получите 0xC1
	///(см. datasheet MAX31865 стр.14 "The fault status clear bit D1, self-clears to 0.")
	uint8_t read_data2 = 0x00;
 80018da:	2300      	movs	r3, #0
 80018dc:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_Configuration2 = 0x00;
 80018de:	2300      	movs	r3, #0
 80018e0:	71bb      	strb	r3, [r7, #6]
	cs_set2();
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MAX31865_Configuration_info2+0x40>)
 80018e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018e8:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi3, &read_data2, 1, 100);
 80018ea:	1df9      	adds	r1, r7, #7
 80018ec:	2364      	movs	r3, #100	; 0x64
 80018ee:	2201      	movs	r2, #1
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <MAX31865_Configuration_info2+0x44>)
 80018f2:	f003 fd4b 	bl	800538c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &MAX31865_Configuration2, 1, 100);
 80018f6:	1db9      	adds	r1, r7, #6
 80018f8:	2364      	movs	r3, #100	; 0x64
 80018fa:	2201      	movs	r2, #1
 80018fc:	4806      	ldr	r0, [pc, #24]	; (8001918 <MAX31865_Configuration_info2+0x44>)
 80018fe:	f003 fe81 	bl	8005604 <HAL_SPI_Receive>
	cs_reset2();
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <MAX31865_Configuration_info2+0x40>)
 8001904:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001908:	611a      	str	r2, [r3, #16]
	return MAX31865_Configuration2;
 800190a:	79bb      	ldrb	r3, [r7, #6]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40010800 	.word	0x40010800
 8001918:	2000061c 	.word	0x2000061c
 800191c:	00000000 	.word	0x00000000

08001920 <MAX31865_Get_Temperature2>:
/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/

/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/
double MAX31865_Get_Temperature2(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
		uint8_t Fault_Status2; //Статус неисправности
	};

	struct rx_data_MAX31865_2 MAX31865_receieve_data2;

	uint8_t MAX31865_start_address_of_the_poll2 = 0x01; //Адрес регистра, с которого начнем чтение данных
 8001926:	2301      	movs	r3, #1
 8001928:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_rx_buffer2[7]; //буфер, куда будем складывать приходящие данные
	cs_set2();
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <MAX31865_Get_Temperature2+0xc8>)
 800192c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001930:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi3, &MAX31865_start_address_of_the_poll2, 1, 100);
 8001932:	1df9      	adds	r1, r7, #7
 8001934:	2364      	movs	r3, #100	; 0x64
 8001936:	2201      	movs	r2, #1
 8001938:	482c      	ldr	r0, [pc, #176]	; (80019ec <MAX31865_Get_Temperature2+0xcc>)
 800193a:	f003 fd27 	bl	800538c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, MAX31865_rx_buffer2, 7, 100);
 800193e:	4639      	mov	r1, r7
 8001940:	2364      	movs	r3, #100	; 0x64
 8001942:	2207      	movs	r2, #7
 8001944:	4829      	ldr	r0, [pc, #164]	; (80019ec <MAX31865_Get_Temperature2+0xcc>)
 8001946:	f003 fe5d 	bl	8005604 <HAL_SPI_Receive>
	cs_reset2();
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <MAX31865_Get_Temperature2+0xc8>)
 800194c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001950:	611a      	str	r2, [r3, #16]
	MAX31865_receieve_data2.RTD_Resistance_Registers2 = ((MAX31865_rx_buffer2[0] << 8) | MAX31865_rx_buffer2[1]) >> 1; //Данные регистров сопротивления
 8001952:	783b      	ldrb	r3, [r7, #0]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	787a      	ldrb	r2, [r7, #1]
 8001958:	4313      	orrs	r3, r2
 800195a:	105b      	asrs	r3, r3, #1
 800195c:	b29b      	uxth	r3, r3
 800195e:	813b      	strh	r3, [r7, #8]
	MAX31865_receieve_data2.High_Fault_Threshold2 = ((MAX31865_rx_buffer2[2] << 8) | MAX31865_rx_buffer2[3]) >> 1; //Данные верхнего порого неисправности
 8001960:	78bb      	ldrb	r3, [r7, #2]
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	4313      	orrs	r3, r2
 8001968:	105b      	asrs	r3, r3, #1
 800196a:	b29b      	uxth	r3, r3
 800196c:	817b      	strh	r3, [r7, #10]
	MAX31865_receieve_data2.Low_Fault_Threshold2 = (MAX31865_rx_buffer2[4] << 8) | MAX31865_rx_buffer2[5]; //Данные нижнего порога неисправности
 800196e:	793b      	ldrb	r3, [r7, #4]
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	b21a      	sxth	r2, r3
 8001974:	797b      	ldrb	r3, [r7, #5]
 8001976:	b21b      	sxth	r3, r3
 8001978:	4313      	orrs	r3, r2
 800197a:	b21b      	sxth	r3, r3
 800197c:	b29b      	uxth	r3, r3
 800197e:	81bb      	strh	r3, [r7, #12]
	MAX31865_receieve_data2.Fault_Status2 = MAX31865_rx_buffer2[6]; //Статус неисправности
 8001980:	79bb      	ldrb	r3, [r7, #6]
 8001982:	73bb      	strb	r3, [r7, #14]
	if (MAX31865_receieve_data2.Fault_Status2 > 0x00) {
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <MAX31865_Get_Temperature2+0x7c>

		/*--------------Здесь Ваши действия по реагированию на ошибку датчика---------------*/
		MAX31865_Sensor_Error2 = 1;
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <MAX31865_Get_Temperature2+0xd0>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
		//printf("Sensor Error!\r\n");

		/*----Автоматический сброс ошибки----*/
		MAX31865_2_Init(3);
 8001990:	2003      	movs	r0, #3
 8001992:	f7ff ff49 	bl	8001828 <MAX31865_2_Init>
		MAX31865_Sensor_Error2 = 0;
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <MAX31865_Get_Temperature2+0xd0>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]

	//printf("RTD Resistance Registers = %X\r\n", MAX31865_receieve_data.RTD_Resistance_Registers);
	//printf("Hight Fault Treshold = %X\r\n", MAX31865_receieve_data.High_Fault_Threshold);
	//printf("Low Fault Treshold = %X\r\n", MAX31865_receieve_data.Low_Fault_Threshold);
	//printf("Fault status = %X\r\n", MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]);
	data2 = ((double) MAX31865_receieve_data2.RTD_Resistance_Registers2 * MAX31865_Rref ) / (double) 32768.0; // Replace 4000 by 400 for PT100
 800199c:	893b      	ldrh	r3, [r7, #8]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fe44 	bl	800062c <__aeabi_ui2d>
 80019a4:	a30e      	add	r3, pc, #56	; (adr r3, 80019e0 <MAX31865_Get_Temperature2+0xc0>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe feb9 	bl	8000720 <__aeabi_dmul>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MAX31865_Get_Temperature2+0xd4>)
 80019bc:	f7fe ffda 	bl	8000974 <__aeabi_ddiv>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//printf("Rrtd = %lf\n", data);
	return MAX31865_Get_Temperature_math2(data2);
 80019c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019cc:	f000 f814 	bl	80019f8 <MAX31865_Get_Temperature_math2>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
}
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	00000000 	.word	0x00000000
 80019e4:	407ac800 	.word	0x407ac800
 80019e8:	40010800 	.word	0x40010800
 80019ec:	2000061c 	.word	0x2000061c
 80019f0:	20000220 	.word	0x20000220
 80019f4:	40e00000 	.word	0x40e00000

080019f8 <MAX31865_Get_Temperature_math2>:
/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/

/*===============================================ПРЕОБРАЗОВАНИЕ СОПРОТИВЛЕНИЯ В ТЕМПЕРАТУРУ, СОГЛАСНО ГОСТ 6651-2009===============================================*/
double MAX31865_Get_Temperature_math2(double PT100_Resistance) {
 80019f8:	b5b0      	push	{r4, r5, r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	e9c7 0100 	strd	r0, r1, [r7]
	if (PT100_Resistance >= (double) 100.0) {
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <MAX31865_Get_Temperature_math2+0x1d8>)
 8001a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a0c:	f7ff f90e 	bl	8000c2c <__aeabi_dcmpge>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d03b      	beq.n	8001a8e <MAX31865_Get_Temperature_math2+0x96>
		double MAX31865_math_Discriminant = (double) 0.00001527480889 - ((double) -0.00000231 * (1 - (PT100_Resistance / MAX31865_PT100_R0 )));
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	4b6d      	ldr	r3, [pc, #436]	; (8001bd0 <MAX31865_Get_Temperature_math2+0x1d8>)
 8001a1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a20:	f7fe ffa8 	bl	8000974 <__aeabi_ddiv>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	4969      	ldr	r1, [pc, #420]	; (8001bd4 <MAX31865_Get_Temperature_math2+0x1dc>)
 8001a2e:	f7fe fcbf 	bl	80003b0 <__aeabi_dsub>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	a351      	add	r3, pc, #324	; (adr r3, 8001b80 <MAX31865_Get_Temperature_math2+0x188>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe fe6e 	bl	8000720 <__aeabi_dmul>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	a34e      	add	r3, pc, #312	; (adr r3, 8001b88 <MAX31865_Get_Temperature_math2+0x190>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f7fe fcaf 	bl	80003b4 <__adddf3>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		MAX31865_PT100_T2 = ((double) -0.0039083 + sqrt(MAX31865_math_Discriminant)) / (double) -0.000001155;
 8001a5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a62:	f009 f8f7 	bl	800ac54 <sqrt>
 8001a66:	a34a      	add	r3, pc, #296	; (adr r3, 8001b90 <MAX31865_Get_Temperature_math2+0x198>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fca0 	bl	80003b0 <__aeabi_dsub>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	a347      	add	r3, pc, #284	; (adr r3, 8001b98 <MAX31865_Get_Temperature_math2+0x1a0>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	f7fe ff79 	bl	8000974 <__aeabi_ddiv>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4954      	ldr	r1, [pc, #336]	; (8001bd8 <MAX31865_Get_Temperature_math2+0x1e0>)
 8001a88:	e9c1 2300 	strd	r2, r3, [r1]
 8001a8c:	e06d      	b.n	8001b6a <MAX31865_Get_Temperature_math2+0x172>
	} else {
		MAX31865_PT100_T2 = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b52      	ldr	r3, [pc, #328]	; (8001bdc <MAX31865_Get_Temperature_math2+0x1e4>)
 8001a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a98:	f009 f874 	bl	800ab84 <pow>
 8001a9c:	a340      	add	r3, pc, #256	; (adr r3, 8001ba0 <MAX31865_Get_Temperature_math2+0x1a8>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fe3d 	bl	8000720 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4614      	mov	r4, r2
 8001aac:	461d      	mov	r5, r3
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <MAX31865_Get_Temperature_math2+0x1e8>)
 8001ab4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ab8:	f009 f864 	bl	800ab84 <pow>
 8001abc:	a33a      	add	r3, pc, #232	; (adr r3, 8001ba8 <MAX31865_Get_Temperature_math2+0x1b0>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fe2d 	bl	8000720 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4620      	mov	r0, r4
 8001acc:	4629      	mov	r1, r5
 8001ace:	f7fe fc6f 	bl	80003b0 <__aeabi_dsub>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4614      	mov	r4, r2
 8001ad8:	461d      	mov	r5, r3
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4b41      	ldr	r3, [pc, #260]	; (8001be4 <MAX31865_Get_Temperature_math2+0x1ec>)
 8001ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ae4:	f009 f84e 	bl	800ab84 <pow>
 8001ae8:	a331      	add	r3, pc, #196	; (adr r3, 8001bb0 <MAX31865_Get_Temperature_math2+0x1b8>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fe17 	bl	8000720 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4620      	mov	r0, r4
 8001af8:	4629      	mov	r1, r5
 8001afa:	f7fe fc59 	bl	80003b0 <__aeabi_dsub>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4614      	mov	r4, r2
 8001b04:	461d      	mov	r5, r3
		+ (double) 0.002320232987 * pow(PT100_Resistance, 2) + (double) 2.229927824035 * PT100_Resistance - (double) 242.090854986215;
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b12:	f009 f837 	bl	800ab84 <pow>
 8001b16:	a328      	add	r3, pc, #160	; (adr r3, 8001bb8 <MAX31865_Get_Temperature_math2+0x1c0>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	f7fe fe00 	bl	8000720 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4620      	mov	r0, r4
 8001b26:	4629      	mov	r1, r5
 8001b28:	f7fe fc44 	bl	80003b4 <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4614      	mov	r4, r2
 8001b32:	461d      	mov	r5, r3
 8001b34:	a322      	add	r3, pc, #136	; (adr r3, 8001bc0 <MAX31865_Get_Temperature_math2+0x1c8>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b3e:	f7fe fdef 	bl	8000720 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4620      	mov	r0, r4
 8001b48:	4629      	mov	r1, r5
 8001b4a:	f7fe fc33 	bl	80003b4 <__adddf3>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	a31c      	add	r3, pc, #112	; (adr r3, 8001bc8 <MAX31865_Get_Temperature_math2+0x1d0>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fc28 	bl	80003b0 <__aeabi_dsub>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
		MAX31865_PT100_T2 = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 8001b64:	491c      	ldr	r1, [pc, #112]	; (8001bd8 <MAX31865_Get_Temperature_math2+0x1e0>)
 8001b66:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return MAX31865_PT100_T2;
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <MAX31865_Get_Temperature_math2+0x1e0>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	f3af 8000 	nop.w
 8001b80:	ee19ce88 	.word	0xee19ce88
 8001b84:	3ec360af 	.word	0x3ec360af
 8001b88:	dfc928d8 	.word	0xdfc928d8
 8001b8c:	3ef0044c 	.word	0x3ef0044c
 8001b90:	4aed641c 	.word	0x4aed641c
 8001b94:	3f700226 	.word	0x3f700226
 8001b98:	ee19ce88 	.word	0xee19ce88
 8001b9c:	beb360af 	.word	0xbeb360af
 8001ba0:	e63e6cde 	.word	0xe63e6cde
 8001ba4:	3df28de3 	.word	0x3df28de3
 8001ba8:	5d50ae3a 	.word	0x5d50ae3a
 8001bac:	3e71c852 	.word	0x3e71c852
 8001bb0:	6e664b7f 	.word	0x6e664b7f
 8001bb4:	3e88c80b 	.word	0x3e88c80b
 8001bb8:	998b63de 	.word	0x998b63de
 8001bbc:	3f6301e1 	.word	0x3f6301e1
 8001bc0:	66255dbb 	.word	0x66255dbb
 8001bc4:	4001d6e4 	.word	0x4001d6e4
 8001bc8:	48b74f1a 	.word	0x48b74f1a
 8001bcc:	406e42e8 	.word	0x406e42e8
 8001bd0:	40590000 	.word	0x40590000
 8001bd4:	3ff00000 	.word	0x3ff00000
 8001bd8:	20000218 	.word	0x20000218
 8001bdc:	40140000 	.word	0x40140000
 8001be0:	40100000 	.word	0x40100000
 8001be4:	40080000 	.word	0x40080000

08001be8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <vApplicationGetIdleTaskMemory+0x28>)
 8001bf8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <vApplicationGetIdleTaskMemory+0x2c>)
 8001bfe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20000224 	.word	0x20000224
 8001c14:	200002d8 	.word	0x200002d8

08001c18 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b0c0      	sub	sp, #256	; 0x100
 8001c1c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c1e:	f001 f917 	bl	8002e50 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c22:	f000 f8e3 	bl	8001dec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c26:	f000 fa37 	bl	8002098 <MX_GPIO_Init>
	MX_DMA_Init();
 8001c2a:	f000 fa17 	bl	800205c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001c2e:	f000 f9eb 	bl	8002008 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8001c32:	f000 f97d 	bl	8001f30 <MX_SPI1_Init>
	MX_SPI3_Init();
 8001c36:	f000 f9b1 	bl	8001f9c <MX_SPI3_Init>
	MX_ADC1_Init();
 8001c3a:	f000 f93b 	bl	8001eb4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	MAX31865_Init(3); // num of wires
 8001c3e:	2003      	movs	r0, #3
 8001c40:	f7ff fc14 	bl	800146c <MAX31865_Init>
	MAX31865_2_Init(3); // num of wires
 8001c44:	2003      	movs	r0, #3
 8001c46:	f7ff fdef 	bl	8001828 <MAX31865_2_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001c4a:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <main+0x18c>)
 8001c4c:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8001c50:	461d      	mov	r5, r3
 8001c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f004 fcab 	bl	80065c0 <osThreadCreate>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a4e      	ldr	r2, [pc, #312]	; (8001da8 <main+0x190>)
 8001c6e:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task2 */
	osThreadDef(Task2, Task2_Init, osPriorityNormal, 0, 128);
 8001c70:	4b4e      	ldr	r3, [pc, #312]	; (8001dac <main+0x194>)
 8001c72:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8001c76:	461d      	mov	r5, r3
 8001c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8001c84:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f004 fc98 	bl	80065c0 <osThreadCreate>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4a47      	ldr	r2, [pc, #284]	; (8001db0 <main+0x198>)
 8001c94:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task3 */
	osThreadDef(Task3, Task3_Init, osPriorityNormal, 0, 128);
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <main+0x19c>)
 8001c98:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001c9c:	461d      	mov	r5, r3
 8001c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ca2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ca6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8001caa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f004 fc85 	bl	80065c0 <osThreadCreate>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4a3f      	ldr	r2, [pc, #252]	; (8001db8 <main+0x1a0>)
 8001cba:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task4 */
	osThreadDef(Task4, Task4_Init, osPriorityNormal, 0, 128);
 8001cbc:	4b3f      	ldr	r3, [pc, #252]	; (8001dbc <main+0x1a4>)
 8001cbe:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001cc2:	461d      	mov	r5, r3
 8001cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ccc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task4Handle = osThreadCreate(osThread(Task4), NULL);
 8001cd0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f004 fc72 	bl	80065c0 <osThreadCreate>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a38      	ldr	r2, [pc, #224]	; (8001dc0 <main+0x1a8>)
 8001ce0:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task5 */
	osThreadDef(Task5, Task5_Init, osPriorityNormal, 0, 128);
 8001ce2:	4b38      	ldr	r3, [pc, #224]	; (8001dc4 <main+0x1ac>)
 8001ce4:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001ce8:	461d      	mov	r5, r3
 8001cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task5Handle = osThreadCreate(osThread(Task5), NULL);
 8001cf6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f004 fc5f 	bl	80065c0 <osThreadCreate>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4a30      	ldr	r2, [pc, #192]	; (8001dc8 <main+0x1b0>)
 8001d06:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task6 */
	osThreadDef(Task6, Task6_Init, osPriorityNormal, 0, 128);
 8001d08:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <main+0x1b4>)
 8001d0a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001d0e:	461d      	mov	r5, r3
 8001d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task6Handle = osThreadCreate(osThread(Task6), NULL);
 8001d1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f004 fc4c 	bl	80065c0 <osThreadCreate>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4a29      	ldr	r2, [pc, #164]	; (8001dd0 <main+0x1b8>)
 8001d2c:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task7 */
	osThreadDef(Task7, Task7_Init, osPriorityNormal, 0, 128);
 8001d2e:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <main+0x1bc>)
 8001d30:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001d34:	461d      	mov	r5, r3
 8001d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task7Handle = osThreadCreate(osThread(Task7), NULL);
 8001d42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f004 fc39 	bl	80065c0 <osThreadCreate>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4a21      	ldr	r2, [pc, #132]	; (8001dd8 <main+0x1c0>)
 8001d52:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task8 */
	osThreadDef(Task8, Task8_Init, osPriorityNormal, 0, 128);
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <main+0x1c4>)
 8001d56:	f107 0420 	add.w	r4, r7, #32
 8001d5a:	461d      	mov	r5, r3
 8001d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task8Handle = osThreadCreate(osThread(Task8), NULL);
 8001d68:	f107 0320 	add.w	r3, r7, #32
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f004 fc26 	bl	80065c0 <osThreadCreate>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4a1a      	ldr	r2, [pc, #104]	; (8001de0 <main+0x1c8>)
 8001d78:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task9 */
	osThreadDef(Task9, Task9_Init, osPriorityIdle, 0, 128);
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <main+0x1cc>)
 8001d7c:	1d3c      	adds	r4, r7, #4
 8001d7e:	461d      	mov	r5, r3
 8001d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task9Handle = osThreadCreate(osThread(Task9), NULL);
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f004 fc15 	bl	80065c0 <osThreadCreate>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <main+0x1d0>)
 8001d9a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001d9c:	f004 fc09 	bl	80065b2 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001da0:	e7fe      	b.n	8001da0 <main+0x188>
 8001da2:	bf00      	nop
 8001da4:	0800b9fc 	.word	0x0800b9fc
 8001da8:	200006b8 	.word	0x200006b8
 8001dac:	0800ba18 	.word	0x0800ba18
 8001db0:	200006bc 	.word	0x200006bc
 8001db4:	0800ba34 	.word	0x0800ba34
 8001db8:	200006c0 	.word	0x200006c0
 8001dbc:	0800ba50 	.word	0x0800ba50
 8001dc0:	200006c4 	.word	0x200006c4
 8001dc4:	0800ba6c 	.word	0x0800ba6c
 8001dc8:	200006c8 	.word	0x200006c8
 8001dcc:	0800ba88 	.word	0x0800ba88
 8001dd0:	200006cc 	.word	0x200006cc
 8001dd4:	0800baa4 	.word	0x0800baa4
 8001dd8:	200006d0 	.word	0x200006d0
 8001ddc:	0800bac0 	.word	0x0800bac0
 8001de0:	200006d4 	.word	0x200006d4
 8001de4:	0800badc 	.word	0x0800badc
 8001de8:	200006d8 	.word	0x200006d8

08001dec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b09c      	sub	sp, #112	; 0x70
 8001df0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001df6:	2238      	movs	r2, #56	; 0x38
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f005 fefd 	bl	8007bfa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	2220      	movs	r2, #32
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f005 feef 	bl	8007bfa <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e24:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e32:	2302      	movs	r3, #2
 8001e34:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e3c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e40:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f002 f9f4 	bl	8004238 <HAL_RCC_OscConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8001e56:	f000 fcfd 	bl	8002854 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e5a:	230f      	movs	r3, #15
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e74:	2102      	movs	r1, #2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 fcf4 	bl	8004864 <HAL_RCC_ClockConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8001e82:	f000 fce7 	bl	8002854 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e86:	2302      	movs	r3, #2
 8001e88:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e8e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 ff62 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <SystemClock_Config+0xb6>
	{
		Error_Handler();
 8001e9e:	f000 fcd9 	bl	8002854 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8001ea2:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <SystemClock_Config+0xc4>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	3770      	adds	r7, #112	; 0x70
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	42420070 	.word	0x42420070

08001eb4 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <MX_ADC1_Init+0x74>)
 8001ec6:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <MX_ADC1_Init+0x78>)
 8001ec8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <MX_ADC1_Init+0x74>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <MX_ADC1_Init+0x74>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <MX_ADC1_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <MX_ADC1_Init+0x74>)
 8001ede:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001ee2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <MX_ADC1_Init+0x74>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <MX_ADC1_Init+0x74>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ef0:	480d      	ldr	r0, [pc, #52]	; (8001f28 <MX_ADC1_Init+0x74>)
 8001ef2:	f001 f803 	bl	8002efc <HAL_ADC_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8001efc:	f000 fcaa 	bl	8002854 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8001f00:	230a      	movs	r3, #10
 8001f02:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f04:	2301      	movs	r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001f08:	2305      	movs	r3, #5
 8001f0a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <MX_ADC1_Init+0x74>)
 8001f12:	f001 fab7 	bl	8003484 <HAL_ADC_ConfigChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8001f1c:	f000 fc9a 	bl	8002854 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000550 	.word	0x20000550
 8001f2c:	40012400 	.word	0x40012400

08001f30 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <MX_SPI1_Init+0x64>)
 8001f36:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <MX_SPI1_Init+0x68>)
 8001f38:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <MX_SPI1_Init+0x64>)
 8001f3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f40:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <MX_SPI1_Init+0x64>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <MX_SPI1_Init+0x64>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <MX_SPI1_Init+0x64>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <MX_SPI1_Init+0x64>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_SPI1_Init+0x64>)
 8001f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f60:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <MX_SPI1_Init+0x64>)
 8001f64:	2218      	movs	r2, #24
 8001f66:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <MX_SPI1_Init+0x64>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MX_SPI1_Init+0x64>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f74:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <MX_SPI1_Init+0x64>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_SPI1_Init+0x64>)
 8001f7c:	220a      	movs	r2, #10
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f80:	4804      	ldr	r0, [pc, #16]	; (8001f94 <MX_SPI1_Init+0x64>)
 8001f82:	f003 f97f 	bl	8005284 <HAL_SPI_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001f8c:	f000 fc62 	bl	8002854 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	200005c4 	.word	0x200005c4
 8001f98:	40013000 	.word	0x40013000

08001f9c <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001fa0:	4b17      	ldr	r3, [pc, #92]	; (8002000 <MX_SPI3_Init+0x64>)
 8001fa2:	4a18      	ldr	r2, [pc, #96]	; (8002004 <MX_SPI3_Init+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001fa6:	4b16      	ldr	r3, [pc, #88]	; (8002000 <MX_SPI3_Init+0x64>)
 8001fa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fac:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <MX_SPI3_Init+0x64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fb4:	4b12      	ldr	r3, [pc, #72]	; (8002000 <MX_SPI3_Init+0x64>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_SPI3_Init+0x64>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <MX_SPI3_Init+0x64>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_SPI3_Init+0x64>)
 8001fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fcc:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001fce:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_SPI3_Init+0x64>)
 8001fd0:	2218      	movs	r2, #24
 8001fd2:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <MX_SPI3_Init+0x64>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_SPI3_Init+0x64>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe0:	4b07      	ldr	r3, [pc, #28]	; (8002000 <MX_SPI3_Init+0x64>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_SPI3_Init+0x64>)
 8001fe8:	220a      	movs	r2, #10
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001fec:	4804      	ldr	r0, [pc, #16]	; (8002000 <MX_SPI3_Init+0x64>)
 8001fee:	f003 f949 	bl	8005284 <HAL_SPI_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_SPI3_Init+0x60>
	{
		Error_Handler();
 8001ff8:	f000 fc2c 	bl	8002854 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	2000061c 	.word	0x2000061c
 8002004:	40003c00 	.word	0x40003c00

08002008 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 800200e:	4a12      	ldr	r2, [pc, #72]	; (8002058 <MX_USART2_UART_Init+0x50>)
 8002010:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 8002014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002018:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 800202e:	220c      	movs	r2, #12
 8002030:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 8002040:	f004 f8e8 	bl	8006214 <HAL_UART_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800204a:	f000 fc03 	bl	8002854 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000674 	.word	0x20000674
 8002058:	40004400 	.word	0x40004400

0800205c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_DMA_Init+0x38>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	4a0b      	ldr	r2, [pc, #44]	; (8002094 <MX_DMA_Init+0x38>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6153      	str	r3, [r2, #20]
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_DMA_Init+0x38>)
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2105      	movs	r1, #5
 800207e:	200b      	movs	r0, #11
 8002080:	f001 fc49 	bl	8003916 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002084:	200b      	movs	r0, #11
 8002086:	f001 fc62 	bl	800394e <HAL_NVIC_EnableIRQ>

}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000

08002098 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209e:	f107 0310 	add.w	r3, r7, #16
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80020ac:	4b37      	ldr	r3, [pc, #220]	; (800218c <MX_GPIO_Init+0xf4>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	4a36      	ldr	r2, [pc, #216]	; (800218c <MX_GPIO_Init+0xf4>)
 80020b2:	f043 0320 	orr.w	r3, r3, #32
 80020b6:	6193      	str	r3, [r2, #24]
 80020b8:	4b34      	ldr	r3, [pc, #208]	; (800218c <MX_GPIO_Init+0xf4>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80020c4:	4b31      	ldr	r3, [pc, #196]	; (800218c <MX_GPIO_Init+0xf4>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a30      	ldr	r2, [pc, #192]	; (800218c <MX_GPIO_Init+0xf4>)
 80020ca:	f043 0310 	orr.w	r3, r3, #16
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b2e      	ldr	r3, [pc, #184]	; (800218c <MX_GPIO_Init+0xf4>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020dc:	4b2b      	ldr	r3, [pc, #172]	; (800218c <MX_GPIO_Init+0xf4>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	4a2a      	ldr	r2, [pc, #168]	; (800218c <MX_GPIO_Init+0xf4>)
 80020e2:	f043 0304 	orr.w	r3, r3, #4
 80020e6:	6193      	str	r3, [r2, #24]
 80020e8:	4b28      	ldr	r3, [pc, #160]	; (800218c <MX_GPIO_Init+0xf4>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <MX_GPIO_Init+0xf4>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	4a24      	ldr	r2, [pc, #144]	; (800218c <MX_GPIO_Init+0xf4>)
 80020fa:	f043 0308 	orr.w	r3, r3, #8
 80020fe:	6193      	str	r3, [r2, #24]
 8002100:	4b22      	ldr	r3, [pc, #136]	; (800218c <MX_GPIO_Init+0xf4>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800210c:	2200      	movs	r2, #0
 800210e:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8002112:	481f      	ldr	r0, [pc, #124]	; (8002190 <MX_GPIO_Init+0xf8>)
 8002114:	f002 f877 	bl	8004206 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Sensor1_Pin Sensor7_Pin Sensor6_Pin Sensor5_Pin */
	GPIO_InitStruct.Pin = Sensor1_Pin|Sensor7_Pin|Sensor6_Pin|Sensor5_Pin;
 8002118:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800211c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002126:	f107 0310 	add.w	r3, r7, #16
 800212a:	4619      	mov	r1, r3
 800212c:	4819      	ldr	r0, [pc, #100]	; (8002194 <MX_GPIO_Init+0xfc>)
 800212e:	f001 fecf 	bl	8003ed0 <HAL_GPIO_Init>

	/*Configure GPIO pins : Sensor4_Pin Sensor3_Pin Sensor2_Pin */
	GPIO_InitStruct.Pin = Sensor4_Pin|Sensor3_Pin|Sensor2_Pin;
 8002132:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002136:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	4619      	mov	r1, r3
 8002146:	4814      	ldr	r0, [pc, #80]	; (8002198 <MX_GPIO_Init+0x100>)
 8002148:	f001 fec2 	bl	8003ed0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_CS_Pin PA11 PA12 */
	GPIO_InitStruct.Pin = SPI1_CS_Pin|GPIO_PIN_11|GPIO_PIN_12;
 800214c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002150:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002152:	2301      	movs	r3, #1
 8002154:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2302      	movs	r3, #2
 800215c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215e:	f107 0310 	add.w	r3, r7, #16
 8002162:	4619      	mov	r1, r3
 8002164:	480a      	ldr	r0, [pc, #40]	; (8002190 <MX_GPIO_Init+0xf8>)
 8002166:	f001 feb3 	bl	8003ed0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI3_CS1_Pin */
	GPIO_InitStruct.Pin = SPI3_CS1_Pin;
 800216a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800216e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <MX_GPIO_Init+0x104>)
 8002172:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI3_CS1_GPIO_Port, &GPIO_InitStruct);
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	4619      	mov	r1, r3
 800217e:	4804      	ldr	r0, [pc, #16]	; (8002190 <MX_GPIO_Init+0xf8>)
 8002180:	f001 fea6 	bl	8003ed0 <HAL_GPIO_Init>

}
 8002184:	bf00      	nop
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	40010800 	.word	0x40010800
 8002194:	40010c00 	.word	0x40010c00
 8002198:	40011000 	.word	0x40011000
 800219c:	10110000 	.word	0x10110000

080021a0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		i++;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <StartDefaultTask+0x50>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <StartDefaultTask+0x50>)
 80021b0:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021b8:	480e      	ldr	r0, [pc, #56]	; (80021f4 <StartDefaultTask+0x54>)
 80021ba:	f002 f824 	bl	8004206 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80021be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021c2:	f000 fe77 	bl	8002eb4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021c6:	2200      	movs	r2, #0
 80021c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021cc:	4809      	ldr	r0, [pc, #36]	; (80021f4 <StartDefaultTask+0x54>)
 80021ce:	f002 f81a 	bl	8004206 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80021d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021d6:	f000 fe6d 	bl	8002eb4 <HAL_Delay>
		if(i==3){
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <StartDefaultTask+0x50>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d102      	bne.n	80021e8 <StartDefaultTask+0x48>
			task2=1;
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <StartDefaultTask+0x58>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1);
 80021e8:	2001      	movs	r0, #1
 80021ea:	f004 fa35 	bl	8006658 <osDelay>
		i++;
 80021ee:	e7db      	b.n	80021a8 <StartDefaultTask+0x8>
 80021f0:	200004dc 	.word	0x200004dc
 80021f4:	40010800 	.word	0x40010800
 80021f8:	200004d8 	.word	0x200004d8

080021fc <Task2_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task2_Init */
void Task2_Init(void const * argument)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task2_Init */
	/* Infinite loop */
	for(;;)
	{
		if(task2==1){
 8002204:	4b0d      	ldr	r3, [pc, #52]	; (800223c <Task2_Init+0x40>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <Task2_Init+0x38>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800220c:	2201      	movs	r2, #1
 800220e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002212:	480b      	ldr	r0, [pc, #44]	; (8002240 <Task2_Init+0x44>)
 8002214:	f001 fff7 	bl	8004206 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8002218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800221c:	f000 fe4a 	bl	8002eb4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002220:	2200      	movs	r2, #0
 8002222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002226:	4806      	ldr	r0, [pc, #24]	; (8002240 <Task2_Init+0x44>)
 8002228:	f001 ffed 	bl	8004206 <HAL_GPIO_WritePin>
			HAL_Delay(1000);}
 800222c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002230:	f000 fe40 	bl	8002eb4 <HAL_Delay>
		osDelay(1);
 8002234:	2001      	movs	r0, #1
 8002236:	f004 fa0f 	bl	8006658 <osDelay>
		if(task2==1){
 800223a:	e7e3      	b.n	8002204 <Task2_Init+0x8>
 800223c:	200004d8 	.word	0x200004d8
 8002240:	40010800 	.word	0x40010800

08002244 <Task3_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task3_Init */
void Task3_Init(void const * argument)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task3_Init */
	/* Infinite loop */
	for(;;)
	{
		ADC_ChannelConfTypeDef sConfig = {3};
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	2303      	movs	r3, #3
 800225a:	60fb      	str	r3, [r7, #12]

		sConfig.Channel = ADC_CHANNEL_10;
 800225c:	230a      	movs	r3, #10
 800225e:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8002260:	2301      	movs	r3, #1
 8002262:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002264:	2305      	movs	r3, #5
 8002266:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	4619      	mov	r1, r3
 800226e:	486b      	ldr	r0, [pc, #428]	; (800241c <Task3_Init+0x1d8>)
 8002270:	f001 f908 	bl	8003484 <HAL_ADC_ConfigChannel>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <Task3_Init+0x3a>
		{
			Error_Handler();
 800227a:	f000 faeb 	bl	8002854 <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 800227e:	4867      	ldr	r0, [pc, #412]	; (800241c <Task3_Init+0x1d8>)
 8002280:	f000 ff14 	bl	80030ac <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100);
 8002284:	2164      	movs	r1, #100	; 0x64
 8002286:	4865      	ldr	r0, [pc, #404]	; (800241c <Task3_Init+0x1d8>)
 8002288:	f000 ffea 	bl	8003260 <HAL_ADC_PollForConversion>
		adc_val1=(float)HAL_ADC_GetValue(&hadc1);
 800228c:	4863      	ldr	r0, [pc, #396]	; (800241c <Task3_Init+0x1d8>)
 800228e:	f001 f8ed 	bl	800346c <HAL_ADC_GetValue>
 8002292:	4603      	mov	r3, r0
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fe19 	bl	8000ecc <__aeabi_ui2f>
 800229a:	4603      	mov	r3, r0
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe fee3 	bl	8001068 <__aeabi_f2iz>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4a5e      	ldr	r2, [pc, #376]	; (8002420 <Task3_Init+0x1dc>)
 80022a6:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 80022a8:	485c      	ldr	r0, [pc, #368]	; (800241c <Task3_Init+0x1d8>)
 80022aa:	f000 ffad 	bl	8003208 <HAL_ADC_Stop>
		sprintf(str,"%d",adc_val1);
 80022ae:	4b5c      	ldr	r3, [pc, #368]	; (8002420 <Task3_Init+0x1dc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	495b      	ldr	r1, [pc, #364]	; (8002424 <Task3_Init+0x1e0>)
 80022b6:	485c      	ldr	r0, [pc, #368]	; (8002428 <Task3_Init+0x1e4>)
 80022b8:	f005 fdb6 	bl	8007e28 <siprintf>
		HAL_UART_Transmit(&huart2,str,sizeof(str),500);
 80022bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022c0:	220a      	movs	r2, #10
 80022c2:	4959      	ldr	r1, [pc, #356]	; (8002428 <Task3_Init+0x1e4>)
 80022c4:	4859      	ldr	r0, [pc, #356]	; (800242c <Task3_Init+0x1e8>)
 80022c6:	f003 fff2 	bl	80062ae <HAL_UART_Transmit>
		//		  ADC_ChannelConfTypeDef sConfig = {1};

		sConfig.Channel = ADC_CHANNEL_11;
 80022ca:	230b      	movs	r3, #11
 80022cc:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 80022ce:	2301      	movs	r3, #1
 80022d0:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80022d2:	2305      	movs	r3, #5
 80022d4:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	4619      	mov	r1, r3
 80022dc:	484f      	ldr	r0, [pc, #316]	; (800241c <Task3_Init+0x1d8>)
 80022de:	f001 f8d1 	bl	8003484 <HAL_ADC_ConfigChannel>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <Task3_Init+0xa8>
		{
			Error_Handler();
 80022e8:	f000 fab4 	bl	8002854 <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 80022ec:	484b      	ldr	r0, [pc, #300]	; (800241c <Task3_Init+0x1d8>)
 80022ee:	f000 fedd 	bl	80030ac <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100);
 80022f2:	2164      	movs	r1, #100	; 0x64
 80022f4:	4849      	ldr	r0, [pc, #292]	; (800241c <Task3_Init+0x1d8>)
 80022f6:	f000 ffb3 	bl	8003260 <HAL_ADC_PollForConversion>
		adc_val2=(float)HAL_ADC_GetValue(&hadc1);
 80022fa:	4848      	ldr	r0, [pc, #288]	; (800241c <Task3_Init+0x1d8>)
 80022fc:	f001 f8b6 	bl	800346c <HAL_ADC_GetValue>
 8002300:	4603      	mov	r3, r0
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fde2 	bl	8000ecc <__aeabi_ui2f>
 8002308:	4603      	mov	r3, r0
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe feac 	bl	8001068 <__aeabi_f2iz>
 8002310:	4603      	mov	r3, r0
 8002312:	4a47      	ldr	r2, [pc, #284]	; (8002430 <Task3_Init+0x1ec>)
 8002314:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8002316:	4841      	ldr	r0, [pc, #260]	; (800241c <Task3_Init+0x1d8>)
 8002318:	f000 ff76 	bl	8003208 <HAL_ADC_Stop>
		sprintf(str2,"%d",adc_val2);
 800231c:	4b44      	ldr	r3, [pc, #272]	; (8002430 <Task3_Init+0x1ec>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4940      	ldr	r1, [pc, #256]	; (8002424 <Task3_Init+0x1e0>)
 8002324:	4843      	ldr	r0, [pc, #268]	; (8002434 <Task3_Init+0x1f0>)
 8002326:	f005 fd7f 	bl	8007e28 <siprintf>
		HAL_UART_Transmit(&huart2,str2,sizeof(str2),500);
 800232a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800232e:	220a      	movs	r2, #10
 8002330:	4940      	ldr	r1, [pc, #256]	; (8002434 <Task3_Init+0x1f0>)
 8002332:	483e      	ldr	r0, [pc, #248]	; (800242c <Task3_Init+0x1e8>)
 8002334:	f003 ffbb 	bl	80062ae <HAL_UART_Transmit>

		sConfig.Channel = ADC_CHANNEL_12;
 8002338:	230c      	movs	r3, #12
 800233a:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 800233c:	2301      	movs	r3, #1
 800233e:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002340:	2305      	movs	r3, #5
 8002342:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002344:	f107 030c 	add.w	r3, r7, #12
 8002348:	4619      	mov	r1, r3
 800234a:	4834      	ldr	r0, [pc, #208]	; (800241c <Task3_Init+0x1d8>)
 800234c:	f001 f89a 	bl	8003484 <HAL_ADC_ConfigChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <Task3_Init+0x116>
		{
			Error_Handler();
 8002356:	f000 fa7d 	bl	8002854 <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 800235a:	4830      	ldr	r0, [pc, #192]	; (800241c <Task3_Init+0x1d8>)
 800235c:	f000 fea6 	bl	80030ac <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100);
 8002360:	2164      	movs	r1, #100	; 0x64
 8002362:	482e      	ldr	r0, [pc, #184]	; (800241c <Task3_Init+0x1d8>)
 8002364:	f000 ff7c 	bl	8003260 <HAL_ADC_PollForConversion>
		adc_val3=(float)HAL_ADC_GetValue(&hadc1);
 8002368:	482c      	ldr	r0, [pc, #176]	; (800241c <Task3_Init+0x1d8>)
 800236a:	f001 f87f 	bl	800346c <HAL_ADC_GetValue>
 800236e:	4603      	mov	r3, r0
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fdab 	bl	8000ecc <__aeabi_ui2f>
 8002376:	4603      	mov	r3, r0
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe fe75 	bl	8001068 <__aeabi_f2iz>
 800237e:	4603      	mov	r3, r0
 8002380:	4a2d      	ldr	r2, [pc, #180]	; (8002438 <Task3_Init+0x1f4>)
 8002382:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8002384:	4825      	ldr	r0, [pc, #148]	; (800241c <Task3_Init+0x1d8>)
 8002386:	f000 ff3f 	bl	8003208 <HAL_ADC_Stop>
		sprintf(str3,"%d",adc_val2);
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <Task3_Init+0x1ec>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	4924      	ldr	r1, [pc, #144]	; (8002424 <Task3_Init+0x1e0>)
 8002392:	482a      	ldr	r0, [pc, #168]	; (800243c <Task3_Init+0x1f8>)
 8002394:	f005 fd48 	bl	8007e28 <siprintf>
		HAL_UART_Transmit(&huart2,str3,sizeof(str3),500);
 8002398:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800239c:	220a      	movs	r2, #10
 800239e:	4927      	ldr	r1, [pc, #156]	; (800243c <Task3_Init+0x1f8>)
 80023a0:	4822      	ldr	r0, [pc, #136]	; (800242c <Task3_Init+0x1e8>)
 80023a2:	f003 ff84 	bl	80062ae <HAL_UART_Transmit>

		sConfig.Channel = ADC_CHANNEL_13;
 80023a6:	230d      	movs	r3, #13
 80023a8:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80023ae:	2305      	movs	r3, #5
 80023b0:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	4619      	mov	r1, r3
 80023b8:	4818      	ldr	r0, [pc, #96]	; (800241c <Task3_Init+0x1d8>)
 80023ba:	f001 f863 	bl	8003484 <HAL_ADC_ConfigChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <Task3_Init+0x184>
		{
			Error_Handler();
 80023c4:	f000 fa46 	bl	8002854 <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 80023c8:	4814      	ldr	r0, [pc, #80]	; (800241c <Task3_Init+0x1d8>)
 80023ca:	f000 fe6f 	bl	80030ac <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100);
 80023ce:	2164      	movs	r1, #100	; 0x64
 80023d0:	4812      	ldr	r0, [pc, #72]	; (800241c <Task3_Init+0x1d8>)
 80023d2:	f000 ff45 	bl	8003260 <HAL_ADC_PollForConversion>
		adc_val4=(float)HAL_ADC_GetValue(&hadc1);
 80023d6:	4811      	ldr	r0, [pc, #68]	; (800241c <Task3_Init+0x1d8>)
 80023d8:	f001 f848 	bl	800346c <HAL_ADC_GetValue>
 80023dc:	4603      	mov	r3, r0
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fd74 	bl	8000ecc <__aeabi_ui2f>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fe3e 	bl	8001068 <__aeabi_f2iz>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4a14      	ldr	r2, [pc, #80]	; (8002440 <Task3_Init+0x1fc>)
 80023f0:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 80023f2:	480a      	ldr	r0, [pc, #40]	; (800241c <Task3_Init+0x1d8>)
 80023f4:	f000 ff08 	bl	8003208 <HAL_ADC_Stop>
		sprintf(str4,"%d",adc_val4);
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <Task3_Init+0x1fc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4909      	ldr	r1, [pc, #36]	; (8002424 <Task3_Init+0x1e0>)
 8002400:	4810      	ldr	r0, [pc, #64]	; (8002444 <Task3_Init+0x200>)
 8002402:	f005 fd11 	bl	8007e28 <siprintf>
		HAL_UART_Transmit(&huart2,str4,sizeof(str4),500);
 8002406:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800240a:	220a      	movs	r2, #10
 800240c:	490d      	ldr	r1, [pc, #52]	; (8002444 <Task3_Init+0x200>)
 800240e:	4807      	ldr	r0, [pc, #28]	; (800242c <Task3_Init+0x1e8>)
 8002410:	f003 ff4d 	bl	80062ae <HAL_UART_Transmit>

		osDelay(200);
 8002414:	20c8      	movs	r0, #200	; 0xc8
 8002416:	f004 f91f 	bl	8006658 <osDelay>
	{
 800241a:	e717      	b.n	800224c <Task3_Init+0x8>
 800241c:	20000550 	.word	0x20000550
 8002420:	200004e0 	.word	0x200004e0
 8002424:	0800baf8 	.word	0x0800baf8
 8002428:	200004e4 	.word	0x200004e4
 800242c:	20000674 	.word	0x20000674
 8002430:	200004f0 	.word	0x200004f0
 8002434:	200004f4 	.word	0x200004f4
 8002438:	20000500 	.word	0x20000500
 800243c:	20000504 	.word	0x20000504
 8002440:	20000510 	.word	0x20000510
 8002444:	20000514 	.word	0x20000514

08002448 <Task4_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task4_Init */
void Task4_Init(void const * argument)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task4_Init */
	/* Infinite loop */
	for(;;)
	{

		Sensor1 = HAL_GPIO_ReadPin(GPIOB,Sensor1_Pin);
 8002450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002454:	481f      	ldr	r0, [pc, #124]	; (80024d4 <Task4_Init+0x8c>)
 8002456:	f001 febf 	bl	80041d8 <HAL_GPIO_ReadPin>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <Task4_Init+0x90>)
 8002460:	701a      	strb	r2, [r3, #0]
		Sensor2 = HAL_GPIO_ReadPin(GPIOC,Sensor2_Pin);
 8002462:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002466:	481d      	ldr	r0, [pc, #116]	; (80024dc <Task4_Init+0x94>)
 8002468:	f001 feb6 	bl	80041d8 <HAL_GPIO_ReadPin>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <Task4_Init+0x98>)
 8002472:	701a      	strb	r2, [r3, #0]
		Sensor3 = HAL_GPIO_ReadPin(GPIOC,Sensor3_Pin);
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	4819      	ldr	r0, [pc, #100]	; (80024dc <Task4_Init+0x94>)
 8002478:	f001 feae 	bl	80041d8 <HAL_GPIO_ReadPin>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <Task4_Init+0x9c>)
 8002482:	701a      	strb	r2, [r3, #0]
		Sensor4 = HAL_GPIO_ReadPin(GPIOC,Sensor4_Pin);
 8002484:	2140      	movs	r1, #64	; 0x40
 8002486:	4815      	ldr	r0, [pc, #84]	; (80024dc <Task4_Init+0x94>)
 8002488:	f001 fea6 	bl	80041d8 <HAL_GPIO_ReadPin>
 800248c:	4603      	mov	r3, r0
 800248e:	461a      	mov	r2, r3
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <Task4_Init+0xa0>)
 8002492:	701a      	strb	r2, [r3, #0]
		Sensor5 = HAL_GPIO_ReadPin(GPIOB,Sensor5_Pin);
 8002494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002498:	480e      	ldr	r0, [pc, #56]	; (80024d4 <Task4_Init+0x8c>)
 800249a:	f001 fe9d 	bl	80041d8 <HAL_GPIO_ReadPin>
 800249e:	4603      	mov	r3, r0
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <Task4_Init+0xa4>)
 80024a4:	701a      	strb	r2, [r3, #0]
		Sensor6 = HAL_GPIO_ReadPin(GPIOB,Sensor6_Pin);
 80024a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024aa:	480a      	ldr	r0, [pc, #40]	; (80024d4 <Task4_Init+0x8c>)
 80024ac:	f001 fe94 	bl	80041d8 <HAL_GPIO_ReadPin>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <Task4_Init+0xa8>)
 80024b6:	701a      	strb	r2, [r3, #0]
		Sensor7 = HAL_GPIO_ReadPin(GPIOB,Sensor7_Pin);
 80024b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024bc:	4805      	ldr	r0, [pc, #20]	; (80024d4 <Task4_Init+0x8c>)
 80024be:	f001 fe8b 	bl	80041d8 <HAL_GPIO_ReadPin>
 80024c2:	4603      	mov	r3, r0
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <Task4_Init+0xac>)
 80024c8:	701a      	strb	r2, [r3, #0]

		osDelay(100);
 80024ca:	2064      	movs	r0, #100	; 0x64
 80024cc:	f004 f8c4 	bl	8006658 <osDelay>
		Sensor1 = HAL_GPIO_ReadPin(GPIOB,Sensor1_Pin);
 80024d0:	e7be      	b.n	8002450 <Task4_Init+0x8>
 80024d2:	bf00      	nop
 80024d4:	40010c00 	.word	0x40010c00
 80024d8:	2000051e 	.word	0x2000051e
 80024dc:	40011000 	.word	0x40011000
 80024e0:	2000051f 	.word	0x2000051f
 80024e4:	20000520 	.word	0x20000520
 80024e8:	20000521 	.word	0x20000521
 80024ec:	20000522 	.word	0x20000522
 80024f0:	20000523 	.word	0x20000523
 80024f4:	20000524 	.word	0x20000524

080024f8 <Task5_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task5_Init */
void Task5_Init(void const * argument)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task5_Init */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8002500:	2001      	movs	r0, #1
 8002502:	f004 f8a9 	bl	8006658 <osDelay>
 8002506:	e7fb      	b.n	8002500 <Task5_Init+0x8>

08002508 <Task6_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task6_Init */
void Task6_Init(void const * argument)
{
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task6_Init */
	/* Infinite loop */
	for(;;)
	{

		PT100_Temperature = MAX31865_Get_Temperature();
 8002510:	f7ff f826 	bl	8001560 <MAX31865_Get_Temperature>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	f7fe fbd0 	bl	8000cc0 <__aeabi_d2f>
 8002520:	4603      	mov	r3, r0
 8002522:	4aad      	ldr	r2, [pc, #692]	; (80027d8 <Task6_Init+0x2d0>)
 8002524:	6013      	str	r3, [r2, #0]
		if (PT100_Temperature >= 0) {
 8002526:	4bac      	ldr	r3, [pc, #688]	; (80027d8 <Task6_Init+0x2d0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f04f 0100 	mov.w	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fd86 	bl	8001040 <__aeabi_fcmpge>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d04a      	beq.n	80025d0 <Task6_Init+0xc8>
			PT100_Temperature = PT100_Temperature + 0.05;
 800253a:	4ba7      	ldr	r3, [pc, #668]	; (80027d8 <Task6_Init+0x2d0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe f896 	bl	8000670 <__aeabi_f2d>
 8002544:	a3a2      	add	r3, pc, #648	; (adr r3, 80027d0 <Task6_Init+0x2c8>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fd ff33 	bl	80003b4 <__adddf3>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	f7fe fbb3 	bl	8000cc0 <__aeabi_d2f>
 800255a:	4603      	mov	r3, r0
 800255c:	4a9e      	ldr	r2, [pc, #632]	; (80027d8 <Task6_Init+0x2d0>)
 800255e:	6013      	str	r3, [r2, #0]
			sprintf(temperature, "+%d.%d", (uint16_t) (PT100_Temperature),((uint16_t) (PT100_Temperature * 100)- ((uint16_t) PT100_Temperature) * 100) / 10);
 8002560:	4b9d      	ldr	r3, [pc, #628]	; (80027d8 <Task6_Init+0x2d0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fda5 	bl	80010b4 <__aeabi_f2uiz>
 800256a:	4603      	mov	r3, r0
 800256c:	b29b      	uxth	r3, r3
 800256e:	461d      	mov	r5, r3
 8002570:	4b99      	ldr	r3, [pc, #612]	; (80027d8 <Task6_Init+0x2d0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4999      	ldr	r1, [pc, #612]	; (80027dc <Task6_Init+0x2d4>)
 8002576:	4618      	mov	r0, r3
 8002578:	f7fd fe62 	bl	8000240 <__aeabi_fmul>
 800257c:	4603      	mov	r3, r0
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fd98 	bl	80010b4 <__aeabi_f2uiz>
 8002584:	4603      	mov	r3, r0
 8002586:	b29b      	uxth	r3, r3
 8002588:	461c      	mov	r4, r3
 800258a:	4b93      	ldr	r3, [pc, #588]	; (80027d8 <Task6_Init+0x2d0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fd90 	bl	80010b4 <__aeabi_f2uiz>
 8002594:	4603      	mov	r3, r0
 8002596:	b29b      	uxth	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800259e:	fb02 f303 	mul.w	r3, r2, r3
 80025a2:	4423      	add	r3, r4
 80025a4:	4a8e      	ldr	r2, [pc, #568]	; (80027e0 <Task6_Init+0x2d8>)
 80025a6:	fb82 1203 	smull	r1, r2, r2, r3
 80025aa:	1092      	asrs	r2, r2, #2
 80025ac:	17db      	asrs	r3, r3, #31
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	462a      	mov	r2, r5
 80025b2:	498c      	ldr	r1, [pc, #560]	; (80027e4 <Task6_Init+0x2dc>)
 80025b4:	488c      	ldr	r0, [pc, #560]	; (80027e8 <Task6_Init+0x2e0>)
 80025b6:	f005 fc37 	bl	8007e28 <siprintf>
			temp = (float)atof(temperature);
 80025ba:	488b      	ldr	r0, [pc, #556]	; (80027e8 <Task6_Init+0x2e0>)
 80025bc:	f005 f9e8 	bl	8007990 <atof>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fc86 	bl	8000ed4 <__aeabi_i2f>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4a88      	ldr	r2, [pc, #544]	; (80027ec <Task6_Init+0x2e4>)
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e04b      	b.n	8002668 <Task6_Init+0x160>
		}
		else {
			PT100_Temperature = -PT100_Temperature + 0.05;
 80025d0:	4b81      	ldr	r3, [pc, #516]	; (80027d8 <Task6_Init+0x2d0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe f849 	bl	8000670 <__aeabi_f2d>
 80025de:	a37c      	add	r3, pc, #496	; (adr r3, 80027d0 <Task6_Init+0x2c8>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f7fd fee6 	bl	80003b4 <__adddf3>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	f7fe fb66 	bl	8000cc0 <__aeabi_d2f>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4a78      	ldr	r2, [pc, #480]	; (80027d8 <Task6_Init+0x2d0>)
 80025f8:	6013      	str	r3, [r2, #0]
			sprintf(temperature, "-%d.%d", (uint16_t) (PT100_Temperature),((uint16_t) (PT100_Temperature * 100)- ((uint16_t) PT100_Temperature) * 100) / 10);
 80025fa:	4b77      	ldr	r3, [pc, #476]	; (80027d8 <Task6_Init+0x2d0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fd58 	bl	80010b4 <__aeabi_f2uiz>
 8002604:	4603      	mov	r3, r0
 8002606:	b29b      	uxth	r3, r3
 8002608:	461d      	mov	r5, r3
 800260a:	4b73      	ldr	r3, [pc, #460]	; (80027d8 <Task6_Init+0x2d0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4973      	ldr	r1, [pc, #460]	; (80027dc <Task6_Init+0x2d4>)
 8002610:	4618      	mov	r0, r3
 8002612:	f7fd fe15 	bl	8000240 <__aeabi_fmul>
 8002616:	4603      	mov	r3, r0
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fd4b 	bl	80010b4 <__aeabi_f2uiz>
 800261e:	4603      	mov	r3, r0
 8002620:	b29b      	uxth	r3, r3
 8002622:	461c      	mov	r4, r3
 8002624:	4b6c      	ldr	r3, [pc, #432]	; (80027d8 <Task6_Init+0x2d0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fd43 	bl	80010b4 <__aeabi_f2uiz>
 800262e:	4603      	mov	r3, r0
 8002630:	b29b      	uxth	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	4423      	add	r3, r4
 800263e:	4a68      	ldr	r2, [pc, #416]	; (80027e0 <Task6_Init+0x2d8>)
 8002640:	fb82 1203 	smull	r1, r2, r2, r3
 8002644:	1092      	asrs	r2, r2, #2
 8002646:	17db      	asrs	r3, r3, #31
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	462a      	mov	r2, r5
 800264c:	4968      	ldr	r1, [pc, #416]	; (80027f0 <Task6_Init+0x2e8>)
 800264e:	4866      	ldr	r0, [pc, #408]	; (80027e8 <Task6_Init+0x2e0>)
 8002650:	f005 fbea 	bl	8007e28 <siprintf>
			temp = (float)atof(temperature);
 8002654:	4864      	ldr	r0, [pc, #400]	; (80027e8 <Task6_Init+0x2e0>)
 8002656:	f005 f99b 	bl	8007990 <atof>
 800265a:	4603      	mov	r3, r0
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fc39 	bl	8000ed4 <__aeabi_i2f>
 8002662:	4603      	mov	r3, r0
 8002664:	4a61      	ldr	r2, [pc, #388]	; (80027ec <Task6_Init+0x2e4>)
 8002666:	6013      	str	r3, [r2, #0]
		}



		PT100_TemperatureHopper = MAX31865_Get_Temperature2();
 8002668:	f7ff f95a 	bl	8001920 <MAX31865_Get_Temperature2>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	f7fe fb24 	bl	8000cc0 <__aeabi_d2f>
 8002678:	4603      	mov	r3, r0
 800267a:	4a5e      	ldr	r2, [pc, #376]	; (80027f4 <Task6_Init+0x2ec>)
 800267c:	6013      	str	r3, [r2, #0]
		if (PT100_TemperatureHopper >= 0) {
 800267e:	4b5d      	ldr	r3, [pc, #372]	; (80027f4 <Task6_Init+0x2ec>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f04f 0100 	mov.w	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fcda 	bl	8001040 <__aeabi_fcmpge>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d04a      	beq.n	8002728 <Task6_Init+0x220>
			PT100_TemperatureHopper = PT100_TemperatureHopper + 0.05;
 8002692:	4b58      	ldr	r3, [pc, #352]	; (80027f4 <Task6_Init+0x2ec>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd ffea 	bl	8000670 <__aeabi_f2d>
 800269c:	a34c      	add	r3, pc, #304	; (adr r3, 80027d0 <Task6_Init+0x2c8>)
 800269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a2:	f7fd fe87 	bl	80003b4 <__adddf3>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7fe fb07 	bl	8000cc0 <__aeabi_d2f>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4a4f      	ldr	r2, [pc, #316]	; (80027f4 <Task6_Init+0x2ec>)
 80026b6:	6013      	str	r3, [r2, #0]
			sprintf(temperatureHopper, "+%d.%d", (uint16_t) (PT100_TemperatureHopper),((uint16_t) (PT100_TemperatureHopper * 100)- ((uint16_t) PT100_TemperatureHopper) * 100) / 10);
 80026b8:	4b4e      	ldr	r3, [pc, #312]	; (80027f4 <Task6_Init+0x2ec>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fcf9 	bl	80010b4 <__aeabi_f2uiz>
 80026c2:	4603      	mov	r3, r0
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	461d      	mov	r5, r3
 80026c8:	4b4a      	ldr	r3, [pc, #296]	; (80027f4 <Task6_Init+0x2ec>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4943      	ldr	r1, [pc, #268]	; (80027dc <Task6_Init+0x2d4>)
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd fdb6 	bl	8000240 <__aeabi_fmul>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fcec 	bl	80010b4 <__aeabi_f2uiz>
 80026dc:	4603      	mov	r3, r0
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461c      	mov	r4, r3
 80026e2:	4b44      	ldr	r3, [pc, #272]	; (80027f4 <Task6_Init+0x2ec>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fce4 	bl	80010b4 <__aeabi_f2uiz>
 80026ec:	4603      	mov	r3, r0
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	4423      	add	r3, r4
 80026fc:	4a38      	ldr	r2, [pc, #224]	; (80027e0 <Task6_Init+0x2d8>)
 80026fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002702:	1092      	asrs	r2, r2, #2
 8002704:	17db      	asrs	r3, r3, #31
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	462a      	mov	r2, r5
 800270a:	4936      	ldr	r1, [pc, #216]	; (80027e4 <Task6_Init+0x2dc>)
 800270c:	483a      	ldr	r0, [pc, #232]	; (80027f8 <Task6_Init+0x2f0>)
 800270e:	f005 fb8b 	bl	8007e28 <siprintf>
			temp1 = (float)atof(temperatureHopper);
 8002712:	4839      	ldr	r0, [pc, #228]	; (80027f8 <Task6_Init+0x2f0>)
 8002714:	f005 f93c 	bl	8007990 <atof>
 8002718:	4603      	mov	r3, r0
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fbda 	bl	8000ed4 <__aeabi_i2f>
 8002720:	4603      	mov	r3, r0
 8002722:	4a36      	ldr	r2, [pc, #216]	; (80027fc <Task6_Init+0x2f4>)
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e04b      	b.n	80027c0 <Task6_Init+0x2b8>
		}
		else {
			PT100_TemperatureHopper = -PT100_TemperatureHopper + 0.05;
 8002728:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <Task6_Init+0x2ec>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd ff9d 	bl	8000670 <__aeabi_f2d>
 8002736:	a326      	add	r3, pc, #152	; (adr r3, 80027d0 <Task6_Init+0x2c8>)
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273c:	f7fd fe3a 	bl	80003b4 <__adddf3>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	f7fe faba 	bl	8000cc0 <__aeabi_d2f>
 800274c:	4603      	mov	r3, r0
 800274e:	4a29      	ldr	r2, [pc, #164]	; (80027f4 <Task6_Init+0x2ec>)
 8002750:	6013      	str	r3, [r2, #0]
			sprintf(temperatureHopper, "-%d.%d", (uint16_t) (PT100_TemperatureHopper),((uint16_t) (PT100_TemperatureHopper * 100)- ((uint16_t) PT100_TemperatureHopper) * 100) / 10);
 8002752:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <Task6_Init+0x2ec>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fcac 	bl	80010b4 <__aeabi_f2uiz>
 800275c:	4603      	mov	r3, r0
 800275e:	b29b      	uxth	r3, r3
 8002760:	461d      	mov	r5, r3
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <Task6_Init+0x2ec>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	491d      	ldr	r1, [pc, #116]	; (80027dc <Task6_Init+0x2d4>)
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd fd69 	bl	8000240 <__aeabi_fmul>
 800276e:	4603      	mov	r3, r0
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe fc9f 	bl	80010b4 <__aeabi_f2uiz>
 8002776:	4603      	mov	r3, r0
 8002778:	b29b      	uxth	r3, r3
 800277a:	461c      	mov	r4, r3
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <Task6_Init+0x2ec>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fc97 	bl	80010b4 <__aeabi_f2uiz>
 8002786:	4603      	mov	r3, r0
 8002788:	b29b      	uxth	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002790:	fb02 f303 	mul.w	r3, r2, r3
 8002794:	4423      	add	r3, r4
 8002796:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <Task6_Init+0x2d8>)
 8002798:	fb82 1203 	smull	r1, r2, r2, r3
 800279c:	1092      	asrs	r2, r2, #2
 800279e:	17db      	asrs	r3, r3, #31
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	462a      	mov	r2, r5
 80027a4:	4912      	ldr	r1, [pc, #72]	; (80027f0 <Task6_Init+0x2e8>)
 80027a6:	4814      	ldr	r0, [pc, #80]	; (80027f8 <Task6_Init+0x2f0>)
 80027a8:	f005 fb3e 	bl	8007e28 <siprintf>
			temp1 = (float)atof(temperatureHopper);
 80027ac:	4812      	ldr	r0, [pc, #72]	; (80027f8 <Task6_Init+0x2f0>)
 80027ae:	f005 f8ef 	bl	8007990 <atof>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fb8d 	bl	8000ed4 <__aeabi_i2f>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <Task6_Init+0x2f4>)
 80027be:	6013      	str	r3, [r2, #0]
		}
		osDelay(300);
 80027c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80027c4:	f003 ff48 	bl	8006658 <osDelay>
		PT100_Temperature = MAX31865_Get_Temperature();
 80027c8:	e6a2      	b.n	8002510 <Task6_Init+0x8>
 80027ca:	bf00      	nop
 80027cc:	f3af 8000 	nop.w
 80027d0:	9999999a 	.word	0x9999999a
 80027d4:	3fa99999 	.word	0x3fa99999
 80027d8:	20000540 	.word	0x20000540
 80027dc:	42c80000 	.word	0x42c80000
 80027e0:	66666667 	.word	0x66666667
 80027e4:	0800bafc 	.word	0x0800bafc
 80027e8:	20000528 	.word	0x20000528
 80027ec:	20000548 	.word	0x20000548
 80027f0:	0800bb04 	.word	0x0800bb04
 80027f4:	20000544 	.word	0x20000544
 80027f8:	20000534 	.word	0x20000534
 80027fc:	2000054c 	.word	0x2000054c

08002800 <Task7_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task7_Init */
void Task7_Init(void const * argument)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task7_Init */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8002808:	2001      	movs	r0, #1
 800280a:	f003 ff25 	bl	8006658 <osDelay>
 800280e:	e7fb      	b.n	8002808 <Task7_Init+0x8>

08002810 <Task8_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task8_Init */
void Task8_Init(void const * argument)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task8_Init */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8002818:	2001      	movs	r0, #1
 800281a:	f003 ff1d 	bl	8006658 <osDelay>
 800281e:	e7fb      	b.n	8002818 <Task8_Init+0x8>

08002820 <Task9_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task9_Init */
void Task9_Init(void const * argument)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task9_Init */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8002828:	2001      	movs	r0, #1
 800282a:	f003 ff15 	bl	8006658 <osDelay>
 800282e:	e7fb      	b.n	8002828 <Task9_Init+0x8>

08002830 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002842:	f000 fb1b 	bl	8002e7c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40012c00 	.word	0x40012c00

08002854 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002858:	b672      	cpsid	i
}
 800285a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800285c:	e7fe      	b.n	800285c <Error_Handler+0x8>
	...

08002860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_MspInit+0x4c>)
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	4a10      	ldr	r2, [pc, #64]	; (80028ac <HAL_MspInit+0x4c>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6193      	str	r3, [r2, #24]
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <HAL_MspInit+0x4c>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_MspInit+0x4c>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <HAL_MspInit+0x4c>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	61d3      	str	r3, [r2, #28]
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HAL_MspInit+0x4c>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	210f      	movs	r1, #15
 800289a:	f06f 0001 	mvn.w	r0, #1
 800289e:	f001 f83a 	bl	8003916 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000

080028b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a28      	ldr	r2, [pc, #160]	; (800296c <HAL_ADC_MspInit+0xbc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d149      	bne.n	8002964 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_ADC_MspInit+0xc0>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	4a26      	ldr	r2, [pc, #152]	; (8002970 <HAL_ADC_MspInit+0xc0>)
 80028d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028da:	6193      	str	r3, [r2, #24]
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_ADC_MspInit+0xc0>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e8:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_ADC_MspInit+0xc0>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	4a20      	ldr	r2, [pc, #128]	; (8002970 <HAL_ADC_MspInit+0xc0>)
 80028ee:	f043 0310 	orr.w	r3, r3, #16
 80028f2:	6193      	str	r3, [r2, #24]
 80028f4:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <HAL_ADC_MspInit+0xc0>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002900:	230f      	movs	r3, #15
 8002902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002904:	2303      	movs	r3, #3
 8002906:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002908:	f107 0310 	add.w	r3, r7, #16
 800290c:	4619      	mov	r1, r3
 800290e:	4819      	ldr	r0, [pc, #100]	; (8002974 <HAL_ADC_MspInit+0xc4>)
 8002910:	f001 fade 	bl	8003ed0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002914:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 8002916:	4a19      	ldr	r2, [pc, #100]	; (800297c <HAL_ADC_MspInit+0xcc>)
 8002918:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800291a:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 800291c:	2200      	movs	r2, #0
 800291e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002920:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002926:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 8002928:	2280      	movs	r2, #128	; 0x80
 800292a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800292c:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 800292e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002932:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 8002936:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800293a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800293c:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 800293e:	2220      	movs	r2, #32
 8002940:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002942:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 8002944:	2200      	movs	r2, #0
 8002946:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002948:	480b      	ldr	r0, [pc, #44]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 800294a:	f001 f80f 	bl	800396c <HAL_DMA_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002954:	f7ff ff7e 	bl	8002854 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a07      	ldr	r2, [pc, #28]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 800295c:	621a      	str	r2, [r3, #32]
 800295e:	4a06      	ldr	r2, [pc, #24]	; (8002978 <HAL_ADC_MspInit+0xc8>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002964:	bf00      	nop
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40012400 	.word	0x40012400
 8002970:	40021000 	.word	0x40021000
 8002974:	40011000 	.word	0x40011000
 8002978:	20000580 	.word	0x20000580
 800297c:	40020008 	.word	0x40020008

08002980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 031c 	add.w	r3, r7, #28
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a3e      	ldr	r2, [pc, #248]	; (8002a94 <HAL_SPI_MspInit+0x114>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d130      	bne.n	8002a02 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029a0:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <HAL_SPI_MspInit+0x118>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a3c      	ldr	r2, [pc, #240]	; (8002a98 <HAL_SPI_MspInit+0x118>)
 80029a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <HAL_SPI_MspInit+0x118>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b8:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <HAL_SPI_MspInit+0x118>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a36      	ldr	r2, [pc, #216]	; (8002a98 <HAL_SPI_MspInit+0x118>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <HAL_SPI_MspInit+0x118>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80029d0:	23a0      	movs	r3, #160	; 0xa0
 80029d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d4:	2302      	movs	r3, #2
 80029d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d8:	2303      	movs	r3, #3
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	4619      	mov	r1, r3
 80029e2:	482e      	ldr	r0, [pc, #184]	; (8002a9c <HAL_SPI_MspInit+0x11c>)
 80029e4:	f001 fa74 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029e8:	2340      	movs	r3, #64	; 0x40
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ec:	2300      	movs	r3, #0
 80029ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	4619      	mov	r1, r3
 80029fa:	4828      	ldr	r0, [pc, #160]	; (8002a9c <HAL_SPI_MspInit+0x11c>)
 80029fc:	f001 fa68 	bl	8003ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002a00:	e044      	b.n	8002a8c <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI3)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <HAL_SPI_MspInit+0x120>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d13f      	bne.n	8002a8c <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002a0c:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_SPI_MspInit+0x118>)
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	4a21      	ldr	r2, [pc, #132]	; (8002a98 <HAL_SPI_MspInit+0x118>)
 8002a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a16:	61d3      	str	r3, [r2, #28]
 8002a18:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <HAL_SPI_MspInit+0x118>)
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a24:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <HAL_SPI_MspInit+0x118>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <HAL_SPI_MspInit+0x118>)
 8002a2a:	f043 0310 	orr.w	r3, r3, #16
 8002a2e:	6193      	str	r3, [r2, #24]
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_SPI_MspInit+0x118>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002a3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4814      	ldr	r0, [pc, #80]	; (8002aa4 <HAL_SPI_MspInit+0x124>)
 8002a52:	f001 fa3d 	bl	8003ed0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	4619      	mov	r1, r3
 8002a6a:	480e      	ldr	r0, [pc, #56]	; (8002aa4 <HAL_SPI_MspInit+0x124>)
 8002a6c:	f001 fa30 	bl	8003ed0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI3_ENABLE();
 8002a70:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <HAL_SPI_MspInit+0x128>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a78:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a86:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <HAL_SPI_MspInit+0x128>)
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8a:	6053      	str	r3, [r2, #4]
}
 8002a8c:	bf00      	nop
 8002a8e:	3730      	adds	r7, #48	; 0x30
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40013000 	.word	0x40013000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40010800 	.word	0x40010800
 8002aa0:	40003c00 	.word	0x40003c00
 8002aa4:	40011000 	.word	0x40011000
 8002aa8:	40010000 	.word	0x40010000

08002aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 0310 	add.w	r3, r7, #16
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <HAL_UART_MspInit+0x88>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d12f      	bne.n	8002b2c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_UART_MspInit+0x8c>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	4a19      	ldr	r2, [pc, #100]	; (8002b38 <HAL_UART_MspInit+0x8c>)
 8002ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad6:	61d3      	str	r3, [r2, #28]
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <HAL_UART_MspInit+0x8c>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <HAL_UART_MspInit+0x8c>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <HAL_UART_MspInit+0x8c>)
 8002aea:	f043 0304 	orr.w	r3, r3, #4
 8002aee:	6193      	str	r3, [r2, #24]
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_UART_MspInit+0x8c>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002afc:	2304      	movs	r3, #4
 8002afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b08:	f107 0310 	add.w	r3, r7, #16
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	480b      	ldr	r0, [pc, #44]	; (8002b3c <HAL_UART_MspInit+0x90>)
 8002b10:	f001 f9de 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b14:	2308      	movs	r3, #8
 8002b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b20:	f107 0310 	add.w	r3, r7, #16
 8002b24:	4619      	mov	r1, r3
 8002b26:	4805      	ldr	r0, [pc, #20]	; (8002b3c <HAL_UART_MspInit+0x90>)
 8002b28:	f001 f9d2 	bl	8003ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b2c:	bf00      	nop
 8002b2e:	3720      	adds	r7, #32
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40004400 	.word	0x40004400
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40010800 	.word	0x40010800

08002b40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08c      	sub	sp, #48	; 0x30
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002b56:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <HAL_InitTick+0xd0>)
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	4a2d      	ldr	r2, [pc, #180]	; (8002c10 <HAL_InitTick+0xd0>)
 8002b5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b60:	6193      	str	r3, [r2, #24]
 8002b62:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_InitTick+0xd0>)
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b6e:	f107 020c 	add.w	r2, r7, #12
 8002b72:	f107 0310 	add.w	r3, r7, #16
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f002 f8a1 	bl	8004cc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002b7e:	f002 f88b 	bl	8004c98 <HAL_RCC_GetPCLK2Freq>
 8002b82:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b86:	4a23      	ldr	r2, [pc, #140]	; (8002c14 <HAL_InitTick+0xd4>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	0c9b      	lsrs	r3, r3, #18
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_InitTick+0xd8>)
 8002b94:	4a21      	ldr	r2, [pc, #132]	; (8002c1c <HAL_InitTick+0xdc>)
 8002b96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002b98:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <HAL_InitTick+0xd8>)
 8002b9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b9e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <HAL_InitTick+0xd8>)
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <HAL_InitTick+0xd8>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bac:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_InitTick+0xd8>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb2:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <HAL_InitTick+0xd8>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002bb8:	4817      	ldr	r0, [pc, #92]	; (8002c18 <HAL_InitTick+0xd8>)
 8002bba:	f003 f8cf 	bl	8005d5c <HAL_TIM_Base_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d11b      	bne.n	8002c04 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002bcc:	4812      	ldr	r0, [pc, #72]	; (8002c18 <HAL_InitTick+0xd8>)
 8002bce:	f003 f91d 	bl	8005e0c <HAL_TIM_Base_Start_IT>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d111      	bne.n	8002c04 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002be0:	2019      	movs	r0, #25
 8002be2:	f000 feb4 	bl	800394e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b0f      	cmp	r3, #15
 8002bea:	d808      	bhi.n	8002bfe <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8002bec:	2200      	movs	r2, #0
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	2019      	movs	r0, #25
 8002bf2:	f000 fe90 	bl	8003916 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <HAL_InitTick+0xe0>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	e002      	b.n	8002c04 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002c04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3730      	adds	r7, #48	; 0x30
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	431bde83 	.word	0x431bde83
 8002c18:	200006dc 	.word	0x200006dc
 8002c1c:	40012c00 	.word	0x40012c00
 8002c20:	20000004 	.word	0x20000004

08002c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <NMI_Handler+0x4>

08002c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c2e:	e7fe      	b.n	8002c2e <HardFault_Handler+0x4>

08002c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <MemManage_Handler+0x4>

08002c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c3a:	e7fe      	b.n	8002c3a <BusFault_Handler+0x4>

08002c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c40:	e7fe      	b.n	8002c40 <UsageFault_Handler+0x4>

08002c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
	...

08002c50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <DMA1_Channel1_IRQHandler+0x10>)
 8002c56:	f000 feff 	bl	8003a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000580 	.word	0x20000580

08002c64 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <TIM1_UP_IRQHandler+0x10>)
 8002c6a:	f003 f929 	bl	8005ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200006dc 	.word	0x200006dc

08002c78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return 1;
 8002c7c:	2301      	movs	r3, #1
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <_kill>:

int _kill(int pid, int sig)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c90:	f004 fe82 	bl	8007998 <__errno>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2216      	movs	r2, #22
 8002c98:	601a      	str	r2, [r3, #0]
  return -1;
 8002c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <_exit>:

void _exit (int status)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cae:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ffe7 	bl	8002c86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cb8:	e7fe      	b.n	8002cb8 <_exit+0x12>

08002cba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	e00a      	b.n	8002ce2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ccc:	f3af 8000 	nop.w
 8002cd0:	4601      	mov	r1, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	60ba      	str	r2, [r7, #8]
 8002cd8:	b2ca      	uxtb	r2, r1
 8002cda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	dbf0      	blt.n	8002ccc <_read+0x12>
  }

  return len;
 8002cea:	687b      	ldr	r3, [r7, #4]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e009      	b.n	8002d1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	60ba      	str	r2, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	3301      	adds	r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	dbf1      	blt.n	8002d06 <_write+0x12>
  }
  return len;
 8002d22:	687b      	ldr	r3, [r7, #4]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_close>:

int _close(int file)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d52:	605a      	str	r2, [r3, #4]
  return 0;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <_isatty>:

int _isatty(int file)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d68:	2301      	movs	r3, #1
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d94:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <_sbrk+0x5c>)
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <_sbrk+0x60>)
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da0:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <_sbrk+0x64>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <_sbrk+0x64>)
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <_sbrk+0x68>)
 8002dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <_sbrk+0x64>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d207      	bcs.n	8002dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dbc:	f004 fdec 	bl	8007998 <__errno>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	220c      	movs	r2, #12
 8002dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dca:	e009      	b.n	8002de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <_sbrk+0x64>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <_sbrk+0x64>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	4a05      	ldr	r2, [pc, #20]	; (8002df0 <_sbrk+0x64>)
 8002ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dde:	68fb      	ldr	r3, [r7, #12]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20010000 	.word	0x20010000
 8002dec:	00000400 	.word	0x00000400
 8002df0:	20000724 	.word	0x20000724
 8002df4:	20001e78 	.word	0x20001e78

08002df8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <Reset_Handler>:
 8002e04:	480c      	ldr	r0, [pc, #48]	; (8002e38 <LoopFillZerobss+0x12>)
 8002e06:	490d      	ldr	r1, [pc, #52]	; (8002e3c <LoopFillZerobss+0x16>)
 8002e08:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <LoopFillZerobss+0x1a>)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e002      	b.n	8002e14 <LoopCopyDataInit>

08002e0e <CopyDataInit>:
 8002e0e:	58d4      	ldr	r4, [r2, r3]
 8002e10:	50c4      	str	r4, [r0, r3]
 8002e12:	3304      	adds	r3, #4

08002e14 <LoopCopyDataInit>:
 8002e14:	18c4      	adds	r4, r0, r3
 8002e16:	428c      	cmp	r4, r1
 8002e18:	d3f9      	bcc.n	8002e0e <CopyDataInit>
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <LoopFillZerobss+0x1e>)
 8002e1c:	4c0a      	ldr	r4, [pc, #40]	; (8002e48 <LoopFillZerobss+0x22>)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e001      	b.n	8002e26 <LoopFillZerobss>

08002e22 <FillZerobss>:
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	3204      	adds	r2, #4

08002e26 <LoopFillZerobss>:
 8002e26:	42a2      	cmp	r2, r4
 8002e28:	d3fb      	bcc.n	8002e22 <FillZerobss>
 8002e2a:	f7ff ffe5 	bl	8002df8 <SystemInit>
 8002e2e:	f004 feaf 	bl	8007b90 <__libc_init_array>
 8002e32:	f7fe fef1 	bl	8001c18 <main>
 8002e36:	4770      	bx	lr
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	200001e4 	.word	0x200001e4
 8002e40:	0800bfe0 	.word	0x0800bfe0
 8002e44:	200001e8 	.word	0x200001e8
 8002e48:	20001e78 	.word	0x20001e78

08002e4c <ADC1_2_IRQHandler>:
 8002e4c:	e7fe      	b.n	8002e4c <ADC1_2_IRQHandler>
	...

08002e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <HAL_Init+0x28>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <HAL_Init+0x28>)
 8002e5a:	f043 0310 	orr.w	r3, r3, #16
 8002e5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e60:	2003      	movs	r0, #3
 8002e62:	f000 fd4d 	bl	8003900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e66:	200f      	movs	r0, #15
 8002e68:	f7ff fe6a 	bl	8002b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e6c:	f7ff fcf8 	bl	8002860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40022000 	.word	0x40022000

08002e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_IncTick+0x1c>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_IncTick+0x20>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a03      	ldr	r2, [pc, #12]	; (8002e9c <HAL_IncTick+0x20>)
 8002e8e:	6013      	str	r3, [r2, #0]
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	20000008 	.word	0x20000008
 8002e9c:	20000728 	.word	0x20000728

08002ea0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea4:	4b02      	ldr	r3, [pc, #8]	; (8002eb0 <HAL_GetTick+0x10>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	20000728 	.word	0x20000728

08002eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7ff fff0 	bl	8002ea0 <HAL_GetTick>
 8002ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d005      	beq.n	8002eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_Delay+0x44>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eda:	bf00      	nop
 8002edc:	f7ff ffe0 	bl	8002ea0 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d8f7      	bhi.n	8002edc <HAL_Delay+0x28>
  {
  }
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000008 	.word	0x20000008

08002efc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0be      	b.n	800309c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff fcb8 	bl	80028b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fbf1 	bl	8003728 <ADC_ConversionStop_Disable>
 8002f46:	4603      	mov	r3, r0
 8002f48:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f040 8099 	bne.w	800308a <HAL_ADC_Init+0x18e>
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 8095 	bne.w	800308a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f68:	f023 0302 	bic.w	r3, r3, #2
 8002f6c:	f043 0202 	orr.w	r2, r3, #2
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f7c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7b1b      	ldrb	r3, [r3, #12]
 8002f82:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f84:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f94:	d003      	beq.n	8002f9e <HAL_ADC_Init+0xa2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d102      	bne.n	8002fa4 <HAL_ADC_Init+0xa8>
 8002f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fa2:	e000      	b.n	8002fa6 <HAL_ADC_Init+0xaa>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	7d1b      	ldrb	r3, [r3, #20]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d119      	bne.n	8002fe8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7b1b      	ldrb	r3, [r3, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	035a      	lsls	r2, r3, #13
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	e00b      	b.n	8002fe8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <HAL_ADC_Init+0x1a8>)
 8003004:	4013      	ands	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	430b      	orrs	r3, r1
 800300e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003018:	d003      	beq.n	8003022 <HAL_ADC_Init+0x126>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d104      	bne.n	800302c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	3b01      	subs	r3, #1
 8003028:	051b      	lsls	r3, r3, #20
 800302a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	430a      	orrs	r2, r1
 800303e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <HAL_ADC_Init+0x1ac>)
 8003048:	4013      	ands	r3, r2
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	429a      	cmp	r2, r3
 800304e:	d10b      	bne.n	8003068 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	f023 0303 	bic.w	r3, r3, #3
 800305e:	f043 0201 	orr.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003066:	e018      	b.n	800309a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	f023 0312 	bic.w	r3, r3, #18
 8003070:	f043 0210 	orr.w	r2, r3, #16
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	f043 0201 	orr.w	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003088:	e007      	b.n	800309a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	f043 0210 	orr.w	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800309a:	7dfb      	ldrb	r3, [r7, #23]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	ffe1f7fd 	.word	0xffe1f7fd
 80030a8:	ff1f0efe 	.word	0xff1f0efe

080030ac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_Start+0x1a>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e098      	b.n	80031f8 <HAL_ADC_Start+0x14c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fad0 	bl	8003674 <ADC_Enable>
 80030d4:	4603      	mov	r3, r0
 80030d6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 8087 	bne.w	80031ee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a41      	ldr	r2, [pc, #260]	; (8003200 <HAL_ADC_Start+0x154>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d105      	bne.n	800310a <HAL_ADC_Start+0x5e>
 80030fe:	4b41      	ldr	r3, [pc, #260]	; (8003204 <HAL_ADC_Start+0x158>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d115      	bne.n	8003136 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003120:	2b00      	cmp	r3, #0
 8003122:	d026      	beq.n	8003172 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800312c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003134:	e01d      	b.n	8003172 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2f      	ldr	r2, [pc, #188]	; (8003204 <HAL_ADC_Start+0x158>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d004      	beq.n	8003156 <HAL_ADC_Start+0xaa>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a2b      	ldr	r2, [pc, #172]	; (8003200 <HAL_ADC_Start+0x154>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d10d      	bne.n	8003172 <HAL_ADC_Start+0xc6>
 8003156:	4b2b      	ldr	r3, [pc, #172]	; (8003204 <HAL_ADC_Start+0x158>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800316a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	f023 0206 	bic.w	r2, r3, #6
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c
 800318a:	e002      	b.n	8003192 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f06f 0202 	mvn.w	r2, #2
 80031a2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031b2:	d113      	bne.n	80031dc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031b8:	4a11      	ldr	r2, [pc, #68]	; (8003200 <HAL_ADC_Start+0x154>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d105      	bne.n	80031ca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <HAL_ADC_Start+0x158>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d108      	bne.n	80031dc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80031d8:	609a      	str	r2, [r3, #8]
 80031da:	e00c      	b.n	80031f6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	e003      	b.n	80031f6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40012800 	.word	0x40012800
 8003204:	40012400 	.word	0x40012400

08003208 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_ADC_Stop+0x1a>
 800321e:	2302      	movs	r3, #2
 8003220:	e01a      	b.n	8003258 <HAL_ADC_Stop+0x50>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fa7c 	bl	8003728 <ADC_ConversionStop_Disable>
 8003230:	4603      	mov	r3, r0
 8003232:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003242:	f023 0301 	bic.w	r3, r3, #1
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003256:	7bfb      	ldrb	r3, [r7, #15]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003276:	f7ff fe13 	bl	8002ea0 <HAL_GetTick>
 800327a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	f043 0220 	orr.w	r2, r3, #32
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e0d3      	b.n	800344a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d131      	bne.n	8003314 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d12a      	bne.n	8003314 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032be:	e021      	b.n	8003304 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d01d      	beq.n	8003304 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <HAL_ADC_PollForConversion+0x7e>
 80032ce:	f7ff fde7 	bl	8002ea0 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d212      	bcs.n	8003304 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10b      	bne.n	8003304 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f0:	f043 0204 	orr.w	r2, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e0a2      	b.n	800344a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0d6      	beq.n	80032c0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003312:	e070      	b.n	80033f6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003314:	4b4f      	ldr	r3, [pc, #316]	; (8003454 <HAL_ADC_PollForConversion+0x1f4>)
 8003316:	681c      	ldr	r4, [r3, #0]
 8003318:	2002      	movs	r0, #2
 800331a:	f001 fe51 	bl	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq>
 800331e:	4603      	mov	r3, r0
 8003320:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6919      	ldr	r1, [r3, #16]
 800332a:	4b4b      	ldr	r3, [pc, #300]	; (8003458 <HAL_ADC_PollForConversion+0x1f8>)
 800332c:	400b      	ands	r3, r1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d118      	bne.n	8003364 <HAL_ADC_PollForConversion+0x104>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68d9      	ldr	r1, [r3, #12]
 8003338:	4b48      	ldr	r3, [pc, #288]	; (800345c <HAL_ADC_PollForConversion+0x1fc>)
 800333a:	400b      	ands	r3, r1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d111      	bne.n	8003364 <HAL_ADC_PollForConversion+0x104>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6919      	ldr	r1, [r3, #16]
 8003346:	4b46      	ldr	r3, [pc, #280]	; (8003460 <HAL_ADC_PollForConversion+0x200>)
 8003348:	400b      	ands	r3, r1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d108      	bne.n	8003360 <HAL_ADC_PollForConversion+0x100>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68d9      	ldr	r1, [r3, #12]
 8003354:	4b43      	ldr	r3, [pc, #268]	; (8003464 <HAL_ADC_PollForConversion+0x204>)
 8003356:	400b      	ands	r3, r1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_PollForConversion+0x100>
 800335c:	2314      	movs	r3, #20
 800335e:	e020      	b.n	80033a2 <HAL_ADC_PollForConversion+0x142>
 8003360:	2329      	movs	r3, #41	; 0x29
 8003362:	e01e      	b.n	80033a2 <HAL_ADC_PollForConversion+0x142>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6919      	ldr	r1, [r3, #16]
 800336a:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_ADC_PollForConversion+0x200>)
 800336c:	400b      	ands	r3, r1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_ADC_PollForConversion+0x120>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68d9      	ldr	r1, [r3, #12]
 8003378:	4b3a      	ldr	r3, [pc, #232]	; (8003464 <HAL_ADC_PollForConversion+0x204>)
 800337a:	400b      	ands	r3, r1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00d      	beq.n	800339c <HAL_ADC_PollForConversion+0x13c>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6919      	ldr	r1, [r3, #16]
 8003386:	4b38      	ldr	r3, [pc, #224]	; (8003468 <HAL_ADC_PollForConversion+0x208>)
 8003388:	400b      	ands	r3, r1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d108      	bne.n	80033a0 <HAL_ADC_PollForConversion+0x140>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68d9      	ldr	r1, [r3, #12]
 8003394:	4b34      	ldr	r3, [pc, #208]	; (8003468 <HAL_ADC_PollForConversion+0x208>)
 8003396:	400b      	ands	r3, r1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_ADC_PollForConversion+0x140>
 800339c:	2354      	movs	r3, #84	; 0x54
 800339e:	e000      	b.n	80033a2 <HAL_ADC_PollForConversion+0x142>
 80033a0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033a8:	e021      	b.n	80033ee <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d01a      	beq.n	80033e8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <HAL_ADC_PollForConversion+0x168>
 80033b8:	f7ff fd72 	bl	8002ea0 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d20f      	bcs.n	80033e8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d90b      	bls.n	80033e8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	f043 0204 	orr.w	r2, r3, #4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e030      	b.n	800344a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3301      	adds	r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d8d9      	bhi.n	80033aa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f06f 0212 	mvn.w	r2, #18
 80033fe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003416:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800341a:	d115      	bne.n	8003448 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003420:	2b00      	cmp	r3, #0
 8003422:	d111      	bne.n	8003448 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	f043 0201 	orr.w	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	bd90      	pop	{r4, r7, pc}
 8003452:	bf00      	nop
 8003454:	20000000 	.word	0x20000000
 8003458:	24924924 	.word	0x24924924
 800345c:	00924924 	.word	0x00924924
 8003460:	12492492 	.word	0x12492492
 8003464:	00492492 	.word	0x00492492
 8003468:	00249249 	.word	0x00249249

0800346c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x20>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e0dc      	b.n	800365e <HAL_ADC_ConfigChannel+0x1da>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b06      	cmp	r3, #6
 80034b2:	d81c      	bhi.n	80034ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	3b05      	subs	r3, #5
 80034c6:	221f      	movs	r2, #31
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	4019      	ands	r1, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	3b05      	subs	r3, #5
 80034e0:	fa00 f203 	lsl.w	r2, r0, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	635a      	str	r2, [r3, #52]	; 0x34
 80034ec:	e03c      	b.n	8003568 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d81c      	bhi.n	8003530 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	3b23      	subs	r3, #35	; 0x23
 8003508:	221f      	movs	r2, #31
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	4019      	ands	r1, r3
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	3b23      	subs	r3, #35	; 0x23
 8003522:	fa00 f203 	lsl.w	r2, r0, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
 800352e:	e01b      	b.n	8003568 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	3b41      	subs	r3, #65	; 0x41
 8003542:	221f      	movs	r2, #31
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	4019      	ands	r1, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	3b41      	subs	r3, #65	; 0x41
 800355c:	fa00 f203 	lsl.w	r2, r0, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b09      	cmp	r3, #9
 800356e:	d91c      	bls.n	80035aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68d9      	ldr	r1, [r3, #12]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	3b1e      	subs	r3, #30
 8003582:	2207      	movs	r2, #7
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	4019      	ands	r1, r3
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6898      	ldr	r0, [r3, #8]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	3b1e      	subs	r3, #30
 800359c:	fa00 f203 	lsl.w	r2, r0, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	60da      	str	r2, [r3, #12]
 80035a8:	e019      	b.n	80035de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6919      	ldr	r1, [r3, #16]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	2207      	movs	r2, #7
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	4019      	ands	r1, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6898      	ldr	r0, [r3, #8]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	fa00 f203 	lsl.w	r2, r0, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d003      	beq.n	80035ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035ea:	2b11      	cmp	r3, #17
 80035ec:	d132      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <HAL_ADC_ConfigChannel+0x1e4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d125      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d126      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003614:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b10      	cmp	r3, #16
 800361c:	d11a      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800361e:	4b13      	ldr	r3, [pc, #76]	; (800366c <HAL_ADC_ConfigChannel+0x1e8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a13      	ldr	r2, [pc, #76]	; (8003670 <HAL_ADC_ConfigChannel+0x1ec>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	0c9a      	lsrs	r2, r3, #18
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003634:	e002      	b.n	800363c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3b01      	subs	r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f9      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x1b2>
 8003642:	e007      	b.n	8003654 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800365c:	7bfb      	ldrb	r3, [r7, #15]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	40012400 	.word	0x40012400
 800366c:	20000000 	.word	0x20000000
 8003670:	431bde83 	.word	0x431bde83

08003674 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d040      	beq.n	8003714 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0201 	orr.w	r2, r2, #1
 80036a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036a2:	4b1f      	ldr	r3, [pc, #124]	; (8003720 <ADC_Enable+0xac>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1f      	ldr	r2, [pc, #124]	; (8003724 <ADC_Enable+0xb0>)
 80036a8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ac:	0c9b      	lsrs	r3, r3, #18
 80036ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036b0:	e002      	b.n	80036b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f9      	bne.n	80036b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036be:	f7ff fbef 	bl	8002ea0 <HAL_GetTick>
 80036c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036c4:	e01f      	b.n	8003706 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036c6:	f7ff fbeb 	bl	8002ea0 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d918      	bls.n	8003706 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d011      	beq.n	8003706 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	f043 0210 	orr.w	r2, r3, #16
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	f043 0201 	orr.w	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e007      	b.n	8003716 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	d1d8      	bne.n	80036c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000000 	.word	0x20000000
 8003724:	431bde83 	.word	0x431bde83

08003728 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b01      	cmp	r3, #1
 8003740:	d12e      	bne.n	80037a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003752:	f7ff fba5 	bl	8002ea0 <HAL_GetTick>
 8003756:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003758:	e01b      	b.n	8003792 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800375a:	f7ff fba1 	bl	8002ea0 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d914      	bls.n	8003792 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d10d      	bne.n	8003792 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	f043 0210 	orr.w	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	f043 0201 	orr.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e007      	b.n	80037a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b01      	cmp	r3, #1
 800379e:	d0dc      	beq.n	800375a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c8:	4013      	ands	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037de:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	60d3      	str	r3, [r2, #12]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <__NVIC_GetPriorityGrouping+0x18>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 0307 	and.w	r3, r3, #7
}
 8003802:	4618      	mov	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	db0b      	blt.n	800383a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	f003 021f 	and.w	r2, r3, #31
 8003828:	4906      	ldr	r1, [pc, #24]	; (8003844 <__NVIC_EnableIRQ+0x34>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2001      	movs	r0, #1
 8003832:	fa00 f202 	lsl.w	r2, r0, r2
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr
 8003844:	e000e100 	.word	0xe000e100

08003848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	6039      	str	r1, [r7, #0]
 8003852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003858:	2b00      	cmp	r3, #0
 800385a:	db0a      	blt.n	8003872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	b2da      	uxtb	r2, r3
 8003860:	490c      	ldr	r1, [pc, #48]	; (8003894 <__NVIC_SetPriority+0x4c>)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	440b      	add	r3, r1
 800386c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003870:	e00a      	b.n	8003888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4908      	ldr	r1, [pc, #32]	; (8003898 <__NVIC_SetPriority+0x50>)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	3b04      	subs	r3, #4
 8003880:	0112      	lsls	r2, r2, #4
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	440b      	add	r3, r1
 8003886:	761a      	strb	r2, [r3, #24]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000e100 	.word	0xe000e100
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	; 0x24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f1c3 0307 	rsb	r3, r3, #7
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	bf28      	it	cs
 80038ba:	2304      	movcs	r3, #4
 80038bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3304      	adds	r3, #4
 80038c2:	2b06      	cmp	r3, #6
 80038c4:	d902      	bls.n	80038cc <NVIC_EncodePriority+0x30>
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3b03      	subs	r3, #3
 80038ca:	e000      	b.n	80038ce <NVIC_EncodePriority+0x32>
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	401a      	ands	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e4:	f04f 31ff 	mov.w	r1, #4294967295
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	43d9      	mvns	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	4313      	orrs	r3, r2
         );
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3724      	adds	r7, #36	; 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ff4f 	bl	80037ac <__NVIC_SetPriorityGrouping>
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003916:	b580      	push	{r7, lr}
 8003918:	b086      	sub	sp, #24
 800391a:	af00      	add	r7, sp, #0
 800391c:	4603      	mov	r3, r0
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003928:	f7ff ff64 	bl	80037f4 <__NVIC_GetPriorityGrouping>
 800392c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	6978      	ldr	r0, [r7, #20]
 8003934:	f7ff ffb2 	bl	800389c <NVIC_EncodePriority>
 8003938:	4602      	mov	r2, r0
 800393a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff81 	bl	8003848 <__NVIC_SetPriority>
}
 8003946:	bf00      	nop
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	4603      	mov	r3, r0
 8003956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff57 	bl	8003810 <__NVIC_EnableIRQ>
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e059      	b.n	8003a36 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	4b2d      	ldr	r3, [pc, #180]	; (8003a40 <HAL_DMA_Init+0xd4>)
 800398a:	429a      	cmp	r2, r3
 800398c:	d80f      	bhi.n	80039ae <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_DMA_Init+0xd8>)
 8003996:	4413      	add	r3, r2
 8003998:	4a2b      	ldr	r2, [pc, #172]	; (8003a48 <HAL_DMA_Init+0xdc>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	009a      	lsls	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a28      	ldr	r2, [pc, #160]	; (8003a4c <HAL_DMA_Init+0xe0>)
 80039aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80039ac:	e00e      	b.n	80039cc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <HAL_DMA_Init+0xe4>)
 80039b6:	4413      	add	r3, r2
 80039b8:	4a23      	ldr	r2, [pc, #140]	; (8003a48 <HAL_DMA_Init+0xdc>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	091b      	lsrs	r3, r3, #4
 80039c0:	009a      	lsls	r2, r3, #2
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a22      	ldr	r2, [pc, #136]	; (8003a54 <HAL_DMA_Init+0xe8>)
 80039ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80039e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80039f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr
 8003a40:	40020407 	.word	0x40020407
 8003a44:	bffdfff8 	.word	0xbffdfff8
 8003a48:	cccccccd 	.word	0xcccccccd
 8003a4c:	40020000 	.word	0x40020000
 8003a50:	bffdfbf8 	.word	0xbffdfbf8
 8003a54:	40020400 	.word	0x40020400

08003a58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	2204      	movs	r2, #4
 8003a76:	409a      	lsls	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80f1 	beq.w	8003c64 <HAL_DMA_IRQHandler+0x20c>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80eb 	beq.w	8003c64 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d107      	bne.n	8003aac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0204 	bic.w	r2, r2, #4
 8003aaa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b5f      	ldr	r3, [pc, #380]	; (8003c30 <HAL_DMA_IRQHandler+0x1d8>)
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d958      	bls.n	8003b6a <HAL_DMA_IRQHandler+0x112>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a5d      	ldr	r2, [pc, #372]	; (8003c34 <HAL_DMA_IRQHandler+0x1dc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d04f      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x10a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a5c      	ldr	r2, [pc, #368]	; (8003c38 <HAL_DMA_IRQHandler+0x1e0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d048      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x106>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a5a      	ldr	r2, [pc, #360]	; (8003c3c <HAL_DMA_IRQHandler+0x1e4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d040      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x100>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a59      	ldr	r2, [pc, #356]	; (8003c40 <HAL_DMA_IRQHandler+0x1e8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d038      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xfa>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a57      	ldr	r2, [pc, #348]	; (8003c44 <HAL_DMA_IRQHandler+0x1ec>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d030      	beq.n	8003b4c <HAL_DMA_IRQHandler+0xf4>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a56      	ldr	r2, [pc, #344]	; (8003c48 <HAL_DMA_IRQHandler+0x1f0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d028      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xee>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a4d      	ldr	r2, [pc, #308]	; (8003c30 <HAL_DMA_IRQHandler+0x1d8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d020      	beq.n	8003b40 <HAL_DMA_IRQHandler+0xe8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a52      	ldr	r2, [pc, #328]	; (8003c4c <HAL_DMA_IRQHandler+0x1f4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d019      	beq.n	8003b3c <HAL_DMA_IRQHandler+0xe4>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a50      	ldr	r2, [pc, #320]	; (8003c50 <HAL_DMA_IRQHandler+0x1f8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d012      	beq.n	8003b38 <HAL_DMA_IRQHandler+0xe0>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a4f      	ldr	r2, [pc, #316]	; (8003c54 <HAL_DMA_IRQHandler+0x1fc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00a      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xda>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a4d      	ldr	r2, [pc, #308]	; (8003c58 <HAL_DMA_IRQHandler+0x200>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d102      	bne.n	8003b2c <HAL_DMA_IRQHandler+0xd4>
 8003b26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b2a:	e01b      	b.n	8003b64 <HAL_DMA_IRQHandler+0x10c>
 8003b2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b30:	e018      	b.n	8003b64 <HAL_DMA_IRQHandler+0x10c>
 8003b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b36:	e015      	b.n	8003b64 <HAL_DMA_IRQHandler+0x10c>
 8003b38:	2340      	movs	r3, #64	; 0x40
 8003b3a:	e013      	b.n	8003b64 <HAL_DMA_IRQHandler+0x10c>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	e011      	b.n	8003b64 <HAL_DMA_IRQHandler+0x10c>
 8003b40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b44:	e00e      	b.n	8003b64 <HAL_DMA_IRQHandler+0x10c>
 8003b46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b4a:	e00b      	b.n	8003b64 <HAL_DMA_IRQHandler+0x10c>
 8003b4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b50:	e008      	b.n	8003b64 <HAL_DMA_IRQHandler+0x10c>
 8003b52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b56:	e005      	b.n	8003b64 <HAL_DMA_IRQHandler+0x10c>
 8003b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b5c:	e002      	b.n	8003b64 <HAL_DMA_IRQHandler+0x10c>
 8003b5e:	2340      	movs	r3, #64	; 0x40
 8003b60:	e000      	b.n	8003b64 <HAL_DMA_IRQHandler+0x10c>
 8003b62:	2304      	movs	r3, #4
 8003b64:	4a3d      	ldr	r2, [pc, #244]	; (8003c5c <HAL_DMA_IRQHandler+0x204>)
 8003b66:	6053      	str	r3, [r2, #4]
 8003b68:	e057      	b.n	8003c1a <HAL_DMA_IRQHandler+0x1c2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a31      	ldr	r2, [pc, #196]	; (8003c34 <HAL_DMA_IRQHandler+0x1dc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d04f      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x1bc>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a2f      	ldr	r2, [pc, #188]	; (8003c38 <HAL_DMA_IRQHandler+0x1e0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d048      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x1b8>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2e      	ldr	r2, [pc, #184]	; (8003c3c <HAL_DMA_IRQHandler+0x1e4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d040      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x1b2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a2c      	ldr	r2, [pc, #176]	; (8003c40 <HAL_DMA_IRQHandler+0x1e8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d038      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x1ac>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2b      	ldr	r2, [pc, #172]	; (8003c44 <HAL_DMA_IRQHandler+0x1ec>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d030      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x1a6>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a29      	ldr	r2, [pc, #164]	; (8003c48 <HAL_DMA_IRQHandler+0x1f0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d028      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x1a0>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <HAL_DMA_IRQHandler+0x1d8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d020      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x19a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a25      	ldr	r2, [pc, #148]	; (8003c4c <HAL_DMA_IRQHandler+0x1f4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d019      	beq.n	8003bee <HAL_DMA_IRQHandler+0x196>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a24      	ldr	r2, [pc, #144]	; (8003c50 <HAL_DMA_IRQHandler+0x1f8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d012      	beq.n	8003bea <HAL_DMA_IRQHandler+0x192>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a22      	ldr	r2, [pc, #136]	; (8003c54 <HAL_DMA_IRQHandler+0x1fc>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00a      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x18c>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <HAL_DMA_IRQHandler+0x200>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d102      	bne.n	8003bde <HAL_DMA_IRQHandler+0x186>
 8003bd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bdc:	e01b      	b.n	8003c16 <HAL_DMA_IRQHandler+0x1be>
 8003bde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003be2:	e018      	b.n	8003c16 <HAL_DMA_IRQHandler+0x1be>
 8003be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003be8:	e015      	b.n	8003c16 <HAL_DMA_IRQHandler+0x1be>
 8003bea:	2340      	movs	r3, #64	; 0x40
 8003bec:	e013      	b.n	8003c16 <HAL_DMA_IRQHandler+0x1be>
 8003bee:	2304      	movs	r3, #4
 8003bf0:	e011      	b.n	8003c16 <HAL_DMA_IRQHandler+0x1be>
 8003bf2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003bf6:	e00e      	b.n	8003c16 <HAL_DMA_IRQHandler+0x1be>
 8003bf8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bfc:	e00b      	b.n	8003c16 <HAL_DMA_IRQHandler+0x1be>
 8003bfe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c02:	e008      	b.n	8003c16 <HAL_DMA_IRQHandler+0x1be>
 8003c04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c08:	e005      	b.n	8003c16 <HAL_DMA_IRQHandler+0x1be>
 8003c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c0e:	e002      	b.n	8003c16 <HAL_DMA_IRQHandler+0x1be>
 8003c10:	2340      	movs	r3, #64	; 0x40
 8003c12:	e000      	b.n	8003c16 <HAL_DMA_IRQHandler+0x1be>
 8003c14:	2304      	movs	r3, #4
 8003c16:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <HAL_DMA_IRQHandler+0x208>)
 8003c18:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8136 	beq.w	8003e90 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003c2c:	e130      	b.n	8003e90 <HAL_DMA_IRQHandler+0x438>
 8003c2e:	bf00      	nop
 8003c30:	40020080 	.word	0x40020080
 8003c34:	40020008 	.word	0x40020008
 8003c38:	4002001c 	.word	0x4002001c
 8003c3c:	40020030 	.word	0x40020030
 8003c40:	40020044 	.word	0x40020044
 8003c44:	40020058 	.word	0x40020058
 8003c48:	4002006c 	.word	0x4002006c
 8003c4c:	40020408 	.word	0x40020408
 8003c50:	4002041c 	.word	0x4002041c
 8003c54:	40020430 	.word	0x40020430
 8003c58:	40020444 	.word	0x40020444
 8003c5c:	40020400 	.word	0x40020400
 8003c60:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	2202      	movs	r2, #2
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80dd 	beq.w	8003e30 <HAL_DMA_IRQHandler+0x3d8>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80d7 	beq.w	8003e30 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 020a 	bic.w	r2, r2, #10
 8003c9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b7b      	ldr	r3, [pc, #492]	; (8003e9c <HAL_DMA_IRQHandler+0x444>)
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d958      	bls.n	8003d66 <HAL_DMA_IRQHandler+0x30e>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a79      	ldr	r2, [pc, #484]	; (8003ea0 <HAL_DMA_IRQHandler+0x448>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d04f      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x306>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a78      	ldr	r2, [pc, #480]	; (8003ea4 <HAL_DMA_IRQHandler+0x44c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d048      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x302>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a76      	ldr	r2, [pc, #472]	; (8003ea8 <HAL_DMA_IRQHandler+0x450>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d040      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x2fc>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a75      	ldr	r2, [pc, #468]	; (8003eac <HAL_DMA_IRQHandler+0x454>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d038      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x2f6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a73      	ldr	r2, [pc, #460]	; (8003eb0 <HAL_DMA_IRQHandler+0x458>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d030      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x2f0>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a72      	ldr	r2, [pc, #456]	; (8003eb4 <HAL_DMA_IRQHandler+0x45c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d028      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x2ea>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a69      	ldr	r2, [pc, #420]	; (8003e9c <HAL_DMA_IRQHandler+0x444>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d020      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x2e4>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a6e      	ldr	r2, [pc, #440]	; (8003eb8 <HAL_DMA_IRQHandler+0x460>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d019      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x2e0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a6c      	ldr	r2, [pc, #432]	; (8003ebc <HAL_DMA_IRQHandler+0x464>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d012      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x2dc>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6b      	ldr	r2, [pc, #428]	; (8003ec0 <HAL_DMA_IRQHandler+0x468>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00a      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x2d6>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a69      	ldr	r2, [pc, #420]	; (8003ec4 <HAL_DMA_IRQHandler+0x46c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d102      	bne.n	8003d28 <HAL_DMA_IRQHandler+0x2d0>
 8003d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d26:	e01b      	b.n	8003d60 <HAL_DMA_IRQHandler+0x308>
 8003d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d2c:	e018      	b.n	8003d60 <HAL_DMA_IRQHandler+0x308>
 8003d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d32:	e015      	b.n	8003d60 <HAL_DMA_IRQHandler+0x308>
 8003d34:	2320      	movs	r3, #32
 8003d36:	e013      	b.n	8003d60 <HAL_DMA_IRQHandler+0x308>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e011      	b.n	8003d60 <HAL_DMA_IRQHandler+0x308>
 8003d3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d40:	e00e      	b.n	8003d60 <HAL_DMA_IRQHandler+0x308>
 8003d42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d46:	e00b      	b.n	8003d60 <HAL_DMA_IRQHandler+0x308>
 8003d48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d4c:	e008      	b.n	8003d60 <HAL_DMA_IRQHandler+0x308>
 8003d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d52:	e005      	b.n	8003d60 <HAL_DMA_IRQHandler+0x308>
 8003d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d58:	e002      	b.n	8003d60 <HAL_DMA_IRQHandler+0x308>
 8003d5a:	2320      	movs	r3, #32
 8003d5c:	e000      	b.n	8003d60 <HAL_DMA_IRQHandler+0x308>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	4a59      	ldr	r2, [pc, #356]	; (8003ec8 <HAL_DMA_IRQHandler+0x470>)
 8003d62:	6053      	str	r3, [r2, #4]
 8003d64:	e057      	b.n	8003e16 <HAL_DMA_IRQHandler+0x3be>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a4d      	ldr	r2, [pc, #308]	; (8003ea0 <HAL_DMA_IRQHandler+0x448>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d04f      	beq.n	8003e10 <HAL_DMA_IRQHandler+0x3b8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a4b      	ldr	r2, [pc, #300]	; (8003ea4 <HAL_DMA_IRQHandler+0x44c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d048      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x3b4>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a4a      	ldr	r2, [pc, #296]	; (8003ea8 <HAL_DMA_IRQHandler+0x450>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d040      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x3ae>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a48      	ldr	r2, [pc, #288]	; (8003eac <HAL_DMA_IRQHandler+0x454>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d038      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x3a8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a47      	ldr	r2, [pc, #284]	; (8003eb0 <HAL_DMA_IRQHandler+0x458>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d030      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3a2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a45      	ldr	r2, [pc, #276]	; (8003eb4 <HAL_DMA_IRQHandler+0x45c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d028      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x39c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a3d      	ldr	r2, [pc, #244]	; (8003e9c <HAL_DMA_IRQHandler+0x444>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d020      	beq.n	8003dee <HAL_DMA_IRQHandler+0x396>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a41      	ldr	r2, [pc, #260]	; (8003eb8 <HAL_DMA_IRQHandler+0x460>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d019      	beq.n	8003dea <HAL_DMA_IRQHandler+0x392>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a40      	ldr	r2, [pc, #256]	; (8003ebc <HAL_DMA_IRQHandler+0x464>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d012      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x38e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a3e      	ldr	r2, [pc, #248]	; (8003ec0 <HAL_DMA_IRQHandler+0x468>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00a      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x388>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a3d      	ldr	r2, [pc, #244]	; (8003ec4 <HAL_DMA_IRQHandler+0x46c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d102      	bne.n	8003dda <HAL_DMA_IRQHandler+0x382>
 8003dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dd8:	e01b      	b.n	8003e12 <HAL_DMA_IRQHandler+0x3ba>
 8003dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dde:	e018      	b.n	8003e12 <HAL_DMA_IRQHandler+0x3ba>
 8003de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003de4:	e015      	b.n	8003e12 <HAL_DMA_IRQHandler+0x3ba>
 8003de6:	2320      	movs	r3, #32
 8003de8:	e013      	b.n	8003e12 <HAL_DMA_IRQHandler+0x3ba>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e011      	b.n	8003e12 <HAL_DMA_IRQHandler+0x3ba>
 8003dee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003df2:	e00e      	b.n	8003e12 <HAL_DMA_IRQHandler+0x3ba>
 8003df4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003df8:	e00b      	b.n	8003e12 <HAL_DMA_IRQHandler+0x3ba>
 8003dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dfe:	e008      	b.n	8003e12 <HAL_DMA_IRQHandler+0x3ba>
 8003e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e04:	e005      	b.n	8003e12 <HAL_DMA_IRQHandler+0x3ba>
 8003e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e0a:	e002      	b.n	8003e12 <HAL_DMA_IRQHandler+0x3ba>
 8003e0c:	2320      	movs	r3, #32
 8003e0e:	e000      	b.n	8003e12 <HAL_DMA_IRQHandler+0x3ba>
 8003e10:	2302      	movs	r3, #2
 8003e12:	4a2e      	ldr	r2, [pc, #184]	; (8003ecc <HAL_DMA_IRQHandler+0x474>)
 8003e14:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d034      	beq.n	8003e90 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e2e:	e02f      	b.n	8003e90 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	2208      	movs	r2, #8
 8003e36:	409a      	lsls	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d028      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x43a>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d023      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 020e 	bic.w	r2, r2, #14
 8003e58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e62:	2101      	movs	r1, #1
 8003e64:	fa01 f202 	lsl.w	r2, r1, r2
 8003e68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d004      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
    }
  }
  return;
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
}
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40020080 	.word	0x40020080
 8003ea0:	40020008 	.word	0x40020008
 8003ea4:	4002001c 	.word	0x4002001c
 8003ea8:	40020030 	.word	0x40020030
 8003eac:	40020044 	.word	0x40020044
 8003eb0:	40020058 	.word	0x40020058
 8003eb4:	4002006c 	.word	0x4002006c
 8003eb8:	40020408 	.word	0x40020408
 8003ebc:	4002041c 	.word	0x4002041c
 8003ec0:	40020430 	.word	0x40020430
 8003ec4:	40020444 	.word	0x40020444
 8003ec8:	40020400 	.word	0x40020400
 8003ecc:	40020000 	.word	0x40020000

08003ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b08b      	sub	sp, #44	; 0x2c
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eda:	2300      	movs	r3, #0
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ee2:	e169      	b.n	80041b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	f040 8158 	bne.w	80041b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4a9a      	ldr	r2, [pc, #616]	; (8004170 <HAL_GPIO_Init+0x2a0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d05e      	beq.n	8003fca <HAL_GPIO_Init+0xfa>
 8003f0c:	4a98      	ldr	r2, [pc, #608]	; (8004170 <HAL_GPIO_Init+0x2a0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d875      	bhi.n	8003ffe <HAL_GPIO_Init+0x12e>
 8003f12:	4a98      	ldr	r2, [pc, #608]	; (8004174 <HAL_GPIO_Init+0x2a4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d058      	beq.n	8003fca <HAL_GPIO_Init+0xfa>
 8003f18:	4a96      	ldr	r2, [pc, #600]	; (8004174 <HAL_GPIO_Init+0x2a4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d86f      	bhi.n	8003ffe <HAL_GPIO_Init+0x12e>
 8003f1e:	4a96      	ldr	r2, [pc, #600]	; (8004178 <HAL_GPIO_Init+0x2a8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d052      	beq.n	8003fca <HAL_GPIO_Init+0xfa>
 8003f24:	4a94      	ldr	r2, [pc, #592]	; (8004178 <HAL_GPIO_Init+0x2a8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d869      	bhi.n	8003ffe <HAL_GPIO_Init+0x12e>
 8003f2a:	4a94      	ldr	r2, [pc, #592]	; (800417c <HAL_GPIO_Init+0x2ac>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d04c      	beq.n	8003fca <HAL_GPIO_Init+0xfa>
 8003f30:	4a92      	ldr	r2, [pc, #584]	; (800417c <HAL_GPIO_Init+0x2ac>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d863      	bhi.n	8003ffe <HAL_GPIO_Init+0x12e>
 8003f36:	4a92      	ldr	r2, [pc, #584]	; (8004180 <HAL_GPIO_Init+0x2b0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d046      	beq.n	8003fca <HAL_GPIO_Init+0xfa>
 8003f3c:	4a90      	ldr	r2, [pc, #576]	; (8004180 <HAL_GPIO_Init+0x2b0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d85d      	bhi.n	8003ffe <HAL_GPIO_Init+0x12e>
 8003f42:	2b12      	cmp	r3, #18
 8003f44:	d82a      	bhi.n	8003f9c <HAL_GPIO_Init+0xcc>
 8003f46:	2b12      	cmp	r3, #18
 8003f48:	d859      	bhi.n	8003ffe <HAL_GPIO_Init+0x12e>
 8003f4a:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <HAL_GPIO_Init+0x80>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	08003fcb 	.word	0x08003fcb
 8003f54:	08003fa5 	.word	0x08003fa5
 8003f58:	08003fb7 	.word	0x08003fb7
 8003f5c:	08003ff9 	.word	0x08003ff9
 8003f60:	08003fff 	.word	0x08003fff
 8003f64:	08003fff 	.word	0x08003fff
 8003f68:	08003fff 	.word	0x08003fff
 8003f6c:	08003fff 	.word	0x08003fff
 8003f70:	08003fff 	.word	0x08003fff
 8003f74:	08003fff 	.word	0x08003fff
 8003f78:	08003fff 	.word	0x08003fff
 8003f7c:	08003fff 	.word	0x08003fff
 8003f80:	08003fff 	.word	0x08003fff
 8003f84:	08003fff 	.word	0x08003fff
 8003f88:	08003fff 	.word	0x08003fff
 8003f8c:	08003fff 	.word	0x08003fff
 8003f90:	08003fff 	.word	0x08003fff
 8003f94:	08003fad 	.word	0x08003fad
 8003f98:	08003fc1 	.word	0x08003fc1
 8003f9c:	4a79      	ldr	r2, [pc, #484]	; (8004184 <HAL_GPIO_Init+0x2b4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003fa2:	e02c      	b.n	8003ffe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	623b      	str	r3, [r7, #32]
          break;
 8003faa:	e029      	b.n	8004000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	623b      	str	r3, [r7, #32]
          break;
 8003fb4:	e024      	b.n	8004000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	3308      	adds	r3, #8
 8003fbc:	623b      	str	r3, [r7, #32]
          break;
 8003fbe:	e01f      	b.n	8004000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	623b      	str	r3, [r7, #32]
          break;
 8003fc8:	e01a      	b.n	8004000 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d102      	bne.n	8003fd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	623b      	str	r3, [r7, #32]
          break;
 8003fd6:	e013      	b.n	8004000 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d105      	bne.n	8003fec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fe0:	2308      	movs	r3, #8
 8003fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	611a      	str	r2, [r3, #16]
          break;
 8003fea:	e009      	b.n	8004000 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fec:	2308      	movs	r3, #8
 8003fee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	615a      	str	r2, [r3, #20]
          break;
 8003ff6:	e003      	b.n	8004000 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	623b      	str	r3, [r7, #32]
          break;
 8003ffc:	e000      	b.n	8004000 <HAL_GPIO_Init+0x130>
          break;
 8003ffe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2bff      	cmp	r3, #255	; 0xff
 8004004:	d801      	bhi.n	800400a <HAL_GPIO_Init+0x13a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	e001      	b.n	800400e <HAL_GPIO_Init+0x13e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2bff      	cmp	r3, #255	; 0xff
 8004014:	d802      	bhi.n	800401c <HAL_GPIO_Init+0x14c>
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	e002      	b.n	8004022 <HAL_GPIO_Init+0x152>
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	3b08      	subs	r3, #8
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	210f      	movs	r1, #15
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	401a      	ands	r2, r3
 8004034:	6a39      	ldr	r1, [r7, #32]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	fa01 f303 	lsl.w	r3, r1, r3
 800403c:	431a      	orrs	r2, r3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80b1 	beq.w	80041b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004050:	4b4d      	ldr	r3, [pc, #308]	; (8004188 <HAL_GPIO_Init+0x2b8>)
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	4a4c      	ldr	r2, [pc, #304]	; (8004188 <HAL_GPIO_Init+0x2b8>)
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	6193      	str	r3, [r2, #24]
 800405c:	4b4a      	ldr	r3, [pc, #296]	; (8004188 <HAL_GPIO_Init+0x2b8>)
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004068:	4a48      	ldr	r2, [pc, #288]	; (800418c <HAL_GPIO_Init+0x2bc>)
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	089b      	lsrs	r3, r3, #2
 800406e:	3302      	adds	r3, #2
 8004070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004074:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	220f      	movs	r2, #15
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4013      	ands	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a40      	ldr	r2, [pc, #256]	; (8004190 <HAL_GPIO_Init+0x2c0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d013      	beq.n	80040bc <HAL_GPIO_Init+0x1ec>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a3f      	ldr	r2, [pc, #252]	; (8004194 <HAL_GPIO_Init+0x2c4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00d      	beq.n	80040b8 <HAL_GPIO_Init+0x1e8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a3e      	ldr	r2, [pc, #248]	; (8004198 <HAL_GPIO_Init+0x2c8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d007      	beq.n	80040b4 <HAL_GPIO_Init+0x1e4>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a3d      	ldr	r2, [pc, #244]	; (800419c <HAL_GPIO_Init+0x2cc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d101      	bne.n	80040b0 <HAL_GPIO_Init+0x1e0>
 80040ac:	2303      	movs	r3, #3
 80040ae:	e006      	b.n	80040be <HAL_GPIO_Init+0x1ee>
 80040b0:	2304      	movs	r3, #4
 80040b2:	e004      	b.n	80040be <HAL_GPIO_Init+0x1ee>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e002      	b.n	80040be <HAL_GPIO_Init+0x1ee>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_GPIO_Init+0x1ee>
 80040bc:	2300      	movs	r3, #0
 80040be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c0:	f002 0203 	and.w	r2, r2, #3
 80040c4:	0092      	lsls	r2, r2, #2
 80040c6:	4093      	lsls	r3, r2
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80040ce:	492f      	ldr	r1, [pc, #188]	; (800418c <HAL_GPIO_Init+0x2bc>)
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	089b      	lsrs	r3, r3, #2
 80040d4:	3302      	adds	r3, #2
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d006      	beq.n	80040f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80040e8:	4b2d      	ldr	r3, [pc, #180]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	492c      	ldr	r1, [pc, #176]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	600b      	str	r3, [r1, #0]
 80040f4:	e006      	b.n	8004104 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80040f6:	4b2a      	ldr	r3, [pc, #168]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	4928      	ldr	r1, [pc, #160]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004100:	4013      	ands	r3, r2
 8004102:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d006      	beq.n	800411e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004110:	4b23      	ldr	r3, [pc, #140]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	4922      	ldr	r1, [pc, #136]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	4313      	orrs	r3, r2
 800411a:	604b      	str	r3, [r1, #4]
 800411c:	e006      	b.n	800412c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800411e:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	43db      	mvns	r3, r3
 8004126:	491e      	ldr	r1, [pc, #120]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004128:	4013      	ands	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d006      	beq.n	8004146 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	4918      	ldr	r1, [pc, #96]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	4313      	orrs	r3, r2
 8004142:	608b      	str	r3, [r1, #8]
 8004144:	e006      	b.n	8004154 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004146:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	43db      	mvns	r3, r3
 800414e:	4914      	ldr	r1, [pc, #80]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004150:	4013      	ands	r3, r2
 8004152:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d021      	beq.n	80041a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	490e      	ldr	r1, [pc, #56]	; (80041a0 <HAL_GPIO_Init+0x2d0>)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	4313      	orrs	r3, r2
 800416a:	60cb      	str	r3, [r1, #12]
 800416c:	e021      	b.n	80041b2 <HAL_GPIO_Init+0x2e2>
 800416e:	bf00      	nop
 8004170:	10320000 	.word	0x10320000
 8004174:	10310000 	.word	0x10310000
 8004178:	10220000 	.word	0x10220000
 800417c:	10210000 	.word	0x10210000
 8004180:	10120000 	.word	0x10120000
 8004184:	10110000 	.word	0x10110000
 8004188:	40021000 	.word	0x40021000
 800418c:	40010000 	.word	0x40010000
 8004190:	40010800 	.word	0x40010800
 8004194:	40010c00 	.word	0x40010c00
 8004198:	40011000 	.word	0x40011000
 800419c:	40011400 	.word	0x40011400
 80041a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_GPIO_Init+0x304>)
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	43db      	mvns	r3, r3
 80041ac:	4909      	ldr	r1, [pc, #36]	; (80041d4 <HAL_GPIO_Init+0x304>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	3301      	adds	r3, #1
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	fa22 f303 	lsr.w	r3, r2, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f47f ae8e 	bne.w	8003ee4 <HAL_GPIO_Init+0x14>
  }
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	372c      	adds	r7, #44	; 0x2c
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr
 80041d4:	40010400 	.word	0x40010400

080041d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	887b      	ldrh	r3, [r7, #2]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	e001      	b.n	80041fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr

08004206 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	460b      	mov	r3, r1
 8004210:	807b      	strh	r3, [r7, #2]
 8004212:	4613      	mov	r3, r2
 8004214:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004216:	787b      	ldrb	r3, [r7, #1]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800421c:	887a      	ldrh	r2, [r7, #2]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004222:	e003      	b.n	800422c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004224:	887b      	ldrh	r3, [r7, #2]
 8004226:	041a      	lsls	r2, r3, #16
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	611a      	str	r2, [r3, #16]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr
	...

08004238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e304      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8087 	beq.w	8004366 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004258:	4b92      	ldr	r3, [pc, #584]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b04      	cmp	r3, #4
 8004262:	d00c      	beq.n	800427e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004264:	4b8f      	ldr	r3, [pc, #572]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d112      	bne.n	8004296 <HAL_RCC_OscConfig+0x5e>
 8004270:	4b8c      	ldr	r3, [pc, #560]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427c:	d10b      	bne.n	8004296 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427e:	4b89      	ldr	r3, [pc, #548]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d06c      	beq.n	8004364 <HAL_RCC_OscConfig+0x12c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d168      	bne.n	8004364 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e2de      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x76>
 80042a0:	4b80      	ldr	r3, [pc, #512]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a7f      	ldr	r2, [pc, #508]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e02e      	b.n	800430c <HAL_RCC_OscConfig+0xd4>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x98>
 80042b6:	4b7b      	ldr	r3, [pc, #492]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7a      	ldr	r2, [pc, #488]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b78      	ldr	r3, [pc, #480]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a77      	ldr	r2, [pc, #476]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e01d      	b.n	800430c <HAL_RCC_OscConfig+0xd4>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0xbc>
 80042da:	4b72      	ldr	r3, [pc, #456]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a71      	ldr	r2, [pc, #452]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b6f      	ldr	r3, [pc, #444]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a6e      	ldr	r2, [pc, #440]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0xd4>
 80042f4:	4b6b      	ldr	r3, [pc, #428]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a6a      	ldr	r2, [pc, #424]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b68      	ldr	r3, [pc, #416]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a67      	ldr	r2, [pc, #412]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fe fdc4 	bl	8002ea0 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fe fdc0 	bl	8002ea0 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e292      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b5d      	ldr	r3, [pc, #372]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0xe4>
 800433a:	e014      	b.n	8004366 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fe fdb0 	bl	8002ea0 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004344:	f7fe fdac 	bl	8002ea0 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e27e      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	4b53      	ldr	r3, [pc, #332]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x10c>
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d063      	beq.n	800443a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004372:	4b4c      	ldr	r3, [pc, #304]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800437e:	4b49      	ldr	r3, [pc, #292]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b08      	cmp	r3, #8
 8004388:	d11c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x18c>
 800438a:	4b46      	ldr	r3, [pc, #280]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d116      	bne.n	80043c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004396:	4b43      	ldr	r3, [pc, #268]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_RCC_OscConfig+0x176>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e252      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ae:	4b3d      	ldr	r3, [pc, #244]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4939      	ldr	r1, [pc, #228]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	e03a      	b.n	800443a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d020      	beq.n	800440e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043cc:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_RCC_OscConfig+0x270>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d2:	f7fe fd65 	bl	8002ea0 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043da:	f7fe fd61 	bl	8002ea0 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e233      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ec:	4b2d      	ldr	r3, [pc, #180]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f8:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4927      	ldr	r1, [pc, #156]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004408:	4313      	orrs	r3, r2
 800440a:	600b      	str	r3, [r1, #0]
 800440c:	e015      	b.n	800443a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800440e:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <HAL_RCC_OscConfig+0x270>)
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fe fd44 	bl	8002ea0 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800441c:	f7fe fd40 	bl	8002ea0 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e212      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442e:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d03a      	beq.n	80044bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d019      	beq.n	8004482 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800444e:	4b17      	ldr	r3, [pc, #92]	; (80044ac <HAL_RCC_OscConfig+0x274>)
 8004450:	2201      	movs	r2, #1
 8004452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004454:	f7fe fd24 	bl	8002ea0 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800445c:	f7fe fd20 	bl	8002ea0 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e1f2      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446e:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <HAL_RCC_OscConfig+0x26c>)
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800447a:	2001      	movs	r0, #1
 800447c:	f000 fc50 	bl	8004d20 <RCC_Delay>
 8004480:	e01c      	b.n	80044bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004482:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <HAL_RCC_OscConfig+0x274>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004488:	f7fe fd0a 	bl	8002ea0 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800448e:	e00f      	b.n	80044b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004490:	f7fe fd06 	bl	8002ea0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d908      	bls.n	80044b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1d8      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
 80044a8:	42420000 	.word	0x42420000
 80044ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b0:	4b9b      	ldr	r3, [pc, #620]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e9      	bne.n	8004490 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80a6 	beq.w	8004616 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ca:	2300      	movs	r3, #0
 80044cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ce:	4b94      	ldr	r3, [pc, #592]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10d      	bne.n	80044f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044da:	4b91      	ldr	r3, [pc, #580]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4a90      	ldr	r2, [pc, #576]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80044e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e4:	61d3      	str	r3, [r2, #28]
 80044e6:	4b8e      	ldr	r3, [pc, #568]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f2:	2301      	movs	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f6:	4b8b      	ldr	r3, [pc, #556]	; (8004724 <HAL_RCC_OscConfig+0x4ec>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d118      	bne.n	8004534 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004502:	4b88      	ldr	r3, [pc, #544]	; (8004724 <HAL_RCC_OscConfig+0x4ec>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a87      	ldr	r2, [pc, #540]	; (8004724 <HAL_RCC_OscConfig+0x4ec>)
 8004508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800450e:	f7fe fcc7 	bl	8002ea0 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004516:	f7fe fcc3 	bl	8002ea0 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b64      	cmp	r3, #100	; 0x64
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e195      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	4b7e      	ldr	r3, [pc, #504]	; (8004724 <HAL_RCC_OscConfig+0x4ec>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d106      	bne.n	800454a <HAL_RCC_OscConfig+0x312>
 800453c:	4b78      	ldr	r3, [pc, #480]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	4a77      	ldr	r2, [pc, #476]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	6213      	str	r3, [r2, #32]
 8004548:	e02d      	b.n	80045a6 <HAL_RCC_OscConfig+0x36e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0x334>
 8004552:	4b73      	ldr	r3, [pc, #460]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	4a72      	ldr	r2, [pc, #456]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	6213      	str	r3, [r2, #32]
 800455e:	4b70      	ldr	r3, [pc, #448]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	4a6f      	ldr	r2, [pc, #444]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004564:	f023 0304 	bic.w	r3, r3, #4
 8004568:	6213      	str	r3, [r2, #32]
 800456a:	e01c      	b.n	80045a6 <HAL_RCC_OscConfig+0x36e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b05      	cmp	r3, #5
 8004572:	d10c      	bne.n	800458e <HAL_RCC_OscConfig+0x356>
 8004574:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	4a69      	ldr	r2, [pc, #420]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 800457a:	f043 0304 	orr.w	r3, r3, #4
 800457e:	6213      	str	r3, [r2, #32]
 8004580:	4b67      	ldr	r3, [pc, #412]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	4a66      	ldr	r2, [pc, #408]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	6213      	str	r3, [r2, #32]
 800458c:	e00b      	b.n	80045a6 <HAL_RCC_OscConfig+0x36e>
 800458e:	4b64      	ldr	r3, [pc, #400]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4a63      	ldr	r2, [pc, #396]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004594:	f023 0301 	bic.w	r3, r3, #1
 8004598:	6213      	str	r3, [r2, #32]
 800459a:	4b61      	ldr	r3, [pc, #388]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	4a60      	ldr	r2, [pc, #384]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80045a0:	f023 0304 	bic.w	r3, r3, #4
 80045a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d015      	beq.n	80045da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ae:	f7fe fc77 	bl	8002ea0 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b4:	e00a      	b.n	80045cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b6:	f7fe fc73 	bl	8002ea0 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e143      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045cc:	4b54      	ldr	r3, [pc, #336]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0ee      	beq.n	80045b6 <HAL_RCC_OscConfig+0x37e>
 80045d8:	e014      	b.n	8004604 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045da:	f7fe fc61 	bl	8002ea0 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e0:	e00a      	b.n	80045f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fe fc5d 	bl	8002ea0 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e12d      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f8:	4b49      	ldr	r3, [pc, #292]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1ee      	bne.n	80045e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004604:	7dfb      	ldrb	r3, [r7, #23]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d105      	bne.n	8004616 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460a:	4b45      	ldr	r3, [pc, #276]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	4a44      	ldr	r2, [pc, #272]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004614:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 808c 	beq.w	8004738 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004620:	4b3f      	ldr	r3, [pc, #252]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462c:	d10e      	bne.n	800464c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800462e:	4b3c      	ldr	r3, [pc, #240]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004636:	2b08      	cmp	r3, #8
 8004638:	d108      	bne.n	800464c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800463a:	4b39      	ldr	r3, [pc, #228]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004646:	d101      	bne.n	800464c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e103      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	2b02      	cmp	r3, #2
 8004652:	d14e      	bne.n	80046f2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004654:	4b32      	ldr	r3, [pc, #200]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004660:	4b2f      	ldr	r3, [pc, #188]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0ef      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004674:	4b2c      	ldr	r3, [pc, #176]	; (8004728 <HAL_RCC_OscConfig+0x4f0>)
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467a:	f7fe fc11 	bl	8002ea0 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004682:	f7fe fc0d 	bl	8002ea0 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b64      	cmp	r3, #100	; 0x64
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e0df      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004694:	4b22      	ldr	r3, [pc, #136]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f0      	bne.n	8004682 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80046a0:	4b1f      	ldr	r3, [pc, #124]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ac:	491c      	ldr	r1, [pc, #112]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80046b2:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	4918      	ldr	r1, [pc, #96]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80046c4:	4b18      	ldr	r3, [pc, #96]	; (8004728 <HAL_RCC_OscConfig+0x4f0>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fe fbe9 	bl	8002ea0 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80046d2:	f7fe fbe5 	bl	8002ea0 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b64      	cmp	r3, #100	; 0x64
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e0b7      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80046e4:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x49a>
 80046f0:	e022      	b.n	8004738 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80046f2:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <HAL_RCC_OscConfig+0x4e8>)
 80046f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <HAL_RCC_OscConfig+0x4f0>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fe fbcc 	bl	8002ea0 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800470a:	e00f      	b.n	800472c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800470c:	f7fe fbc8 	bl	8002ea0 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d908      	bls.n	800472c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e09a      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000
 8004724:	40007000 	.word	0x40007000
 8004728:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800472c:	4b4b      	ldr	r3, [pc, #300]	; (800485c <HAL_RCC_OscConfig+0x624>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e9      	bne.n	800470c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8088 	beq.w	8004852 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004742:	4b46      	ldr	r3, [pc, #280]	; (800485c <HAL_RCC_OscConfig+0x624>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b08      	cmp	r3, #8
 800474c:	d068      	beq.n	8004820 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d14d      	bne.n	80047f2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004756:	4b42      	ldr	r3, [pc, #264]	; (8004860 <HAL_RCC_OscConfig+0x628>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fe fba0 	bl	8002ea0 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7fe fb9c 	bl	8002ea0 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e06e      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004776:	4b39      	ldr	r3, [pc, #228]	; (800485c <HAL_RCC_OscConfig+0x624>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478a:	d10f      	bne.n	80047ac <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800478c:	4b33      	ldr	r3, [pc, #204]	; (800485c <HAL_RCC_OscConfig+0x624>)
 800478e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4931      	ldr	r1, [pc, #196]	; (800485c <HAL_RCC_OscConfig+0x624>)
 8004796:	4313      	orrs	r3, r2
 8004798:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800479a:	4b30      	ldr	r3, [pc, #192]	; (800485c <HAL_RCC_OscConfig+0x624>)
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	f023 020f 	bic.w	r2, r3, #15
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	492d      	ldr	r1, [pc, #180]	; (800485c <HAL_RCC_OscConfig+0x624>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ac:	4b2b      	ldr	r3, [pc, #172]	; (800485c <HAL_RCC_OscConfig+0x624>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	430b      	orrs	r3, r1
 80047be:	4927      	ldr	r1, [pc, #156]	; (800485c <HAL_RCC_OscConfig+0x624>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047c4:	4b26      	ldr	r3, [pc, #152]	; (8004860 <HAL_RCC_OscConfig+0x628>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ca:	f7fe fb69 	bl	8002ea0 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d2:	f7fe fb65 	bl	8002ea0 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e037      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047e4:	4b1d      	ldr	r3, [pc, #116]	; (800485c <HAL_RCC_OscConfig+0x624>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f0      	beq.n	80047d2 <HAL_RCC_OscConfig+0x59a>
 80047f0:	e02f      	b.n	8004852 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f2:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <HAL_RCC_OscConfig+0x628>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f8:	f7fe fb52 	bl	8002ea0 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004800:	f7fe fb4e 	bl	8002ea0 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e020      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004812:	4b12      	ldr	r3, [pc, #72]	; (800485c <HAL_RCC_OscConfig+0x624>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x5c8>
 800481e:	e018      	b.n	8004852 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e013      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <HAL_RCC_OscConfig+0x624>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	429a      	cmp	r2, r3
 800483e:	d106      	bne.n	800484e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484a:	429a      	cmp	r2, r3
 800484c:	d001      	beq.n	8004852 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000
 8004860:	42420060 	.word	0x42420060

08004864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0d0      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004878:	4b6a      	ldr	r3, [pc, #424]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d910      	bls.n	80048a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b67      	ldr	r3, [pc, #412]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 0207 	bic.w	r2, r3, #7
 800488e:	4965      	ldr	r1, [pc, #404]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b63      	ldr	r3, [pc, #396]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0b8      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d020      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c0:	4b59      	ldr	r3, [pc, #356]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	4a58      	ldr	r2, [pc, #352]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d8:	4b53      	ldr	r3, [pc, #332]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4a52      	ldr	r2, [pc, #328]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80048de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80048e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e4:	4b50      	ldr	r3, [pc, #320]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	494d      	ldr	r1, [pc, #308]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d040      	beq.n	8004984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d107      	bne.n	800491a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d115      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e07f      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d107      	bne.n	8004932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004922:	4b41      	ldr	r3, [pc, #260]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e073      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004932:	4b3d      	ldr	r3, [pc, #244]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e06b      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004942:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f023 0203 	bic.w	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4936      	ldr	r1, [pc, #216]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004950:	4313      	orrs	r3, r2
 8004952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004954:	f7fe faa4 	bl	8002ea0 <HAL_GetTick>
 8004958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495a:	e00a      	b.n	8004972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800495c:	f7fe faa0 	bl	8002ea0 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	; 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e053      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004972:	4b2d      	ldr	r3, [pc, #180]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 020c 	and.w	r2, r3, #12
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	429a      	cmp	r2, r3
 8004982:	d1eb      	bne.n	800495c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d210      	bcs.n	80049b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 0207 	bic.w	r2, r3, #7
 800499a:	4922      	ldr	r1, [pc, #136]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e032      	b.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c0:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4916      	ldr	r1, [pc, #88]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	490e      	ldr	r1, [pc, #56]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049f2:	f000 f821 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 80049f6:	4602      	mov	r2, r0
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	091b      	lsrs	r3, r3, #4
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	490a      	ldr	r1, [pc, #40]	; (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 8004a04:	5ccb      	ldrb	r3, [r1, r3]
 8004a06:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0a:	4a09      	ldr	r2, [pc, #36]	; (8004a30 <HAL_RCC_ClockConfig+0x1cc>)
 8004a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_RCC_ClockConfig+0x1d0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe f894 	bl	8002b40 <HAL_InitTick>

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40022000 	.word	0x40022000
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	0800bb54 	.word	0x0800bb54
 8004a30:	20000000 	.word	0x20000000
 8004a34:	20000004 	.word	0x20000004

08004a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	b09d      	sub	sp, #116	; 0x74
 8004a3e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8004a40:	4b81      	ldr	r3, [pc, #516]	; (8004c48 <HAL_RCC_GetSysClockFreq+0x210>)
 8004a42:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8004a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a48:	c407      	stmia	r4!, {r0, r1, r2}
 8004a4a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8004a4c:	4b7f      	ldr	r3, [pc, #508]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x214>)
 8004a4e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8004a52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	667b      	str	r3, [r7, #100]	; 0x64
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a60:	2300      	movs	r3, #0
 8004a62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a64:	2300      	movs	r3, #0
 8004a66:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a70:	2300      	movs	r3, #0
 8004a72:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a74:	4b76      	ldr	r3, [pc, #472]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x218>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a7c:	f003 030c 	and.w	r3, r3, #12
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d002      	beq.n	8004a8a <HAL_RCC_GetSysClockFreq+0x52>
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d003      	beq.n	8004a90 <HAL_RCC_GetSysClockFreq+0x58>
 8004a88:	e0d4      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a8a:	4b72      	ldr	r3, [pc, #456]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x21c>)
 8004a8c:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8004a8e:	e0d4      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a92:	0c9b      	lsrs	r3, r3, #18
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	3340      	adds	r3, #64	; 0x40
 8004a9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8004aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80b9 	beq.w	8004c24 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004ab2:	4b67      	ldr	r3, [pc, #412]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x218>)
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	3340      	adds	r3, #64	; 0x40
 8004abc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8004ac6:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004ac8:	4b61      	ldr	r3, [pc, #388]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x218>)
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8095 	beq.w	8004c00 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004ad6:	4b5e      	ldr	r3, [pc, #376]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x218>)
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	091b      	lsrs	r3, r3, #4
 8004adc:	f003 030f 	and.w	r3, r3, #15
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004ae4:	4b5a      	ldr	r3, [pc, #360]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x218>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	0a1b      	lsrs	r3, r3, #8
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	3302      	adds	r3, #2
 8004af0:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af4:	2200      	movs	r2, #0
 8004af6:	61bb      	str	r3, [r7, #24]
 8004af8:	61fa      	str	r2, [r7, #28]
 8004afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004afc:	2200      	movs	r2, #0
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b02:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004b06:	4622      	mov	r2, r4
 8004b08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b0c:	4684      	mov	ip, r0
 8004b0e:	fb0c f202 	mul.w	r2, ip, r2
 8004b12:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8004b16:	468c      	mov	ip, r1
 8004b18:	4618      	mov	r0, r3
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	fb03 f30c 	mul.w	r3, r3, ip
 8004b22:	4413      	add	r3, r2
 8004b24:	4602      	mov	r2, r0
 8004b26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b28:	fba2 8901 	umull	r8, r9, r2, r1
 8004b2c:	444b      	add	r3, r9
 8004b2e:	4699      	mov	r9, r3
 8004b30:	4642      	mov	r2, r8
 8004b32:	464b      	mov	r3, r9
 8004b34:	f04f 0000 	mov.w	r0, #0
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	0159      	lsls	r1, r3, #5
 8004b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b42:	0150      	lsls	r0, r2, #5
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	ebb2 0508 	subs.w	r5, r2, r8
 8004b4c:	eb63 0609 	sbc.w	r6, r3, r9
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	01b3      	lsls	r3, r6, #6
 8004b5a:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 8004b5e:	01aa      	lsls	r2, r5, #6
 8004b60:	ebb2 0a05 	subs.w	sl, r2, r5
 8004b64:	eb63 0b06 	sbc.w	fp, r3, r6
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b7c:	4692      	mov	sl, r2
 8004b7e:	469b      	mov	fp, r3
 8004b80:	eb1a 0308 	adds.w	r3, sl, r8
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	eb4b 0309 	adc.w	r3, fp, r9
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b98:	4629      	mov	r1, r5
 8004b9a:	024b      	lsls	r3, r1, #9
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004ba6:	4601      	mov	r1, r0
 8004ba8:	024a      	lsls	r2, r1, #9
 8004baa:	4610      	mov	r0, r2
 8004bac:	4619      	mov	r1, r3
 8004bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	617a      	str	r2, [r7, #20]
 8004bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bb8:	2200      	movs	r2, #0
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	60fa      	str	r2, [r7, #12]
 8004bbe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004bc2:	4622      	mov	r2, r4
 8004bc4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004bc8:	4645      	mov	r5, r8
 8004bca:	fb05 f202 	mul.w	r2, r5, r2
 8004bce:	464e      	mov	r6, r9
 8004bd0:	4625      	mov	r5, r4
 8004bd2:	461c      	mov	r4, r3
 8004bd4:	4623      	mov	r3, r4
 8004bd6:	fb03 f306 	mul.w	r3, r3, r6
 8004bda:	4413      	add	r3, r2
 8004bdc:	4622      	mov	r2, r4
 8004bde:	4644      	mov	r4, r8
 8004be0:	fba2 2404 	umull	r2, r4, r2, r4
 8004be4:	627c      	str	r4, [r7, #36]	; 0x24
 8004be6:	623a      	str	r2, [r7, #32]
 8004be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bea:	4413      	add	r3, r2
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
 8004bee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bf2:	f7fc fa7f 	bl	80010f4 <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bfe:	e007      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8004c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c02:	4a14      	ldr	r2, [pc, #80]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x21c>)
 8004c04:	fb03 f202 	mul.w	r2, r3, r2
 8004c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004c10:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004c14:	461a      	mov	r2, r3
 8004c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d108      	bne.n	8004c2e <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 8004c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1e:	085b      	lsrs	r3, r3, #1
 8004c20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c22:	e004      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x220>)
 8004c28:	fb02 f303 	mul.w	r3, r2, r3
 8004c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 8004c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c30:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8004c32:	e002      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c34:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x21c>)
 8004c36:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8004c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3774      	adds	r7, #116	; 0x74
 8004c40:	46bd      	mov	sp, r7
 8004c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c46:	bf00      	nop
 8004c48:	0800bb0c 	.word	0x0800bb0c
 8004c4c:	0800bb1c 	.word	0x0800bb1c
 8004c50:	40021000 	.word	0x40021000
 8004c54:	007a1200 	.word	0x007a1200
 8004c58:	003d0900 	.word	0x003d0900

08004c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c60:	4b02      	ldr	r3, [pc, #8]	; (8004c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8004c62:	681b      	ldr	r3, [r3, #0]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	20000000 	.word	0x20000000

08004c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c74:	f7ff fff2 	bl	8004c5c <HAL_RCC_GetHCLKFreq>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	0a1b      	lsrs	r3, r3, #8
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	4903      	ldr	r1, [pc, #12]	; (8004c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c86:	5ccb      	ldrb	r3, [r1, r3]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40021000 	.word	0x40021000
 8004c94:	0800bb64 	.word	0x0800bb64

08004c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c9c:	f7ff ffde 	bl	8004c5c <HAL_RCC_GetHCLKFreq>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	0adb      	lsrs	r3, r3, #11
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	4903      	ldr	r1, [pc, #12]	; (8004cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cae:	5ccb      	ldrb	r3, [r1, r3]
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	0800bb64 	.word	0x0800bb64

08004cc0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	220f      	movs	r2, #15
 8004cce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004cd0:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <HAL_RCC_GetClockConfig+0x58>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 0203 	and.w	r2, r3, #3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <HAL_RCC_GetClockConfig+0x58>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <HAL_RCC_GetClockConfig+0x58>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004cf4:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <HAL_RCC_GetClockConfig+0x58>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	08db      	lsrs	r3, r3, #3
 8004cfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d02:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <HAL_RCC_GetClockConfig+0x5c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0207 	and.w	r2, r3, #7
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40022000 	.word	0x40022000

08004d20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <RCC_Delay+0x34>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a0a      	ldr	r2, [pc, #40]	; (8004d58 <RCC_Delay+0x38>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	0a5b      	lsrs	r3, r3, #9
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d3c:	bf00      	nop
  }
  while (Delay --);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1e5a      	subs	r2, r3, #1
 8004d42:	60fa      	str	r2, [r7, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f9      	bne.n	8004d3c <RCC_Delay+0x1c>
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	20000000 	.word	0x20000000
 8004d58:	10624dd3 	.word	0x10624dd3

08004d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d07d      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d80:	4b8b      	ldr	r3, [pc, #556]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10d      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d8c:	4b88      	ldr	r3, [pc, #544]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	4a87      	ldr	r2, [pc, #540]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d96:	61d3      	str	r3, [r2, #28]
 8004d98:	4b85      	ldr	r3, [pc, #532]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004da4:	2301      	movs	r3, #1
 8004da6:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da8:	4b82      	ldr	r3, [pc, #520]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d118      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004db4:	4b7f      	ldr	r3, [pc, #508]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a7e      	ldr	r2, [pc, #504]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc0:	f7fe f86e 	bl	8002ea0 <HAL_GetTick>
 8004dc4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc6:	e008      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc8:	f7fe f86a 	bl	8002ea0 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	; 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e0e5      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dda:	4b76      	ldr	r3, [pc, #472]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004de6:	4b72      	ldr	r3, [pc, #456]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dee:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d02e      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d027      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e04:	4b6a      	ldr	r3, [pc, #424]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e0e:	4b6a      	ldr	r3, [pc, #424]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004e10:	2201      	movs	r2, #1
 8004e12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e14:	4b68      	ldr	r3, [pc, #416]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e1a:	4a65      	ldr	r2, [pc, #404]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d014      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2a:	f7fe f839 	bl	8002ea0 <HAL_GetTick>
 8004e2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e30:	e00a      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e32:	f7fe f835 	bl	8002ea0 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e0ae      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e48:	4b59      	ldr	r3, [pc, #356]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ee      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e54:	4b56      	ldr	r3, [pc, #344]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4953      	ldr	r1, [pc, #332]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e66:	7efb      	ldrb	r3, [r7, #27]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d105      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6c:	4b50      	ldr	r3, [pc, #320]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	4a4f      	ldr	r2, [pc, #316]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e84:	4b4a      	ldr	r3, [pc, #296]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	4947      	ldr	r1, [pc, #284]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d008      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004ea2:	4b43      	ldr	r3, [pc, #268]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	4940      	ldr	r1, [pc, #256]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8004ec0:	4b3b      	ldr	r3, [pc, #236]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	4938      	ldr	r1, [pc, #224]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8004ed2:	4b37      	ldr	r3, [pc, #220]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d105      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004ede:	4b34      	ldr	r3, [pc, #208]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8004eea:	2301      	movs	r3, #1
 8004eec:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d148      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8004ef4:	4b2e      	ldr	r3, [pc, #184]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d138      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004f00:	4b2b      	ldr	r3, [pc, #172]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d009      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8004f0c:	4b28      	ldr	r3, [pc, #160]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e042      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8004f20:	4b23      	ldr	r3, [pc, #140]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	4920      	ldr	r1, [pc, #128]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8004f32:	4b1f      	ldr	r3, [pc, #124]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	491c      	ldr	r1, [pc, #112]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8004f44:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4a:	f7fd ffa9 	bl	8002ea0 <HAL_GetTick>
 8004f4e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f50:	e008      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f52:	f7fd ffa5 	bl	8002ea0 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b64      	cmp	r3, #100	; 0x64
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e020      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f64:	4b12      	ldr	r3, [pc, #72]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f0      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004f70:	e009      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8004f72:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d001      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e00f      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d008      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f92:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	4904      	ldr	r1, [pc, #16]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	40007000 	.word	0x40007000
 8004fb8:	42420440 	.word	0x42420440
 8004fbc:	42420070 	.word	0x42420070

08004fc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b093      	sub	sp, #76	; 0x4c
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8004fc8:	4ba8      	ldr	r3, [pc, #672]	; (800526c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8004fca:	f107 0418 	add.w	r4, r7, #24
 8004fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fd0:	c407      	stmia	r4!, {r0, r1, r2}
 8004fd2:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8004fd4:	4ba6      	ldr	r3, [pc, #664]	; (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8004fd6:	f107 0408 	add.w	r4, r7, #8
 8004fda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe8:	2300      	movs	r3, #0
 8004fea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	643b      	str	r3, [r7, #64]	; 0x40

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3b01      	subs	r3, #1
 8005004:	2b0f      	cmp	r3, #15
 8005006:	f200 8122 	bhi.w	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	080051cd 	.word	0x080051cd
 8005014:	08005233 	.word	0x08005233
 8005018:	0800524f 	.word	0x0800524f
 800501c:	0800512b 	.word	0x0800512b
 8005020:	0800524f 	.word	0x0800524f
 8005024:	0800524f 	.word	0x0800524f
 8005028:	0800524f 	.word	0x0800524f
 800502c:	0800517d 	.word	0x0800517d
 8005030:	0800524f 	.word	0x0800524f
 8005034:	0800524f 	.word	0x0800524f
 8005038:	0800524f 	.word	0x0800524f
 800503c:	0800524f 	.word	0x0800524f
 8005040:	0800524f 	.word	0x0800524f
 8005044:	0800524f 	.word	0x0800524f
 8005048:	0800524f 	.word	0x0800524f
 800504c:	08005051 	.word	0x08005051
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005050:	4b88      	ldr	r3, [pc, #544]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005056:	4b87      	ldr	r3, [pc, #540]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 80f7 	beq.w	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	0c9b      	lsrs	r3, r3, #18
 8005068:	f003 030f 	and.w	r3, r3, #15
 800506c:	3348      	adds	r3, #72	; 0x48
 800506e:	443b      	add	r3, r7
 8005070:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8005074:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d03d      	beq.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005080:	4b7c      	ldr	r3, [pc, #496]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	f003 030f 	and.w	r3, r3, #15
 8005088:	3348      	adds	r3, #72	; 0x48
 800508a:	443b      	add	r3, r7
 800508c:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8005090:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005092:	4b78      	ldr	r3, [pc, #480]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d01c      	beq.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800509e:	4b75      	ldr	r3, [pc, #468]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	091b      	lsrs	r3, r3, #4
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	3301      	adds	r3, #1
 80050aa:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80050ac:	4b71      	ldr	r3, [pc, #452]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	3302      	adds	r3, #2
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 80050ba:	4a6f      	ldr	r2, [pc, #444]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050c4:	fb03 f202 	mul.w	r2, r3, r2
 80050c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	fb02 f303 	mul.w	r3, r2, r3
 80050d4:	647b      	str	r3, [r7, #68]	; 0x44
 80050d6:	e007      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80050d8:	4a67      	ldr	r2, [pc, #412]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80050da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	fb02 f303 	mul.w	r3, r2, r3
 80050e6:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80050e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80050ec:	461a      	mov	r2, r3
 80050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d108      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            pllclk = pllclk / 2;
 80050f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	647b      	str	r3, [r7, #68]	; 0x44
 80050fa:	e004      	b.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	4a5f      	ldr	r2, [pc, #380]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005100:	fb02 f303 	mul.w	r3, r2, r3
 8005104:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8005106:	4b5b      	ldr	r3, [pc, #364]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800510e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005112:	d102      	bne.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8005114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005116:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005118:	e09b      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
          frequency = (2 * pllclk) / 3;
 800511a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	4a58      	ldr	r2, [pc, #352]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	085b      	lsrs	r3, r3, #1
 8005126:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005128:	e093      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 800512a:	4b52      	ldr	r3, [pc, #328]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d103      	bne.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8005136:	f7ff fc7f 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 800513a:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800513c:	e08b      	b.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 800513e:	4b4d      	ldr	r3, [pc, #308]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 8085 	beq.w	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800514c:	4b49      	ldr	r3, [pc, #292]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	3301      	adds	r3, #1
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 800515a:	4b46      	ldr	r3, [pc, #280]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	0b1b      	lsrs	r3, r3, #12
 8005160:	f003 030f 	and.w	r3, r3, #15
 8005164:	3302      	adds	r3, #2
 8005166:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8005168:	4a43      	ldr	r2, [pc, #268]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800517a:	e06c      	b.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 800517c:	4b3d      	ldr	r3, [pc, #244]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d103      	bne.n	8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8005188:	f7ff fc56 	bl	8004a38 <HAL_RCC_GetSysClockFreq>
 800518c:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800518e:	e064      	b.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8005190:	4b38      	ldr	r3, [pc, #224]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d05e      	beq.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800519c:	4b35      	ldr	r3, [pc, #212]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	091b      	lsrs	r3, r3, #4
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	3301      	adds	r3, #1
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 80051aa:	4b32      	ldr	r3, [pc, #200]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	0b1b      	lsrs	r3, r3, #12
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	3302      	adds	r3, #2
 80051b6:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 80051b8:	4a2f      	ldr	r2, [pc, #188]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80051ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c2:	fb02 f303 	mul.w	r3, r2, r3
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80051ca:	e046      	b.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80051cc:	4b29      	ldr	r3, [pc, #164]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051dc:	d108      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSE_VALUE;
 80051e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ec:	643b      	str	r3, [r7, #64]	; 0x40
 80051ee:	e01f      	b.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fa:	d109      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 80051fc:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
      {
        frequency = LSI_VALUE;
 8005208:	f649 4340 	movw	r3, #40000	; 0x9c40
 800520c:	643b      	str	r3, [r7, #64]	; 0x40
 800520e:	e00f      	b.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800521a:	d120      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 800521c:	4b15      	ldr	r3, [pc, #84]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01a      	beq.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
      {
        frequency = HSE_VALUE / 128U;
 8005228:	f24f 4324 	movw	r3, #62500	; 0xf424
 800522c:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800522e:	e016      	b.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 8005230:	e015      	b.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005232:	f7ff fd31 	bl	8004c98 <HAL_RCC_GetPCLK2Freq>
 8005236:	4602      	mov	r2, r0
 8005238:	4b0e      	ldr	r3, [pc, #56]	; (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	0b9b      	lsrs	r3, r3, #14
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	3301      	adds	r3, #1
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	fbb2 f3f3 	udiv	r3, r2, r3
 800524a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800524c:	e008      	b.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
    }
    default:
    {
      break;
 800524e:	bf00      	nop
 8005250:	e006      	b.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 8005252:	bf00      	nop
 8005254:	e004      	b.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 8005256:	bf00      	nop
 8005258:	e002      	b.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 800525a:	bf00      	nop
 800525c:	e000      	b.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 800525e:	bf00      	nop
    }
  }
  return (frequency);
 8005260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8005262:	4618      	mov	r0, r3
 8005264:	374c      	adds	r7, #76	; 0x4c
 8005266:	46bd      	mov	sp, r7
 8005268:	bd90      	pop	{r4, r7, pc}
 800526a:	bf00      	nop
 800526c:	0800bb2c 	.word	0x0800bb2c
 8005270:	0800bb3c 	.word	0x0800bb3c
 8005274:	40021000 	.word	0x40021000
 8005278:	007a1200 	.word	0x007a1200
 800527c:	003d0900 	.word	0x003d0900
 8005280:	aaaaaaab 	.word	0xaaaaaaab

08005284 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e076      	b.n	8005384 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	2b00      	cmp	r3, #0
 800529c:	d108      	bne.n	80052b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a6:	d009      	beq.n	80052bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	61da      	str	r2, [r3, #28]
 80052ae:	e005      	b.n	80052bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fd fb52 	bl	8002980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005340:	ea42 0103 	orr.w	r1, r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	0c1a      	lsrs	r2, r3, #16
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f002 0204 	and.w	r2, r2, #4
 8005362:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69da      	ldr	r2, [r3, #28]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005372:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <HAL_SPI_Transmit+0x22>
 80053aa:	2302      	movs	r3, #2
 80053ac:	e126      	b.n	80055fc <HAL_SPI_Transmit+0x270>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053b6:	f7fd fd73 	bl	8002ea0 <HAL_GetTick>
 80053ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053bc:	88fb      	ldrh	r3, [r7, #6]
 80053be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d002      	beq.n	80053d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053cc:	2302      	movs	r3, #2
 80053ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053d0:	e10b      	b.n	80055ea <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <HAL_SPI_Transmit+0x52>
 80053d8:	88fb      	ldrh	r3, [r7, #6]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d102      	bne.n	80053e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053e2:	e102      	b.n	80055ea <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2203      	movs	r2, #3
 80053e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	88fa      	ldrh	r2, [r7, #6]
 80053fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	88fa      	ldrh	r2, [r7, #6]
 8005402:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542a:	d10f      	bne.n	800544c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800543a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800544a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005456:	2b40      	cmp	r3, #64	; 0x40
 8005458:	d007      	beq.n	800546a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005468:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005472:	d14b      	bne.n	800550c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <HAL_SPI_Transmit+0xf6>
 800547c:	8afb      	ldrh	r3, [r7, #22]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d13e      	bne.n	8005500 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	881a      	ldrh	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	1c9a      	adds	r2, r3, #2
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054a6:	e02b      	b.n	8005500 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d112      	bne.n	80054dc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	881a      	ldrh	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	1c9a      	adds	r2, r3, #2
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80054da:	e011      	b.n	8005500 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054dc:	f7fd fce0 	bl	8002ea0 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d803      	bhi.n	80054f4 <HAL_SPI_Transmit+0x168>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	d102      	bne.n	80054fa <HAL_SPI_Transmit+0x16e>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d102      	bne.n	8005500 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054fe:	e074      	b.n	80055ea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1ce      	bne.n	80054a8 <HAL_SPI_Transmit+0x11c>
 800550a:	e04c      	b.n	80055a6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <HAL_SPI_Transmit+0x18e>
 8005514:	8afb      	ldrh	r3, [r7, #22]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d140      	bne.n	800559c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	330c      	adds	r3, #12
 8005524:	7812      	ldrb	r2, [r2, #0]
 8005526:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005540:	e02c      	b.n	800559c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b02      	cmp	r3, #2
 800554e:	d113      	bne.n	8005578 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	7812      	ldrb	r2, [r2, #0]
 800555c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	86da      	strh	r2, [r3, #54]	; 0x36
 8005576:	e011      	b.n	800559c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005578:	f7fd fc92 	bl	8002ea0 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d803      	bhi.n	8005590 <HAL_SPI_Transmit+0x204>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558e:	d102      	bne.n	8005596 <HAL_SPI_Transmit+0x20a>
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d102      	bne.n	800559c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	77fb      	strb	r3, [r7, #31]
          goto error;
 800559a:	e026      	b.n	80055ea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1cd      	bne.n	8005542 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fbb8 	bl	8005d20 <SPI_EndRxTxTransaction>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055c4:	2300      	movs	r3, #0
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	77fb      	strb	r3, [r7, #31]
 80055e6:	e000      	b.n	80055ea <HAL_SPI_Transmit+0x25e>
  }

error:
 80055e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3720      	adds	r7, #32
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af02      	add	r7, sp, #8
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005620:	d112      	bne.n	8005648 <HAL_SPI_Receive+0x44>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10e      	bne.n	8005648 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2204      	movs	r2, #4
 800562e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005632:	88fa      	ldrh	r2, [r7, #6]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	4613      	mov	r3, r2
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 f8f1 	bl	8005826 <HAL_SPI_TransmitReceive>
 8005644:	4603      	mov	r3, r0
 8005646:	e0ea      	b.n	800581e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_SPI_Receive+0x52>
 8005652:	2302      	movs	r3, #2
 8005654:	e0e3      	b.n	800581e <HAL_SPI_Receive+0x21a>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800565e:	f7fd fc1f 	bl	8002ea0 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d002      	beq.n	8005676 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005670:	2302      	movs	r3, #2
 8005672:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005674:	e0ca      	b.n	800580c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <HAL_SPI_Receive+0x7e>
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d102      	bne.n	8005688 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005686:	e0c1      	b.n	800580c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2204      	movs	r2, #4
 800568c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	88fa      	ldrh	r2, [r7, #6]
 80056a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ce:	d10f      	bne.n	80056f0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d007      	beq.n	800570e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800570c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d162      	bne.n	80057dc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005716:	e02e      	b.n	8005776 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b01      	cmp	r3, #1
 8005724:	d115      	bne.n	8005752 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f103 020c 	add.w	r2, r3, #12
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	7812      	ldrb	r2, [r2, #0]
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005750:	e011      	b.n	8005776 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005752:	f7fd fba5 	bl	8002ea0 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d803      	bhi.n	800576a <HAL_SPI_Receive+0x166>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d102      	bne.n	8005770 <HAL_SPI_Receive+0x16c>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005774:	e04a      	b.n	800580c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1cb      	bne.n	8005718 <HAL_SPI_Receive+0x114>
 8005780:	e031      	b.n	80057e6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b01      	cmp	r3, #1
 800578e:	d113      	bne.n	80057b8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	b292      	uxth	r2, r2
 800579c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	1c9a      	adds	r2, r3, #2
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057b6:	e011      	b.n	80057dc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057b8:	f7fd fb72 	bl	8002ea0 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d803      	bhi.n	80057d0 <HAL_SPI_Receive+0x1cc>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d102      	bne.n	80057d6 <HAL_SPI_Receive+0x1d2>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057da:	e017      	b.n	800580c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1cd      	bne.n	8005782 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	6839      	ldr	r1, [r7, #0]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fa46 	bl	8005c7c <SPI_EndRxTransaction>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	75fb      	strb	r3, [r7, #23]
 8005808:	e000      	b.n	800580c <HAL_SPI_Receive+0x208>
  }

error :
 800580a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800581c:	7dfb      	ldrb	r3, [r7, #23]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b08c      	sub	sp, #48	; 0x30
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
 8005832:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005834:	2301      	movs	r3, #1
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_SPI_TransmitReceive+0x26>
 8005848:	2302      	movs	r3, #2
 800584a:	e18a      	b.n	8005b62 <HAL_SPI_TransmitReceive+0x33c>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005854:	f7fd fb24 	bl	8002ea0 <HAL_GetTick>
 8005858:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800586a:	887b      	ldrh	r3, [r7, #2]
 800586c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800586e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005872:	2b01      	cmp	r3, #1
 8005874:	d00f      	beq.n	8005896 <HAL_SPI_TransmitReceive+0x70>
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800587c:	d107      	bne.n	800588e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <HAL_SPI_TransmitReceive+0x68>
 8005886:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800588a:	2b04      	cmp	r3, #4
 800588c:	d003      	beq.n	8005896 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800588e:	2302      	movs	r3, #2
 8005890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005894:	e15b      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_SPI_TransmitReceive+0x82>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <HAL_SPI_TransmitReceive+0x82>
 80058a2:	887b      	ldrh	r3, [r7, #2]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d103      	bne.n	80058b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058ae:	e14e      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d003      	beq.n	80058c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2205      	movs	r2, #5
 80058c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	887a      	ldrh	r2, [r7, #2]
 80058d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	887a      	ldrh	r2, [r7, #2]
 80058da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	887a      	ldrh	r2, [r7, #2]
 80058e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	887a      	ldrh	r2, [r7, #2]
 80058ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b40      	cmp	r3, #64	; 0x40
 8005906:	d007      	beq.n	8005918 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005916:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005920:	d178      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_SPI_TransmitReceive+0x10a>
 800592a:	8b7b      	ldrh	r3, [r7, #26]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d166      	bne.n	80059fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005934:	881a      	ldrh	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	1c9a      	adds	r2, r3, #2
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005954:	e053      	b.n	80059fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b02      	cmp	r3, #2
 8005962:	d11b      	bne.n	800599c <HAL_SPI_TransmitReceive+0x176>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d016      	beq.n	800599c <HAL_SPI_TransmitReceive+0x176>
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	2b01      	cmp	r3, #1
 8005972:	d113      	bne.n	800599c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	881a      	ldrh	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005984:	1c9a      	adds	r2, r3, #2
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800598e:	b29b      	uxth	r3, r3
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d119      	bne.n	80059de <HAL_SPI_TransmitReceive+0x1b8>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d014      	beq.n	80059de <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	b292      	uxth	r2, r2
 80059c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	1c9a      	adds	r2, r3, #2
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059da:	2301      	movs	r3, #1
 80059dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059de:	f7fd fa5f 	bl	8002ea0 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d807      	bhi.n	80059fe <HAL_SPI_TransmitReceive+0x1d8>
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d003      	beq.n	80059fe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80059fc:	e0a7      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1a6      	bne.n	8005956 <HAL_SPI_TransmitReceive+0x130>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1a1      	bne.n	8005956 <HAL_SPI_TransmitReceive+0x130>
 8005a12:	e07c      	b.n	8005b0e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_SPI_TransmitReceive+0x1fc>
 8005a1c:	8b7b      	ldrh	r3, [r7, #26]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d16b      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a48:	e057      	b.n	8005afa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d11c      	bne.n	8005a92 <HAL_SPI_TransmitReceive+0x26c>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d017      	beq.n	8005a92 <HAL_SPI_TransmitReceive+0x26c>
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d114      	bne.n	8005a92 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	330c      	adds	r3, #12
 8005a72:	7812      	ldrb	r2, [r2, #0]
 8005a74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d119      	bne.n	8005ad4 <HAL_SPI_TransmitReceive+0x2ae>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d014      	beq.n	8005ad4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ad4:	f7fd f9e4 	bl	8002ea0 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d803      	bhi.n	8005aec <HAL_SPI_TransmitReceive+0x2c6>
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aea:	d102      	bne.n	8005af2 <HAL_SPI_TransmitReceive+0x2cc>
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005af8:	e029      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1a2      	bne.n	8005a4a <HAL_SPI_TransmitReceive+0x224>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d19d      	bne.n	8005a4a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f904 	bl	8005d20 <SPI_EndRxTxTransaction>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d006      	beq.n	8005b2c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b2a:	e010      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10b      	bne.n	8005b4c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	e000      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005b4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3730      	adds	r7, #48	; 0x30
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b7c:	f7fd f990 	bl	8002ea0 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	1a9b      	subs	r3, r3, r2
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	4413      	add	r3, r2
 8005b8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b8c:	f7fd f988 	bl	8002ea0 <HAL_GetTick>
 8005b90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b92:	4b39      	ldr	r3, [pc, #228]	; (8005c78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	015b      	lsls	r3, r3, #5
 8005b98:	0d1b      	lsrs	r3, r3, #20
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ba2:	e054      	b.n	8005c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005baa:	d050      	beq.n	8005c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bac:	f7fd f978 	bl	8002ea0 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d902      	bls.n	8005bc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d13d      	bne.n	8005c3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bda:	d111      	bne.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be4:	d004      	beq.n	8005bf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bee:	d107      	bne.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c08:	d10f      	bne.n	8005c2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e017      	b.n	8005c6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4013      	ands	r3, r2
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	bf0c      	ite	eq
 8005c5e:	2301      	moveq	r3, #1
 8005c60:	2300      	movne	r3, #0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d19b      	bne.n	8005ba4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000000 	.word	0x20000000

08005c7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c90:	d111      	bne.n	8005cb6 <SPI_EndRxTransaction+0x3a>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c9a:	d004      	beq.n	8005ca6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca4:	d107      	bne.n	8005cb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cbe:	d117      	bne.n	8005cf0 <SPI_EndRxTransaction+0x74>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc8:	d112      	bne.n	8005cf0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f7ff ff49 	bl	8005b6c <SPI_WaitFlagStateUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01a      	beq.n	8005d16 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce4:	f043 0220 	orr.w	r2, r3, #32
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e013      	b.n	8005d18 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2180      	movs	r1, #128	; 0x80
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f7ff ff36 	bl	8005b6c <SPI_WaitFlagStateUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0a:	f043 0220 	orr.w	r2, r3, #32
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e000      	b.n	8005d18 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2200      	movs	r2, #0
 8005d34:	2180      	movs	r1, #128	; 0x80
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f7ff ff18 	bl	8005b6c <SPI_WaitFlagStateUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d007      	beq.n	8005d52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d46:	f043 0220 	orr.w	r2, r3, #32
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e000      	b.n	8005d54 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e041      	b.n	8005df2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d106      	bne.n	8005d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f839 	bl	8005dfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	f000 f9bc 	bl	8006118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr

08005e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d001      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e03f      	b.n	8005ea4 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0201 	orr.w	r2, r2, #1
 8005e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1b      	ldr	r2, [pc, #108]	; (8005eb0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <HAL_TIM_Base_Start_IT+0x62>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4e:	d00e      	beq.n	8005e6e <HAL_TIM_Base_Start_IT+0x62>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a17      	ldr	r2, [pc, #92]	; (8005eb4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d009      	beq.n	8005e6e <HAL_TIM_Base_Start_IT+0x62>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a16      	ldr	r2, [pc, #88]	; (8005eb8 <HAL_TIM_Base_Start_IT+0xac>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d004      	beq.n	8005e6e <HAL_TIM_Base_Start_IT+0x62>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a14      	ldr	r2, [pc, #80]	; (8005ebc <HAL_TIM_Base_Start_IT+0xb0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d111      	bne.n	8005e92 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b06      	cmp	r3, #6
 8005e7e:	d010      	beq.n	8005ea2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e90:	e007      	b.n	8005ea2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	40012c00 	.word	0x40012c00
 8005eb4:	40000400 	.word	0x40000400
 8005eb8:	40000800 	.word	0x40000800
 8005ebc:	40000c00 	.word	0x40000c00

08005ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d122      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d11b      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0202 	mvn.w	r2, #2
 8005eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f8ed 	bl	80060e2 <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f8e0 	bl	80060d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f8ef 	bl	80060f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d122      	bne.n	8005f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d11b      	bne.n	8005f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0204 	mvn.w	r2, #4
 8005f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2202      	movs	r2, #2
 8005f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f8c3 	bl	80060e2 <HAL_TIM_IC_CaptureCallback>
 8005f5c:	e005      	b.n	8005f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f8b6 	bl	80060d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f8c5 	bl	80060f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b08      	cmp	r3, #8
 8005f7c:	d122      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d11b      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0208 	mvn.w	r2, #8
 8005f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2204      	movs	r2, #4
 8005f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f899 	bl	80060e2 <HAL_TIM_IC_CaptureCallback>
 8005fb0:	e005      	b.n	8005fbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f88c 	bl	80060d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f89b 	bl	80060f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0310 	and.w	r3, r3, #16
 8005fce:	2b10      	cmp	r3, #16
 8005fd0:	d122      	bne.n	8006018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	2b10      	cmp	r3, #16
 8005fde:	d11b      	bne.n	8006018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0210 	mvn.w	r2, #16
 8005fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2208      	movs	r2, #8
 8005fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f86f 	bl	80060e2 <HAL_TIM_IC_CaptureCallback>
 8006004:	e005      	b.n	8006012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f862 	bl	80060d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f871 	bl	80060f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b01      	cmp	r3, #1
 8006024:	d10e      	bne.n	8006044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b01      	cmp	r3, #1
 8006032:	d107      	bne.n	8006044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0201 	mvn.w	r2, #1
 800603c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7fc fbf6 	bl	8002830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604e:	2b80      	cmp	r3, #128	; 0x80
 8006050:	d10e      	bne.n	8006070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605c:	2b80      	cmp	r3, #128	; 0x80
 800605e:	d107      	bne.n	8006070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f8c9 	bl	8006202 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607a:	2b40      	cmp	r3, #64	; 0x40
 800607c:	d10e      	bne.n	800609c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d107      	bne.n	800609c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f835 	bl	8006106 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	d10e      	bne.n	80060c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d107      	bne.n	80060c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0220 	mvn.w	r2, #32
 80060c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f894 	bl	80061f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060c8:	bf00      	nop
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	bc80      	pop	{r7}
 80060e0:	4770      	bx	lr

080060e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bc80      	pop	{r7}
 80060f2:	4770      	bx	lr

080060f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	bc80      	pop	{r7}
 8006104:	4770      	bx	lr

08006106 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr

08006118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a2d      	ldr	r2, [pc, #180]	; (80061e0 <TIM_Base_SetConfig+0xc8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00f      	beq.n	8006150 <TIM_Base_SetConfig+0x38>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006136:	d00b      	beq.n	8006150 <TIM_Base_SetConfig+0x38>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a2a      	ldr	r2, [pc, #168]	; (80061e4 <TIM_Base_SetConfig+0xcc>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d007      	beq.n	8006150 <TIM_Base_SetConfig+0x38>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a29      	ldr	r2, [pc, #164]	; (80061e8 <TIM_Base_SetConfig+0xd0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d003      	beq.n	8006150 <TIM_Base_SetConfig+0x38>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a28      	ldr	r2, [pc, #160]	; (80061ec <TIM_Base_SetConfig+0xd4>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d108      	bne.n	8006162 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <TIM_Base_SetConfig+0xc8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00f      	beq.n	800618a <TIM_Base_SetConfig+0x72>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006170:	d00b      	beq.n	800618a <TIM_Base_SetConfig+0x72>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a1b      	ldr	r2, [pc, #108]	; (80061e4 <TIM_Base_SetConfig+0xcc>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d007      	beq.n	800618a <TIM_Base_SetConfig+0x72>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a1a      	ldr	r2, [pc, #104]	; (80061e8 <TIM_Base_SetConfig+0xd0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d003      	beq.n	800618a <TIM_Base_SetConfig+0x72>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a19      	ldr	r2, [pc, #100]	; (80061ec <TIM_Base_SetConfig+0xd4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d108      	bne.n	800619c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a07      	ldr	r2, [pc, #28]	; (80061e0 <TIM_Base_SetConfig+0xc8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d103      	bne.n	80061d0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	615a      	str	r2, [r3, #20]
}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	40000400 	.word	0x40000400
 80061e8:	40000800 	.word	0x40000800
 80061ec:	40000c00 	.word	0x40000c00

080061f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bc80      	pop	{r7}
 8006200:	4770      	bx	lr

08006202 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800620a:	bf00      	nop
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr

08006214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e03f      	b.n	80062a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fc fc36 	bl	8002aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2224      	movs	r2, #36	; 0x24
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f905 	bl	8006468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800626c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695a      	ldr	r2, [r3, #20]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800627c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800628c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b08a      	sub	sp, #40	; 0x28
 80062b2:	af02      	add	r7, sp, #8
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	603b      	str	r3, [r7, #0]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	d17c      	bne.n	80063c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <HAL_UART_Transmit+0x2c>
 80062d4:	88fb      	ldrh	r3, [r7, #6]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e075      	b.n	80063ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_UART_Transmit+0x3e>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e06e      	b.n	80063ca <HAL_UART_Transmit+0x11c>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2221      	movs	r2, #33	; 0x21
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006302:	f7fc fdcd 	bl	8002ea0 <HAL_GetTick>
 8006306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	88fa      	ldrh	r2, [r7, #6]
 800630c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	88fa      	ldrh	r2, [r7, #6]
 8006312:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631c:	d108      	bne.n	8006330 <HAL_UART_Transmit+0x82>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	e003      	b.n	8006338 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006334:	2300      	movs	r3, #0
 8006336:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006340:	e02a      	b.n	8006398 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2200      	movs	r2, #0
 800634a:	2180      	movs	r1, #128	; 0x80
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f840 	bl	80063d2 <UART_WaitOnFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e036      	b.n	80063ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10b      	bne.n	800637a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006370:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	3302      	adds	r3, #2
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	e007      	b.n	800638a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	781a      	ldrb	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	3301      	adds	r3, #1
 8006388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b01      	subs	r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1cf      	bne.n	8006342 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2200      	movs	r2, #0
 80063aa:	2140      	movs	r1, #64	; 0x40
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f810 	bl	80063d2 <UART_WaitOnFlagUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e006      	b.n	80063ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e000      	b.n	80063ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063c8:	2302      	movs	r3, #2
  }
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3720      	adds	r7, #32
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	603b      	str	r3, [r7, #0]
 80063de:	4613      	mov	r3, r2
 80063e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e2:	e02c      	b.n	800643e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ea:	d028      	beq.n	800643e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <UART_WaitOnFlagUntilTimeout+0x30>
 80063f2:	f7fc fd55 	bl	8002ea0 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d21d      	bcs.n	800643e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68da      	ldr	r2, [r3, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006410:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	695a      	ldr	r2, [r3, #20]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0201 	bic.w	r2, r2, #1
 8006420:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e00f      	b.n	800645e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4013      	ands	r3, r2
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	429a      	cmp	r2, r3
 800644c:	bf0c      	ite	eq
 800644e:	2301      	moveq	r3, #1
 8006450:	2300      	movne	r3, #0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	461a      	mov	r2, r3
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	429a      	cmp	r2, r3
 800645a:	d0c3      	beq.n	80063e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80064a2:	f023 030c 	bic.w	r3, r3, #12
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	6812      	ldr	r2, [r2, #0]
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	430b      	orrs	r3, r1
 80064ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a2c      	ldr	r2, [pc, #176]	; (800657c <UART_SetConfig+0x114>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d103      	bne.n	80064d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80064d0:	f7fe fbe2 	bl	8004c98 <HAL_RCC_GetPCLK2Freq>
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	e002      	b.n	80064de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80064d8:	f7fe fbca 	bl	8004c70 <HAL_RCC_GetPCLK1Freq>
 80064dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4613      	mov	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	009a      	lsls	r2, r3, #2
 80064e8:	441a      	add	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f4:	4a22      	ldr	r2, [pc, #136]	; (8006580 <UART_SetConfig+0x118>)
 80064f6:	fba2 2303 	umull	r2, r3, r2, r3
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	0119      	lsls	r1, r3, #4
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	4613      	mov	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	009a      	lsls	r2, r3, #2
 8006508:	441a      	add	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	fbb2 f2f3 	udiv	r2, r2, r3
 8006514:	4b1a      	ldr	r3, [pc, #104]	; (8006580 <UART_SetConfig+0x118>)
 8006516:	fba3 0302 	umull	r0, r3, r3, r2
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	2064      	movs	r0, #100	; 0x64
 800651e:	fb00 f303 	mul.w	r3, r0, r3
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	3332      	adds	r3, #50	; 0x32
 8006528:	4a15      	ldr	r2, [pc, #84]	; (8006580 <UART_SetConfig+0x118>)
 800652a:	fba2 2303 	umull	r2, r3, r2, r3
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006534:	4419      	add	r1, r3
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4613      	mov	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	009a      	lsls	r2, r3, #2
 8006540:	441a      	add	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	fbb2 f2f3 	udiv	r2, r2, r3
 800654c:	4b0c      	ldr	r3, [pc, #48]	; (8006580 <UART_SetConfig+0x118>)
 800654e:	fba3 0302 	umull	r0, r3, r3, r2
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	2064      	movs	r0, #100	; 0x64
 8006556:	fb00 f303 	mul.w	r3, r0, r3
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	011b      	lsls	r3, r3, #4
 800655e:	3332      	adds	r3, #50	; 0x32
 8006560:	4a07      	ldr	r2, [pc, #28]	; (8006580 <UART_SetConfig+0x118>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	f003 020f 	and.w	r2, r3, #15
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	440a      	add	r2, r1
 8006572:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006574:	bf00      	nop
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40013800 	.word	0x40013800
 8006580:	51eb851f 	.word	0x51eb851f

08006584 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006596:	2b84      	cmp	r3, #132	; 0x84
 8006598:	d005      	beq.n	80065a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800659a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	3303      	adds	r3, #3
 80065a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80065a6:	68fb      	ldr	r3, [r7, #12]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr

080065b2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80065b6:	f000 fae7 	bl	8006b88 <vTaskStartScheduler>
  
  return osOK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	bd80      	pop	{r7, pc}

080065c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80065c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065c2:	b089      	sub	sp, #36	; 0x24
 80065c4:	af04      	add	r7, sp, #16
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d020      	beq.n	8006614 <osThreadCreate+0x54>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d01c      	beq.n	8006614 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685c      	ldr	r4, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681d      	ldr	r5, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691e      	ldr	r6, [r3, #16]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff ffc9 	bl	8006584 <makeFreeRtosPriority>
 80065f2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065fc:	9202      	str	r2, [sp, #8]
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	9100      	str	r1, [sp, #0]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	4632      	mov	r2, r6
 8006606:	4629      	mov	r1, r5
 8006608:	4620      	mov	r0, r4
 800660a:	f000 f8e8 	bl	80067de <xTaskCreateStatic>
 800660e:	4603      	mov	r3, r0
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	e01c      	b.n	800664e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685c      	ldr	r4, [r3, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006620:	b29e      	uxth	r6, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006628:	4618      	mov	r0, r3
 800662a:	f7ff ffab 	bl	8006584 <makeFreeRtosPriority>
 800662e:	4602      	mov	r2, r0
 8006630:	f107 030c 	add.w	r3, r7, #12
 8006634:	9301      	str	r3, [sp, #4]
 8006636:	9200      	str	r2, [sp, #0]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	4632      	mov	r2, r6
 800663c:	4629      	mov	r1, r5
 800663e:	4620      	mov	r0, r4
 8006640:	f000 f929 	bl	8006896 <xTaskCreate>
 8006644:	4603      	mov	r3, r0
 8006646:	2b01      	cmp	r3, #1
 8006648:	d001      	beq.n	800664e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800664a:	2300      	movs	r3, #0
 800664c:	e000      	b.n	8006650 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800664e:	68fb      	ldr	r3, [r7, #12]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006658 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <osDelay+0x16>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	e000      	b.n	8006670 <osDelay+0x18>
 800666e:	2301      	movs	r3, #1
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fa55 	bl	8006b20 <vTaskDelay>
  
  return osOK;
 8006676:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f103 0208 	add.w	r2, r3, #8
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f04f 32ff 	mov.w	r2, #4294967295
 8006698:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f103 0208 	add.w	r2, r3, #8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f103 0208 	add.w	r2, r3, #8
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr

080066be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr

080066d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066d6:	b480      	push	{r7}
 80066d8:	b085      	sub	sp, #20
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	601a      	str	r2, [r3, #0]
}
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006732:	d103      	bne.n	800673c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	e00c      	b.n	8006756 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3308      	adds	r3, #8
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	e002      	b.n	800674a <vListInsert+0x2e>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	429a      	cmp	r2, r3
 8006754:	d2f6      	bcs.n	8006744 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	601a      	str	r2, [r3, #0]
}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr

0800678c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6892      	ldr	r2, [r2, #8]
 80067a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6852      	ldr	r2, [r2, #4]
 80067ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d103      	bne.n	80067c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	1e5a      	subs	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	bc80      	pop	{r7}
 80067dc:	4770      	bx	lr

080067de <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b08e      	sub	sp, #56	; 0x38
 80067e2:	af04      	add	r7, sp, #16
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	607a      	str	r2, [r7, #4]
 80067ea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006804:	bf00      	nop
 8006806:	e7fe      	b.n	8006806 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <xTaskCreateStatic+0x46>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	61fb      	str	r3, [r7, #28]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006824:	23b4      	movs	r3, #180	; 0xb4
 8006826:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2bb4      	cmp	r3, #180	; 0xb4
 800682c:	d00a      	beq.n	8006844 <xTaskCreateStatic+0x66>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	61bb      	str	r3, [r7, #24]
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006846:	2b00      	cmp	r3, #0
 8006848:	d01e      	beq.n	8006888 <xTaskCreateStatic+0xaa>
 800684a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01b      	beq.n	8006888 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006858:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	2202      	movs	r2, #2
 800685e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006862:	2300      	movs	r3, #0
 8006864:	9303      	str	r3, [sp, #12]
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	9302      	str	r3, [sp, #8]
 800686a:	f107 0314 	add.w	r3, r7, #20
 800686e:	9301      	str	r3, [sp, #4]
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 f850 	bl	8006920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006882:	f000 f8e3 	bl	8006a4c <prvAddNewTaskToReadyList>
 8006886:	e001      	b.n	800688c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800688c:	697b      	ldr	r3, [r7, #20]
	}
 800688e:	4618      	mov	r0, r3
 8006890:	3728      	adds	r7, #40	; 0x28
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006896:	b580      	push	{r7, lr}
 8006898:	b08c      	sub	sp, #48	; 0x30
 800689a:	af04      	add	r7, sp, #16
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	603b      	str	r3, [r7, #0]
 80068a2:	4613      	mov	r3, r2
 80068a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fe98 	bl	80075e0 <pvPortMalloc>
 80068b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00e      	beq.n	80068d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80068b8:	20b4      	movs	r0, #180	; 0xb4
 80068ba:	f000 fe91 	bl	80075e0 <pvPortMalloc>
 80068be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	631a      	str	r2, [r3, #48]	; 0x30
 80068cc:	e005      	b.n	80068da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068ce:	6978      	ldr	r0, [r7, #20]
 80068d0:	f000 ff4a 	bl	8007768 <vPortFree>
 80068d4:	e001      	b.n	80068da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d017      	beq.n	8006910 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068e8:	88fa      	ldrh	r2, [r7, #6]
 80068ea:	2300      	movs	r3, #0
 80068ec:	9303      	str	r3, [sp, #12]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	9302      	str	r3, [sp, #8]
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f80e 	bl	8006920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006904:	69f8      	ldr	r0, [r7, #28]
 8006906:	f000 f8a1 	bl	8006a4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800690a:	2301      	movs	r3, #1
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	e002      	b.n	8006916 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006910:	f04f 33ff 	mov.w	r3, #4294967295
 8006914:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006916:	69bb      	ldr	r3, [r7, #24]
	}
 8006918:	4618      	mov	r0, r3
 800691a:	3720      	adds	r7, #32
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006938:	3b01      	subs	r3, #1
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	f023 0307 	bic.w	r3, r3, #7
 8006946:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	f003 0307 	and.w	r3, r3, #7
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	617b      	str	r3, [r7, #20]
}
 8006964:	bf00      	nop
 8006966:	e7fe      	b.n	8006966 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006968:	2300      	movs	r3, #0
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	e012      	b.n	8006994 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	4413      	add	r3, r2
 8006974:	7819      	ldrb	r1, [r3, #0]
 8006976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	4413      	add	r3, r2
 800697c:	3334      	adds	r3, #52	; 0x34
 800697e:	460a      	mov	r2, r1
 8006980:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	4413      	add	r3, r2
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d006      	beq.n	800699c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	3301      	adds	r3, #1
 8006992:	61fb      	str	r3, [r7, #28]
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	2b0f      	cmp	r3, #15
 8006998:	d9e9      	bls.n	800696e <prvInitialiseNewTask+0x4e>
 800699a:	e000      	b.n	800699e <prvInitialiseNewTask+0x7e>
		{
			break;
 800699c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	2b06      	cmp	r3, #6
 80069aa:	d901      	bls.n	80069b0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069ac:	2306      	movs	r3, #6
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80069bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069be:	2200      	movs	r2, #0
 80069c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	3304      	adds	r3, #4
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff fe79 	bl	80066be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	3318      	adds	r3, #24
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff fe74 	bl	80066be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	f1c3 0207 	rsb	r2, r3, #7
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	334c      	adds	r3, #76	; 0x4c
 8006a00:	2260      	movs	r2, #96	; 0x60
 8006a02:	2100      	movs	r1, #0
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 f8f8 	bl	8007bfa <memset>
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	4a0c      	ldr	r2, [pc, #48]	; (8006a40 <prvInitialiseNewTask+0x120>)
 8006a0e:	651a      	str	r2, [r3, #80]	; 0x50
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	4a0c      	ldr	r2, [pc, #48]	; (8006a44 <prvInitialiseNewTask+0x124>)
 8006a14:	655a      	str	r2, [r3, #84]	; 0x54
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	4a0b      	ldr	r2, [pc, #44]	; (8006a48 <prvInitialiseNewTask+0x128>)
 8006a1a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	68f9      	ldr	r1, [r7, #12]
 8006a20:	69b8      	ldr	r0, [r7, #24]
 8006a22:	f000 fc29 	bl	8007278 <pxPortInitialiseStack>
 8006a26:	4602      	mov	r2, r0
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a38:	bf00      	nop
 8006a3a:	3720      	adds	r7, #32
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	0800bb8c 	.word	0x0800bb8c
 8006a44:	0800bbac 	.word	0x0800bbac
 8006a48:	0800bb6c 	.word	0x0800bb6c

08006a4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a54:	f000 fd02 	bl	800745c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a58:	4b2a      	ldr	r3, [pc, #168]	; (8006b04 <prvAddNewTaskToReadyList+0xb8>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	4a29      	ldr	r2, [pc, #164]	; (8006b04 <prvAddNewTaskToReadyList+0xb8>)
 8006a60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a62:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <prvAddNewTaskToReadyList+0xbc>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a6a:	4a27      	ldr	r2, [pc, #156]	; (8006b08 <prvAddNewTaskToReadyList+0xbc>)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a70:	4b24      	ldr	r3, [pc, #144]	; (8006b04 <prvAddNewTaskToReadyList+0xb8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d110      	bne.n	8006a9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a78:	f000 fad2 	bl	8007020 <prvInitialiseTaskLists>
 8006a7c:	e00d      	b.n	8006a9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a7e:	4b23      	ldr	r3, [pc, #140]	; (8006b0c <prvAddNewTaskToReadyList+0xc0>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d109      	bne.n	8006a9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a86:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <prvAddNewTaskToReadyList+0xbc>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d802      	bhi.n	8006a9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a94:	4a1c      	ldr	r2, [pc, #112]	; (8006b08 <prvAddNewTaskToReadyList+0xbc>)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a9a:	4b1d      	ldr	r3, [pc, #116]	; (8006b10 <prvAddNewTaskToReadyList+0xc4>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	4a1b      	ldr	r2, [pc, #108]	; (8006b10 <prvAddNewTaskToReadyList+0xc4>)
 8006aa2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	409a      	lsls	r2, r3
 8006aac:	4b19      	ldr	r3, [pc, #100]	; (8006b14 <prvAddNewTaskToReadyList+0xc8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	4a18      	ldr	r2, [pc, #96]	; (8006b14 <prvAddNewTaskToReadyList+0xc8>)
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <prvAddNewTaskToReadyList+0xcc>)
 8006ac4:	441a      	add	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	4619      	mov	r1, r3
 8006acc:	4610      	mov	r0, r2
 8006ace:	f7ff fe02 	bl	80066d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ad2:	f000 fcf3 	bl	80074bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ad6:	4b0d      	ldr	r3, [pc, #52]	; (8006b0c <prvAddNewTaskToReadyList+0xc0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00e      	beq.n	8006afc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ade:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <prvAddNewTaskToReadyList+0xbc>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d207      	bcs.n	8006afc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006aec:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <prvAddNewTaskToReadyList+0xd0>)
 8006aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006afc:	bf00      	nop
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	2000082c 	.word	0x2000082c
 8006b08:	2000072c 	.word	0x2000072c
 8006b0c:	20000838 	.word	0x20000838
 8006b10:	20000848 	.word	0x20000848
 8006b14:	20000834 	.word	0x20000834
 8006b18:	20000730 	.word	0x20000730
 8006b1c:	e000ed04 	.word	0xe000ed04

08006b20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d017      	beq.n	8006b62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b32:	4b13      	ldr	r3, [pc, #76]	; (8006b80 <vTaskDelay+0x60>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <vTaskDelay+0x30>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	60bb      	str	r3, [r7, #8]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b50:	f000 f884 	bl	8006c5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b54:	2100      	movs	r1, #0
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fb28 	bl	80071ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b5c:	f000 f88c 	bl	8006c78 <xTaskResumeAll>
 8006b60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d107      	bne.n	8006b78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006b68:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <vTaskDelay+0x64>)
 8006b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b78:	bf00      	nop
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	20000854 	.word	0x20000854
 8006b84:	e000ed04 	.word	0xe000ed04

08006b88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08a      	sub	sp, #40	; 0x28
 8006b8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b96:	463a      	mov	r2, r7
 8006b98:	1d39      	adds	r1, r7, #4
 8006b9a:	f107 0308 	add.w	r3, r7, #8
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fb f822 	bl	8001be8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	9202      	str	r2, [sp, #8]
 8006bac:	9301      	str	r3, [sp, #4]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	460a      	mov	r2, r1
 8006bb6:	4921      	ldr	r1, [pc, #132]	; (8006c3c <vTaskStartScheduler+0xb4>)
 8006bb8:	4821      	ldr	r0, [pc, #132]	; (8006c40 <vTaskStartScheduler+0xb8>)
 8006bba:	f7ff fe10 	bl	80067de <xTaskCreateStatic>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	4a20      	ldr	r2, [pc, #128]	; (8006c44 <vTaskStartScheduler+0xbc>)
 8006bc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bc4:	4b1f      	ldr	r3, [pc, #124]	; (8006c44 <vTaskStartScheduler+0xbc>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	e001      	b.n	8006bd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d11b      	bne.n	8006c14 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	613b      	str	r3, [r7, #16]
}
 8006bee:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006bf0:	4b15      	ldr	r3, [pc, #84]	; (8006c48 <vTaskStartScheduler+0xc0>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	334c      	adds	r3, #76	; 0x4c
 8006bf6:	4a15      	ldr	r2, [pc, #84]	; (8006c4c <vTaskStartScheduler+0xc4>)
 8006bf8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bfa:	4b15      	ldr	r3, [pc, #84]	; (8006c50 <vTaskStartScheduler+0xc8>)
 8006bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006c00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c02:	4b14      	ldr	r3, [pc, #80]	; (8006c54 <vTaskStartScheduler+0xcc>)
 8006c04:	2201      	movs	r2, #1
 8006c06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006c08:	4b13      	ldr	r3, [pc, #76]	; (8006c58 <vTaskStartScheduler+0xd0>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c0e:	f000 fbb3 	bl	8007378 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c12:	e00e      	b.n	8006c32 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1a:	d10a      	bne.n	8006c32 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	60fb      	str	r3, [r7, #12]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <vTaskStartScheduler+0xa8>
}
 8006c32:	bf00      	nop
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	0800bb4c 	.word	0x0800bb4c
 8006c40:	08006ff1 	.word	0x08006ff1
 8006c44:	20000850 	.word	0x20000850
 8006c48:	2000072c 	.word	0x2000072c
 8006c4c:	20000010 	.word	0x20000010
 8006c50:	2000084c 	.word	0x2000084c
 8006c54:	20000838 	.word	0x20000838
 8006c58:	20000830 	.word	0x20000830

08006c5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c60:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <vTaskSuspendAll+0x18>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3301      	adds	r3, #1
 8006c66:	4a03      	ldr	r2, [pc, #12]	; (8006c74 <vTaskSuspendAll+0x18>)
 8006c68:	6013      	str	r3, [r2, #0]
}
 8006c6a:	bf00      	nop
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	20000854 	.word	0x20000854

08006c78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c82:	2300      	movs	r3, #0
 8006c84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c86:	4b41      	ldr	r3, [pc, #260]	; (8006d8c <xTaskResumeAll+0x114>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10a      	bne.n	8006ca4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	603b      	str	r3, [r7, #0]
}
 8006ca0:	bf00      	nop
 8006ca2:	e7fe      	b.n	8006ca2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ca4:	f000 fbda 	bl	800745c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ca8:	4b38      	ldr	r3, [pc, #224]	; (8006d8c <xTaskResumeAll+0x114>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	4a37      	ldr	r2, [pc, #220]	; (8006d8c <xTaskResumeAll+0x114>)
 8006cb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cb2:	4b36      	ldr	r3, [pc, #216]	; (8006d8c <xTaskResumeAll+0x114>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d161      	bne.n	8006d7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cba:	4b35      	ldr	r3, [pc, #212]	; (8006d90 <xTaskResumeAll+0x118>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d05d      	beq.n	8006d7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cc2:	e02e      	b.n	8006d22 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006cc4:	4b33      	ldr	r3, [pc, #204]	; (8006d94 <xTaskResumeAll+0x11c>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3318      	adds	r3, #24
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff fd5b 	bl	800678c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff fd56 	bl	800678c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	409a      	lsls	r2, r3
 8006ce8:	4b2b      	ldr	r3, [pc, #172]	; (8006d98 <xTaskResumeAll+0x120>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	4a2a      	ldr	r2, [pc, #168]	; (8006d98 <xTaskResumeAll+0x120>)
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4a27      	ldr	r2, [pc, #156]	; (8006d9c <xTaskResumeAll+0x124>)
 8006d00:	441a      	add	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7ff fce4 	bl	80066d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d12:	4b23      	ldr	r3, [pc, #140]	; (8006da0 <xTaskResumeAll+0x128>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d302      	bcc.n	8006d22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d1c:	4b21      	ldr	r3, [pc, #132]	; (8006da4 <xTaskResumeAll+0x12c>)
 8006d1e:	2201      	movs	r2, #1
 8006d20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d22:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <xTaskResumeAll+0x11c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1cc      	bne.n	8006cc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d30:	f000 fa18 	bl	8007164 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d34:	4b1c      	ldr	r3, [pc, #112]	; (8006da8 <xTaskResumeAll+0x130>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d010      	beq.n	8006d62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d40:	f000 f836 	bl	8006db0 <xTaskIncrementTick>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d4a:	4b16      	ldr	r3, [pc, #88]	; (8006da4 <xTaskResumeAll+0x12c>)
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1f1      	bne.n	8006d40 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006d5c:	4b12      	ldr	r3, [pc, #72]	; (8006da8 <xTaskResumeAll+0x130>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d62:	4b10      	ldr	r3, [pc, #64]	; (8006da4 <xTaskResumeAll+0x12c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d009      	beq.n	8006d7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d6e:	4b0f      	ldr	r3, [pc, #60]	; (8006dac <xTaskResumeAll+0x134>)
 8006d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d7e:	f000 fb9d 	bl	80074bc <vPortExitCritical>

	return xAlreadyYielded;
 8006d82:	68bb      	ldr	r3, [r7, #8]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20000854 	.word	0x20000854
 8006d90:	2000082c 	.word	0x2000082c
 8006d94:	200007ec 	.word	0x200007ec
 8006d98:	20000834 	.word	0x20000834
 8006d9c:	20000730 	.word	0x20000730
 8006da0:	2000072c 	.word	0x2000072c
 8006da4:	20000840 	.word	0x20000840
 8006da8:	2000083c 	.word	0x2000083c
 8006dac:	e000ed04 	.word	0xe000ed04

08006db0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006db6:	2300      	movs	r3, #0
 8006db8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dba:	4b51      	ldr	r3, [pc, #324]	; (8006f00 <xTaskIncrementTick+0x150>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f040 808d 	bne.w	8006ede <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006dc4:	4b4f      	ldr	r3, [pc, #316]	; (8006f04 <xTaskIncrementTick+0x154>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006dcc:	4a4d      	ldr	r2, [pc, #308]	; (8006f04 <xTaskIncrementTick+0x154>)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d120      	bne.n	8006e1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006dd8:	4b4b      	ldr	r3, [pc, #300]	; (8006f08 <xTaskIncrementTick+0x158>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	603b      	str	r3, [r7, #0]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <xTaskIncrementTick+0x46>
 8006df8:	4b43      	ldr	r3, [pc, #268]	; (8006f08 <xTaskIncrementTick+0x158>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	4b43      	ldr	r3, [pc, #268]	; (8006f0c <xTaskIncrementTick+0x15c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a41      	ldr	r2, [pc, #260]	; (8006f08 <xTaskIncrementTick+0x158>)
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	4a41      	ldr	r2, [pc, #260]	; (8006f0c <xTaskIncrementTick+0x15c>)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	4b40      	ldr	r3, [pc, #256]	; (8006f10 <xTaskIncrementTick+0x160>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3301      	adds	r3, #1
 8006e12:	4a3f      	ldr	r2, [pc, #252]	; (8006f10 <xTaskIncrementTick+0x160>)
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	f000 f9a5 	bl	8007164 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e1a:	4b3e      	ldr	r3, [pc, #248]	; (8006f14 <xTaskIncrementTick+0x164>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d34d      	bcc.n	8006ec0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e24:	4b38      	ldr	r3, [pc, #224]	; (8006f08 <xTaskIncrementTick+0x158>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <xTaskIncrementTick+0x82>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <xTaskIncrementTick+0x84>
 8006e32:	2300      	movs	r3, #0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d004      	beq.n	8006e42 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e38:	4b36      	ldr	r3, [pc, #216]	; (8006f14 <xTaskIncrementTick+0x164>)
 8006e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3e:	601a      	str	r2, [r3, #0]
					break;
 8006e40:	e03e      	b.n	8006ec0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e42:	4b31      	ldr	r3, [pc, #196]	; (8006f08 <xTaskIncrementTick+0x158>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d203      	bcs.n	8006e62 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e5a:	4a2e      	ldr	r2, [pc, #184]	; (8006f14 <xTaskIncrementTick+0x164>)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6013      	str	r3, [r2, #0]
						break;
 8006e60:	e02e      	b.n	8006ec0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	3304      	adds	r3, #4
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff fc90 	bl	800678c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d004      	beq.n	8006e7e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	3318      	adds	r3, #24
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7ff fc87 	bl	800678c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	2201      	movs	r2, #1
 8006e84:	409a      	lsls	r2, r3
 8006e86:	4b24      	ldr	r3, [pc, #144]	; (8006f18 <xTaskIncrementTick+0x168>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	4a22      	ldr	r2, [pc, #136]	; (8006f18 <xTaskIncrementTick+0x168>)
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4a1f      	ldr	r2, [pc, #124]	; (8006f1c <xTaskIncrementTick+0x16c>)
 8006e9e:	441a      	add	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	f7ff fc15 	bl	80066d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb0:	4b1b      	ldr	r3, [pc, #108]	; (8006f20 <xTaskIncrementTick+0x170>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d3b4      	bcc.n	8006e24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ebe:	e7b1      	b.n	8006e24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ec0:	4b17      	ldr	r3, [pc, #92]	; (8006f20 <xTaskIncrementTick+0x170>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec6:	4915      	ldr	r1, [pc, #84]	; (8006f1c <xTaskIncrementTick+0x16c>)
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	440b      	add	r3, r1
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d907      	bls.n	8006ee8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	e004      	b.n	8006ee8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006ede:	4b11      	ldr	r3, [pc, #68]	; (8006f24 <xTaskIncrementTick+0x174>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	4a0f      	ldr	r2, [pc, #60]	; (8006f24 <xTaskIncrementTick+0x174>)
 8006ee6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <xTaskIncrementTick+0x178>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ef4:	697b      	ldr	r3, [r7, #20]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000854 	.word	0x20000854
 8006f04:	20000830 	.word	0x20000830
 8006f08:	200007e4 	.word	0x200007e4
 8006f0c:	200007e8 	.word	0x200007e8
 8006f10:	20000844 	.word	0x20000844
 8006f14:	2000084c 	.word	0x2000084c
 8006f18:	20000834 	.word	0x20000834
 8006f1c:	20000730 	.word	0x20000730
 8006f20:	2000072c 	.word	0x2000072c
 8006f24:	2000083c 	.word	0x2000083c
 8006f28:	20000840 	.word	0x20000840

08006f2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f32:	4b29      	ldr	r3, [pc, #164]	; (8006fd8 <vTaskSwitchContext+0xac>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f3a:	4b28      	ldr	r3, [pc, #160]	; (8006fdc <vTaskSwitchContext+0xb0>)
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f40:	e044      	b.n	8006fcc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006f42:	4b26      	ldr	r3, [pc, #152]	; (8006fdc <vTaskSwitchContext+0xb0>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f48:	4b25      	ldr	r3, [pc, #148]	; (8006fe0 <vTaskSwitchContext+0xb4>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	fab3 f383 	clz	r3, r3
 8006f54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f56:	7afb      	ldrb	r3, [r7, #11]
 8006f58:	f1c3 031f 	rsb	r3, r3, #31
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	4921      	ldr	r1, [pc, #132]	; (8006fe4 <vTaskSwitchContext+0xb8>)
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4613      	mov	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	440b      	add	r3, r1
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	607b      	str	r3, [r7, #4]
}
 8006f84:	bf00      	nop
 8006f86:	e7fe      	b.n	8006f86 <vTaskSwitchContext+0x5a>
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4a14      	ldr	r2, [pc, #80]	; (8006fe4 <vTaskSwitchContext+0xb8>)
 8006f94:	4413      	add	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	605a      	str	r2, [r3, #4]
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	3308      	adds	r3, #8
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d104      	bne.n	8006fb8 <vTaskSwitchContext+0x8c>
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	605a      	str	r2, [r3, #4]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	4a0a      	ldr	r2, [pc, #40]	; (8006fe8 <vTaskSwitchContext+0xbc>)
 8006fc0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006fc2:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <vTaskSwitchContext+0xbc>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	334c      	adds	r3, #76	; 0x4c
 8006fc8:	4a08      	ldr	r2, [pc, #32]	; (8006fec <vTaskSwitchContext+0xc0>)
 8006fca:	6013      	str	r3, [r2, #0]
}
 8006fcc:	bf00      	nop
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bc80      	pop	{r7}
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20000854 	.word	0x20000854
 8006fdc:	20000840 	.word	0x20000840
 8006fe0:	20000834 	.word	0x20000834
 8006fe4:	20000730 	.word	0x20000730
 8006fe8:	2000072c 	.word	0x2000072c
 8006fec:	20000010 	.word	0x20000010

08006ff0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ff8:	f000 f852 	bl	80070a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ffc:	4b06      	ldr	r3, [pc, #24]	; (8007018 <prvIdleTask+0x28>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d9f9      	bls.n	8006ff8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <prvIdleTask+0x2c>)
 8007006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007014:	e7f0      	b.n	8006ff8 <prvIdleTask+0x8>
 8007016:	bf00      	nop
 8007018:	20000730 	.word	0x20000730
 800701c:	e000ed04 	.word	0xe000ed04

08007020 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007026:	2300      	movs	r3, #0
 8007028:	607b      	str	r3, [r7, #4]
 800702a:	e00c      	b.n	8007046 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4a12      	ldr	r2, [pc, #72]	; (8007080 <prvInitialiseTaskLists+0x60>)
 8007038:	4413      	add	r3, r2
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff fb20 	bl	8006680 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3301      	adds	r3, #1
 8007044:	607b      	str	r3, [r7, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b06      	cmp	r3, #6
 800704a:	d9ef      	bls.n	800702c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800704c:	480d      	ldr	r0, [pc, #52]	; (8007084 <prvInitialiseTaskLists+0x64>)
 800704e:	f7ff fb17 	bl	8006680 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007052:	480d      	ldr	r0, [pc, #52]	; (8007088 <prvInitialiseTaskLists+0x68>)
 8007054:	f7ff fb14 	bl	8006680 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007058:	480c      	ldr	r0, [pc, #48]	; (800708c <prvInitialiseTaskLists+0x6c>)
 800705a:	f7ff fb11 	bl	8006680 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800705e:	480c      	ldr	r0, [pc, #48]	; (8007090 <prvInitialiseTaskLists+0x70>)
 8007060:	f7ff fb0e 	bl	8006680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007064:	480b      	ldr	r0, [pc, #44]	; (8007094 <prvInitialiseTaskLists+0x74>)
 8007066:	f7ff fb0b 	bl	8006680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800706a:	4b0b      	ldr	r3, [pc, #44]	; (8007098 <prvInitialiseTaskLists+0x78>)
 800706c:	4a05      	ldr	r2, [pc, #20]	; (8007084 <prvInitialiseTaskLists+0x64>)
 800706e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007070:	4b0a      	ldr	r3, [pc, #40]	; (800709c <prvInitialiseTaskLists+0x7c>)
 8007072:	4a05      	ldr	r2, [pc, #20]	; (8007088 <prvInitialiseTaskLists+0x68>)
 8007074:	601a      	str	r2, [r3, #0]
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20000730 	.word	0x20000730
 8007084:	200007bc 	.word	0x200007bc
 8007088:	200007d0 	.word	0x200007d0
 800708c:	200007ec 	.word	0x200007ec
 8007090:	20000800 	.word	0x20000800
 8007094:	20000818 	.word	0x20000818
 8007098:	200007e4 	.word	0x200007e4
 800709c:	200007e8 	.word	0x200007e8

080070a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070a6:	e019      	b.n	80070dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070a8:	f000 f9d8 	bl	800745c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80070ac:	4b10      	ldr	r3, [pc, #64]	; (80070f0 <prvCheckTasksWaitingTermination+0x50>)
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3304      	adds	r3, #4
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff fb67 	bl	800678c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070be:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <prvCheckTasksWaitingTermination+0x54>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	4a0b      	ldr	r2, [pc, #44]	; (80070f4 <prvCheckTasksWaitingTermination+0x54>)
 80070c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070c8:	4b0b      	ldr	r3, [pc, #44]	; (80070f8 <prvCheckTasksWaitingTermination+0x58>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3b01      	subs	r3, #1
 80070ce:	4a0a      	ldr	r2, [pc, #40]	; (80070f8 <prvCheckTasksWaitingTermination+0x58>)
 80070d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070d2:	f000 f9f3 	bl	80074bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f810 	bl	80070fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070dc:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <prvCheckTasksWaitingTermination+0x58>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e1      	bne.n	80070a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20000800 	.word	0x20000800
 80070f4:	2000082c 	.word	0x2000082c
 80070f8:	20000814 	.word	0x20000814

080070fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	334c      	adds	r3, #76	; 0x4c
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fe21 	bl	8007d50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d108      	bne.n	800712a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fb23 	bl	8007768 <vPortFree>
				vPortFree( pxTCB );
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fb20 	bl	8007768 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007128:	e018      	b.n	800715c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007130:	2b01      	cmp	r3, #1
 8007132:	d103      	bne.n	800713c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fb17 	bl	8007768 <vPortFree>
	}
 800713a:	e00f      	b.n	800715c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007142:	2b02      	cmp	r3, #2
 8007144:	d00a      	beq.n	800715c <prvDeleteTCB+0x60>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	60fb      	str	r3, [r7, #12]
}
 8007158:	bf00      	nop
 800715a:	e7fe      	b.n	800715a <prvDeleteTCB+0x5e>
	}
 800715c:	bf00      	nop
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800716a:	4b0e      	ldr	r3, [pc, #56]	; (80071a4 <prvResetNextTaskUnblockTime+0x40>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <prvResetNextTaskUnblockTime+0x14>
 8007174:	2301      	movs	r3, #1
 8007176:	e000      	b.n	800717a <prvResetNextTaskUnblockTime+0x16>
 8007178:	2300      	movs	r3, #0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d004      	beq.n	8007188 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800717e:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <prvResetNextTaskUnblockTime+0x44>)
 8007180:	f04f 32ff 	mov.w	r2, #4294967295
 8007184:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007186:	e008      	b.n	800719a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007188:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <prvResetNextTaskUnblockTime+0x40>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	4a04      	ldr	r2, [pc, #16]	; (80071a8 <prvResetNextTaskUnblockTime+0x44>)
 8007198:	6013      	str	r3, [r2, #0]
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr
 80071a4:	200007e4 	.word	0x200007e4
 80071a8:	2000084c 	.word	0x2000084c

080071ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071b6:	4b29      	ldr	r3, [pc, #164]	; (800725c <prvAddCurrentTaskToDelayedList+0xb0>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071bc:	4b28      	ldr	r3, [pc, #160]	; (8007260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3304      	adds	r3, #4
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff fae2 	bl	800678c <uxListRemove>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10b      	bne.n	80071e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80071ce:	4b24      	ldr	r3, [pc, #144]	; (8007260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	2201      	movs	r2, #1
 80071d6:	fa02 f303 	lsl.w	r3, r2, r3
 80071da:	43da      	mvns	r2, r3
 80071dc:	4b21      	ldr	r3, [pc, #132]	; (8007264 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4013      	ands	r3, r2
 80071e2:	4a20      	ldr	r2, [pc, #128]	; (8007264 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ec:	d10a      	bne.n	8007204 <prvAddCurrentTaskToDelayedList+0x58>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d007      	beq.n	8007204 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071f4:	4b1a      	ldr	r3, [pc, #104]	; (8007260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3304      	adds	r3, #4
 80071fa:	4619      	mov	r1, r3
 80071fc:	481a      	ldr	r0, [pc, #104]	; (8007268 <prvAddCurrentTaskToDelayedList+0xbc>)
 80071fe:	f7ff fa6a 	bl	80066d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007202:	e026      	b.n	8007252 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4413      	add	r3, r2
 800720a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800720c:	4b14      	ldr	r3, [pc, #80]	; (8007260 <prvAddCurrentTaskToDelayedList+0xb4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	429a      	cmp	r2, r3
 800721a:	d209      	bcs.n	8007230 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800721c:	4b13      	ldr	r3, [pc, #76]	; (800726c <prvAddCurrentTaskToDelayedList+0xc0>)
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3304      	adds	r3, #4
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f7ff fa77 	bl	800671c <vListInsert>
}
 800722e:	e010      	b.n	8007252 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007230:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3304      	adds	r3, #4
 800723a:	4619      	mov	r1, r3
 800723c:	4610      	mov	r0, r2
 800723e:	f7ff fa6d 	bl	800671c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007242:	4b0c      	ldr	r3, [pc, #48]	; (8007274 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	429a      	cmp	r2, r3
 800724a:	d202      	bcs.n	8007252 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800724c:	4a09      	ldr	r2, [pc, #36]	; (8007274 <prvAddCurrentTaskToDelayedList+0xc8>)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	6013      	str	r3, [r2, #0]
}
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000830 	.word	0x20000830
 8007260:	2000072c 	.word	0x2000072c
 8007264:	20000834 	.word	0x20000834
 8007268:	20000818 	.word	0x20000818
 800726c:	200007e8 	.word	0x200007e8
 8007270:	200007e4 	.word	0x200007e4
 8007274:	2000084c 	.word	0x2000084c

08007278 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3b04      	subs	r3, #4
 8007288:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007290:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3b04      	subs	r3, #4
 8007296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f023 0201 	bic.w	r2, r3, #1
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3b04      	subs	r3, #4
 80072a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072a8:	4a08      	ldr	r2, [pc, #32]	; (80072cc <pxPortInitialiseStack+0x54>)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3b14      	subs	r3, #20
 80072b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3b20      	subs	r3, #32
 80072be:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072c0:	68fb      	ldr	r3, [r7, #12]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bc80      	pop	{r7}
 80072ca:	4770      	bx	lr
 80072cc:	080072d1 	.word	0x080072d1

080072d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072da:	4b12      	ldr	r3, [pc, #72]	; (8007324 <prvTaskExitError+0x54>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e2:	d00a      	beq.n	80072fa <prvTaskExitError+0x2a>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	60fb      	str	r3, [r7, #12]
}
 80072f6:	bf00      	nop
 80072f8:	e7fe      	b.n	80072f8 <prvTaskExitError+0x28>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	60bb      	str	r3, [r7, #8]
}
 800730c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800730e:	bf00      	nop
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0fc      	beq.n	8007310 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	bc80      	pop	{r7}
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	2000000c 	.word	0x2000000c
	...

08007330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <pxCurrentTCBConst2>)
 8007332:	6819      	ldr	r1, [r3, #0]
 8007334:	6808      	ldr	r0, [r1, #0]
 8007336:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800733a:	f380 8809 	msr	PSP, r0
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f04f 0000 	mov.w	r0, #0
 8007346:	f380 8811 	msr	BASEPRI, r0
 800734a:	f04e 0e0d 	orr.w	lr, lr, #13
 800734e:	4770      	bx	lr

08007350 <pxCurrentTCBConst2>:
 8007350:	2000072c 	.word	0x2000072c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007354:	bf00      	nop
 8007356:	bf00      	nop

08007358 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007358:	4806      	ldr	r0, [pc, #24]	; (8007374 <prvPortStartFirstTask+0x1c>)
 800735a:	6800      	ldr	r0, [r0, #0]
 800735c:	6800      	ldr	r0, [r0, #0]
 800735e:	f380 8808 	msr	MSP, r0
 8007362:	b662      	cpsie	i
 8007364:	b661      	cpsie	f
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	df00      	svc	0
 8007370:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007372:	bf00      	nop
 8007374:	e000ed08 	.word	0xe000ed08

08007378 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800737e:	4b32      	ldr	r3, [pc, #200]	; (8007448 <xPortStartScheduler+0xd0>)
 8007380:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	b2db      	uxtb	r3, r3
 8007388:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	22ff      	movs	r2, #255	; 0xff
 800738e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	b2db      	uxtb	r3, r3
 8007396:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007398:	78fb      	ldrb	r3, [r7, #3]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	4b2a      	ldr	r3, [pc, #168]	; (800744c <xPortStartScheduler+0xd4>)
 80073a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073a6:	4b2a      	ldr	r3, [pc, #168]	; (8007450 <xPortStartScheduler+0xd8>)
 80073a8:	2207      	movs	r2, #7
 80073aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073ac:	e009      	b.n	80073c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80073ae:	4b28      	ldr	r3, [pc, #160]	; (8007450 <xPortStartScheduler+0xd8>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	4a26      	ldr	r2, [pc, #152]	; (8007450 <xPortStartScheduler+0xd8>)
 80073b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	005b      	lsls	r3, r3, #1
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073c2:	78fb      	ldrb	r3, [r7, #3]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ca:	2b80      	cmp	r3, #128	; 0x80
 80073cc:	d0ef      	beq.n	80073ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073ce:	4b20      	ldr	r3, [pc, #128]	; (8007450 <xPortStartScheduler+0xd8>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f1c3 0307 	rsb	r3, r3, #7
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d00a      	beq.n	80073f0 <xPortStartScheduler+0x78>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	60bb      	str	r3, [r7, #8]
}
 80073ec:	bf00      	nop
 80073ee:	e7fe      	b.n	80073ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073f0:	4b17      	ldr	r3, [pc, #92]	; (8007450 <xPortStartScheduler+0xd8>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	4a16      	ldr	r2, [pc, #88]	; (8007450 <xPortStartScheduler+0xd8>)
 80073f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073fa:	4b15      	ldr	r3, [pc, #84]	; (8007450 <xPortStartScheduler+0xd8>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007402:	4a13      	ldr	r2, [pc, #76]	; (8007450 <xPortStartScheduler+0xd8>)
 8007404:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	b2da      	uxtb	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800740e:	4b11      	ldr	r3, [pc, #68]	; (8007454 <xPortStartScheduler+0xdc>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a10      	ldr	r2, [pc, #64]	; (8007454 <xPortStartScheduler+0xdc>)
 8007414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007418:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800741a:	4b0e      	ldr	r3, [pc, #56]	; (8007454 <xPortStartScheduler+0xdc>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a0d      	ldr	r2, [pc, #52]	; (8007454 <xPortStartScheduler+0xdc>)
 8007420:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007424:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007426:	f000 f8b9 	bl	800759c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800742a:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <xPortStartScheduler+0xe0>)
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007430:	f7ff ff92 	bl	8007358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007434:	f7ff fd7a 	bl	8006f2c <vTaskSwitchContext>
	prvTaskExitError();
 8007438:	f7ff ff4a 	bl	80072d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	e000e400 	.word	0xe000e400
 800744c:	20000858 	.word	0x20000858
 8007450:	2000085c 	.word	0x2000085c
 8007454:	e000ed20 	.word	0xe000ed20
 8007458:	2000000c 	.word	0x2000000c

0800745c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	607b      	str	r3, [r7, #4]
}
 8007474:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007476:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <vPortEnterCritical+0x58>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3301      	adds	r3, #1
 800747c:	4a0d      	ldr	r2, [pc, #52]	; (80074b4 <vPortEnterCritical+0x58>)
 800747e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007480:	4b0c      	ldr	r3, [pc, #48]	; (80074b4 <vPortEnterCritical+0x58>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d10f      	bne.n	80074a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007488:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <vPortEnterCritical+0x5c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00a      	beq.n	80074a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	603b      	str	r3, [r7, #0]
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <vPortEnterCritical+0x4a>
	}
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bc80      	pop	{r7}
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	2000000c 	.word	0x2000000c
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074c2:	4b11      	ldr	r3, [pc, #68]	; (8007508 <vPortExitCritical+0x4c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <vPortExitCritical+0x24>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	607b      	str	r3, [r7, #4]
}
 80074dc:	bf00      	nop
 80074de:	e7fe      	b.n	80074de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80074e0:	4b09      	ldr	r3, [pc, #36]	; (8007508 <vPortExitCritical+0x4c>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	4a08      	ldr	r2, [pc, #32]	; (8007508 <vPortExitCritical+0x4c>)
 80074e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074ea:	4b07      	ldr	r3, [pc, #28]	; (8007508 <vPortExitCritical+0x4c>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d105      	bne.n	80074fe <vPortExitCritical+0x42>
 80074f2:	2300      	movs	r3, #0
 80074f4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	bc80      	pop	{r7}
 8007506:	4770      	bx	lr
 8007508:	2000000c 	.word	0x2000000c
 800750c:	00000000 	.word	0x00000000

08007510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007510:	f3ef 8009 	mrs	r0, PSP
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	4b0d      	ldr	r3, [pc, #52]	; (8007550 <pxCurrentTCBConst>)
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007520:	6010      	str	r0, [r2, #0]
 8007522:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007526:	f04f 0050 	mov.w	r0, #80	; 0x50
 800752a:	f380 8811 	msr	BASEPRI, r0
 800752e:	f7ff fcfd 	bl	8006f2c <vTaskSwitchContext>
 8007532:	f04f 0000 	mov.w	r0, #0
 8007536:	f380 8811 	msr	BASEPRI, r0
 800753a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800753e:	6819      	ldr	r1, [r3, #0]
 8007540:	6808      	ldr	r0, [r1, #0]
 8007542:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007546:	f380 8809 	msr	PSP, r0
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	4770      	bx	lr

08007550 <pxCurrentTCBConst>:
 8007550:	2000072c 	.word	0x2000072c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop

08007558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	607b      	str	r3, [r7, #4]
}
 8007570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007572:	f7ff fc1d 	bl	8006db0 <xTaskIncrementTick>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800757c:	4b06      	ldr	r3, [pc, #24]	; (8007598 <SysTick_Handler+0x40>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	2300      	movs	r3, #0
 8007586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f383 8811 	msr	BASEPRI, r3
}
 800758e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075a0:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <vPortSetupTimerInterrupt+0x30>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075a6:	4b0a      	ldr	r3, [pc, #40]	; (80075d0 <vPortSetupTimerInterrupt+0x34>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075ac:	4b09      	ldr	r3, [pc, #36]	; (80075d4 <vPortSetupTimerInterrupt+0x38>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a09      	ldr	r2, [pc, #36]	; (80075d8 <vPortSetupTimerInterrupt+0x3c>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	099b      	lsrs	r3, r3, #6
 80075b8:	4a08      	ldr	r2, [pc, #32]	; (80075dc <vPortSetupTimerInterrupt+0x40>)
 80075ba:	3b01      	subs	r3, #1
 80075bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075be:	4b03      	ldr	r3, [pc, #12]	; (80075cc <vPortSetupTimerInterrupt+0x30>)
 80075c0:	2207      	movs	r2, #7
 80075c2:	601a      	str	r2, [r3, #0]
}
 80075c4:	bf00      	nop
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bc80      	pop	{r7}
 80075ca:	4770      	bx	lr
 80075cc:	e000e010 	.word	0xe000e010
 80075d0:	e000e018 	.word	0xe000e018
 80075d4:	20000000 	.word	0x20000000
 80075d8:	10624dd3 	.word	0x10624dd3
 80075dc:	e000e014 	.word	0xe000e014

080075e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08a      	sub	sp, #40	; 0x28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075e8:	2300      	movs	r3, #0
 80075ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075ec:	f7ff fb36 	bl	8006c5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075f0:	4b58      	ldr	r3, [pc, #352]	; (8007754 <pvPortMalloc+0x174>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075f8:	f000 f910 	bl	800781c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075fc:	4b56      	ldr	r3, [pc, #344]	; (8007758 <pvPortMalloc+0x178>)
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4013      	ands	r3, r2
 8007604:	2b00      	cmp	r3, #0
 8007606:	f040 808e 	bne.w	8007726 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d01d      	beq.n	800764c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007610:	2208      	movs	r2, #8
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4413      	add	r3, r2
 8007616:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f003 0307 	and.w	r3, r3, #7
 800761e:	2b00      	cmp	r3, #0
 8007620:	d014      	beq.n	800764c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f023 0307 	bic.w	r3, r3, #7
 8007628:	3308      	adds	r3, #8
 800762a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <pvPortMalloc+0x6c>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	617b      	str	r3, [r7, #20]
}
 8007648:	bf00      	nop
 800764a:	e7fe      	b.n	800764a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d069      	beq.n	8007726 <pvPortMalloc+0x146>
 8007652:	4b42      	ldr	r3, [pc, #264]	; (800775c <pvPortMalloc+0x17c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	429a      	cmp	r2, r3
 800765a:	d864      	bhi.n	8007726 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800765c:	4b40      	ldr	r3, [pc, #256]	; (8007760 <pvPortMalloc+0x180>)
 800765e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007660:	4b3f      	ldr	r3, [pc, #252]	; (8007760 <pvPortMalloc+0x180>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007666:	e004      	b.n	8007672 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	429a      	cmp	r2, r3
 800767a:	d903      	bls.n	8007684 <pvPortMalloc+0xa4>
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1f1      	bne.n	8007668 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007684:	4b33      	ldr	r3, [pc, #204]	; (8007754 <pvPortMalloc+0x174>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800768a:	429a      	cmp	r2, r3
 800768c:	d04b      	beq.n	8007726 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2208      	movs	r2, #8
 8007694:	4413      	add	r3, r2
 8007696:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	1ad2      	subs	r2, r2, r3
 80076a8:	2308      	movs	r3, #8
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d91f      	bls.n	80076f0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4413      	add	r3, r2
 80076b6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <pvPortMalloc+0xf8>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	613b      	str	r3, [r7, #16]
}
 80076d4:	bf00      	nop
 80076d6:	e7fe      	b.n	80076d6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	1ad2      	subs	r2, r2, r3
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076ea:	69b8      	ldr	r0, [r7, #24]
 80076ec:	f000 f8f8 	bl	80078e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076f0:	4b1a      	ldr	r3, [pc, #104]	; (800775c <pvPortMalloc+0x17c>)
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	4a18      	ldr	r2, [pc, #96]	; (800775c <pvPortMalloc+0x17c>)
 80076fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076fe:	4b17      	ldr	r3, [pc, #92]	; (800775c <pvPortMalloc+0x17c>)
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	4b18      	ldr	r3, [pc, #96]	; (8007764 <pvPortMalloc+0x184>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d203      	bcs.n	8007712 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800770a:	4b14      	ldr	r3, [pc, #80]	; (800775c <pvPortMalloc+0x17c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a15      	ldr	r2, [pc, #84]	; (8007764 <pvPortMalloc+0x184>)
 8007710:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	4b10      	ldr	r3, [pc, #64]	; (8007758 <pvPortMalloc+0x178>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	431a      	orrs	r2, r3
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007726:	f7ff faa7 	bl	8006c78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	f003 0307 	and.w	r3, r3, #7
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00a      	beq.n	800774a <pvPortMalloc+0x16a>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	60fb      	str	r3, [r7, #12]
}
 8007746:	bf00      	nop
 8007748:	e7fe      	b.n	8007748 <pvPortMalloc+0x168>
	return pvReturn;
 800774a:	69fb      	ldr	r3, [r7, #28]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3728      	adds	r7, #40	; 0x28
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20001e58 	.word	0x20001e58
 8007758:	20001e64 	.word	0x20001e64
 800775c:	20001e5c 	.word	0x20001e5c
 8007760:	20001e50 	.word	0x20001e50
 8007764:	20001e60 	.word	0x20001e60

08007768 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d048      	beq.n	800780c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800777a:	2308      	movs	r3, #8
 800777c:	425b      	negs	r3, r3
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4413      	add	r3, r2
 8007782:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	4b21      	ldr	r3, [pc, #132]	; (8007814 <vPortFree+0xac>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4013      	ands	r3, r2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10a      	bne.n	80077ac <vPortFree+0x44>
	__asm volatile
 8007796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	60fb      	str	r3, [r7, #12]
}
 80077a8:	bf00      	nop
 80077aa:	e7fe      	b.n	80077aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00a      	beq.n	80077ca <vPortFree+0x62>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	60bb      	str	r3, [r7, #8]
}
 80077c6:	bf00      	nop
 80077c8:	e7fe      	b.n	80077c8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	4b11      	ldr	r3, [pc, #68]	; (8007814 <vPortFree+0xac>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4013      	ands	r3, r2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d019      	beq.n	800780c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d115      	bne.n	800780c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <vPortFree+0xac>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	43db      	mvns	r3, r3
 80077ea:	401a      	ands	r2, r3
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077f0:	f7ff fa34 	bl	8006c5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	4b07      	ldr	r3, [pc, #28]	; (8007818 <vPortFree+0xb0>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4413      	add	r3, r2
 80077fe:	4a06      	ldr	r2, [pc, #24]	; (8007818 <vPortFree+0xb0>)
 8007800:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007802:	6938      	ldr	r0, [r7, #16]
 8007804:	f000 f86c 	bl	80078e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007808:	f7ff fa36 	bl	8006c78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800780c:	bf00      	nop
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	20001e64 	.word	0x20001e64
 8007818:	20001e5c 	.word	0x20001e5c

0800781c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007822:	f241 53f0 	movw	r3, #5616	; 0x15f0
 8007826:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007828:	4b27      	ldr	r3, [pc, #156]	; (80078c8 <prvHeapInit+0xac>)
 800782a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00c      	beq.n	8007850 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3307      	adds	r3, #7
 800783a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0307 	bic.w	r3, r3, #7
 8007842:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	4a1f      	ldr	r2, [pc, #124]	; (80078c8 <prvHeapInit+0xac>)
 800784c:	4413      	add	r3, r2
 800784e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007854:	4a1d      	ldr	r2, [pc, #116]	; (80078cc <prvHeapInit+0xb0>)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800785a:	4b1c      	ldr	r3, [pc, #112]	; (80078cc <prvHeapInit+0xb0>)
 800785c:	2200      	movs	r2, #0
 800785e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	4413      	add	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007868:	2208      	movs	r2, #8
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	1a9b      	subs	r3, r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 0307 	bic.w	r3, r3, #7
 8007876:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4a15      	ldr	r2, [pc, #84]	; (80078d0 <prvHeapInit+0xb4>)
 800787c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800787e:	4b14      	ldr	r3, [pc, #80]	; (80078d0 <prvHeapInit+0xb4>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2200      	movs	r2, #0
 8007884:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007886:	4b12      	ldr	r3, [pc, #72]	; (80078d0 <prvHeapInit+0xb4>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	1ad2      	subs	r2, r2, r3
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800789c:	4b0c      	ldr	r3, [pc, #48]	; (80078d0 <prvHeapInit+0xb4>)
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	4a0a      	ldr	r2, [pc, #40]	; (80078d4 <prvHeapInit+0xb8>)
 80078aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	4a09      	ldr	r2, [pc, #36]	; (80078d8 <prvHeapInit+0xbc>)
 80078b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078b4:	4b09      	ldr	r3, [pc, #36]	; (80078dc <prvHeapInit+0xc0>)
 80078b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078ba:	601a      	str	r2, [r3, #0]
}
 80078bc:	bf00      	nop
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	20000860 	.word	0x20000860
 80078cc:	20001e50 	.word	0x20001e50
 80078d0:	20001e58 	.word	0x20001e58
 80078d4:	20001e60 	.word	0x20001e60
 80078d8:	20001e5c 	.word	0x20001e5c
 80078dc:	20001e64 	.word	0x20001e64

080078e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078e8:	4b27      	ldr	r3, [pc, #156]	; (8007988 <prvInsertBlockIntoFreeList+0xa8>)
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	e002      	b.n	80078f4 <prvInsertBlockIntoFreeList+0x14>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d8f7      	bhi.n	80078ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	4413      	add	r3, r2
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	429a      	cmp	r2, r3
 800790e:	d108      	bne.n	8007922 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	441a      	add	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	441a      	add	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d118      	bne.n	8007968 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4b14      	ldr	r3, [pc, #80]	; (800798c <prvInsertBlockIntoFreeList+0xac>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d00d      	beq.n	800795e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	441a      	add	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	e008      	b.n	8007970 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800795e:	4b0b      	ldr	r3, [pc, #44]	; (800798c <prvInsertBlockIntoFreeList+0xac>)
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	e003      	b.n	8007970 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	429a      	cmp	r2, r3
 8007976:	d002      	beq.n	800797e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800797e:	bf00      	nop
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	bc80      	pop	{r7}
 8007986:	4770      	bx	lr
 8007988:	20001e50 	.word	0x20001e50
 800798c:	20001e58 	.word	0x20001e58

08007990 <atof>:
 8007990:	2100      	movs	r1, #0
 8007992:	f001 b8b5 	b.w	8008b00 <strtod>
	...

08007998 <__errno>:
 8007998:	4b01      	ldr	r3, [pc, #4]	; (80079a0 <__errno+0x8>)
 800799a:	6818      	ldr	r0, [r3, #0]
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	20000010 	.word	0x20000010

080079a4 <std>:
 80079a4:	2300      	movs	r3, #0
 80079a6:	b510      	push	{r4, lr}
 80079a8:	4604      	mov	r4, r0
 80079aa:	e9c0 3300 	strd	r3, r3, [r0]
 80079ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079b2:	6083      	str	r3, [r0, #8]
 80079b4:	8181      	strh	r1, [r0, #12]
 80079b6:	6643      	str	r3, [r0, #100]	; 0x64
 80079b8:	81c2      	strh	r2, [r0, #14]
 80079ba:	6183      	str	r3, [r0, #24]
 80079bc:	4619      	mov	r1, r3
 80079be:	2208      	movs	r2, #8
 80079c0:	305c      	adds	r0, #92	; 0x5c
 80079c2:	f000 f91a 	bl	8007bfa <memset>
 80079c6:	4b05      	ldr	r3, [pc, #20]	; (80079dc <std+0x38>)
 80079c8:	6224      	str	r4, [r4, #32]
 80079ca:	6263      	str	r3, [r4, #36]	; 0x24
 80079cc:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <std+0x3c>)
 80079ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80079d0:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <std+0x40>)
 80079d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079d4:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <std+0x44>)
 80079d6:	6323      	str	r3, [r4, #48]	; 0x30
 80079d8:	bd10      	pop	{r4, pc}
 80079da:	bf00      	nop
 80079dc:	08007e69 	.word	0x08007e69
 80079e0:	08007e8b 	.word	0x08007e8b
 80079e4:	08007ec3 	.word	0x08007ec3
 80079e8:	08007ee7 	.word	0x08007ee7

080079ec <_cleanup_r>:
 80079ec:	4901      	ldr	r1, [pc, #4]	; (80079f4 <_cleanup_r+0x8>)
 80079ee:	f000 b8af 	b.w	8007b50 <_fwalk_reent>
 80079f2:	bf00      	nop
 80079f4:	08008c61 	.word	0x08008c61

080079f8 <__sfmoreglue>:
 80079f8:	2268      	movs	r2, #104	; 0x68
 80079fa:	b570      	push	{r4, r5, r6, lr}
 80079fc:	1e4d      	subs	r5, r1, #1
 80079fe:	4355      	muls	r5, r2
 8007a00:	460e      	mov	r6, r1
 8007a02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a06:	f000 f921 	bl	8007c4c <_malloc_r>
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	b140      	cbz	r0, 8007a20 <__sfmoreglue+0x28>
 8007a0e:	2100      	movs	r1, #0
 8007a10:	e9c0 1600 	strd	r1, r6, [r0]
 8007a14:	300c      	adds	r0, #12
 8007a16:	60a0      	str	r0, [r4, #8]
 8007a18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a1c:	f000 f8ed 	bl	8007bfa <memset>
 8007a20:	4620      	mov	r0, r4
 8007a22:	bd70      	pop	{r4, r5, r6, pc}

08007a24 <__sfp_lock_acquire>:
 8007a24:	4801      	ldr	r0, [pc, #4]	; (8007a2c <__sfp_lock_acquire+0x8>)
 8007a26:	f000 b8d8 	b.w	8007bda <__retarget_lock_acquire_recursive>
 8007a2a:	bf00      	nop
 8007a2c:	20001e69 	.word	0x20001e69

08007a30 <__sfp_lock_release>:
 8007a30:	4801      	ldr	r0, [pc, #4]	; (8007a38 <__sfp_lock_release+0x8>)
 8007a32:	f000 b8d3 	b.w	8007bdc <__retarget_lock_release_recursive>
 8007a36:	bf00      	nop
 8007a38:	20001e69 	.word	0x20001e69

08007a3c <__sinit_lock_acquire>:
 8007a3c:	4801      	ldr	r0, [pc, #4]	; (8007a44 <__sinit_lock_acquire+0x8>)
 8007a3e:	f000 b8cc 	b.w	8007bda <__retarget_lock_acquire_recursive>
 8007a42:	bf00      	nop
 8007a44:	20001e6a 	.word	0x20001e6a

08007a48 <__sinit_lock_release>:
 8007a48:	4801      	ldr	r0, [pc, #4]	; (8007a50 <__sinit_lock_release+0x8>)
 8007a4a:	f000 b8c7 	b.w	8007bdc <__retarget_lock_release_recursive>
 8007a4e:	bf00      	nop
 8007a50:	20001e6a 	.word	0x20001e6a

08007a54 <__sinit>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	4604      	mov	r4, r0
 8007a58:	f7ff fff0 	bl	8007a3c <__sinit_lock_acquire>
 8007a5c:	69a3      	ldr	r3, [r4, #24]
 8007a5e:	b11b      	cbz	r3, 8007a68 <__sinit+0x14>
 8007a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a64:	f7ff bff0 	b.w	8007a48 <__sinit_lock_release>
 8007a68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a6c:	6523      	str	r3, [r4, #80]	; 0x50
 8007a6e:	4b13      	ldr	r3, [pc, #76]	; (8007abc <__sinit+0x68>)
 8007a70:	4a13      	ldr	r2, [pc, #76]	; (8007ac0 <__sinit+0x6c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	bf08      	it	eq
 8007a7a:	2301      	moveq	r3, #1
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	bf08      	it	eq
 8007a80:	61a3      	streq	r3, [r4, #24]
 8007a82:	f000 f81f 	bl	8007ac4 <__sfp>
 8007a86:	6060      	str	r0, [r4, #4]
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 f81b 	bl	8007ac4 <__sfp>
 8007a8e:	60a0      	str	r0, [r4, #8]
 8007a90:	4620      	mov	r0, r4
 8007a92:	f000 f817 	bl	8007ac4 <__sfp>
 8007a96:	2200      	movs	r2, #0
 8007a98:	2104      	movs	r1, #4
 8007a9a:	60e0      	str	r0, [r4, #12]
 8007a9c:	6860      	ldr	r0, [r4, #4]
 8007a9e:	f7ff ff81 	bl	80079a4 <std>
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	2109      	movs	r1, #9
 8007aa6:	68a0      	ldr	r0, [r4, #8]
 8007aa8:	f7ff ff7c 	bl	80079a4 <std>
 8007aac:	2202      	movs	r2, #2
 8007aae:	2112      	movs	r1, #18
 8007ab0:	68e0      	ldr	r0, [r4, #12]
 8007ab2:	f7ff ff77 	bl	80079a4 <std>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	61a3      	str	r3, [r4, #24]
 8007aba:	e7d1      	b.n	8007a60 <__sinit+0xc>
 8007abc:	0800bbcc 	.word	0x0800bbcc
 8007ac0:	080079ed 	.word	0x080079ed

08007ac4 <__sfp>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	f7ff ffac 	bl	8007a24 <__sfp_lock_acquire>
 8007acc:	4b1e      	ldr	r3, [pc, #120]	; (8007b48 <__sfp+0x84>)
 8007ace:	681e      	ldr	r6, [r3, #0]
 8007ad0:	69b3      	ldr	r3, [r6, #24]
 8007ad2:	b913      	cbnz	r3, 8007ada <__sfp+0x16>
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f7ff ffbd 	bl	8007a54 <__sinit>
 8007ada:	3648      	adds	r6, #72	; 0x48
 8007adc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	d503      	bpl.n	8007aec <__sfp+0x28>
 8007ae4:	6833      	ldr	r3, [r6, #0]
 8007ae6:	b30b      	cbz	r3, 8007b2c <__sfp+0x68>
 8007ae8:	6836      	ldr	r6, [r6, #0]
 8007aea:	e7f7      	b.n	8007adc <__sfp+0x18>
 8007aec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007af0:	b9d5      	cbnz	r5, 8007b28 <__sfp+0x64>
 8007af2:	4b16      	ldr	r3, [pc, #88]	; (8007b4c <__sfp+0x88>)
 8007af4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007af8:	60e3      	str	r3, [r4, #12]
 8007afa:	6665      	str	r5, [r4, #100]	; 0x64
 8007afc:	f000 f86c 	bl	8007bd8 <__retarget_lock_init_recursive>
 8007b00:	f7ff ff96 	bl	8007a30 <__sfp_lock_release>
 8007b04:	2208      	movs	r2, #8
 8007b06:	4629      	mov	r1, r5
 8007b08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b10:	6025      	str	r5, [r4, #0]
 8007b12:	61a5      	str	r5, [r4, #24]
 8007b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b18:	f000 f86f 	bl	8007bfa <memset>
 8007b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b24:	4620      	mov	r0, r4
 8007b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b28:	3468      	adds	r4, #104	; 0x68
 8007b2a:	e7d9      	b.n	8007ae0 <__sfp+0x1c>
 8007b2c:	2104      	movs	r1, #4
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f7ff ff62 	bl	80079f8 <__sfmoreglue>
 8007b34:	4604      	mov	r4, r0
 8007b36:	6030      	str	r0, [r6, #0]
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d1d5      	bne.n	8007ae8 <__sfp+0x24>
 8007b3c:	f7ff ff78 	bl	8007a30 <__sfp_lock_release>
 8007b40:	230c      	movs	r3, #12
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	e7ee      	b.n	8007b24 <__sfp+0x60>
 8007b46:	bf00      	nop
 8007b48:	0800bbcc 	.word	0x0800bbcc
 8007b4c:	ffff0001 	.word	0xffff0001

08007b50 <_fwalk_reent>:
 8007b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b54:	4606      	mov	r6, r0
 8007b56:	4688      	mov	r8, r1
 8007b58:	2700      	movs	r7, #0
 8007b5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b62:	f1b9 0901 	subs.w	r9, r9, #1
 8007b66:	d505      	bpl.n	8007b74 <_fwalk_reent+0x24>
 8007b68:	6824      	ldr	r4, [r4, #0]
 8007b6a:	2c00      	cmp	r4, #0
 8007b6c:	d1f7      	bne.n	8007b5e <_fwalk_reent+0xe>
 8007b6e:	4638      	mov	r0, r7
 8007b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b74:	89ab      	ldrh	r3, [r5, #12]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d907      	bls.n	8007b8a <_fwalk_reent+0x3a>
 8007b7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	d003      	beq.n	8007b8a <_fwalk_reent+0x3a>
 8007b82:	4629      	mov	r1, r5
 8007b84:	4630      	mov	r0, r6
 8007b86:	47c0      	blx	r8
 8007b88:	4307      	orrs	r7, r0
 8007b8a:	3568      	adds	r5, #104	; 0x68
 8007b8c:	e7e9      	b.n	8007b62 <_fwalk_reent+0x12>
	...

08007b90 <__libc_init_array>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	2600      	movs	r6, #0
 8007b94:	4d0c      	ldr	r5, [pc, #48]	; (8007bc8 <__libc_init_array+0x38>)
 8007b96:	4c0d      	ldr	r4, [pc, #52]	; (8007bcc <__libc_init_array+0x3c>)
 8007b98:	1b64      	subs	r4, r4, r5
 8007b9a:	10a4      	asrs	r4, r4, #2
 8007b9c:	42a6      	cmp	r6, r4
 8007b9e:	d109      	bne.n	8007bb4 <__libc_init_array+0x24>
 8007ba0:	f003 fef8 	bl	800b994 <_init>
 8007ba4:	2600      	movs	r6, #0
 8007ba6:	4d0a      	ldr	r5, [pc, #40]	; (8007bd0 <__libc_init_array+0x40>)
 8007ba8:	4c0a      	ldr	r4, [pc, #40]	; (8007bd4 <__libc_init_array+0x44>)
 8007baa:	1b64      	subs	r4, r4, r5
 8007bac:	10a4      	asrs	r4, r4, #2
 8007bae:	42a6      	cmp	r6, r4
 8007bb0:	d105      	bne.n	8007bbe <__libc_init_array+0x2e>
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb8:	4798      	blx	r3
 8007bba:	3601      	adds	r6, #1
 8007bbc:	e7ee      	b.n	8007b9c <__libc_init_array+0xc>
 8007bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc2:	4798      	blx	r3
 8007bc4:	3601      	adds	r6, #1
 8007bc6:	e7f2      	b.n	8007bae <__libc_init_array+0x1e>
 8007bc8:	0800bfd8 	.word	0x0800bfd8
 8007bcc:	0800bfd8 	.word	0x0800bfd8
 8007bd0:	0800bfd8 	.word	0x0800bfd8
 8007bd4:	0800bfdc 	.word	0x0800bfdc

08007bd8 <__retarget_lock_init_recursive>:
 8007bd8:	4770      	bx	lr

08007bda <__retarget_lock_acquire_recursive>:
 8007bda:	4770      	bx	lr

08007bdc <__retarget_lock_release_recursive>:
 8007bdc:	4770      	bx	lr

08007bde <memcpy>:
 8007bde:	440a      	add	r2, r1
 8007be0:	4291      	cmp	r1, r2
 8007be2:	f100 33ff 	add.w	r3, r0, #4294967295
 8007be6:	d100      	bne.n	8007bea <memcpy+0xc>
 8007be8:	4770      	bx	lr
 8007bea:	b510      	push	{r4, lr}
 8007bec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bf0:	4291      	cmp	r1, r2
 8007bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bf6:	d1f9      	bne.n	8007bec <memcpy+0xe>
 8007bf8:	bd10      	pop	{r4, pc}

08007bfa <memset>:
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	4402      	add	r2, r0
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d100      	bne.n	8007c04 <memset+0xa>
 8007c02:	4770      	bx	lr
 8007c04:	f803 1b01 	strb.w	r1, [r3], #1
 8007c08:	e7f9      	b.n	8007bfe <memset+0x4>
	...

08007c0c <sbrk_aligned>:
 8007c0c:	b570      	push	{r4, r5, r6, lr}
 8007c0e:	4e0e      	ldr	r6, [pc, #56]	; (8007c48 <sbrk_aligned+0x3c>)
 8007c10:	460c      	mov	r4, r1
 8007c12:	6831      	ldr	r1, [r6, #0]
 8007c14:	4605      	mov	r5, r0
 8007c16:	b911      	cbnz	r1, 8007c1e <sbrk_aligned+0x12>
 8007c18:	f000 f8f6 	bl	8007e08 <_sbrk_r>
 8007c1c:	6030      	str	r0, [r6, #0]
 8007c1e:	4621      	mov	r1, r4
 8007c20:	4628      	mov	r0, r5
 8007c22:	f000 f8f1 	bl	8007e08 <_sbrk_r>
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	d00a      	beq.n	8007c40 <sbrk_aligned+0x34>
 8007c2a:	1cc4      	adds	r4, r0, #3
 8007c2c:	f024 0403 	bic.w	r4, r4, #3
 8007c30:	42a0      	cmp	r0, r4
 8007c32:	d007      	beq.n	8007c44 <sbrk_aligned+0x38>
 8007c34:	1a21      	subs	r1, r4, r0
 8007c36:	4628      	mov	r0, r5
 8007c38:	f000 f8e6 	bl	8007e08 <_sbrk_r>
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d101      	bne.n	8007c44 <sbrk_aligned+0x38>
 8007c40:	f04f 34ff 	mov.w	r4, #4294967295
 8007c44:	4620      	mov	r0, r4
 8007c46:	bd70      	pop	{r4, r5, r6, pc}
 8007c48:	20001e70 	.word	0x20001e70

08007c4c <_malloc_r>:
 8007c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c50:	1ccd      	adds	r5, r1, #3
 8007c52:	f025 0503 	bic.w	r5, r5, #3
 8007c56:	3508      	adds	r5, #8
 8007c58:	2d0c      	cmp	r5, #12
 8007c5a:	bf38      	it	cc
 8007c5c:	250c      	movcc	r5, #12
 8007c5e:	2d00      	cmp	r5, #0
 8007c60:	4607      	mov	r7, r0
 8007c62:	db01      	blt.n	8007c68 <_malloc_r+0x1c>
 8007c64:	42a9      	cmp	r1, r5
 8007c66:	d905      	bls.n	8007c74 <_malloc_r+0x28>
 8007c68:	230c      	movs	r3, #12
 8007c6a:	2600      	movs	r6, #0
 8007c6c:	603b      	str	r3, [r7, #0]
 8007c6e:	4630      	mov	r0, r6
 8007c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c74:	4e2e      	ldr	r6, [pc, #184]	; (8007d30 <_malloc_r+0xe4>)
 8007c76:	f001 fbb9 	bl	80093ec <__malloc_lock>
 8007c7a:	6833      	ldr	r3, [r6, #0]
 8007c7c:	461c      	mov	r4, r3
 8007c7e:	bb34      	cbnz	r4, 8007cce <_malloc_r+0x82>
 8007c80:	4629      	mov	r1, r5
 8007c82:	4638      	mov	r0, r7
 8007c84:	f7ff ffc2 	bl	8007c0c <sbrk_aligned>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	d14d      	bne.n	8007d2a <_malloc_r+0xde>
 8007c8e:	6834      	ldr	r4, [r6, #0]
 8007c90:	4626      	mov	r6, r4
 8007c92:	2e00      	cmp	r6, #0
 8007c94:	d140      	bne.n	8007d18 <_malloc_r+0xcc>
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	eb04 0803 	add.w	r8, r4, r3
 8007ca0:	f000 f8b2 	bl	8007e08 <_sbrk_r>
 8007ca4:	4580      	cmp	r8, r0
 8007ca6:	d13a      	bne.n	8007d1e <_malloc_r+0xd2>
 8007ca8:	6821      	ldr	r1, [r4, #0]
 8007caa:	3503      	adds	r5, #3
 8007cac:	1a6d      	subs	r5, r5, r1
 8007cae:	f025 0503 	bic.w	r5, r5, #3
 8007cb2:	3508      	adds	r5, #8
 8007cb4:	2d0c      	cmp	r5, #12
 8007cb6:	bf38      	it	cc
 8007cb8:	250c      	movcc	r5, #12
 8007cba:	4638      	mov	r0, r7
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	f7ff ffa5 	bl	8007c0c <sbrk_aligned>
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	d02b      	beq.n	8007d1e <_malloc_r+0xd2>
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	442b      	add	r3, r5
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	e00e      	b.n	8007cec <_malloc_r+0xa0>
 8007cce:	6822      	ldr	r2, [r4, #0]
 8007cd0:	1b52      	subs	r2, r2, r5
 8007cd2:	d41e      	bmi.n	8007d12 <_malloc_r+0xc6>
 8007cd4:	2a0b      	cmp	r2, #11
 8007cd6:	d916      	bls.n	8007d06 <_malloc_r+0xba>
 8007cd8:	1961      	adds	r1, r4, r5
 8007cda:	42a3      	cmp	r3, r4
 8007cdc:	6025      	str	r5, [r4, #0]
 8007cde:	bf18      	it	ne
 8007ce0:	6059      	strne	r1, [r3, #4]
 8007ce2:	6863      	ldr	r3, [r4, #4]
 8007ce4:	bf08      	it	eq
 8007ce6:	6031      	streq	r1, [r6, #0]
 8007ce8:	5162      	str	r2, [r4, r5]
 8007cea:	604b      	str	r3, [r1, #4]
 8007cec:	4638      	mov	r0, r7
 8007cee:	f104 060b 	add.w	r6, r4, #11
 8007cf2:	f001 fb81 	bl	80093f8 <__malloc_unlock>
 8007cf6:	f026 0607 	bic.w	r6, r6, #7
 8007cfa:	1d23      	adds	r3, r4, #4
 8007cfc:	1af2      	subs	r2, r6, r3
 8007cfe:	d0b6      	beq.n	8007c6e <_malloc_r+0x22>
 8007d00:	1b9b      	subs	r3, r3, r6
 8007d02:	50a3      	str	r3, [r4, r2]
 8007d04:	e7b3      	b.n	8007c6e <_malloc_r+0x22>
 8007d06:	6862      	ldr	r2, [r4, #4]
 8007d08:	42a3      	cmp	r3, r4
 8007d0a:	bf0c      	ite	eq
 8007d0c:	6032      	streq	r2, [r6, #0]
 8007d0e:	605a      	strne	r2, [r3, #4]
 8007d10:	e7ec      	b.n	8007cec <_malloc_r+0xa0>
 8007d12:	4623      	mov	r3, r4
 8007d14:	6864      	ldr	r4, [r4, #4]
 8007d16:	e7b2      	b.n	8007c7e <_malloc_r+0x32>
 8007d18:	4634      	mov	r4, r6
 8007d1a:	6876      	ldr	r6, [r6, #4]
 8007d1c:	e7b9      	b.n	8007c92 <_malloc_r+0x46>
 8007d1e:	230c      	movs	r3, #12
 8007d20:	4638      	mov	r0, r7
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	f001 fb68 	bl	80093f8 <__malloc_unlock>
 8007d28:	e7a1      	b.n	8007c6e <_malloc_r+0x22>
 8007d2a:	6025      	str	r5, [r4, #0]
 8007d2c:	e7de      	b.n	8007cec <_malloc_r+0xa0>
 8007d2e:	bf00      	nop
 8007d30:	20001e6c 	.word	0x20001e6c

08007d34 <cleanup_glue>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	460c      	mov	r4, r1
 8007d38:	6809      	ldr	r1, [r1, #0]
 8007d3a:	4605      	mov	r5, r0
 8007d3c:	b109      	cbz	r1, 8007d42 <cleanup_glue+0xe>
 8007d3e:	f7ff fff9 	bl	8007d34 <cleanup_glue>
 8007d42:	4621      	mov	r1, r4
 8007d44:	4628      	mov	r0, r5
 8007d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d4a:	f002 b827 	b.w	8009d9c <_free_r>
	...

08007d50 <_reclaim_reent>:
 8007d50:	4b2c      	ldr	r3, [pc, #176]	; (8007e04 <_reclaim_reent+0xb4>)
 8007d52:	b570      	push	{r4, r5, r6, lr}
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4604      	mov	r4, r0
 8007d58:	4283      	cmp	r3, r0
 8007d5a:	d051      	beq.n	8007e00 <_reclaim_reent+0xb0>
 8007d5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d5e:	b143      	cbz	r3, 8007d72 <_reclaim_reent+0x22>
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d14a      	bne.n	8007dfc <_reclaim_reent+0xac>
 8007d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d68:	6819      	ldr	r1, [r3, #0]
 8007d6a:	b111      	cbz	r1, 8007d72 <_reclaim_reent+0x22>
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f002 f815 	bl	8009d9c <_free_r>
 8007d72:	6961      	ldr	r1, [r4, #20]
 8007d74:	b111      	cbz	r1, 8007d7c <_reclaim_reent+0x2c>
 8007d76:	4620      	mov	r0, r4
 8007d78:	f002 f810 	bl	8009d9c <_free_r>
 8007d7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d7e:	b111      	cbz	r1, 8007d86 <_reclaim_reent+0x36>
 8007d80:	4620      	mov	r0, r4
 8007d82:	f002 f80b 	bl	8009d9c <_free_r>
 8007d86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d88:	b111      	cbz	r1, 8007d90 <_reclaim_reent+0x40>
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f002 f806 	bl	8009d9c <_free_r>
 8007d90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007d92:	b111      	cbz	r1, 8007d9a <_reclaim_reent+0x4a>
 8007d94:	4620      	mov	r0, r4
 8007d96:	f002 f801 	bl	8009d9c <_free_r>
 8007d9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d9c:	b111      	cbz	r1, 8007da4 <_reclaim_reent+0x54>
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f001 fffc 	bl	8009d9c <_free_r>
 8007da4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007da6:	b111      	cbz	r1, 8007dae <_reclaim_reent+0x5e>
 8007da8:	4620      	mov	r0, r4
 8007daa:	f001 fff7 	bl	8009d9c <_free_r>
 8007dae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007db0:	b111      	cbz	r1, 8007db8 <_reclaim_reent+0x68>
 8007db2:	4620      	mov	r0, r4
 8007db4:	f001 fff2 	bl	8009d9c <_free_r>
 8007db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dba:	b111      	cbz	r1, 8007dc2 <_reclaim_reent+0x72>
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f001 ffed 	bl	8009d9c <_free_r>
 8007dc2:	69a3      	ldr	r3, [r4, #24]
 8007dc4:	b1e3      	cbz	r3, 8007e00 <_reclaim_reent+0xb0>
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007dca:	4798      	blx	r3
 8007dcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007dce:	b1b9      	cbz	r1, 8007e00 <_reclaim_reent+0xb0>
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007dd6:	f7ff bfad 	b.w	8007d34 <cleanup_glue>
 8007dda:	5949      	ldr	r1, [r1, r5]
 8007ddc:	b941      	cbnz	r1, 8007df0 <_reclaim_reent+0xa0>
 8007dde:	3504      	adds	r5, #4
 8007de0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007de2:	2d80      	cmp	r5, #128	; 0x80
 8007de4:	68d9      	ldr	r1, [r3, #12]
 8007de6:	d1f8      	bne.n	8007dda <_reclaim_reent+0x8a>
 8007de8:	4620      	mov	r0, r4
 8007dea:	f001 ffd7 	bl	8009d9c <_free_r>
 8007dee:	e7ba      	b.n	8007d66 <_reclaim_reent+0x16>
 8007df0:	680e      	ldr	r6, [r1, #0]
 8007df2:	4620      	mov	r0, r4
 8007df4:	f001 ffd2 	bl	8009d9c <_free_r>
 8007df8:	4631      	mov	r1, r6
 8007dfa:	e7ef      	b.n	8007ddc <_reclaim_reent+0x8c>
 8007dfc:	2500      	movs	r5, #0
 8007dfe:	e7ef      	b.n	8007de0 <_reclaim_reent+0x90>
 8007e00:	bd70      	pop	{r4, r5, r6, pc}
 8007e02:	bf00      	nop
 8007e04:	20000010 	.word	0x20000010

08007e08 <_sbrk_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4d05      	ldr	r5, [pc, #20]	; (8007e24 <_sbrk_r+0x1c>)
 8007e0e:	4604      	mov	r4, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	602b      	str	r3, [r5, #0]
 8007e14:	f7fa ffba 	bl	8002d8c <_sbrk>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d102      	bne.n	8007e22 <_sbrk_r+0x1a>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	b103      	cbz	r3, 8007e22 <_sbrk_r+0x1a>
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	20001e74 	.word	0x20001e74

08007e28 <siprintf>:
 8007e28:	b40e      	push	{r1, r2, r3}
 8007e2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e2e:	b500      	push	{lr}
 8007e30:	b09c      	sub	sp, #112	; 0x70
 8007e32:	ab1d      	add	r3, sp, #116	; 0x74
 8007e34:	9002      	str	r0, [sp, #8]
 8007e36:	9006      	str	r0, [sp, #24]
 8007e38:	9107      	str	r1, [sp, #28]
 8007e3a:	9104      	str	r1, [sp, #16]
 8007e3c:	4808      	ldr	r0, [pc, #32]	; (8007e60 <siprintf+0x38>)
 8007e3e:	4909      	ldr	r1, [pc, #36]	; (8007e64 <siprintf+0x3c>)
 8007e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e44:	9105      	str	r1, [sp, #20]
 8007e46:	6800      	ldr	r0, [r0, #0]
 8007e48:	a902      	add	r1, sp, #8
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	f002 f84a 	bl	8009ee4 <_svfiprintf_r>
 8007e50:	2200      	movs	r2, #0
 8007e52:	9b02      	ldr	r3, [sp, #8]
 8007e54:	701a      	strb	r2, [r3, #0]
 8007e56:	b01c      	add	sp, #112	; 0x70
 8007e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e5c:	b003      	add	sp, #12
 8007e5e:	4770      	bx	lr
 8007e60:	20000010 	.word	0x20000010
 8007e64:	ffff0208 	.word	0xffff0208

08007e68 <__sread>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e70:	f002 face 	bl	800a410 <_read_r>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	bfab      	itete	ge
 8007e78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e7a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e7c:	181b      	addge	r3, r3, r0
 8007e7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e82:	bfac      	ite	ge
 8007e84:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e86:	81a3      	strhlt	r3, [r4, #12]
 8007e88:	bd10      	pop	{r4, pc}

08007e8a <__swrite>:
 8007e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8e:	461f      	mov	r7, r3
 8007e90:	898b      	ldrh	r3, [r1, #12]
 8007e92:	4605      	mov	r5, r0
 8007e94:	05db      	lsls	r3, r3, #23
 8007e96:	460c      	mov	r4, r1
 8007e98:	4616      	mov	r6, r2
 8007e9a:	d505      	bpl.n	8007ea8 <__swrite+0x1e>
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea4:	f001 fa7e 	bl	80093a4 <_lseek_r>
 8007ea8:	89a3      	ldrh	r3, [r4, #12]
 8007eaa:	4632      	mov	r2, r6
 8007eac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007eb0:	81a3      	strh	r3, [r4, #12]
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	463b      	mov	r3, r7
 8007eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebe:	f000 be2b 	b.w	8008b18 <_write_r>

08007ec2 <__sseek>:
 8007ec2:	b510      	push	{r4, lr}
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eca:	f001 fa6b 	bl	80093a4 <_lseek_r>
 8007ece:	1c43      	adds	r3, r0, #1
 8007ed0:	89a3      	ldrh	r3, [r4, #12]
 8007ed2:	bf15      	itete	ne
 8007ed4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ed6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ede:	81a3      	strheq	r3, [r4, #12]
 8007ee0:	bf18      	it	ne
 8007ee2:	81a3      	strhne	r3, [r4, #12]
 8007ee4:	bd10      	pop	{r4, pc}

08007ee6 <__sclose>:
 8007ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eea:	f000 be27 	b.w	8008b3c <_close_r>

08007eee <sulp>:
 8007eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef2:	460f      	mov	r7, r1
 8007ef4:	4690      	mov	r8, r2
 8007ef6:	f001 fdf5 	bl	8009ae4 <__ulp>
 8007efa:	4604      	mov	r4, r0
 8007efc:	460d      	mov	r5, r1
 8007efe:	f1b8 0f00 	cmp.w	r8, #0
 8007f02:	d011      	beq.n	8007f28 <sulp+0x3a>
 8007f04:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007f08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	dd0b      	ble.n	8007f28 <sulp+0x3a>
 8007f10:	2400      	movs	r4, #0
 8007f12:	051b      	lsls	r3, r3, #20
 8007f14:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007f18:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	462b      	mov	r3, r5
 8007f20:	f7f8 fbfe 	bl	8000720 <__aeabi_dmul>
 8007f24:	4604      	mov	r4, r0
 8007f26:	460d      	mov	r5, r1
 8007f28:	4620      	mov	r0, r4
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007f30 <_strtod_l>:
 8007f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f34:	469b      	mov	fp, r3
 8007f36:	2300      	movs	r3, #0
 8007f38:	b09f      	sub	sp, #124	; 0x7c
 8007f3a:	931a      	str	r3, [sp, #104]	; 0x68
 8007f3c:	4b9e      	ldr	r3, [pc, #632]	; (80081b8 <_strtod_l+0x288>)
 8007f3e:	4682      	mov	sl, r0
 8007f40:	681f      	ldr	r7, [r3, #0]
 8007f42:	460e      	mov	r6, r1
 8007f44:	4638      	mov	r0, r7
 8007f46:	9215      	str	r2, [sp, #84]	; 0x54
 8007f48:	f7f8 f972 	bl	8000230 <strlen>
 8007f4c:	f04f 0800 	mov.w	r8, #0
 8007f50:	4604      	mov	r4, r0
 8007f52:	f04f 0900 	mov.w	r9, #0
 8007f56:	9619      	str	r6, [sp, #100]	; 0x64
 8007f58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f5a:	781a      	ldrb	r2, [r3, #0]
 8007f5c:	2a2b      	cmp	r2, #43	; 0x2b
 8007f5e:	d04c      	beq.n	8007ffa <_strtod_l+0xca>
 8007f60:	d83a      	bhi.n	8007fd8 <_strtod_l+0xa8>
 8007f62:	2a0d      	cmp	r2, #13
 8007f64:	d833      	bhi.n	8007fce <_strtod_l+0x9e>
 8007f66:	2a08      	cmp	r2, #8
 8007f68:	d833      	bhi.n	8007fd2 <_strtod_l+0xa2>
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	d03d      	beq.n	8007fea <_strtod_l+0xba>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	930a      	str	r3, [sp, #40]	; 0x28
 8007f72:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007f74:	782b      	ldrb	r3, [r5, #0]
 8007f76:	2b30      	cmp	r3, #48	; 0x30
 8007f78:	f040 80aa 	bne.w	80080d0 <_strtod_l+0x1a0>
 8007f7c:	786b      	ldrb	r3, [r5, #1]
 8007f7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f82:	2b58      	cmp	r3, #88	; 0x58
 8007f84:	d166      	bne.n	8008054 <_strtod_l+0x124>
 8007f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f88:	4650      	mov	r0, sl
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	ab1a      	add	r3, sp, #104	; 0x68
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	4a8a      	ldr	r2, [pc, #552]	; (80081bc <_strtod_l+0x28c>)
 8007f92:	f8cd b008 	str.w	fp, [sp, #8]
 8007f96:	ab1b      	add	r3, sp, #108	; 0x6c
 8007f98:	a919      	add	r1, sp, #100	; 0x64
 8007f9a:	f000 ff05 	bl	8008da8 <__gethex>
 8007f9e:	f010 0607 	ands.w	r6, r0, #7
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	d005      	beq.n	8007fb2 <_strtod_l+0x82>
 8007fa6:	2e06      	cmp	r6, #6
 8007fa8:	d129      	bne.n	8007ffe <_strtod_l+0xce>
 8007faa:	2300      	movs	r3, #0
 8007fac:	3501      	adds	r5, #1
 8007fae:	9519      	str	r5, [sp, #100]	; 0x64
 8007fb0:	930a      	str	r3, [sp, #40]	; 0x28
 8007fb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f040 858a 	bne.w	8008ace <_strtod_l+0xb9e>
 8007fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fbc:	b1d3      	cbz	r3, 8007ff4 <_strtod_l+0xc4>
 8007fbe:	4642      	mov	r2, r8
 8007fc0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	b01f      	add	sp, #124	; 0x7c
 8007fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fce:	2a20      	cmp	r2, #32
 8007fd0:	d1cd      	bne.n	8007f6e <_strtod_l+0x3e>
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	9319      	str	r3, [sp, #100]	; 0x64
 8007fd6:	e7bf      	b.n	8007f58 <_strtod_l+0x28>
 8007fd8:	2a2d      	cmp	r2, #45	; 0x2d
 8007fda:	d1c8      	bne.n	8007f6e <_strtod_l+0x3e>
 8007fdc:	2201      	movs	r2, #1
 8007fde:	920a      	str	r2, [sp, #40]	; 0x28
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	9219      	str	r2, [sp, #100]	; 0x64
 8007fe4:	785b      	ldrb	r3, [r3, #1]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1c3      	bne.n	8007f72 <_strtod_l+0x42>
 8007fea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fec:	9619      	str	r6, [sp, #100]	; 0x64
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f040 856b 	bne.w	8008aca <_strtod_l+0xb9a>
 8007ff4:	4642      	mov	r2, r8
 8007ff6:	464b      	mov	r3, r9
 8007ff8:	e7e4      	b.n	8007fc4 <_strtod_l+0x94>
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	e7ef      	b.n	8007fde <_strtod_l+0xae>
 8007ffe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008000:	b13a      	cbz	r2, 8008012 <_strtod_l+0xe2>
 8008002:	2135      	movs	r1, #53	; 0x35
 8008004:	a81c      	add	r0, sp, #112	; 0x70
 8008006:	f001 fe71 	bl	8009cec <__copybits>
 800800a:	4650      	mov	r0, sl
 800800c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800800e:	f001 fa39 	bl	8009484 <_Bfree>
 8008012:	3e01      	subs	r6, #1
 8008014:	2e04      	cmp	r6, #4
 8008016:	d806      	bhi.n	8008026 <_strtod_l+0xf6>
 8008018:	e8df f006 	tbb	[pc, r6]
 800801c:	1714030a 	.word	0x1714030a
 8008020:	0a          	.byte	0x0a
 8008021:	00          	.byte	0x00
 8008022:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008026:	0721      	lsls	r1, r4, #28
 8008028:	d5c3      	bpl.n	8007fb2 <_strtod_l+0x82>
 800802a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800802e:	e7c0      	b.n	8007fb2 <_strtod_l+0x82>
 8008030:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008032:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008036:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800803a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800803e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008042:	e7f0      	b.n	8008026 <_strtod_l+0xf6>
 8008044:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80081c0 <_strtod_l+0x290>
 8008048:	e7ed      	b.n	8008026 <_strtod_l+0xf6>
 800804a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800804e:	f04f 38ff 	mov.w	r8, #4294967295
 8008052:	e7e8      	b.n	8008026 <_strtod_l+0xf6>
 8008054:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	9219      	str	r2, [sp, #100]	; 0x64
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	2b30      	cmp	r3, #48	; 0x30
 800805e:	d0f9      	beq.n	8008054 <_strtod_l+0x124>
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0a6      	beq.n	8007fb2 <_strtod_l+0x82>
 8008064:	2301      	movs	r3, #1
 8008066:	9307      	str	r3, [sp, #28]
 8008068:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800806a:	220a      	movs	r2, #10
 800806c:	9308      	str	r3, [sp, #32]
 800806e:	2300      	movs	r3, #0
 8008070:	469b      	mov	fp, r3
 8008072:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008076:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008078:	7805      	ldrb	r5, [r0, #0]
 800807a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800807e:	b2d9      	uxtb	r1, r3
 8008080:	2909      	cmp	r1, #9
 8008082:	d927      	bls.n	80080d4 <_strtod_l+0x1a4>
 8008084:	4622      	mov	r2, r4
 8008086:	4639      	mov	r1, r7
 8008088:	f002 f9da 	bl	800a440 <strncmp>
 800808c:	2800      	cmp	r0, #0
 800808e:	d033      	beq.n	80080f8 <_strtod_l+0x1c8>
 8008090:	2000      	movs	r0, #0
 8008092:	462a      	mov	r2, r5
 8008094:	465c      	mov	r4, fp
 8008096:	4603      	mov	r3, r0
 8008098:	9004      	str	r0, [sp, #16]
 800809a:	2a65      	cmp	r2, #101	; 0x65
 800809c:	d001      	beq.n	80080a2 <_strtod_l+0x172>
 800809e:	2a45      	cmp	r2, #69	; 0x45
 80080a0:	d114      	bne.n	80080cc <_strtod_l+0x19c>
 80080a2:	b91c      	cbnz	r4, 80080ac <_strtod_l+0x17c>
 80080a4:	9a07      	ldr	r2, [sp, #28]
 80080a6:	4302      	orrs	r2, r0
 80080a8:	d09f      	beq.n	8007fea <_strtod_l+0xba>
 80080aa:	2400      	movs	r4, #0
 80080ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80080ae:	1c72      	adds	r2, r6, #1
 80080b0:	9219      	str	r2, [sp, #100]	; 0x64
 80080b2:	7872      	ldrb	r2, [r6, #1]
 80080b4:	2a2b      	cmp	r2, #43	; 0x2b
 80080b6:	d079      	beq.n	80081ac <_strtod_l+0x27c>
 80080b8:	2a2d      	cmp	r2, #45	; 0x2d
 80080ba:	f000 8083 	beq.w	80081c4 <_strtod_l+0x294>
 80080be:	2700      	movs	r7, #0
 80080c0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80080c4:	2909      	cmp	r1, #9
 80080c6:	f240 8083 	bls.w	80081d0 <_strtod_l+0x2a0>
 80080ca:	9619      	str	r6, [sp, #100]	; 0x64
 80080cc:	2500      	movs	r5, #0
 80080ce:	e09f      	b.n	8008210 <_strtod_l+0x2e0>
 80080d0:	2300      	movs	r3, #0
 80080d2:	e7c8      	b.n	8008066 <_strtod_l+0x136>
 80080d4:	f1bb 0f08 	cmp.w	fp, #8
 80080d8:	bfd5      	itete	le
 80080da:	9906      	ldrle	r1, [sp, #24]
 80080dc:	9905      	ldrgt	r1, [sp, #20]
 80080de:	fb02 3301 	mlale	r3, r2, r1, r3
 80080e2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80080e6:	f100 0001 	add.w	r0, r0, #1
 80080ea:	bfd4      	ite	le
 80080ec:	9306      	strle	r3, [sp, #24]
 80080ee:	9305      	strgt	r3, [sp, #20]
 80080f0:	f10b 0b01 	add.w	fp, fp, #1
 80080f4:	9019      	str	r0, [sp, #100]	; 0x64
 80080f6:	e7be      	b.n	8008076 <_strtod_l+0x146>
 80080f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080fa:	191a      	adds	r2, r3, r4
 80080fc:	9219      	str	r2, [sp, #100]	; 0x64
 80080fe:	5d1a      	ldrb	r2, [r3, r4]
 8008100:	f1bb 0f00 	cmp.w	fp, #0
 8008104:	d036      	beq.n	8008174 <_strtod_l+0x244>
 8008106:	465c      	mov	r4, fp
 8008108:	9004      	str	r0, [sp, #16]
 800810a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800810e:	2b09      	cmp	r3, #9
 8008110:	d912      	bls.n	8008138 <_strtod_l+0x208>
 8008112:	2301      	movs	r3, #1
 8008114:	e7c1      	b.n	800809a <_strtod_l+0x16a>
 8008116:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008118:	3001      	adds	r0, #1
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	9219      	str	r2, [sp, #100]	; 0x64
 800811e:	785a      	ldrb	r2, [r3, #1]
 8008120:	2a30      	cmp	r2, #48	; 0x30
 8008122:	d0f8      	beq.n	8008116 <_strtod_l+0x1e6>
 8008124:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008128:	2b08      	cmp	r3, #8
 800812a:	f200 84d5 	bhi.w	8008ad8 <_strtod_l+0xba8>
 800812e:	9004      	str	r0, [sp, #16]
 8008130:	2000      	movs	r0, #0
 8008132:	4604      	mov	r4, r0
 8008134:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008136:	9308      	str	r3, [sp, #32]
 8008138:	3a30      	subs	r2, #48	; 0x30
 800813a:	f100 0301 	add.w	r3, r0, #1
 800813e:	d013      	beq.n	8008168 <_strtod_l+0x238>
 8008140:	9904      	ldr	r1, [sp, #16]
 8008142:	1905      	adds	r5, r0, r4
 8008144:	4419      	add	r1, r3
 8008146:	9104      	str	r1, [sp, #16]
 8008148:	4623      	mov	r3, r4
 800814a:	210a      	movs	r1, #10
 800814c:	42ab      	cmp	r3, r5
 800814e:	d113      	bne.n	8008178 <_strtod_l+0x248>
 8008150:	1823      	adds	r3, r4, r0
 8008152:	2b08      	cmp	r3, #8
 8008154:	f104 0401 	add.w	r4, r4, #1
 8008158:	4404      	add	r4, r0
 800815a:	dc1b      	bgt.n	8008194 <_strtod_l+0x264>
 800815c:	230a      	movs	r3, #10
 800815e:	9906      	ldr	r1, [sp, #24]
 8008160:	fb03 2301 	mla	r3, r3, r1, r2
 8008164:	9306      	str	r3, [sp, #24]
 8008166:	2300      	movs	r3, #0
 8008168:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800816a:	4618      	mov	r0, r3
 800816c:	1c51      	adds	r1, r2, #1
 800816e:	9119      	str	r1, [sp, #100]	; 0x64
 8008170:	7852      	ldrb	r2, [r2, #1]
 8008172:	e7ca      	b.n	800810a <_strtod_l+0x1da>
 8008174:	4658      	mov	r0, fp
 8008176:	e7d3      	b.n	8008120 <_strtod_l+0x1f0>
 8008178:	2b08      	cmp	r3, #8
 800817a:	dc04      	bgt.n	8008186 <_strtod_l+0x256>
 800817c:	9f06      	ldr	r7, [sp, #24]
 800817e:	434f      	muls	r7, r1
 8008180:	9706      	str	r7, [sp, #24]
 8008182:	3301      	adds	r3, #1
 8008184:	e7e2      	b.n	800814c <_strtod_l+0x21c>
 8008186:	1c5f      	adds	r7, r3, #1
 8008188:	2f10      	cmp	r7, #16
 800818a:	bfde      	ittt	le
 800818c:	9f05      	ldrle	r7, [sp, #20]
 800818e:	434f      	mulle	r7, r1
 8008190:	9705      	strle	r7, [sp, #20]
 8008192:	e7f6      	b.n	8008182 <_strtod_l+0x252>
 8008194:	2c10      	cmp	r4, #16
 8008196:	bfdf      	itttt	le
 8008198:	230a      	movle	r3, #10
 800819a:	9905      	ldrle	r1, [sp, #20]
 800819c:	fb03 2301 	mlale	r3, r3, r1, r2
 80081a0:	9305      	strle	r3, [sp, #20]
 80081a2:	e7e0      	b.n	8008166 <_strtod_l+0x236>
 80081a4:	2300      	movs	r3, #0
 80081a6:	9304      	str	r3, [sp, #16]
 80081a8:	2301      	movs	r3, #1
 80081aa:	e77b      	b.n	80080a4 <_strtod_l+0x174>
 80081ac:	2700      	movs	r7, #0
 80081ae:	1cb2      	adds	r2, r6, #2
 80081b0:	9219      	str	r2, [sp, #100]	; 0x64
 80081b2:	78b2      	ldrb	r2, [r6, #2]
 80081b4:	e784      	b.n	80080c0 <_strtod_l+0x190>
 80081b6:	bf00      	nop
 80081b8:	0800bca8 	.word	0x0800bca8
 80081bc:	0800bbdc 	.word	0x0800bbdc
 80081c0:	7ff00000 	.word	0x7ff00000
 80081c4:	2701      	movs	r7, #1
 80081c6:	e7f2      	b.n	80081ae <_strtod_l+0x27e>
 80081c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80081ca:	1c51      	adds	r1, r2, #1
 80081cc:	9119      	str	r1, [sp, #100]	; 0x64
 80081ce:	7852      	ldrb	r2, [r2, #1]
 80081d0:	2a30      	cmp	r2, #48	; 0x30
 80081d2:	d0f9      	beq.n	80081c8 <_strtod_l+0x298>
 80081d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80081d8:	2908      	cmp	r1, #8
 80081da:	f63f af77 	bhi.w	80080cc <_strtod_l+0x19c>
 80081de:	f04f 0e0a 	mov.w	lr, #10
 80081e2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80081e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80081e8:	9209      	str	r2, [sp, #36]	; 0x24
 80081ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80081ec:	1c51      	adds	r1, r2, #1
 80081ee:	9119      	str	r1, [sp, #100]	; 0x64
 80081f0:	7852      	ldrb	r2, [r2, #1]
 80081f2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80081f6:	2d09      	cmp	r5, #9
 80081f8:	d935      	bls.n	8008266 <_strtod_l+0x336>
 80081fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80081fc:	1b49      	subs	r1, r1, r5
 80081fe:	2908      	cmp	r1, #8
 8008200:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008204:	dc02      	bgt.n	800820c <_strtod_l+0x2dc>
 8008206:	4565      	cmp	r5, ip
 8008208:	bfa8      	it	ge
 800820a:	4665      	movge	r5, ip
 800820c:	b107      	cbz	r7, 8008210 <_strtod_l+0x2e0>
 800820e:	426d      	negs	r5, r5
 8008210:	2c00      	cmp	r4, #0
 8008212:	d14c      	bne.n	80082ae <_strtod_l+0x37e>
 8008214:	9907      	ldr	r1, [sp, #28]
 8008216:	4301      	orrs	r1, r0
 8008218:	f47f aecb 	bne.w	8007fb2 <_strtod_l+0x82>
 800821c:	2b00      	cmp	r3, #0
 800821e:	f47f aee4 	bne.w	8007fea <_strtod_l+0xba>
 8008222:	2a69      	cmp	r2, #105	; 0x69
 8008224:	d026      	beq.n	8008274 <_strtod_l+0x344>
 8008226:	dc23      	bgt.n	8008270 <_strtod_l+0x340>
 8008228:	2a49      	cmp	r2, #73	; 0x49
 800822a:	d023      	beq.n	8008274 <_strtod_l+0x344>
 800822c:	2a4e      	cmp	r2, #78	; 0x4e
 800822e:	f47f aedc 	bne.w	8007fea <_strtod_l+0xba>
 8008232:	499d      	ldr	r1, [pc, #628]	; (80084a8 <_strtod_l+0x578>)
 8008234:	a819      	add	r0, sp, #100	; 0x64
 8008236:	f001 f805 	bl	8009244 <__match>
 800823a:	2800      	cmp	r0, #0
 800823c:	f43f aed5 	beq.w	8007fea <_strtod_l+0xba>
 8008240:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b28      	cmp	r3, #40	; 0x28
 8008246:	d12c      	bne.n	80082a2 <_strtod_l+0x372>
 8008248:	4998      	ldr	r1, [pc, #608]	; (80084ac <_strtod_l+0x57c>)
 800824a:	aa1c      	add	r2, sp, #112	; 0x70
 800824c:	a819      	add	r0, sp, #100	; 0x64
 800824e:	f001 f80d 	bl	800926c <__hexnan>
 8008252:	2805      	cmp	r0, #5
 8008254:	d125      	bne.n	80082a2 <_strtod_l+0x372>
 8008256:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008258:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800825c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008260:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008264:	e6a5      	b.n	8007fb2 <_strtod_l+0x82>
 8008266:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800826a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800826e:	e7bc      	b.n	80081ea <_strtod_l+0x2ba>
 8008270:	2a6e      	cmp	r2, #110	; 0x6e
 8008272:	e7dc      	b.n	800822e <_strtod_l+0x2fe>
 8008274:	498e      	ldr	r1, [pc, #568]	; (80084b0 <_strtod_l+0x580>)
 8008276:	a819      	add	r0, sp, #100	; 0x64
 8008278:	f000 ffe4 	bl	8009244 <__match>
 800827c:	2800      	cmp	r0, #0
 800827e:	f43f aeb4 	beq.w	8007fea <_strtod_l+0xba>
 8008282:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008284:	498b      	ldr	r1, [pc, #556]	; (80084b4 <_strtod_l+0x584>)
 8008286:	3b01      	subs	r3, #1
 8008288:	a819      	add	r0, sp, #100	; 0x64
 800828a:	9319      	str	r3, [sp, #100]	; 0x64
 800828c:	f000 ffda 	bl	8009244 <__match>
 8008290:	b910      	cbnz	r0, 8008298 <_strtod_l+0x368>
 8008292:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008294:	3301      	adds	r3, #1
 8008296:	9319      	str	r3, [sp, #100]	; 0x64
 8008298:	f04f 0800 	mov.w	r8, #0
 800829c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80084b8 <_strtod_l+0x588>
 80082a0:	e687      	b.n	8007fb2 <_strtod_l+0x82>
 80082a2:	4886      	ldr	r0, [pc, #536]	; (80084bc <_strtod_l+0x58c>)
 80082a4:	f002 f8c6 	bl	800a434 <nan>
 80082a8:	4680      	mov	r8, r0
 80082aa:	4689      	mov	r9, r1
 80082ac:	e681      	b.n	8007fb2 <_strtod_l+0x82>
 80082ae:	9b04      	ldr	r3, [sp, #16]
 80082b0:	f1bb 0f00 	cmp.w	fp, #0
 80082b4:	bf08      	it	eq
 80082b6:	46a3      	moveq	fp, r4
 80082b8:	1aeb      	subs	r3, r5, r3
 80082ba:	2c10      	cmp	r4, #16
 80082bc:	9806      	ldr	r0, [sp, #24]
 80082be:	4626      	mov	r6, r4
 80082c0:	9307      	str	r3, [sp, #28]
 80082c2:	bfa8      	it	ge
 80082c4:	2610      	movge	r6, #16
 80082c6:	f7f8 f9b1 	bl	800062c <__aeabi_ui2d>
 80082ca:	2c09      	cmp	r4, #9
 80082cc:	4680      	mov	r8, r0
 80082ce:	4689      	mov	r9, r1
 80082d0:	dd13      	ble.n	80082fa <_strtod_l+0x3ca>
 80082d2:	4b7b      	ldr	r3, [pc, #492]	; (80084c0 <_strtod_l+0x590>)
 80082d4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80082d8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80082dc:	f7f8 fa20 	bl	8000720 <__aeabi_dmul>
 80082e0:	4680      	mov	r8, r0
 80082e2:	9805      	ldr	r0, [sp, #20]
 80082e4:	4689      	mov	r9, r1
 80082e6:	f7f8 f9a1 	bl	800062c <__aeabi_ui2d>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	4640      	mov	r0, r8
 80082f0:	4649      	mov	r1, r9
 80082f2:	f7f8 f85f 	bl	80003b4 <__adddf3>
 80082f6:	4680      	mov	r8, r0
 80082f8:	4689      	mov	r9, r1
 80082fa:	2c0f      	cmp	r4, #15
 80082fc:	dc36      	bgt.n	800836c <_strtod_l+0x43c>
 80082fe:	9b07      	ldr	r3, [sp, #28]
 8008300:	2b00      	cmp	r3, #0
 8008302:	f43f ae56 	beq.w	8007fb2 <_strtod_l+0x82>
 8008306:	dd22      	ble.n	800834e <_strtod_l+0x41e>
 8008308:	2b16      	cmp	r3, #22
 800830a:	dc09      	bgt.n	8008320 <_strtod_l+0x3f0>
 800830c:	496c      	ldr	r1, [pc, #432]	; (80084c0 <_strtod_l+0x590>)
 800830e:	4642      	mov	r2, r8
 8008310:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008314:	464b      	mov	r3, r9
 8008316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800831a:	f7f8 fa01 	bl	8000720 <__aeabi_dmul>
 800831e:	e7c3      	b.n	80082a8 <_strtod_l+0x378>
 8008320:	9a07      	ldr	r2, [sp, #28]
 8008322:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008326:	4293      	cmp	r3, r2
 8008328:	db20      	blt.n	800836c <_strtod_l+0x43c>
 800832a:	4d65      	ldr	r5, [pc, #404]	; (80084c0 <_strtod_l+0x590>)
 800832c:	f1c4 040f 	rsb	r4, r4, #15
 8008330:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008334:	4642      	mov	r2, r8
 8008336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800833a:	464b      	mov	r3, r9
 800833c:	f7f8 f9f0 	bl	8000720 <__aeabi_dmul>
 8008340:	9b07      	ldr	r3, [sp, #28]
 8008342:	1b1c      	subs	r4, r3, r4
 8008344:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008348:	e9d5 2300 	ldrd	r2, r3, [r5]
 800834c:	e7e5      	b.n	800831a <_strtod_l+0x3ea>
 800834e:	9b07      	ldr	r3, [sp, #28]
 8008350:	3316      	adds	r3, #22
 8008352:	db0b      	blt.n	800836c <_strtod_l+0x43c>
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	4640      	mov	r0, r8
 8008358:	1b5d      	subs	r5, r3, r5
 800835a:	4b59      	ldr	r3, [pc, #356]	; (80084c0 <_strtod_l+0x590>)
 800835c:	4649      	mov	r1, r9
 800835e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008362:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008366:	f7f8 fb05 	bl	8000974 <__aeabi_ddiv>
 800836a:	e79d      	b.n	80082a8 <_strtod_l+0x378>
 800836c:	9b07      	ldr	r3, [sp, #28]
 800836e:	1ba6      	subs	r6, r4, r6
 8008370:	441e      	add	r6, r3
 8008372:	2e00      	cmp	r6, #0
 8008374:	dd74      	ble.n	8008460 <_strtod_l+0x530>
 8008376:	f016 030f 	ands.w	r3, r6, #15
 800837a:	d00a      	beq.n	8008392 <_strtod_l+0x462>
 800837c:	4950      	ldr	r1, [pc, #320]	; (80084c0 <_strtod_l+0x590>)
 800837e:	4642      	mov	r2, r8
 8008380:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008388:	464b      	mov	r3, r9
 800838a:	f7f8 f9c9 	bl	8000720 <__aeabi_dmul>
 800838e:	4680      	mov	r8, r0
 8008390:	4689      	mov	r9, r1
 8008392:	f036 060f 	bics.w	r6, r6, #15
 8008396:	d052      	beq.n	800843e <_strtod_l+0x50e>
 8008398:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800839c:	dd27      	ble.n	80083ee <_strtod_l+0x4be>
 800839e:	f04f 0b00 	mov.w	fp, #0
 80083a2:	f8cd b010 	str.w	fp, [sp, #16]
 80083a6:	f8cd b020 	str.w	fp, [sp, #32]
 80083aa:	f8cd b018 	str.w	fp, [sp, #24]
 80083ae:	2322      	movs	r3, #34	; 0x22
 80083b0:	f04f 0800 	mov.w	r8, #0
 80083b4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80084b8 <_strtod_l+0x588>
 80083b8:	f8ca 3000 	str.w	r3, [sl]
 80083bc:	9b08      	ldr	r3, [sp, #32]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f43f adf7 	beq.w	8007fb2 <_strtod_l+0x82>
 80083c4:	4650      	mov	r0, sl
 80083c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80083c8:	f001 f85c 	bl	8009484 <_Bfree>
 80083cc:	4650      	mov	r0, sl
 80083ce:	9906      	ldr	r1, [sp, #24]
 80083d0:	f001 f858 	bl	8009484 <_Bfree>
 80083d4:	4650      	mov	r0, sl
 80083d6:	9904      	ldr	r1, [sp, #16]
 80083d8:	f001 f854 	bl	8009484 <_Bfree>
 80083dc:	4650      	mov	r0, sl
 80083de:	9908      	ldr	r1, [sp, #32]
 80083e0:	f001 f850 	bl	8009484 <_Bfree>
 80083e4:	4659      	mov	r1, fp
 80083e6:	4650      	mov	r0, sl
 80083e8:	f001 f84c 	bl	8009484 <_Bfree>
 80083ec:	e5e1      	b.n	8007fb2 <_strtod_l+0x82>
 80083ee:	4b35      	ldr	r3, [pc, #212]	; (80084c4 <_strtod_l+0x594>)
 80083f0:	4640      	mov	r0, r8
 80083f2:	9305      	str	r3, [sp, #20]
 80083f4:	2300      	movs	r3, #0
 80083f6:	4649      	mov	r1, r9
 80083f8:	461f      	mov	r7, r3
 80083fa:	1136      	asrs	r6, r6, #4
 80083fc:	2e01      	cmp	r6, #1
 80083fe:	dc21      	bgt.n	8008444 <_strtod_l+0x514>
 8008400:	b10b      	cbz	r3, 8008406 <_strtod_l+0x4d6>
 8008402:	4680      	mov	r8, r0
 8008404:	4689      	mov	r9, r1
 8008406:	4b2f      	ldr	r3, [pc, #188]	; (80084c4 <_strtod_l+0x594>)
 8008408:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800840c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008410:	4642      	mov	r2, r8
 8008412:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008416:	464b      	mov	r3, r9
 8008418:	f7f8 f982 	bl	8000720 <__aeabi_dmul>
 800841c:	4b26      	ldr	r3, [pc, #152]	; (80084b8 <_strtod_l+0x588>)
 800841e:	460a      	mov	r2, r1
 8008420:	400b      	ands	r3, r1
 8008422:	4929      	ldr	r1, [pc, #164]	; (80084c8 <_strtod_l+0x598>)
 8008424:	4680      	mov	r8, r0
 8008426:	428b      	cmp	r3, r1
 8008428:	d8b9      	bhi.n	800839e <_strtod_l+0x46e>
 800842a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800842e:	428b      	cmp	r3, r1
 8008430:	bf86      	itte	hi
 8008432:	f04f 38ff 	movhi.w	r8, #4294967295
 8008436:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80084cc <_strtod_l+0x59c>
 800843a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800843e:	2300      	movs	r3, #0
 8008440:	9305      	str	r3, [sp, #20]
 8008442:	e07f      	b.n	8008544 <_strtod_l+0x614>
 8008444:	07f2      	lsls	r2, r6, #31
 8008446:	d505      	bpl.n	8008454 <_strtod_l+0x524>
 8008448:	9b05      	ldr	r3, [sp, #20]
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	f7f8 f967 	bl	8000720 <__aeabi_dmul>
 8008452:	2301      	movs	r3, #1
 8008454:	9a05      	ldr	r2, [sp, #20]
 8008456:	3701      	adds	r7, #1
 8008458:	3208      	adds	r2, #8
 800845a:	1076      	asrs	r6, r6, #1
 800845c:	9205      	str	r2, [sp, #20]
 800845e:	e7cd      	b.n	80083fc <_strtod_l+0x4cc>
 8008460:	d0ed      	beq.n	800843e <_strtod_l+0x50e>
 8008462:	4276      	negs	r6, r6
 8008464:	f016 020f 	ands.w	r2, r6, #15
 8008468:	d00a      	beq.n	8008480 <_strtod_l+0x550>
 800846a:	4b15      	ldr	r3, [pc, #84]	; (80084c0 <_strtod_l+0x590>)
 800846c:	4640      	mov	r0, r8
 800846e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008472:	4649      	mov	r1, r9
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	f7f8 fa7c 	bl	8000974 <__aeabi_ddiv>
 800847c:	4680      	mov	r8, r0
 800847e:	4689      	mov	r9, r1
 8008480:	1136      	asrs	r6, r6, #4
 8008482:	d0dc      	beq.n	800843e <_strtod_l+0x50e>
 8008484:	2e1f      	cmp	r6, #31
 8008486:	dd23      	ble.n	80084d0 <_strtod_l+0x5a0>
 8008488:	f04f 0b00 	mov.w	fp, #0
 800848c:	f8cd b010 	str.w	fp, [sp, #16]
 8008490:	f8cd b020 	str.w	fp, [sp, #32]
 8008494:	f8cd b018 	str.w	fp, [sp, #24]
 8008498:	2322      	movs	r3, #34	; 0x22
 800849a:	f04f 0800 	mov.w	r8, #0
 800849e:	f04f 0900 	mov.w	r9, #0
 80084a2:	f8ca 3000 	str.w	r3, [sl]
 80084a6:	e789      	b.n	80083bc <_strtod_l+0x48c>
 80084a8:	0800bbd9 	.word	0x0800bbd9
 80084ac:	0800bbf0 	.word	0x0800bbf0
 80084b0:	0800bbd0 	.word	0x0800bbd0
 80084b4:	0800bbd3 	.word	0x0800bbd3
 80084b8:	7ff00000 	.word	0x7ff00000
 80084bc:	0800be9a 	.word	0x0800be9a
 80084c0:	0800bd58 	.word	0x0800bd58
 80084c4:	0800bd30 	.word	0x0800bd30
 80084c8:	7ca00000 	.word	0x7ca00000
 80084cc:	7fefffff 	.word	0x7fefffff
 80084d0:	f016 0310 	ands.w	r3, r6, #16
 80084d4:	bf18      	it	ne
 80084d6:	236a      	movne	r3, #106	; 0x6a
 80084d8:	4640      	mov	r0, r8
 80084da:	9305      	str	r3, [sp, #20]
 80084dc:	4649      	mov	r1, r9
 80084de:	2300      	movs	r3, #0
 80084e0:	4fb0      	ldr	r7, [pc, #704]	; (80087a4 <_strtod_l+0x874>)
 80084e2:	07f2      	lsls	r2, r6, #31
 80084e4:	d504      	bpl.n	80084f0 <_strtod_l+0x5c0>
 80084e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ea:	f7f8 f919 	bl	8000720 <__aeabi_dmul>
 80084ee:	2301      	movs	r3, #1
 80084f0:	1076      	asrs	r6, r6, #1
 80084f2:	f107 0708 	add.w	r7, r7, #8
 80084f6:	d1f4      	bne.n	80084e2 <_strtod_l+0x5b2>
 80084f8:	b10b      	cbz	r3, 80084fe <_strtod_l+0x5ce>
 80084fa:	4680      	mov	r8, r0
 80084fc:	4689      	mov	r9, r1
 80084fe:	9b05      	ldr	r3, [sp, #20]
 8008500:	b1c3      	cbz	r3, 8008534 <_strtod_l+0x604>
 8008502:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008506:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800850a:	2b00      	cmp	r3, #0
 800850c:	4649      	mov	r1, r9
 800850e:	dd11      	ble.n	8008534 <_strtod_l+0x604>
 8008510:	2b1f      	cmp	r3, #31
 8008512:	f340 8127 	ble.w	8008764 <_strtod_l+0x834>
 8008516:	2b34      	cmp	r3, #52	; 0x34
 8008518:	bfd8      	it	le
 800851a:	f04f 33ff 	movle.w	r3, #4294967295
 800851e:	f04f 0800 	mov.w	r8, #0
 8008522:	bfcf      	iteee	gt
 8008524:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008528:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800852c:	fa03 f202 	lslle.w	r2, r3, r2
 8008530:	ea02 0901 	andle.w	r9, r2, r1
 8008534:	2200      	movs	r2, #0
 8008536:	2300      	movs	r3, #0
 8008538:	4640      	mov	r0, r8
 800853a:	4649      	mov	r1, r9
 800853c:	f7f8 fb58 	bl	8000bf0 <__aeabi_dcmpeq>
 8008540:	2800      	cmp	r0, #0
 8008542:	d1a1      	bne.n	8008488 <_strtod_l+0x558>
 8008544:	9b06      	ldr	r3, [sp, #24]
 8008546:	465a      	mov	r2, fp
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	4650      	mov	r0, sl
 800854c:	4623      	mov	r3, r4
 800854e:	9908      	ldr	r1, [sp, #32]
 8008550:	f001 f800 	bl	8009554 <__s2b>
 8008554:	9008      	str	r0, [sp, #32]
 8008556:	2800      	cmp	r0, #0
 8008558:	f43f af21 	beq.w	800839e <_strtod_l+0x46e>
 800855c:	9b04      	ldr	r3, [sp, #16]
 800855e:	f04f 0b00 	mov.w	fp, #0
 8008562:	1b5d      	subs	r5, r3, r5
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	f8cd b010 	str.w	fp, [sp, #16]
 800856a:	2b00      	cmp	r3, #0
 800856c:	bfb4      	ite	lt
 800856e:	462b      	movlt	r3, r5
 8008570:	2300      	movge	r3, #0
 8008572:	930e      	str	r3, [sp, #56]	; 0x38
 8008574:	9b07      	ldr	r3, [sp, #28]
 8008576:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800857a:	9314      	str	r3, [sp, #80]	; 0x50
 800857c:	9b08      	ldr	r3, [sp, #32]
 800857e:	4650      	mov	r0, sl
 8008580:	6859      	ldr	r1, [r3, #4]
 8008582:	f000 ff3f 	bl	8009404 <_Balloc>
 8008586:	9006      	str	r0, [sp, #24]
 8008588:	2800      	cmp	r0, #0
 800858a:	f43f af10 	beq.w	80083ae <_strtod_l+0x47e>
 800858e:	9b08      	ldr	r3, [sp, #32]
 8008590:	300c      	adds	r0, #12
 8008592:	691a      	ldr	r2, [r3, #16]
 8008594:	f103 010c 	add.w	r1, r3, #12
 8008598:	3202      	adds	r2, #2
 800859a:	0092      	lsls	r2, r2, #2
 800859c:	f7ff fb1f 	bl	8007bde <memcpy>
 80085a0:	ab1c      	add	r3, sp, #112	; 0x70
 80085a2:	9301      	str	r3, [sp, #4]
 80085a4:	ab1b      	add	r3, sp, #108	; 0x6c
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	4642      	mov	r2, r8
 80085aa:	464b      	mov	r3, r9
 80085ac:	4650      	mov	r0, sl
 80085ae:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80085b2:	f001 fb11 	bl	8009bd8 <__d2b>
 80085b6:	901a      	str	r0, [sp, #104]	; 0x68
 80085b8:	2800      	cmp	r0, #0
 80085ba:	f43f aef8 	beq.w	80083ae <_strtod_l+0x47e>
 80085be:	2101      	movs	r1, #1
 80085c0:	4650      	mov	r0, sl
 80085c2:	f001 f85f 	bl	8009684 <__i2b>
 80085c6:	4603      	mov	r3, r0
 80085c8:	9004      	str	r0, [sp, #16]
 80085ca:	2800      	cmp	r0, #0
 80085cc:	f43f aeef 	beq.w	80083ae <_strtod_l+0x47e>
 80085d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80085d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80085d4:	2d00      	cmp	r5, #0
 80085d6:	bfab      	itete	ge
 80085d8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80085da:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80085dc:	18ee      	addge	r6, r5, r3
 80085de:	1b5c      	sublt	r4, r3, r5
 80085e0:	9b05      	ldr	r3, [sp, #20]
 80085e2:	bfa8      	it	ge
 80085e4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80085e6:	eba5 0503 	sub.w	r5, r5, r3
 80085ea:	4415      	add	r5, r2
 80085ec:	4b6e      	ldr	r3, [pc, #440]	; (80087a8 <_strtod_l+0x878>)
 80085ee:	f105 35ff 	add.w	r5, r5, #4294967295
 80085f2:	bfb8      	it	lt
 80085f4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80085f6:	429d      	cmp	r5, r3
 80085f8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80085fc:	f280 80c4 	bge.w	8008788 <_strtod_l+0x858>
 8008600:	1b5b      	subs	r3, r3, r5
 8008602:	2b1f      	cmp	r3, #31
 8008604:	f04f 0701 	mov.w	r7, #1
 8008608:	eba2 0203 	sub.w	r2, r2, r3
 800860c:	f300 80b1 	bgt.w	8008772 <_strtod_l+0x842>
 8008610:	2500      	movs	r5, #0
 8008612:	fa07 f303 	lsl.w	r3, r7, r3
 8008616:	930f      	str	r3, [sp, #60]	; 0x3c
 8008618:	18b7      	adds	r7, r6, r2
 800861a:	9b05      	ldr	r3, [sp, #20]
 800861c:	42be      	cmp	r6, r7
 800861e:	4414      	add	r4, r2
 8008620:	441c      	add	r4, r3
 8008622:	4633      	mov	r3, r6
 8008624:	bfa8      	it	ge
 8008626:	463b      	movge	r3, r7
 8008628:	42a3      	cmp	r3, r4
 800862a:	bfa8      	it	ge
 800862c:	4623      	movge	r3, r4
 800862e:	2b00      	cmp	r3, #0
 8008630:	bfc2      	ittt	gt
 8008632:	1aff      	subgt	r7, r7, r3
 8008634:	1ae4      	subgt	r4, r4, r3
 8008636:	1af6      	subgt	r6, r6, r3
 8008638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800863a:	2b00      	cmp	r3, #0
 800863c:	dd17      	ble.n	800866e <_strtod_l+0x73e>
 800863e:	461a      	mov	r2, r3
 8008640:	4650      	mov	r0, sl
 8008642:	9904      	ldr	r1, [sp, #16]
 8008644:	f001 f8dc 	bl	8009800 <__pow5mult>
 8008648:	9004      	str	r0, [sp, #16]
 800864a:	2800      	cmp	r0, #0
 800864c:	f43f aeaf 	beq.w	80083ae <_strtod_l+0x47e>
 8008650:	4601      	mov	r1, r0
 8008652:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008654:	4650      	mov	r0, sl
 8008656:	f001 f82b 	bl	80096b0 <__multiply>
 800865a:	9009      	str	r0, [sp, #36]	; 0x24
 800865c:	2800      	cmp	r0, #0
 800865e:	f43f aea6 	beq.w	80083ae <_strtod_l+0x47e>
 8008662:	4650      	mov	r0, sl
 8008664:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008666:	f000 ff0d 	bl	8009484 <_Bfree>
 800866a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800866c:	931a      	str	r3, [sp, #104]	; 0x68
 800866e:	2f00      	cmp	r7, #0
 8008670:	f300 808e 	bgt.w	8008790 <_strtod_l+0x860>
 8008674:	9b07      	ldr	r3, [sp, #28]
 8008676:	2b00      	cmp	r3, #0
 8008678:	dd08      	ble.n	800868c <_strtod_l+0x75c>
 800867a:	4650      	mov	r0, sl
 800867c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800867e:	9906      	ldr	r1, [sp, #24]
 8008680:	f001 f8be 	bl	8009800 <__pow5mult>
 8008684:	9006      	str	r0, [sp, #24]
 8008686:	2800      	cmp	r0, #0
 8008688:	f43f ae91 	beq.w	80083ae <_strtod_l+0x47e>
 800868c:	2c00      	cmp	r4, #0
 800868e:	dd08      	ble.n	80086a2 <_strtod_l+0x772>
 8008690:	4622      	mov	r2, r4
 8008692:	4650      	mov	r0, sl
 8008694:	9906      	ldr	r1, [sp, #24]
 8008696:	f001 f90d 	bl	80098b4 <__lshift>
 800869a:	9006      	str	r0, [sp, #24]
 800869c:	2800      	cmp	r0, #0
 800869e:	f43f ae86 	beq.w	80083ae <_strtod_l+0x47e>
 80086a2:	2e00      	cmp	r6, #0
 80086a4:	dd08      	ble.n	80086b8 <_strtod_l+0x788>
 80086a6:	4632      	mov	r2, r6
 80086a8:	4650      	mov	r0, sl
 80086aa:	9904      	ldr	r1, [sp, #16]
 80086ac:	f001 f902 	bl	80098b4 <__lshift>
 80086b0:	9004      	str	r0, [sp, #16]
 80086b2:	2800      	cmp	r0, #0
 80086b4:	f43f ae7b 	beq.w	80083ae <_strtod_l+0x47e>
 80086b8:	4650      	mov	r0, sl
 80086ba:	9a06      	ldr	r2, [sp, #24]
 80086bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80086be:	f001 f985 	bl	80099cc <__mdiff>
 80086c2:	4683      	mov	fp, r0
 80086c4:	2800      	cmp	r0, #0
 80086c6:	f43f ae72 	beq.w	80083ae <_strtod_l+0x47e>
 80086ca:	2400      	movs	r4, #0
 80086cc:	68c3      	ldr	r3, [r0, #12]
 80086ce:	9904      	ldr	r1, [sp, #16]
 80086d0:	60c4      	str	r4, [r0, #12]
 80086d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80086d4:	f001 f95e 	bl	8009994 <__mcmp>
 80086d8:	42a0      	cmp	r0, r4
 80086da:	da6b      	bge.n	80087b4 <_strtod_l+0x884>
 80086dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086de:	ea53 0308 	orrs.w	r3, r3, r8
 80086e2:	f040 8091 	bne.w	8008808 <_strtod_l+0x8d8>
 80086e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f040 808c 	bne.w	8008808 <_strtod_l+0x8d8>
 80086f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086f4:	0d1b      	lsrs	r3, r3, #20
 80086f6:	051b      	lsls	r3, r3, #20
 80086f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80086fc:	f240 8084 	bls.w	8008808 <_strtod_l+0x8d8>
 8008700:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008704:	b91b      	cbnz	r3, 800870e <_strtod_l+0x7de>
 8008706:	f8db 3010 	ldr.w	r3, [fp, #16]
 800870a:	2b01      	cmp	r3, #1
 800870c:	dd7c      	ble.n	8008808 <_strtod_l+0x8d8>
 800870e:	4659      	mov	r1, fp
 8008710:	2201      	movs	r2, #1
 8008712:	4650      	mov	r0, sl
 8008714:	f001 f8ce 	bl	80098b4 <__lshift>
 8008718:	9904      	ldr	r1, [sp, #16]
 800871a:	4683      	mov	fp, r0
 800871c:	f001 f93a 	bl	8009994 <__mcmp>
 8008720:	2800      	cmp	r0, #0
 8008722:	dd71      	ble.n	8008808 <_strtod_l+0x8d8>
 8008724:	9905      	ldr	r1, [sp, #20]
 8008726:	464b      	mov	r3, r9
 8008728:	4a20      	ldr	r2, [pc, #128]	; (80087ac <_strtod_l+0x87c>)
 800872a:	2900      	cmp	r1, #0
 800872c:	f000 808c 	beq.w	8008848 <_strtod_l+0x918>
 8008730:	ea02 0109 	and.w	r1, r2, r9
 8008734:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008738:	f300 8086 	bgt.w	8008848 <_strtod_l+0x918>
 800873c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008740:	f77f aeaa 	ble.w	8008498 <_strtod_l+0x568>
 8008744:	4640      	mov	r0, r8
 8008746:	4649      	mov	r1, r9
 8008748:	4b19      	ldr	r3, [pc, #100]	; (80087b0 <_strtod_l+0x880>)
 800874a:	2200      	movs	r2, #0
 800874c:	f7f7 ffe8 	bl	8000720 <__aeabi_dmul>
 8008750:	460b      	mov	r3, r1
 8008752:	4303      	orrs	r3, r0
 8008754:	bf08      	it	eq
 8008756:	2322      	moveq	r3, #34	; 0x22
 8008758:	4680      	mov	r8, r0
 800875a:	4689      	mov	r9, r1
 800875c:	bf08      	it	eq
 800875e:	f8ca 3000 	streq.w	r3, [sl]
 8008762:	e62f      	b.n	80083c4 <_strtod_l+0x494>
 8008764:	f04f 32ff 	mov.w	r2, #4294967295
 8008768:	fa02 f303 	lsl.w	r3, r2, r3
 800876c:	ea03 0808 	and.w	r8, r3, r8
 8008770:	e6e0      	b.n	8008534 <_strtod_l+0x604>
 8008772:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008776:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800877a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800877e:	35e2      	adds	r5, #226	; 0xe2
 8008780:	fa07 f505 	lsl.w	r5, r7, r5
 8008784:	970f      	str	r7, [sp, #60]	; 0x3c
 8008786:	e747      	b.n	8008618 <_strtod_l+0x6e8>
 8008788:	2301      	movs	r3, #1
 800878a:	2500      	movs	r5, #0
 800878c:	930f      	str	r3, [sp, #60]	; 0x3c
 800878e:	e743      	b.n	8008618 <_strtod_l+0x6e8>
 8008790:	463a      	mov	r2, r7
 8008792:	4650      	mov	r0, sl
 8008794:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008796:	f001 f88d 	bl	80098b4 <__lshift>
 800879a:	901a      	str	r0, [sp, #104]	; 0x68
 800879c:	2800      	cmp	r0, #0
 800879e:	f47f af69 	bne.w	8008674 <_strtod_l+0x744>
 80087a2:	e604      	b.n	80083ae <_strtod_l+0x47e>
 80087a4:	0800bc08 	.word	0x0800bc08
 80087a8:	fffffc02 	.word	0xfffffc02
 80087ac:	7ff00000 	.word	0x7ff00000
 80087b0:	39500000 	.word	0x39500000
 80087b4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80087b8:	d165      	bne.n	8008886 <_strtod_l+0x956>
 80087ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087c0:	b35a      	cbz	r2, 800881a <_strtod_l+0x8ea>
 80087c2:	4a99      	ldr	r2, [pc, #612]	; (8008a28 <_strtod_l+0xaf8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d12b      	bne.n	8008820 <_strtod_l+0x8f0>
 80087c8:	9b05      	ldr	r3, [sp, #20]
 80087ca:	4641      	mov	r1, r8
 80087cc:	b303      	cbz	r3, 8008810 <_strtod_l+0x8e0>
 80087ce:	464a      	mov	r2, r9
 80087d0:	4b96      	ldr	r3, [pc, #600]	; (8008a2c <_strtod_l+0xafc>)
 80087d2:	4013      	ands	r3, r2
 80087d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80087d8:	f04f 32ff 	mov.w	r2, #4294967295
 80087dc:	d81b      	bhi.n	8008816 <_strtod_l+0x8e6>
 80087de:	0d1b      	lsrs	r3, r3, #20
 80087e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80087e4:	fa02 f303 	lsl.w	r3, r2, r3
 80087e8:	4299      	cmp	r1, r3
 80087ea:	d119      	bne.n	8008820 <_strtod_l+0x8f0>
 80087ec:	4b90      	ldr	r3, [pc, #576]	; (8008a30 <_strtod_l+0xb00>)
 80087ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d102      	bne.n	80087fa <_strtod_l+0x8ca>
 80087f4:	3101      	adds	r1, #1
 80087f6:	f43f adda 	beq.w	80083ae <_strtod_l+0x47e>
 80087fa:	f04f 0800 	mov.w	r8, #0
 80087fe:	4b8b      	ldr	r3, [pc, #556]	; (8008a2c <_strtod_l+0xafc>)
 8008800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008802:	401a      	ands	r2, r3
 8008804:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008808:	9b05      	ldr	r3, [sp, #20]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d19a      	bne.n	8008744 <_strtod_l+0x814>
 800880e:	e5d9      	b.n	80083c4 <_strtod_l+0x494>
 8008810:	f04f 33ff 	mov.w	r3, #4294967295
 8008814:	e7e8      	b.n	80087e8 <_strtod_l+0x8b8>
 8008816:	4613      	mov	r3, r2
 8008818:	e7e6      	b.n	80087e8 <_strtod_l+0x8b8>
 800881a:	ea53 0308 	orrs.w	r3, r3, r8
 800881e:	d081      	beq.n	8008724 <_strtod_l+0x7f4>
 8008820:	b1e5      	cbz	r5, 800885c <_strtod_l+0x92c>
 8008822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008824:	421d      	tst	r5, r3
 8008826:	d0ef      	beq.n	8008808 <_strtod_l+0x8d8>
 8008828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800882a:	4640      	mov	r0, r8
 800882c:	4649      	mov	r1, r9
 800882e:	9a05      	ldr	r2, [sp, #20]
 8008830:	b1c3      	cbz	r3, 8008864 <_strtod_l+0x934>
 8008832:	f7ff fb5c 	bl	8007eee <sulp>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800883e:	f7f7 fdb9 	bl	80003b4 <__adddf3>
 8008842:	4680      	mov	r8, r0
 8008844:	4689      	mov	r9, r1
 8008846:	e7df      	b.n	8008808 <_strtod_l+0x8d8>
 8008848:	4013      	ands	r3, r2
 800884a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800884e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008852:	f04f 38ff 	mov.w	r8, #4294967295
 8008856:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800885a:	e7d5      	b.n	8008808 <_strtod_l+0x8d8>
 800885c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800885e:	ea13 0f08 	tst.w	r3, r8
 8008862:	e7e0      	b.n	8008826 <_strtod_l+0x8f6>
 8008864:	f7ff fb43 	bl	8007eee <sulp>
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008870:	f7f7 fd9e 	bl	80003b0 <__aeabi_dsub>
 8008874:	2200      	movs	r2, #0
 8008876:	2300      	movs	r3, #0
 8008878:	4680      	mov	r8, r0
 800887a:	4689      	mov	r9, r1
 800887c:	f7f8 f9b8 	bl	8000bf0 <__aeabi_dcmpeq>
 8008880:	2800      	cmp	r0, #0
 8008882:	d0c1      	beq.n	8008808 <_strtod_l+0x8d8>
 8008884:	e608      	b.n	8008498 <_strtod_l+0x568>
 8008886:	4658      	mov	r0, fp
 8008888:	9904      	ldr	r1, [sp, #16]
 800888a:	f001 fa01 	bl	8009c90 <__ratio>
 800888e:	2200      	movs	r2, #0
 8008890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008894:	4606      	mov	r6, r0
 8008896:	460f      	mov	r7, r1
 8008898:	f7f8 f9be 	bl	8000c18 <__aeabi_dcmple>
 800889c:	2800      	cmp	r0, #0
 800889e:	d070      	beq.n	8008982 <_strtod_l+0xa52>
 80088a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d042      	beq.n	800892c <_strtod_l+0x9fc>
 80088a6:	2600      	movs	r6, #0
 80088a8:	4f62      	ldr	r7, [pc, #392]	; (8008a34 <_strtod_l+0xb04>)
 80088aa:	4d62      	ldr	r5, [pc, #392]	; (8008a34 <_strtod_l+0xb04>)
 80088ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088b2:	0d1b      	lsrs	r3, r3, #20
 80088b4:	051b      	lsls	r3, r3, #20
 80088b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088ba:	4b5f      	ldr	r3, [pc, #380]	; (8008a38 <_strtod_l+0xb08>)
 80088bc:	429a      	cmp	r2, r3
 80088be:	f040 80c3 	bne.w	8008a48 <_strtod_l+0xb18>
 80088c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c4:	4640      	mov	r0, r8
 80088c6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80088ca:	4649      	mov	r1, r9
 80088cc:	f001 f90a 	bl	8009ae4 <__ulp>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4630      	mov	r0, r6
 80088d6:	4639      	mov	r1, r7
 80088d8:	f7f7 ff22 	bl	8000720 <__aeabi_dmul>
 80088dc:	4642      	mov	r2, r8
 80088de:	464b      	mov	r3, r9
 80088e0:	f7f7 fd68 	bl	80003b4 <__adddf3>
 80088e4:	460b      	mov	r3, r1
 80088e6:	4951      	ldr	r1, [pc, #324]	; (8008a2c <_strtod_l+0xafc>)
 80088e8:	4a54      	ldr	r2, [pc, #336]	; (8008a3c <_strtod_l+0xb0c>)
 80088ea:	4019      	ands	r1, r3
 80088ec:	4291      	cmp	r1, r2
 80088ee:	4680      	mov	r8, r0
 80088f0:	d95d      	bls.n	80089ae <_strtod_l+0xa7e>
 80088f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088f4:	4b4e      	ldr	r3, [pc, #312]	; (8008a30 <_strtod_l+0xb00>)
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d103      	bne.n	8008902 <_strtod_l+0x9d2>
 80088fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088fc:	3301      	adds	r3, #1
 80088fe:	f43f ad56 	beq.w	80083ae <_strtod_l+0x47e>
 8008902:	f04f 38ff 	mov.w	r8, #4294967295
 8008906:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008a30 <_strtod_l+0xb00>
 800890a:	4650      	mov	r0, sl
 800890c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800890e:	f000 fdb9 	bl	8009484 <_Bfree>
 8008912:	4650      	mov	r0, sl
 8008914:	9906      	ldr	r1, [sp, #24]
 8008916:	f000 fdb5 	bl	8009484 <_Bfree>
 800891a:	4650      	mov	r0, sl
 800891c:	9904      	ldr	r1, [sp, #16]
 800891e:	f000 fdb1 	bl	8009484 <_Bfree>
 8008922:	4659      	mov	r1, fp
 8008924:	4650      	mov	r0, sl
 8008926:	f000 fdad 	bl	8009484 <_Bfree>
 800892a:	e627      	b.n	800857c <_strtod_l+0x64c>
 800892c:	f1b8 0f00 	cmp.w	r8, #0
 8008930:	d119      	bne.n	8008966 <_strtod_l+0xa36>
 8008932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008938:	b9e3      	cbnz	r3, 8008974 <_strtod_l+0xa44>
 800893a:	2200      	movs	r2, #0
 800893c:	4630      	mov	r0, r6
 800893e:	4639      	mov	r1, r7
 8008940:	4b3c      	ldr	r3, [pc, #240]	; (8008a34 <_strtod_l+0xb04>)
 8008942:	f7f8 f95f 	bl	8000c04 <__aeabi_dcmplt>
 8008946:	b9c8      	cbnz	r0, 800897c <_strtod_l+0xa4c>
 8008948:	2200      	movs	r2, #0
 800894a:	4630      	mov	r0, r6
 800894c:	4639      	mov	r1, r7
 800894e:	4b3c      	ldr	r3, [pc, #240]	; (8008a40 <_strtod_l+0xb10>)
 8008950:	f7f7 fee6 	bl	8000720 <__aeabi_dmul>
 8008954:	4604      	mov	r4, r0
 8008956:	460d      	mov	r5, r1
 8008958:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800895c:	9416      	str	r4, [sp, #88]	; 0x58
 800895e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008960:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008964:	e7a2      	b.n	80088ac <_strtod_l+0x97c>
 8008966:	f1b8 0f01 	cmp.w	r8, #1
 800896a:	d103      	bne.n	8008974 <_strtod_l+0xa44>
 800896c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800896e:	2b00      	cmp	r3, #0
 8008970:	f43f ad92 	beq.w	8008498 <_strtod_l+0x568>
 8008974:	2600      	movs	r6, #0
 8008976:	2400      	movs	r4, #0
 8008978:	4f32      	ldr	r7, [pc, #200]	; (8008a44 <_strtod_l+0xb14>)
 800897a:	e796      	b.n	80088aa <_strtod_l+0x97a>
 800897c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800897e:	4d30      	ldr	r5, [pc, #192]	; (8008a40 <_strtod_l+0xb10>)
 8008980:	e7ea      	b.n	8008958 <_strtod_l+0xa28>
 8008982:	4b2f      	ldr	r3, [pc, #188]	; (8008a40 <_strtod_l+0xb10>)
 8008984:	2200      	movs	r2, #0
 8008986:	4630      	mov	r0, r6
 8008988:	4639      	mov	r1, r7
 800898a:	f7f7 fec9 	bl	8000720 <__aeabi_dmul>
 800898e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008990:	4604      	mov	r4, r0
 8008992:	460d      	mov	r5, r1
 8008994:	b933      	cbnz	r3, 80089a4 <_strtod_l+0xa74>
 8008996:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800899a:	9010      	str	r0, [sp, #64]	; 0x40
 800899c:	9311      	str	r3, [sp, #68]	; 0x44
 800899e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80089a2:	e783      	b.n	80088ac <_strtod_l+0x97c>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80089ac:	e7f7      	b.n	800899e <_strtod_l+0xa6e>
 80089ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80089b2:	9b05      	ldr	r3, [sp, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1a8      	bne.n	800890a <_strtod_l+0x9da>
 80089b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089be:	0d1b      	lsrs	r3, r3, #20
 80089c0:	051b      	lsls	r3, r3, #20
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d1a1      	bne.n	800890a <_strtod_l+0x9da>
 80089c6:	4620      	mov	r0, r4
 80089c8:	4629      	mov	r1, r5
 80089ca:	f7f8 fbab 	bl	8001124 <__aeabi_d2lz>
 80089ce:	f7f7 fe79 	bl	80006c4 <__aeabi_l2d>
 80089d2:	4602      	mov	r2, r0
 80089d4:	460b      	mov	r3, r1
 80089d6:	4620      	mov	r0, r4
 80089d8:	4629      	mov	r1, r5
 80089da:	f7f7 fce9 	bl	80003b0 <__aeabi_dsub>
 80089de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089e4:	ea43 0308 	orr.w	r3, r3, r8
 80089e8:	4313      	orrs	r3, r2
 80089ea:	4604      	mov	r4, r0
 80089ec:	460d      	mov	r5, r1
 80089ee:	d066      	beq.n	8008abe <_strtod_l+0xb8e>
 80089f0:	a309      	add	r3, pc, #36	; (adr r3, 8008a18 <_strtod_l+0xae8>)
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	f7f8 f905 	bl	8000c04 <__aeabi_dcmplt>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	f47f ace2 	bne.w	80083c4 <_strtod_l+0x494>
 8008a00:	a307      	add	r3, pc, #28	; (adr r3, 8008a20 <_strtod_l+0xaf0>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	4620      	mov	r0, r4
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f7f8 f919 	bl	8000c40 <__aeabi_dcmpgt>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f43f af7b 	beq.w	800890a <_strtod_l+0x9da>
 8008a14:	e4d6      	b.n	80083c4 <_strtod_l+0x494>
 8008a16:	bf00      	nop
 8008a18:	94a03595 	.word	0x94a03595
 8008a1c:	3fdfffff 	.word	0x3fdfffff
 8008a20:	35afe535 	.word	0x35afe535
 8008a24:	3fe00000 	.word	0x3fe00000
 8008a28:	000fffff 	.word	0x000fffff
 8008a2c:	7ff00000 	.word	0x7ff00000
 8008a30:	7fefffff 	.word	0x7fefffff
 8008a34:	3ff00000 	.word	0x3ff00000
 8008a38:	7fe00000 	.word	0x7fe00000
 8008a3c:	7c9fffff 	.word	0x7c9fffff
 8008a40:	3fe00000 	.word	0x3fe00000
 8008a44:	bff00000 	.word	0xbff00000
 8008a48:	9b05      	ldr	r3, [sp, #20]
 8008a4a:	b313      	cbz	r3, 8008a92 <_strtod_l+0xb62>
 8008a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008a52:	d81e      	bhi.n	8008a92 <_strtod_l+0xb62>
 8008a54:	a326      	add	r3, pc, #152	; (adr r3, 8008af0 <_strtod_l+0xbc0>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f7f8 f8db 	bl	8000c18 <__aeabi_dcmple>
 8008a62:	b190      	cbz	r0, 8008a8a <_strtod_l+0xb5a>
 8008a64:	4629      	mov	r1, r5
 8008a66:	4620      	mov	r0, r4
 8008a68:	f7f8 f90a 	bl	8000c80 <__aeabi_d2uiz>
 8008a6c:	2801      	cmp	r0, #1
 8008a6e:	bf38      	it	cc
 8008a70:	2001      	movcc	r0, #1
 8008a72:	f7f7 fddb 	bl	800062c <__aeabi_ui2d>
 8008a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a78:	4604      	mov	r4, r0
 8008a7a:	460d      	mov	r5, r1
 8008a7c:	b9d3      	cbnz	r3, 8008ab4 <_strtod_l+0xb84>
 8008a7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a82:	9012      	str	r0, [sp, #72]	; 0x48
 8008a84:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a86:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008a8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a8c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008a90:	1a9f      	subs	r7, r3, r2
 8008a92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a96:	f001 f825 	bl	8009ae4 <__ulp>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	4630      	mov	r0, r6
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	f7f7 fe3d 	bl	8000720 <__aeabi_dmul>
 8008aa6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008aaa:	f7f7 fc83 	bl	80003b4 <__adddf3>
 8008aae:	4680      	mov	r8, r0
 8008ab0:	4689      	mov	r9, r1
 8008ab2:	e77e      	b.n	80089b2 <_strtod_l+0xa82>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008abc:	e7e3      	b.n	8008a86 <_strtod_l+0xb56>
 8008abe:	a30e      	add	r3, pc, #56	; (adr r3, 8008af8 <_strtod_l+0xbc8>)
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	f7f8 f89e 	bl	8000c04 <__aeabi_dcmplt>
 8008ac8:	e7a1      	b.n	8008a0e <_strtod_l+0xade>
 8008aca:	2300      	movs	r3, #0
 8008acc:	930a      	str	r3, [sp, #40]	; 0x28
 8008ace:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ad0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	f7ff ba71 	b.w	8007fba <_strtod_l+0x8a>
 8008ad8:	2a65      	cmp	r2, #101	; 0x65
 8008ada:	f43f ab63 	beq.w	80081a4 <_strtod_l+0x274>
 8008ade:	2a45      	cmp	r2, #69	; 0x45
 8008ae0:	f43f ab60 	beq.w	80081a4 <_strtod_l+0x274>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	f7ff bb95 	b.w	8008214 <_strtod_l+0x2e4>
 8008aea:	bf00      	nop
 8008aec:	f3af 8000 	nop.w
 8008af0:	ffc00000 	.word	0xffc00000
 8008af4:	41dfffff 	.word	0x41dfffff
 8008af8:	94a03595 	.word	0x94a03595
 8008afc:	3fcfffff 	.word	0x3fcfffff

08008b00 <strtod>:
 8008b00:	460a      	mov	r2, r1
 8008b02:	4601      	mov	r1, r0
 8008b04:	4802      	ldr	r0, [pc, #8]	; (8008b10 <strtod+0x10>)
 8008b06:	4b03      	ldr	r3, [pc, #12]	; (8008b14 <strtod+0x14>)
 8008b08:	6800      	ldr	r0, [r0, #0]
 8008b0a:	f7ff ba11 	b.w	8007f30 <_strtod_l>
 8008b0e:	bf00      	nop
 8008b10:	20000010 	.word	0x20000010
 8008b14:	20000078 	.word	0x20000078

08008b18 <_write_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	4608      	mov	r0, r1
 8008b1e:	4611      	mov	r1, r2
 8008b20:	2200      	movs	r2, #0
 8008b22:	4d05      	ldr	r5, [pc, #20]	; (8008b38 <_write_r+0x20>)
 8008b24:	602a      	str	r2, [r5, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	f7fa f8e4 	bl	8002cf4 <_write>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d102      	bne.n	8008b36 <_write_r+0x1e>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	b103      	cbz	r3, 8008b36 <_write_r+0x1e>
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	20001e74 	.word	0x20001e74

08008b3c <_close_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	2300      	movs	r3, #0
 8008b40:	4d05      	ldr	r5, [pc, #20]	; (8008b58 <_close_r+0x1c>)
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	602b      	str	r3, [r5, #0]
 8008b48:	f7fa f8f0 	bl	8002d2c <_close>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d102      	bne.n	8008b56 <_close_r+0x1a>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	b103      	cbz	r3, 8008b56 <_close_r+0x1a>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	20001e74 	.word	0x20001e74

08008b5c <__sflush_r>:
 8008b5c:	898a      	ldrh	r2, [r1, #12]
 8008b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b60:	4605      	mov	r5, r0
 8008b62:	0710      	lsls	r0, r2, #28
 8008b64:	460c      	mov	r4, r1
 8008b66:	d457      	bmi.n	8008c18 <__sflush_r+0xbc>
 8008b68:	684b      	ldr	r3, [r1, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	dc04      	bgt.n	8008b78 <__sflush_r+0x1c>
 8008b6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	dc01      	bgt.n	8008b78 <__sflush_r+0x1c>
 8008b74:	2000      	movs	r0, #0
 8008b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	d0fa      	beq.n	8008b74 <__sflush_r+0x18>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b84:	682f      	ldr	r7, [r5, #0]
 8008b86:	602b      	str	r3, [r5, #0]
 8008b88:	d032      	beq.n	8008bf0 <__sflush_r+0x94>
 8008b8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	075a      	lsls	r2, r3, #29
 8008b90:	d505      	bpl.n	8008b9e <__sflush_r+0x42>
 8008b92:	6863      	ldr	r3, [r4, #4]
 8008b94:	1ac0      	subs	r0, r0, r3
 8008b96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b98:	b10b      	cbz	r3, 8008b9e <__sflush_r+0x42>
 8008b9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b9c:	1ac0      	subs	r0, r0, r3
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	6a21      	ldr	r1, [r4, #32]
 8008ba8:	47b0      	blx	r6
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	d106      	bne.n	8008bbe <__sflush_r+0x62>
 8008bb0:	6829      	ldr	r1, [r5, #0]
 8008bb2:	291d      	cmp	r1, #29
 8008bb4:	d82c      	bhi.n	8008c10 <__sflush_r+0xb4>
 8008bb6:	4a29      	ldr	r2, [pc, #164]	; (8008c5c <__sflush_r+0x100>)
 8008bb8:	40ca      	lsrs	r2, r1
 8008bba:	07d6      	lsls	r6, r2, #31
 8008bbc:	d528      	bpl.n	8008c10 <__sflush_r+0xb4>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	6062      	str	r2, [r4, #4]
 8008bc2:	6922      	ldr	r2, [r4, #16]
 8008bc4:	04d9      	lsls	r1, r3, #19
 8008bc6:	6022      	str	r2, [r4, #0]
 8008bc8:	d504      	bpl.n	8008bd4 <__sflush_r+0x78>
 8008bca:	1c42      	adds	r2, r0, #1
 8008bcc:	d101      	bne.n	8008bd2 <__sflush_r+0x76>
 8008bce:	682b      	ldr	r3, [r5, #0]
 8008bd0:	b903      	cbnz	r3, 8008bd4 <__sflush_r+0x78>
 8008bd2:	6560      	str	r0, [r4, #84]	; 0x54
 8008bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bd6:	602f      	str	r7, [r5, #0]
 8008bd8:	2900      	cmp	r1, #0
 8008bda:	d0cb      	beq.n	8008b74 <__sflush_r+0x18>
 8008bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008be0:	4299      	cmp	r1, r3
 8008be2:	d002      	beq.n	8008bea <__sflush_r+0x8e>
 8008be4:	4628      	mov	r0, r5
 8008be6:	f001 f8d9 	bl	8009d9c <_free_r>
 8008bea:	2000      	movs	r0, #0
 8008bec:	6360      	str	r0, [r4, #52]	; 0x34
 8008bee:	e7c2      	b.n	8008b76 <__sflush_r+0x1a>
 8008bf0:	6a21      	ldr	r1, [r4, #32]
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	47b0      	blx	r6
 8008bf8:	1c41      	adds	r1, r0, #1
 8008bfa:	d1c7      	bne.n	8008b8c <__sflush_r+0x30>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0c4      	beq.n	8008b8c <__sflush_r+0x30>
 8008c02:	2b1d      	cmp	r3, #29
 8008c04:	d001      	beq.n	8008c0a <__sflush_r+0xae>
 8008c06:	2b16      	cmp	r3, #22
 8008c08:	d101      	bne.n	8008c0e <__sflush_r+0xb2>
 8008c0a:	602f      	str	r7, [r5, #0]
 8008c0c:	e7b2      	b.n	8008b74 <__sflush_r+0x18>
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c14:	81a3      	strh	r3, [r4, #12]
 8008c16:	e7ae      	b.n	8008b76 <__sflush_r+0x1a>
 8008c18:	690f      	ldr	r7, [r1, #16]
 8008c1a:	2f00      	cmp	r7, #0
 8008c1c:	d0aa      	beq.n	8008b74 <__sflush_r+0x18>
 8008c1e:	0793      	lsls	r3, r2, #30
 8008c20:	bf18      	it	ne
 8008c22:	2300      	movne	r3, #0
 8008c24:	680e      	ldr	r6, [r1, #0]
 8008c26:	bf08      	it	eq
 8008c28:	694b      	ldreq	r3, [r1, #20]
 8008c2a:	1bf6      	subs	r6, r6, r7
 8008c2c:	600f      	str	r7, [r1, #0]
 8008c2e:	608b      	str	r3, [r1, #8]
 8008c30:	2e00      	cmp	r6, #0
 8008c32:	dd9f      	ble.n	8008b74 <__sflush_r+0x18>
 8008c34:	4633      	mov	r3, r6
 8008c36:	463a      	mov	r2, r7
 8008c38:	4628      	mov	r0, r5
 8008c3a:	6a21      	ldr	r1, [r4, #32]
 8008c3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008c40:	47e0      	blx	ip
 8008c42:	2800      	cmp	r0, #0
 8008c44:	dc06      	bgt.n	8008c54 <__sflush_r+0xf8>
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	f04f 30ff 	mov.w	r0, #4294967295
 8008c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c50:	81a3      	strh	r3, [r4, #12]
 8008c52:	e790      	b.n	8008b76 <__sflush_r+0x1a>
 8008c54:	4407      	add	r7, r0
 8008c56:	1a36      	subs	r6, r6, r0
 8008c58:	e7ea      	b.n	8008c30 <__sflush_r+0xd4>
 8008c5a:	bf00      	nop
 8008c5c:	20400001 	.word	0x20400001

08008c60 <_fflush_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	690b      	ldr	r3, [r1, #16]
 8008c64:	4605      	mov	r5, r0
 8008c66:	460c      	mov	r4, r1
 8008c68:	b913      	cbnz	r3, 8008c70 <_fflush_r+0x10>
 8008c6a:	2500      	movs	r5, #0
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	b118      	cbz	r0, 8008c7a <_fflush_r+0x1a>
 8008c72:	6983      	ldr	r3, [r0, #24]
 8008c74:	b90b      	cbnz	r3, 8008c7a <_fflush_r+0x1a>
 8008c76:	f7fe feed 	bl	8007a54 <__sinit>
 8008c7a:	4b14      	ldr	r3, [pc, #80]	; (8008ccc <_fflush_r+0x6c>)
 8008c7c:	429c      	cmp	r4, r3
 8008c7e:	d11b      	bne.n	8008cb8 <_fflush_r+0x58>
 8008c80:	686c      	ldr	r4, [r5, #4]
 8008c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d0ef      	beq.n	8008c6a <_fflush_r+0xa>
 8008c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c8c:	07d0      	lsls	r0, r2, #31
 8008c8e:	d404      	bmi.n	8008c9a <_fflush_r+0x3a>
 8008c90:	0599      	lsls	r1, r3, #22
 8008c92:	d402      	bmi.n	8008c9a <_fflush_r+0x3a>
 8008c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c96:	f7fe ffa0 	bl	8007bda <__retarget_lock_acquire_recursive>
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	f7ff ff5d 	bl	8008b5c <__sflush_r>
 8008ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	07da      	lsls	r2, r3, #31
 8008ca8:	d4e0      	bmi.n	8008c6c <_fflush_r+0xc>
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	059b      	lsls	r3, r3, #22
 8008cae:	d4dd      	bmi.n	8008c6c <_fflush_r+0xc>
 8008cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cb2:	f7fe ff93 	bl	8007bdc <__retarget_lock_release_recursive>
 8008cb6:	e7d9      	b.n	8008c6c <_fflush_r+0xc>
 8008cb8:	4b05      	ldr	r3, [pc, #20]	; (8008cd0 <_fflush_r+0x70>)
 8008cba:	429c      	cmp	r4, r3
 8008cbc:	d101      	bne.n	8008cc2 <_fflush_r+0x62>
 8008cbe:	68ac      	ldr	r4, [r5, #8]
 8008cc0:	e7df      	b.n	8008c82 <_fflush_r+0x22>
 8008cc2:	4b04      	ldr	r3, [pc, #16]	; (8008cd4 <_fflush_r+0x74>)
 8008cc4:	429c      	cmp	r4, r3
 8008cc6:	bf08      	it	eq
 8008cc8:	68ec      	ldreq	r4, [r5, #12]
 8008cca:	e7da      	b.n	8008c82 <_fflush_r+0x22>
 8008ccc:	0800bb8c 	.word	0x0800bb8c
 8008cd0:	0800bbac 	.word	0x0800bbac
 8008cd4:	0800bb6c 	.word	0x0800bb6c

08008cd8 <rshift>:
 8008cd8:	6903      	ldr	r3, [r0, #16]
 8008cda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ce2:	f100 0414 	add.w	r4, r0, #20
 8008ce6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008cea:	dd46      	ble.n	8008d7a <rshift+0xa2>
 8008cec:	f011 011f 	ands.w	r1, r1, #31
 8008cf0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008cf4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008cf8:	d10c      	bne.n	8008d14 <rshift+0x3c>
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	f100 0710 	add.w	r7, r0, #16
 8008d00:	42b1      	cmp	r1, r6
 8008d02:	d335      	bcc.n	8008d70 <rshift+0x98>
 8008d04:	1a9b      	subs	r3, r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	1eea      	subs	r2, r5, #3
 8008d0a:	4296      	cmp	r6, r2
 8008d0c:	bf38      	it	cc
 8008d0e:	2300      	movcc	r3, #0
 8008d10:	4423      	add	r3, r4
 8008d12:	e015      	b.n	8008d40 <rshift+0x68>
 8008d14:	46a1      	mov	r9, r4
 8008d16:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d1a:	f1c1 0820 	rsb	r8, r1, #32
 8008d1e:	40cf      	lsrs	r7, r1
 8008d20:	f105 0e04 	add.w	lr, r5, #4
 8008d24:	4576      	cmp	r6, lr
 8008d26:	46f4      	mov	ip, lr
 8008d28:	d816      	bhi.n	8008d58 <rshift+0x80>
 8008d2a:	1a9a      	subs	r2, r3, r2
 8008d2c:	0092      	lsls	r2, r2, #2
 8008d2e:	3a04      	subs	r2, #4
 8008d30:	3501      	adds	r5, #1
 8008d32:	42ae      	cmp	r6, r5
 8008d34:	bf38      	it	cc
 8008d36:	2200      	movcc	r2, #0
 8008d38:	18a3      	adds	r3, r4, r2
 8008d3a:	50a7      	str	r7, [r4, r2]
 8008d3c:	b107      	cbz	r7, 8008d40 <rshift+0x68>
 8008d3e:	3304      	adds	r3, #4
 8008d40:	42a3      	cmp	r3, r4
 8008d42:	eba3 0204 	sub.w	r2, r3, r4
 8008d46:	bf08      	it	eq
 8008d48:	2300      	moveq	r3, #0
 8008d4a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d4e:	6102      	str	r2, [r0, #16]
 8008d50:	bf08      	it	eq
 8008d52:	6143      	streq	r3, [r0, #20]
 8008d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d58:	f8dc c000 	ldr.w	ip, [ip]
 8008d5c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d60:	ea4c 0707 	orr.w	r7, ip, r7
 8008d64:	f849 7b04 	str.w	r7, [r9], #4
 8008d68:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d6c:	40cf      	lsrs	r7, r1
 8008d6e:	e7d9      	b.n	8008d24 <rshift+0x4c>
 8008d70:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d74:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d78:	e7c2      	b.n	8008d00 <rshift+0x28>
 8008d7a:	4623      	mov	r3, r4
 8008d7c:	e7e0      	b.n	8008d40 <rshift+0x68>

08008d7e <__hexdig_fun>:
 8008d7e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008d82:	2b09      	cmp	r3, #9
 8008d84:	d802      	bhi.n	8008d8c <__hexdig_fun+0xe>
 8008d86:	3820      	subs	r0, #32
 8008d88:	b2c0      	uxtb	r0, r0
 8008d8a:	4770      	bx	lr
 8008d8c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008d90:	2b05      	cmp	r3, #5
 8008d92:	d801      	bhi.n	8008d98 <__hexdig_fun+0x1a>
 8008d94:	3847      	subs	r0, #71	; 0x47
 8008d96:	e7f7      	b.n	8008d88 <__hexdig_fun+0xa>
 8008d98:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008d9c:	2b05      	cmp	r3, #5
 8008d9e:	d801      	bhi.n	8008da4 <__hexdig_fun+0x26>
 8008da0:	3827      	subs	r0, #39	; 0x27
 8008da2:	e7f1      	b.n	8008d88 <__hexdig_fun+0xa>
 8008da4:	2000      	movs	r0, #0
 8008da6:	4770      	bx	lr

08008da8 <__gethex>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	b08b      	sub	sp, #44	; 0x2c
 8008dae:	9305      	str	r3, [sp, #20]
 8008db0:	4bb2      	ldr	r3, [pc, #712]	; (800907c <__gethex+0x2d4>)
 8008db2:	9002      	str	r0, [sp, #8]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	468b      	mov	fp, r1
 8008db8:	4618      	mov	r0, r3
 8008dba:	4690      	mov	r8, r2
 8008dbc:	9303      	str	r3, [sp, #12]
 8008dbe:	f7f7 fa37 	bl	8000230 <strlen>
 8008dc2:	4682      	mov	sl, r0
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	f8db 2000 	ldr.w	r2, [fp]
 8008dca:	4403      	add	r3, r0
 8008dcc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008dd0:	9306      	str	r3, [sp, #24]
 8008dd2:	1c93      	adds	r3, r2, #2
 8008dd4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008dd8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008ddc:	32fe      	adds	r2, #254	; 0xfe
 8008dde:	18d1      	adds	r1, r2, r3
 8008de0:	461f      	mov	r7, r3
 8008de2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008de6:	9101      	str	r1, [sp, #4]
 8008de8:	2830      	cmp	r0, #48	; 0x30
 8008dea:	d0f8      	beq.n	8008dde <__gethex+0x36>
 8008dec:	f7ff ffc7 	bl	8008d7e <__hexdig_fun>
 8008df0:	4604      	mov	r4, r0
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d13a      	bne.n	8008e6c <__gethex+0xc4>
 8008df6:	4652      	mov	r2, sl
 8008df8:	4638      	mov	r0, r7
 8008dfa:	9903      	ldr	r1, [sp, #12]
 8008dfc:	f001 fb20 	bl	800a440 <strncmp>
 8008e00:	4605      	mov	r5, r0
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d166      	bne.n	8008ed4 <__gethex+0x12c>
 8008e06:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008e0a:	eb07 060a 	add.w	r6, r7, sl
 8008e0e:	f7ff ffb6 	bl	8008d7e <__hexdig_fun>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d060      	beq.n	8008ed8 <__gethex+0x130>
 8008e16:	4633      	mov	r3, r6
 8008e18:	7818      	ldrb	r0, [r3, #0]
 8008e1a:	461f      	mov	r7, r3
 8008e1c:	2830      	cmp	r0, #48	; 0x30
 8008e1e:	f103 0301 	add.w	r3, r3, #1
 8008e22:	d0f9      	beq.n	8008e18 <__gethex+0x70>
 8008e24:	f7ff ffab 	bl	8008d7e <__hexdig_fun>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	fab0 f480 	clz	r4, r0
 8008e2e:	4635      	mov	r5, r6
 8008e30:	0964      	lsrs	r4, r4, #5
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	463a      	mov	r2, r7
 8008e36:	4616      	mov	r6, r2
 8008e38:	7830      	ldrb	r0, [r6, #0]
 8008e3a:	3201      	adds	r2, #1
 8008e3c:	f7ff ff9f 	bl	8008d7e <__hexdig_fun>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d1f8      	bne.n	8008e36 <__gethex+0x8e>
 8008e44:	4652      	mov	r2, sl
 8008e46:	4630      	mov	r0, r6
 8008e48:	9903      	ldr	r1, [sp, #12]
 8008e4a:	f001 faf9 	bl	800a440 <strncmp>
 8008e4e:	b980      	cbnz	r0, 8008e72 <__gethex+0xca>
 8008e50:	b94d      	cbnz	r5, 8008e66 <__gethex+0xbe>
 8008e52:	eb06 050a 	add.w	r5, r6, sl
 8008e56:	462a      	mov	r2, r5
 8008e58:	4616      	mov	r6, r2
 8008e5a:	7830      	ldrb	r0, [r6, #0]
 8008e5c:	3201      	adds	r2, #1
 8008e5e:	f7ff ff8e 	bl	8008d7e <__hexdig_fun>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	d1f8      	bne.n	8008e58 <__gethex+0xb0>
 8008e66:	1bad      	subs	r5, r5, r6
 8008e68:	00ad      	lsls	r5, r5, #2
 8008e6a:	e004      	b.n	8008e76 <__gethex+0xce>
 8008e6c:	2400      	movs	r4, #0
 8008e6e:	4625      	mov	r5, r4
 8008e70:	e7e0      	b.n	8008e34 <__gethex+0x8c>
 8008e72:	2d00      	cmp	r5, #0
 8008e74:	d1f7      	bne.n	8008e66 <__gethex+0xbe>
 8008e76:	7833      	ldrb	r3, [r6, #0]
 8008e78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e7c:	2b50      	cmp	r3, #80	; 0x50
 8008e7e:	d139      	bne.n	8008ef4 <__gethex+0x14c>
 8008e80:	7873      	ldrb	r3, [r6, #1]
 8008e82:	2b2b      	cmp	r3, #43	; 0x2b
 8008e84:	d02a      	beq.n	8008edc <__gethex+0x134>
 8008e86:	2b2d      	cmp	r3, #45	; 0x2d
 8008e88:	d02c      	beq.n	8008ee4 <__gethex+0x13c>
 8008e8a:	f04f 0900 	mov.w	r9, #0
 8008e8e:	1c71      	adds	r1, r6, #1
 8008e90:	7808      	ldrb	r0, [r1, #0]
 8008e92:	f7ff ff74 	bl	8008d7e <__hexdig_fun>
 8008e96:	1e43      	subs	r3, r0, #1
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b18      	cmp	r3, #24
 8008e9c:	d82a      	bhi.n	8008ef4 <__gethex+0x14c>
 8008e9e:	f1a0 0210 	sub.w	r2, r0, #16
 8008ea2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ea6:	f7ff ff6a 	bl	8008d7e <__hexdig_fun>
 8008eaa:	1e43      	subs	r3, r0, #1
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2b18      	cmp	r3, #24
 8008eb0:	d91b      	bls.n	8008eea <__gethex+0x142>
 8008eb2:	f1b9 0f00 	cmp.w	r9, #0
 8008eb6:	d000      	beq.n	8008eba <__gethex+0x112>
 8008eb8:	4252      	negs	r2, r2
 8008eba:	4415      	add	r5, r2
 8008ebc:	f8cb 1000 	str.w	r1, [fp]
 8008ec0:	b1d4      	cbz	r4, 8008ef8 <__gethex+0x150>
 8008ec2:	9b01      	ldr	r3, [sp, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bf14      	ite	ne
 8008ec8:	2700      	movne	r7, #0
 8008eca:	2706      	moveq	r7, #6
 8008ecc:	4638      	mov	r0, r7
 8008ece:	b00b      	add	sp, #44	; 0x2c
 8008ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed4:	463e      	mov	r6, r7
 8008ed6:	4625      	mov	r5, r4
 8008ed8:	2401      	movs	r4, #1
 8008eda:	e7cc      	b.n	8008e76 <__gethex+0xce>
 8008edc:	f04f 0900 	mov.w	r9, #0
 8008ee0:	1cb1      	adds	r1, r6, #2
 8008ee2:	e7d5      	b.n	8008e90 <__gethex+0xe8>
 8008ee4:	f04f 0901 	mov.w	r9, #1
 8008ee8:	e7fa      	b.n	8008ee0 <__gethex+0x138>
 8008eea:	230a      	movs	r3, #10
 8008eec:	fb03 0202 	mla	r2, r3, r2, r0
 8008ef0:	3a10      	subs	r2, #16
 8008ef2:	e7d6      	b.n	8008ea2 <__gethex+0xfa>
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	e7e1      	b.n	8008ebc <__gethex+0x114>
 8008ef8:	4621      	mov	r1, r4
 8008efa:	1bf3      	subs	r3, r6, r7
 8008efc:	3b01      	subs	r3, #1
 8008efe:	2b07      	cmp	r3, #7
 8008f00:	dc0a      	bgt.n	8008f18 <__gethex+0x170>
 8008f02:	9802      	ldr	r0, [sp, #8]
 8008f04:	f000 fa7e 	bl	8009404 <_Balloc>
 8008f08:	4604      	mov	r4, r0
 8008f0a:	b940      	cbnz	r0, 8008f1e <__gethex+0x176>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	21de      	movs	r1, #222	; 0xde
 8008f10:	4b5b      	ldr	r3, [pc, #364]	; (8009080 <__gethex+0x2d8>)
 8008f12:	485c      	ldr	r0, [pc, #368]	; (8009084 <__gethex+0x2dc>)
 8008f14:	f001 fab6 	bl	800a484 <__assert_func>
 8008f18:	3101      	adds	r1, #1
 8008f1a:	105b      	asrs	r3, r3, #1
 8008f1c:	e7ef      	b.n	8008efe <__gethex+0x156>
 8008f1e:	f04f 0b00 	mov.w	fp, #0
 8008f22:	f100 0914 	add.w	r9, r0, #20
 8008f26:	f1ca 0301 	rsb	r3, sl, #1
 8008f2a:	f8cd 9010 	str.w	r9, [sp, #16]
 8008f2e:	f8cd b004 	str.w	fp, [sp, #4]
 8008f32:	9308      	str	r3, [sp, #32]
 8008f34:	42b7      	cmp	r7, r6
 8008f36:	d33f      	bcc.n	8008fb8 <__gethex+0x210>
 8008f38:	9f04      	ldr	r7, [sp, #16]
 8008f3a:	9b01      	ldr	r3, [sp, #4]
 8008f3c:	f847 3b04 	str.w	r3, [r7], #4
 8008f40:	eba7 0709 	sub.w	r7, r7, r9
 8008f44:	10bf      	asrs	r7, r7, #2
 8008f46:	6127      	str	r7, [r4, #16]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 fb4d 	bl	80095e8 <__hi0bits>
 8008f4e:	017f      	lsls	r7, r7, #5
 8008f50:	f8d8 6000 	ldr.w	r6, [r8]
 8008f54:	1a3f      	subs	r7, r7, r0
 8008f56:	42b7      	cmp	r7, r6
 8008f58:	dd62      	ble.n	8009020 <__gethex+0x278>
 8008f5a:	1bbf      	subs	r7, r7, r6
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f000 fee7 	bl	8009d32 <__any_on>
 8008f64:	4682      	mov	sl, r0
 8008f66:	b1a8      	cbz	r0, 8008f94 <__gethex+0x1ec>
 8008f68:	f04f 0a01 	mov.w	sl, #1
 8008f6c:	1e7b      	subs	r3, r7, #1
 8008f6e:	1159      	asrs	r1, r3, #5
 8008f70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008f74:	f003 021f 	and.w	r2, r3, #31
 8008f78:	fa0a f202 	lsl.w	r2, sl, r2
 8008f7c:	420a      	tst	r2, r1
 8008f7e:	d009      	beq.n	8008f94 <__gethex+0x1ec>
 8008f80:	4553      	cmp	r3, sl
 8008f82:	dd05      	ble.n	8008f90 <__gethex+0x1e8>
 8008f84:	4620      	mov	r0, r4
 8008f86:	1eb9      	subs	r1, r7, #2
 8008f88:	f000 fed3 	bl	8009d32 <__any_on>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d144      	bne.n	800901a <__gethex+0x272>
 8008f90:	f04f 0a02 	mov.w	sl, #2
 8008f94:	4639      	mov	r1, r7
 8008f96:	4620      	mov	r0, r4
 8008f98:	f7ff fe9e 	bl	8008cd8 <rshift>
 8008f9c:	443d      	add	r5, r7
 8008f9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fa2:	42ab      	cmp	r3, r5
 8008fa4:	da4a      	bge.n	800903c <__gethex+0x294>
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	9802      	ldr	r0, [sp, #8]
 8008faa:	f000 fa6b 	bl	8009484 <_Bfree>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fb2:	27a3      	movs	r7, #163	; 0xa3
 8008fb4:	6013      	str	r3, [r2, #0]
 8008fb6:	e789      	b.n	8008ecc <__gethex+0x124>
 8008fb8:	1e73      	subs	r3, r6, #1
 8008fba:	9a06      	ldr	r2, [sp, #24]
 8008fbc:	9307      	str	r3, [sp, #28]
 8008fbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d019      	beq.n	8008ffa <__gethex+0x252>
 8008fc6:	f1bb 0f20 	cmp.w	fp, #32
 8008fca:	d107      	bne.n	8008fdc <__gethex+0x234>
 8008fcc:	9b04      	ldr	r3, [sp, #16]
 8008fce:	9a01      	ldr	r2, [sp, #4]
 8008fd0:	f843 2b04 	str.w	r2, [r3], #4
 8008fd4:	9304      	str	r3, [sp, #16]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	469b      	mov	fp, r3
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008fe0:	f7ff fecd 	bl	8008d7e <__hexdig_fun>
 8008fe4:	9b01      	ldr	r3, [sp, #4]
 8008fe6:	f000 000f 	and.w	r0, r0, #15
 8008fea:	fa00 f00b 	lsl.w	r0, r0, fp
 8008fee:	4303      	orrs	r3, r0
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	f10b 0b04 	add.w	fp, fp, #4
 8008ff6:	9b07      	ldr	r3, [sp, #28]
 8008ff8:	e00d      	b.n	8009016 <__gethex+0x26e>
 8008ffa:	9a08      	ldr	r2, [sp, #32]
 8008ffc:	1e73      	subs	r3, r6, #1
 8008ffe:	4413      	add	r3, r2
 8009000:	42bb      	cmp	r3, r7
 8009002:	d3e0      	bcc.n	8008fc6 <__gethex+0x21e>
 8009004:	4618      	mov	r0, r3
 8009006:	4652      	mov	r2, sl
 8009008:	9903      	ldr	r1, [sp, #12]
 800900a:	9309      	str	r3, [sp, #36]	; 0x24
 800900c:	f001 fa18 	bl	800a440 <strncmp>
 8009010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009012:	2800      	cmp	r0, #0
 8009014:	d1d7      	bne.n	8008fc6 <__gethex+0x21e>
 8009016:	461e      	mov	r6, r3
 8009018:	e78c      	b.n	8008f34 <__gethex+0x18c>
 800901a:	f04f 0a03 	mov.w	sl, #3
 800901e:	e7b9      	b.n	8008f94 <__gethex+0x1ec>
 8009020:	da09      	bge.n	8009036 <__gethex+0x28e>
 8009022:	1bf7      	subs	r7, r6, r7
 8009024:	4621      	mov	r1, r4
 8009026:	463a      	mov	r2, r7
 8009028:	9802      	ldr	r0, [sp, #8]
 800902a:	f000 fc43 	bl	80098b4 <__lshift>
 800902e:	4604      	mov	r4, r0
 8009030:	1bed      	subs	r5, r5, r7
 8009032:	f100 0914 	add.w	r9, r0, #20
 8009036:	f04f 0a00 	mov.w	sl, #0
 800903a:	e7b0      	b.n	8008f9e <__gethex+0x1f6>
 800903c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009040:	42a8      	cmp	r0, r5
 8009042:	dd72      	ble.n	800912a <__gethex+0x382>
 8009044:	1b45      	subs	r5, r0, r5
 8009046:	42ae      	cmp	r6, r5
 8009048:	dc35      	bgt.n	80090b6 <__gethex+0x30e>
 800904a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800904e:	2b02      	cmp	r3, #2
 8009050:	d029      	beq.n	80090a6 <__gethex+0x2fe>
 8009052:	2b03      	cmp	r3, #3
 8009054:	d02b      	beq.n	80090ae <__gethex+0x306>
 8009056:	2b01      	cmp	r3, #1
 8009058:	d11c      	bne.n	8009094 <__gethex+0x2ec>
 800905a:	42ae      	cmp	r6, r5
 800905c:	d11a      	bne.n	8009094 <__gethex+0x2ec>
 800905e:	2e01      	cmp	r6, #1
 8009060:	d112      	bne.n	8009088 <__gethex+0x2e0>
 8009062:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009066:	9a05      	ldr	r2, [sp, #20]
 8009068:	2762      	movs	r7, #98	; 0x62
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	2301      	movs	r3, #1
 800906e:	6123      	str	r3, [r4, #16]
 8009070:	f8c9 3000 	str.w	r3, [r9]
 8009074:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009076:	601c      	str	r4, [r3, #0]
 8009078:	e728      	b.n	8008ecc <__gethex+0x124>
 800907a:	bf00      	nop
 800907c:	0800bca8 	.word	0x0800bca8
 8009080:	0800bc30 	.word	0x0800bc30
 8009084:	0800bc41 	.word	0x0800bc41
 8009088:	4620      	mov	r0, r4
 800908a:	1e71      	subs	r1, r6, #1
 800908c:	f000 fe51 	bl	8009d32 <__any_on>
 8009090:	2800      	cmp	r0, #0
 8009092:	d1e6      	bne.n	8009062 <__gethex+0x2ba>
 8009094:	4621      	mov	r1, r4
 8009096:	9802      	ldr	r0, [sp, #8]
 8009098:	f000 f9f4 	bl	8009484 <_Bfree>
 800909c:	2300      	movs	r3, #0
 800909e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090a0:	2750      	movs	r7, #80	; 0x50
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	e712      	b.n	8008ecc <__gethex+0x124>
 80090a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1f3      	bne.n	8009094 <__gethex+0x2ec>
 80090ac:	e7d9      	b.n	8009062 <__gethex+0x2ba>
 80090ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1d6      	bne.n	8009062 <__gethex+0x2ba>
 80090b4:	e7ee      	b.n	8009094 <__gethex+0x2ec>
 80090b6:	1e6f      	subs	r7, r5, #1
 80090b8:	f1ba 0f00 	cmp.w	sl, #0
 80090bc:	d132      	bne.n	8009124 <__gethex+0x37c>
 80090be:	b127      	cbz	r7, 80090ca <__gethex+0x322>
 80090c0:	4639      	mov	r1, r7
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 fe35 	bl	8009d32 <__any_on>
 80090c8:	4682      	mov	sl, r0
 80090ca:	2101      	movs	r1, #1
 80090cc:	117b      	asrs	r3, r7, #5
 80090ce:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80090d2:	f007 071f 	and.w	r7, r7, #31
 80090d6:	fa01 f707 	lsl.w	r7, r1, r7
 80090da:	421f      	tst	r7, r3
 80090dc:	f04f 0702 	mov.w	r7, #2
 80090e0:	4629      	mov	r1, r5
 80090e2:	4620      	mov	r0, r4
 80090e4:	bf18      	it	ne
 80090e6:	f04a 0a02 	orrne.w	sl, sl, #2
 80090ea:	1b76      	subs	r6, r6, r5
 80090ec:	f7ff fdf4 	bl	8008cd8 <rshift>
 80090f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80090f4:	f1ba 0f00 	cmp.w	sl, #0
 80090f8:	d048      	beq.n	800918c <__gethex+0x3e4>
 80090fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d015      	beq.n	800912e <__gethex+0x386>
 8009102:	2b03      	cmp	r3, #3
 8009104:	d017      	beq.n	8009136 <__gethex+0x38e>
 8009106:	2b01      	cmp	r3, #1
 8009108:	d109      	bne.n	800911e <__gethex+0x376>
 800910a:	f01a 0f02 	tst.w	sl, #2
 800910e:	d006      	beq.n	800911e <__gethex+0x376>
 8009110:	f8d9 0000 	ldr.w	r0, [r9]
 8009114:	ea4a 0a00 	orr.w	sl, sl, r0
 8009118:	f01a 0f01 	tst.w	sl, #1
 800911c:	d10e      	bne.n	800913c <__gethex+0x394>
 800911e:	f047 0710 	orr.w	r7, r7, #16
 8009122:	e033      	b.n	800918c <__gethex+0x3e4>
 8009124:	f04f 0a01 	mov.w	sl, #1
 8009128:	e7cf      	b.n	80090ca <__gethex+0x322>
 800912a:	2701      	movs	r7, #1
 800912c:	e7e2      	b.n	80090f4 <__gethex+0x34c>
 800912e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009130:	f1c3 0301 	rsb	r3, r3, #1
 8009134:	9315      	str	r3, [sp, #84]	; 0x54
 8009136:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009138:	2b00      	cmp	r3, #0
 800913a:	d0f0      	beq.n	800911e <__gethex+0x376>
 800913c:	f04f 0c00 	mov.w	ip, #0
 8009140:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009144:	f104 0314 	add.w	r3, r4, #20
 8009148:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800914c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009150:	4618      	mov	r0, r3
 8009152:	f853 2b04 	ldr.w	r2, [r3], #4
 8009156:	f1b2 3fff 	cmp.w	r2, #4294967295
 800915a:	d01c      	beq.n	8009196 <__gethex+0x3ee>
 800915c:	3201      	adds	r2, #1
 800915e:	6002      	str	r2, [r0, #0]
 8009160:	2f02      	cmp	r7, #2
 8009162:	f104 0314 	add.w	r3, r4, #20
 8009166:	d13d      	bne.n	80091e4 <__gethex+0x43c>
 8009168:	f8d8 2000 	ldr.w	r2, [r8]
 800916c:	3a01      	subs	r2, #1
 800916e:	42b2      	cmp	r2, r6
 8009170:	d10a      	bne.n	8009188 <__gethex+0x3e0>
 8009172:	2201      	movs	r2, #1
 8009174:	1171      	asrs	r1, r6, #5
 8009176:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800917a:	f006 061f 	and.w	r6, r6, #31
 800917e:	fa02 f606 	lsl.w	r6, r2, r6
 8009182:	421e      	tst	r6, r3
 8009184:	bf18      	it	ne
 8009186:	4617      	movne	r7, r2
 8009188:	f047 0720 	orr.w	r7, r7, #32
 800918c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800918e:	601c      	str	r4, [r3, #0]
 8009190:	9b05      	ldr	r3, [sp, #20]
 8009192:	601d      	str	r5, [r3, #0]
 8009194:	e69a      	b.n	8008ecc <__gethex+0x124>
 8009196:	4299      	cmp	r1, r3
 8009198:	f843 cc04 	str.w	ip, [r3, #-4]
 800919c:	d8d8      	bhi.n	8009150 <__gethex+0x3a8>
 800919e:	68a3      	ldr	r3, [r4, #8]
 80091a0:	459b      	cmp	fp, r3
 80091a2:	db17      	blt.n	80091d4 <__gethex+0x42c>
 80091a4:	6861      	ldr	r1, [r4, #4]
 80091a6:	9802      	ldr	r0, [sp, #8]
 80091a8:	3101      	adds	r1, #1
 80091aa:	f000 f92b 	bl	8009404 <_Balloc>
 80091ae:	4681      	mov	r9, r0
 80091b0:	b918      	cbnz	r0, 80091ba <__gethex+0x412>
 80091b2:	4602      	mov	r2, r0
 80091b4:	2184      	movs	r1, #132	; 0x84
 80091b6:	4b19      	ldr	r3, [pc, #100]	; (800921c <__gethex+0x474>)
 80091b8:	e6ab      	b.n	8008f12 <__gethex+0x16a>
 80091ba:	6922      	ldr	r2, [r4, #16]
 80091bc:	f104 010c 	add.w	r1, r4, #12
 80091c0:	3202      	adds	r2, #2
 80091c2:	0092      	lsls	r2, r2, #2
 80091c4:	300c      	adds	r0, #12
 80091c6:	f7fe fd0a 	bl	8007bde <memcpy>
 80091ca:	4621      	mov	r1, r4
 80091cc:	9802      	ldr	r0, [sp, #8]
 80091ce:	f000 f959 	bl	8009484 <_Bfree>
 80091d2:	464c      	mov	r4, r9
 80091d4:	6923      	ldr	r3, [r4, #16]
 80091d6:	1c5a      	adds	r2, r3, #1
 80091d8:	6122      	str	r2, [r4, #16]
 80091da:	2201      	movs	r2, #1
 80091dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091e0:	615a      	str	r2, [r3, #20]
 80091e2:	e7bd      	b.n	8009160 <__gethex+0x3b8>
 80091e4:	6922      	ldr	r2, [r4, #16]
 80091e6:	455a      	cmp	r2, fp
 80091e8:	dd0b      	ble.n	8009202 <__gethex+0x45a>
 80091ea:	2101      	movs	r1, #1
 80091ec:	4620      	mov	r0, r4
 80091ee:	f7ff fd73 	bl	8008cd8 <rshift>
 80091f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091f6:	3501      	adds	r5, #1
 80091f8:	42ab      	cmp	r3, r5
 80091fa:	f6ff aed4 	blt.w	8008fa6 <__gethex+0x1fe>
 80091fe:	2701      	movs	r7, #1
 8009200:	e7c2      	b.n	8009188 <__gethex+0x3e0>
 8009202:	f016 061f 	ands.w	r6, r6, #31
 8009206:	d0fa      	beq.n	80091fe <__gethex+0x456>
 8009208:	4453      	add	r3, sl
 800920a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800920e:	f000 f9eb 	bl	80095e8 <__hi0bits>
 8009212:	f1c6 0620 	rsb	r6, r6, #32
 8009216:	42b0      	cmp	r0, r6
 8009218:	dbe7      	blt.n	80091ea <__gethex+0x442>
 800921a:	e7f0      	b.n	80091fe <__gethex+0x456>
 800921c:	0800bc30 	.word	0x0800bc30

08009220 <L_shift>:
 8009220:	f1c2 0208 	rsb	r2, r2, #8
 8009224:	0092      	lsls	r2, r2, #2
 8009226:	b570      	push	{r4, r5, r6, lr}
 8009228:	f1c2 0620 	rsb	r6, r2, #32
 800922c:	6843      	ldr	r3, [r0, #4]
 800922e:	6804      	ldr	r4, [r0, #0]
 8009230:	fa03 f506 	lsl.w	r5, r3, r6
 8009234:	432c      	orrs	r4, r5
 8009236:	40d3      	lsrs	r3, r2
 8009238:	6004      	str	r4, [r0, #0]
 800923a:	f840 3f04 	str.w	r3, [r0, #4]!
 800923e:	4288      	cmp	r0, r1
 8009240:	d3f4      	bcc.n	800922c <L_shift+0xc>
 8009242:	bd70      	pop	{r4, r5, r6, pc}

08009244 <__match>:
 8009244:	b530      	push	{r4, r5, lr}
 8009246:	6803      	ldr	r3, [r0, #0]
 8009248:	3301      	adds	r3, #1
 800924a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800924e:	b914      	cbnz	r4, 8009256 <__match+0x12>
 8009250:	6003      	str	r3, [r0, #0]
 8009252:	2001      	movs	r0, #1
 8009254:	bd30      	pop	{r4, r5, pc}
 8009256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800925a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800925e:	2d19      	cmp	r5, #25
 8009260:	bf98      	it	ls
 8009262:	3220      	addls	r2, #32
 8009264:	42a2      	cmp	r2, r4
 8009266:	d0f0      	beq.n	800924a <__match+0x6>
 8009268:	2000      	movs	r0, #0
 800926a:	e7f3      	b.n	8009254 <__match+0x10>

0800926c <__hexnan>:
 800926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009270:	2500      	movs	r5, #0
 8009272:	680b      	ldr	r3, [r1, #0]
 8009274:	4682      	mov	sl, r0
 8009276:	115e      	asrs	r6, r3, #5
 8009278:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800927c:	f013 031f 	ands.w	r3, r3, #31
 8009280:	bf18      	it	ne
 8009282:	3604      	addne	r6, #4
 8009284:	1f37      	subs	r7, r6, #4
 8009286:	46b9      	mov	r9, r7
 8009288:	463c      	mov	r4, r7
 800928a:	46ab      	mov	fp, r5
 800928c:	b087      	sub	sp, #28
 800928e:	4690      	mov	r8, r2
 8009290:	6802      	ldr	r2, [r0, #0]
 8009292:	9301      	str	r3, [sp, #4]
 8009294:	f846 5c04 	str.w	r5, [r6, #-4]
 8009298:	9502      	str	r5, [sp, #8]
 800929a:	7851      	ldrb	r1, [r2, #1]
 800929c:	1c53      	adds	r3, r2, #1
 800929e:	9303      	str	r3, [sp, #12]
 80092a0:	b341      	cbz	r1, 80092f4 <__hexnan+0x88>
 80092a2:	4608      	mov	r0, r1
 80092a4:	9205      	str	r2, [sp, #20]
 80092a6:	9104      	str	r1, [sp, #16]
 80092a8:	f7ff fd69 	bl	8008d7e <__hexdig_fun>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d14f      	bne.n	8009350 <__hexnan+0xe4>
 80092b0:	9904      	ldr	r1, [sp, #16]
 80092b2:	9a05      	ldr	r2, [sp, #20]
 80092b4:	2920      	cmp	r1, #32
 80092b6:	d818      	bhi.n	80092ea <__hexnan+0x7e>
 80092b8:	9b02      	ldr	r3, [sp, #8]
 80092ba:	459b      	cmp	fp, r3
 80092bc:	dd13      	ble.n	80092e6 <__hexnan+0x7a>
 80092be:	454c      	cmp	r4, r9
 80092c0:	d206      	bcs.n	80092d0 <__hexnan+0x64>
 80092c2:	2d07      	cmp	r5, #7
 80092c4:	dc04      	bgt.n	80092d0 <__hexnan+0x64>
 80092c6:	462a      	mov	r2, r5
 80092c8:	4649      	mov	r1, r9
 80092ca:	4620      	mov	r0, r4
 80092cc:	f7ff ffa8 	bl	8009220 <L_shift>
 80092d0:	4544      	cmp	r4, r8
 80092d2:	d950      	bls.n	8009376 <__hexnan+0x10a>
 80092d4:	2300      	movs	r3, #0
 80092d6:	f1a4 0904 	sub.w	r9, r4, #4
 80092da:	f844 3c04 	str.w	r3, [r4, #-4]
 80092de:	461d      	mov	r5, r3
 80092e0:	464c      	mov	r4, r9
 80092e2:	f8cd b008 	str.w	fp, [sp, #8]
 80092e6:	9a03      	ldr	r2, [sp, #12]
 80092e8:	e7d7      	b.n	800929a <__hexnan+0x2e>
 80092ea:	2929      	cmp	r1, #41	; 0x29
 80092ec:	d156      	bne.n	800939c <__hexnan+0x130>
 80092ee:	3202      	adds	r2, #2
 80092f0:	f8ca 2000 	str.w	r2, [sl]
 80092f4:	f1bb 0f00 	cmp.w	fp, #0
 80092f8:	d050      	beq.n	800939c <__hexnan+0x130>
 80092fa:	454c      	cmp	r4, r9
 80092fc:	d206      	bcs.n	800930c <__hexnan+0xa0>
 80092fe:	2d07      	cmp	r5, #7
 8009300:	dc04      	bgt.n	800930c <__hexnan+0xa0>
 8009302:	462a      	mov	r2, r5
 8009304:	4649      	mov	r1, r9
 8009306:	4620      	mov	r0, r4
 8009308:	f7ff ff8a 	bl	8009220 <L_shift>
 800930c:	4544      	cmp	r4, r8
 800930e:	d934      	bls.n	800937a <__hexnan+0x10e>
 8009310:	4623      	mov	r3, r4
 8009312:	f1a8 0204 	sub.w	r2, r8, #4
 8009316:	f853 1b04 	ldr.w	r1, [r3], #4
 800931a:	429f      	cmp	r7, r3
 800931c:	f842 1f04 	str.w	r1, [r2, #4]!
 8009320:	d2f9      	bcs.n	8009316 <__hexnan+0xaa>
 8009322:	1b3b      	subs	r3, r7, r4
 8009324:	f023 0303 	bic.w	r3, r3, #3
 8009328:	3304      	adds	r3, #4
 800932a:	3401      	adds	r4, #1
 800932c:	3e03      	subs	r6, #3
 800932e:	42b4      	cmp	r4, r6
 8009330:	bf88      	it	hi
 8009332:	2304      	movhi	r3, #4
 8009334:	2200      	movs	r2, #0
 8009336:	4443      	add	r3, r8
 8009338:	f843 2b04 	str.w	r2, [r3], #4
 800933c:	429f      	cmp	r7, r3
 800933e:	d2fb      	bcs.n	8009338 <__hexnan+0xcc>
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	b91b      	cbnz	r3, 800934c <__hexnan+0xe0>
 8009344:	4547      	cmp	r7, r8
 8009346:	d127      	bne.n	8009398 <__hexnan+0x12c>
 8009348:	2301      	movs	r3, #1
 800934a:	603b      	str	r3, [r7, #0]
 800934c:	2005      	movs	r0, #5
 800934e:	e026      	b.n	800939e <__hexnan+0x132>
 8009350:	3501      	adds	r5, #1
 8009352:	2d08      	cmp	r5, #8
 8009354:	f10b 0b01 	add.w	fp, fp, #1
 8009358:	dd06      	ble.n	8009368 <__hexnan+0xfc>
 800935a:	4544      	cmp	r4, r8
 800935c:	d9c3      	bls.n	80092e6 <__hexnan+0x7a>
 800935e:	2300      	movs	r3, #0
 8009360:	2501      	movs	r5, #1
 8009362:	f844 3c04 	str.w	r3, [r4, #-4]
 8009366:	3c04      	subs	r4, #4
 8009368:	6822      	ldr	r2, [r4, #0]
 800936a:	f000 000f 	and.w	r0, r0, #15
 800936e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009372:	6022      	str	r2, [r4, #0]
 8009374:	e7b7      	b.n	80092e6 <__hexnan+0x7a>
 8009376:	2508      	movs	r5, #8
 8009378:	e7b5      	b.n	80092e6 <__hexnan+0x7a>
 800937a:	9b01      	ldr	r3, [sp, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0df      	beq.n	8009340 <__hexnan+0xd4>
 8009380:	f04f 32ff 	mov.w	r2, #4294967295
 8009384:	f1c3 0320 	rsb	r3, r3, #32
 8009388:	fa22 f303 	lsr.w	r3, r2, r3
 800938c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009390:	401a      	ands	r2, r3
 8009392:	f846 2c04 	str.w	r2, [r6, #-4]
 8009396:	e7d3      	b.n	8009340 <__hexnan+0xd4>
 8009398:	3f04      	subs	r7, #4
 800939a:	e7d1      	b.n	8009340 <__hexnan+0xd4>
 800939c:	2004      	movs	r0, #4
 800939e:	b007      	add	sp, #28
 80093a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093a4 <_lseek_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4604      	mov	r4, r0
 80093a8:	4608      	mov	r0, r1
 80093aa:	4611      	mov	r1, r2
 80093ac:	2200      	movs	r2, #0
 80093ae:	4d05      	ldr	r5, [pc, #20]	; (80093c4 <_lseek_r+0x20>)
 80093b0:	602a      	str	r2, [r5, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	f7f9 fcde 	bl	8002d74 <_lseek>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d102      	bne.n	80093c2 <_lseek_r+0x1e>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	b103      	cbz	r3, 80093c2 <_lseek_r+0x1e>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	20001e74 	.word	0x20001e74

080093c8 <__ascii_mbtowc>:
 80093c8:	b082      	sub	sp, #8
 80093ca:	b901      	cbnz	r1, 80093ce <__ascii_mbtowc+0x6>
 80093cc:	a901      	add	r1, sp, #4
 80093ce:	b142      	cbz	r2, 80093e2 <__ascii_mbtowc+0x1a>
 80093d0:	b14b      	cbz	r3, 80093e6 <__ascii_mbtowc+0x1e>
 80093d2:	7813      	ldrb	r3, [r2, #0]
 80093d4:	600b      	str	r3, [r1, #0]
 80093d6:	7812      	ldrb	r2, [r2, #0]
 80093d8:	1e10      	subs	r0, r2, #0
 80093da:	bf18      	it	ne
 80093dc:	2001      	movne	r0, #1
 80093de:	b002      	add	sp, #8
 80093e0:	4770      	bx	lr
 80093e2:	4610      	mov	r0, r2
 80093e4:	e7fb      	b.n	80093de <__ascii_mbtowc+0x16>
 80093e6:	f06f 0001 	mvn.w	r0, #1
 80093ea:	e7f8      	b.n	80093de <__ascii_mbtowc+0x16>

080093ec <__malloc_lock>:
 80093ec:	4801      	ldr	r0, [pc, #4]	; (80093f4 <__malloc_lock+0x8>)
 80093ee:	f7fe bbf4 	b.w	8007bda <__retarget_lock_acquire_recursive>
 80093f2:	bf00      	nop
 80093f4:	20001e68 	.word	0x20001e68

080093f8 <__malloc_unlock>:
 80093f8:	4801      	ldr	r0, [pc, #4]	; (8009400 <__malloc_unlock+0x8>)
 80093fa:	f7fe bbef 	b.w	8007bdc <__retarget_lock_release_recursive>
 80093fe:	bf00      	nop
 8009400:	20001e68 	.word	0x20001e68

08009404 <_Balloc>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009408:	4604      	mov	r4, r0
 800940a:	460d      	mov	r5, r1
 800940c:	b976      	cbnz	r6, 800942c <_Balloc+0x28>
 800940e:	2010      	movs	r0, #16
 8009410:	f001 f868 	bl	800a4e4 <malloc>
 8009414:	4602      	mov	r2, r0
 8009416:	6260      	str	r0, [r4, #36]	; 0x24
 8009418:	b920      	cbnz	r0, 8009424 <_Balloc+0x20>
 800941a:	2166      	movs	r1, #102	; 0x66
 800941c:	4b17      	ldr	r3, [pc, #92]	; (800947c <_Balloc+0x78>)
 800941e:	4818      	ldr	r0, [pc, #96]	; (8009480 <_Balloc+0x7c>)
 8009420:	f001 f830 	bl	800a484 <__assert_func>
 8009424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009428:	6006      	str	r6, [r0, #0]
 800942a:	60c6      	str	r6, [r0, #12]
 800942c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800942e:	68f3      	ldr	r3, [r6, #12]
 8009430:	b183      	cbz	r3, 8009454 <_Balloc+0x50>
 8009432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800943a:	b9b8      	cbnz	r0, 800946c <_Balloc+0x68>
 800943c:	2101      	movs	r1, #1
 800943e:	fa01 f605 	lsl.w	r6, r1, r5
 8009442:	1d72      	adds	r2, r6, #5
 8009444:	4620      	mov	r0, r4
 8009446:	0092      	lsls	r2, r2, #2
 8009448:	f000 fc94 	bl	8009d74 <_calloc_r>
 800944c:	b160      	cbz	r0, 8009468 <_Balloc+0x64>
 800944e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009452:	e00e      	b.n	8009472 <_Balloc+0x6e>
 8009454:	2221      	movs	r2, #33	; 0x21
 8009456:	2104      	movs	r1, #4
 8009458:	4620      	mov	r0, r4
 800945a:	f000 fc8b 	bl	8009d74 <_calloc_r>
 800945e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009460:	60f0      	str	r0, [r6, #12]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e4      	bne.n	8009432 <_Balloc+0x2e>
 8009468:	2000      	movs	r0, #0
 800946a:	bd70      	pop	{r4, r5, r6, pc}
 800946c:	6802      	ldr	r2, [r0, #0]
 800946e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009472:	2300      	movs	r3, #0
 8009474:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009478:	e7f7      	b.n	800946a <_Balloc+0x66>
 800947a:	bf00      	nop
 800947c:	0800bcbc 	.word	0x0800bcbc
 8009480:	0800bcd3 	.word	0x0800bcd3

08009484 <_Bfree>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009488:	4605      	mov	r5, r0
 800948a:	460c      	mov	r4, r1
 800948c:	b976      	cbnz	r6, 80094ac <_Bfree+0x28>
 800948e:	2010      	movs	r0, #16
 8009490:	f001 f828 	bl	800a4e4 <malloc>
 8009494:	4602      	mov	r2, r0
 8009496:	6268      	str	r0, [r5, #36]	; 0x24
 8009498:	b920      	cbnz	r0, 80094a4 <_Bfree+0x20>
 800949a:	218a      	movs	r1, #138	; 0x8a
 800949c:	4b08      	ldr	r3, [pc, #32]	; (80094c0 <_Bfree+0x3c>)
 800949e:	4809      	ldr	r0, [pc, #36]	; (80094c4 <_Bfree+0x40>)
 80094a0:	f000 fff0 	bl	800a484 <__assert_func>
 80094a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094a8:	6006      	str	r6, [r0, #0]
 80094aa:	60c6      	str	r6, [r0, #12]
 80094ac:	b13c      	cbz	r4, 80094be <_Bfree+0x3a>
 80094ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094b0:	6862      	ldr	r2, [r4, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094b8:	6021      	str	r1, [r4, #0]
 80094ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	0800bcbc 	.word	0x0800bcbc
 80094c4:	0800bcd3 	.word	0x0800bcd3

080094c8 <__multadd>:
 80094c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094cc:	4607      	mov	r7, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	461e      	mov	r6, r3
 80094d2:	2000      	movs	r0, #0
 80094d4:	690d      	ldr	r5, [r1, #16]
 80094d6:	f101 0c14 	add.w	ip, r1, #20
 80094da:	f8dc 3000 	ldr.w	r3, [ip]
 80094de:	3001      	adds	r0, #1
 80094e0:	b299      	uxth	r1, r3
 80094e2:	fb02 6101 	mla	r1, r2, r1, r6
 80094e6:	0c1e      	lsrs	r6, r3, #16
 80094e8:	0c0b      	lsrs	r3, r1, #16
 80094ea:	fb02 3306 	mla	r3, r2, r6, r3
 80094ee:	b289      	uxth	r1, r1
 80094f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094f4:	4285      	cmp	r5, r0
 80094f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094fa:	f84c 1b04 	str.w	r1, [ip], #4
 80094fe:	dcec      	bgt.n	80094da <__multadd+0x12>
 8009500:	b30e      	cbz	r6, 8009546 <__multadd+0x7e>
 8009502:	68a3      	ldr	r3, [r4, #8]
 8009504:	42ab      	cmp	r3, r5
 8009506:	dc19      	bgt.n	800953c <__multadd+0x74>
 8009508:	6861      	ldr	r1, [r4, #4]
 800950a:	4638      	mov	r0, r7
 800950c:	3101      	adds	r1, #1
 800950e:	f7ff ff79 	bl	8009404 <_Balloc>
 8009512:	4680      	mov	r8, r0
 8009514:	b928      	cbnz	r0, 8009522 <__multadd+0x5a>
 8009516:	4602      	mov	r2, r0
 8009518:	21b5      	movs	r1, #181	; 0xb5
 800951a:	4b0c      	ldr	r3, [pc, #48]	; (800954c <__multadd+0x84>)
 800951c:	480c      	ldr	r0, [pc, #48]	; (8009550 <__multadd+0x88>)
 800951e:	f000 ffb1 	bl	800a484 <__assert_func>
 8009522:	6922      	ldr	r2, [r4, #16]
 8009524:	f104 010c 	add.w	r1, r4, #12
 8009528:	3202      	adds	r2, #2
 800952a:	0092      	lsls	r2, r2, #2
 800952c:	300c      	adds	r0, #12
 800952e:	f7fe fb56 	bl	8007bde <memcpy>
 8009532:	4621      	mov	r1, r4
 8009534:	4638      	mov	r0, r7
 8009536:	f7ff ffa5 	bl	8009484 <_Bfree>
 800953a:	4644      	mov	r4, r8
 800953c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009540:	3501      	adds	r5, #1
 8009542:	615e      	str	r6, [r3, #20]
 8009544:	6125      	str	r5, [r4, #16]
 8009546:	4620      	mov	r0, r4
 8009548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800954c:	0800bc30 	.word	0x0800bc30
 8009550:	0800bcd3 	.word	0x0800bcd3

08009554 <__s2b>:
 8009554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009558:	4615      	mov	r5, r2
 800955a:	2209      	movs	r2, #9
 800955c:	461f      	mov	r7, r3
 800955e:	3308      	adds	r3, #8
 8009560:	460c      	mov	r4, r1
 8009562:	fb93 f3f2 	sdiv	r3, r3, r2
 8009566:	4606      	mov	r6, r0
 8009568:	2201      	movs	r2, #1
 800956a:	2100      	movs	r1, #0
 800956c:	429a      	cmp	r2, r3
 800956e:	db09      	blt.n	8009584 <__s2b+0x30>
 8009570:	4630      	mov	r0, r6
 8009572:	f7ff ff47 	bl	8009404 <_Balloc>
 8009576:	b940      	cbnz	r0, 800958a <__s2b+0x36>
 8009578:	4602      	mov	r2, r0
 800957a:	21ce      	movs	r1, #206	; 0xce
 800957c:	4b18      	ldr	r3, [pc, #96]	; (80095e0 <__s2b+0x8c>)
 800957e:	4819      	ldr	r0, [pc, #100]	; (80095e4 <__s2b+0x90>)
 8009580:	f000 ff80 	bl	800a484 <__assert_func>
 8009584:	0052      	lsls	r2, r2, #1
 8009586:	3101      	adds	r1, #1
 8009588:	e7f0      	b.n	800956c <__s2b+0x18>
 800958a:	9b08      	ldr	r3, [sp, #32]
 800958c:	2d09      	cmp	r5, #9
 800958e:	6143      	str	r3, [r0, #20]
 8009590:	f04f 0301 	mov.w	r3, #1
 8009594:	6103      	str	r3, [r0, #16]
 8009596:	dd16      	ble.n	80095c6 <__s2b+0x72>
 8009598:	f104 0909 	add.w	r9, r4, #9
 800959c:	46c8      	mov	r8, r9
 800959e:	442c      	add	r4, r5
 80095a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095a4:	4601      	mov	r1, r0
 80095a6:	220a      	movs	r2, #10
 80095a8:	4630      	mov	r0, r6
 80095aa:	3b30      	subs	r3, #48	; 0x30
 80095ac:	f7ff ff8c 	bl	80094c8 <__multadd>
 80095b0:	45a0      	cmp	r8, r4
 80095b2:	d1f5      	bne.n	80095a0 <__s2b+0x4c>
 80095b4:	f1a5 0408 	sub.w	r4, r5, #8
 80095b8:	444c      	add	r4, r9
 80095ba:	1b2d      	subs	r5, r5, r4
 80095bc:	1963      	adds	r3, r4, r5
 80095be:	42bb      	cmp	r3, r7
 80095c0:	db04      	blt.n	80095cc <__s2b+0x78>
 80095c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095c6:	2509      	movs	r5, #9
 80095c8:	340a      	adds	r4, #10
 80095ca:	e7f6      	b.n	80095ba <__s2b+0x66>
 80095cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095d0:	4601      	mov	r1, r0
 80095d2:	220a      	movs	r2, #10
 80095d4:	4630      	mov	r0, r6
 80095d6:	3b30      	subs	r3, #48	; 0x30
 80095d8:	f7ff ff76 	bl	80094c8 <__multadd>
 80095dc:	e7ee      	b.n	80095bc <__s2b+0x68>
 80095de:	bf00      	nop
 80095e0:	0800bc30 	.word	0x0800bc30
 80095e4:	0800bcd3 	.word	0x0800bcd3

080095e8 <__hi0bits>:
 80095e8:	0c02      	lsrs	r2, r0, #16
 80095ea:	0412      	lsls	r2, r2, #16
 80095ec:	4603      	mov	r3, r0
 80095ee:	b9ca      	cbnz	r2, 8009624 <__hi0bits+0x3c>
 80095f0:	0403      	lsls	r3, r0, #16
 80095f2:	2010      	movs	r0, #16
 80095f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80095f8:	bf04      	itt	eq
 80095fa:	021b      	lsleq	r3, r3, #8
 80095fc:	3008      	addeq	r0, #8
 80095fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009602:	bf04      	itt	eq
 8009604:	011b      	lsleq	r3, r3, #4
 8009606:	3004      	addeq	r0, #4
 8009608:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800960c:	bf04      	itt	eq
 800960e:	009b      	lsleq	r3, r3, #2
 8009610:	3002      	addeq	r0, #2
 8009612:	2b00      	cmp	r3, #0
 8009614:	db05      	blt.n	8009622 <__hi0bits+0x3a>
 8009616:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800961a:	f100 0001 	add.w	r0, r0, #1
 800961e:	bf08      	it	eq
 8009620:	2020      	moveq	r0, #32
 8009622:	4770      	bx	lr
 8009624:	2000      	movs	r0, #0
 8009626:	e7e5      	b.n	80095f4 <__hi0bits+0xc>

08009628 <__lo0bits>:
 8009628:	6803      	ldr	r3, [r0, #0]
 800962a:	4602      	mov	r2, r0
 800962c:	f013 0007 	ands.w	r0, r3, #7
 8009630:	d00b      	beq.n	800964a <__lo0bits+0x22>
 8009632:	07d9      	lsls	r1, r3, #31
 8009634:	d421      	bmi.n	800967a <__lo0bits+0x52>
 8009636:	0798      	lsls	r0, r3, #30
 8009638:	bf49      	itett	mi
 800963a:	085b      	lsrmi	r3, r3, #1
 800963c:	089b      	lsrpl	r3, r3, #2
 800963e:	2001      	movmi	r0, #1
 8009640:	6013      	strmi	r3, [r2, #0]
 8009642:	bf5c      	itt	pl
 8009644:	2002      	movpl	r0, #2
 8009646:	6013      	strpl	r3, [r2, #0]
 8009648:	4770      	bx	lr
 800964a:	b299      	uxth	r1, r3
 800964c:	b909      	cbnz	r1, 8009652 <__lo0bits+0x2a>
 800964e:	2010      	movs	r0, #16
 8009650:	0c1b      	lsrs	r3, r3, #16
 8009652:	b2d9      	uxtb	r1, r3
 8009654:	b909      	cbnz	r1, 800965a <__lo0bits+0x32>
 8009656:	3008      	adds	r0, #8
 8009658:	0a1b      	lsrs	r3, r3, #8
 800965a:	0719      	lsls	r1, r3, #28
 800965c:	bf04      	itt	eq
 800965e:	091b      	lsreq	r3, r3, #4
 8009660:	3004      	addeq	r0, #4
 8009662:	0799      	lsls	r1, r3, #30
 8009664:	bf04      	itt	eq
 8009666:	089b      	lsreq	r3, r3, #2
 8009668:	3002      	addeq	r0, #2
 800966a:	07d9      	lsls	r1, r3, #31
 800966c:	d403      	bmi.n	8009676 <__lo0bits+0x4e>
 800966e:	085b      	lsrs	r3, r3, #1
 8009670:	f100 0001 	add.w	r0, r0, #1
 8009674:	d003      	beq.n	800967e <__lo0bits+0x56>
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	4770      	bx	lr
 800967a:	2000      	movs	r0, #0
 800967c:	4770      	bx	lr
 800967e:	2020      	movs	r0, #32
 8009680:	4770      	bx	lr
	...

08009684 <__i2b>:
 8009684:	b510      	push	{r4, lr}
 8009686:	460c      	mov	r4, r1
 8009688:	2101      	movs	r1, #1
 800968a:	f7ff febb 	bl	8009404 <_Balloc>
 800968e:	4602      	mov	r2, r0
 8009690:	b928      	cbnz	r0, 800969e <__i2b+0x1a>
 8009692:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009696:	4b04      	ldr	r3, [pc, #16]	; (80096a8 <__i2b+0x24>)
 8009698:	4804      	ldr	r0, [pc, #16]	; (80096ac <__i2b+0x28>)
 800969a:	f000 fef3 	bl	800a484 <__assert_func>
 800969e:	2301      	movs	r3, #1
 80096a0:	6144      	str	r4, [r0, #20]
 80096a2:	6103      	str	r3, [r0, #16]
 80096a4:	bd10      	pop	{r4, pc}
 80096a6:	bf00      	nop
 80096a8:	0800bc30 	.word	0x0800bc30
 80096ac:	0800bcd3 	.word	0x0800bcd3

080096b0 <__multiply>:
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	4691      	mov	r9, r2
 80096b6:	690a      	ldr	r2, [r1, #16]
 80096b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096bc:	460c      	mov	r4, r1
 80096be:	429a      	cmp	r2, r3
 80096c0:	bfbe      	ittt	lt
 80096c2:	460b      	movlt	r3, r1
 80096c4:	464c      	movlt	r4, r9
 80096c6:	4699      	movlt	r9, r3
 80096c8:	6927      	ldr	r7, [r4, #16]
 80096ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80096ce:	68a3      	ldr	r3, [r4, #8]
 80096d0:	6861      	ldr	r1, [r4, #4]
 80096d2:	eb07 060a 	add.w	r6, r7, sl
 80096d6:	42b3      	cmp	r3, r6
 80096d8:	b085      	sub	sp, #20
 80096da:	bfb8      	it	lt
 80096dc:	3101      	addlt	r1, #1
 80096de:	f7ff fe91 	bl	8009404 <_Balloc>
 80096e2:	b930      	cbnz	r0, 80096f2 <__multiply+0x42>
 80096e4:	4602      	mov	r2, r0
 80096e6:	f240 115d 	movw	r1, #349	; 0x15d
 80096ea:	4b43      	ldr	r3, [pc, #268]	; (80097f8 <__multiply+0x148>)
 80096ec:	4843      	ldr	r0, [pc, #268]	; (80097fc <__multiply+0x14c>)
 80096ee:	f000 fec9 	bl	800a484 <__assert_func>
 80096f2:	f100 0514 	add.w	r5, r0, #20
 80096f6:	462b      	mov	r3, r5
 80096f8:	2200      	movs	r2, #0
 80096fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80096fe:	4543      	cmp	r3, r8
 8009700:	d321      	bcc.n	8009746 <__multiply+0x96>
 8009702:	f104 0314 	add.w	r3, r4, #20
 8009706:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800970a:	f109 0314 	add.w	r3, r9, #20
 800970e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009712:	9202      	str	r2, [sp, #8]
 8009714:	1b3a      	subs	r2, r7, r4
 8009716:	3a15      	subs	r2, #21
 8009718:	f022 0203 	bic.w	r2, r2, #3
 800971c:	3204      	adds	r2, #4
 800971e:	f104 0115 	add.w	r1, r4, #21
 8009722:	428f      	cmp	r7, r1
 8009724:	bf38      	it	cc
 8009726:	2204      	movcc	r2, #4
 8009728:	9201      	str	r2, [sp, #4]
 800972a:	9a02      	ldr	r2, [sp, #8]
 800972c:	9303      	str	r3, [sp, #12]
 800972e:	429a      	cmp	r2, r3
 8009730:	d80c      	bhi.n	800974c <__multiply+0x9c>
 8009732:	2e00      	cmp	r6, #0
 8009734:	dd03      	ble.n	800973e <__multiply+0x8e>
 8009736:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800973a:	2b00      	cmp	r3, #0
 800973c:	d059      	beq.n	80097f2 <__multiply+0x142>
 800973e:	6106      	str	r6, [r0, #16]
 8009740:	b005      	add	sp, #20
 8009742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009746:	f843 2b04 	str.w	r2, [r3], #4
 800974a:	e7d8      	b.n	80096fe <__multiply+0x4e>
 800974c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009750:	f1ba 0f00 	cmp.w	sl, #0
 8009754:	d023      	beq.n	800979e <__multiply+0xee>
 8009756:	46a9      	mov	r9, r5
 8009758:	f04f 0c00 	mov.w	ip, #0
 800975c:	f104 0e14 	add.w	lr, r4, #20
 8009760:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009764:	f8d9 1000 	ldr.w	r1, [r9]
 8009768:	fa1f fb82 	uxth.w	fp, r2
 800976c:	b289      	uxth	r1, r1
 800976e:	fb0a 110b 	mla	r1, sl, fp, r1
 8009772:	4461      	add	r1, ip
 8009774:	f8d9 c000 	ldr.w	ip, [r9]
 8009778:	0c12      	lsrs	r2, r2, #16
 800977a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800977e:	fb0a c202 	mla	r2, sl, r2, ip
 8009782:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009786:	b289      	uxth	r1, r1
 8009788:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800978c:	4577      	cmp	r7, lr
 800978e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009792:	f849 1b04 	str.w	r1, [r9], #4
 8009796:	d8e3      	bhi.n	8009760 <__multiply+0xb0>
 8009798:	9a01      	ldr	r2, [sp, #4]
 800979a:	f845 c002 	str.w	ip, [r5, r2]
 800979e:	9a03      	ldr	r2, [sp, #12]
 80097a0:	3304      	adds	r3, #4
 80097a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097a6:	f1b9 0f00 	cmp.w	r9, #0
 80097aa:	d020      	beq.n	80097ee <__multiply+0x13e>
 80097ac:	46ae      	mov	lr, r5
 80097ae:	f04f 0a00 	mov.w	sl, #0
 80097b2:	6829      	ldr	r1, [r5, #0]
 80097b4:	f104 0c14 	add.w	ip, r4, #20
 80097b8:	f8bc b000 	ldrh.w	fp, [ip]
 80097bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80097c0:	b289      	uxth	r1, r1
 80097c2:	fb09 220b 	mla	r2, r9, fp, r2
 80097c6:	4492      	add	sl, r2
 80097c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80097cc:	f84e 1b04 	str.w	r1, [lr], #4
 80097d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80097d4:	f8be 1000 	ldrh.w	r1, [lr]
 80097d8:	0c12      	lsrs	r2, r2, #16
 80097da:	fb09 1102 	mla	r1, r9, r2, r1
 80097de:	4567      	cmp	r7, ip
 80097e0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80097e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80097e8:	d8e6      	bhi.n	80097b8 <__multiply+0x108>
 80097ea:	9a01      	ldr	r2, [sp, #4]
 80097ec:	50a9      	str	r1, [r5, r2]
 80097ee:	3504      	adds	r5, #4
 80097f0:	e79b      	b.n	800972a <__multiply+0x7a>
 80097f2:	3e01      	subs	r6, #1
 80097f4:	e79d      	b.n	8009732 <__multiply+0x82>
 80097f6:	bf00      	nop
 80097f8:	0800bc30 	.word	0x0800bc30
 80097fc:	0800bcd3 	.word	0x0800bcd3

08009800 <__pow5mult>:
 8009800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009804:	4615      	mov	r5, r2
 8009806:	f012 0203 	ands.w	r2, r2, #3
 800980a:	4606      	mov	r6, r0
 800980c:	460f      	mov	r7, r1
 800980e:	d007      	beq.n	8009820 <__pow5mult+0x20>
 8009810:	4c25      	ldr	r4, [pc, #148]	; (80098a8 <__pow5mult+0xa8>)
 8009812:	3a01      	subs	r2, #1
 8009814:	2300      	movs	r3, #0
 8009816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800981a:	f7ff fe55 	bl	80094c8 <__multadd>
 800981e:	4607      	mov	r7, r0
 8009820:	10ad      	asrs	r5, r5, #2
 8009822:	d03d      	beq.n	80098a0 <__pow5mult+0xa0>
 8009824:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009826:	b97c      	cbnz	r4, 8009848 <__pow5mult+0x48>
 8009828:	2010      	movs	r0, #16
 800982a:	f000 fe5b 	bl	800a4e4 <malloc>
 800982e:	4602      	mov	r2, r0
 8009830:	6270      	str	r0, [r6, #36]	; 0x24
 8009832:	b928      	cbnz	r0, 8009840 <__pow5mult+0x40>
 8009834:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009838:	4b1c      	ldr	r3, [pc, #112]	; (80098ac <__pow5mult+0xac>)
 800983a:	481d      	ldr	r0, [pc, #116]	; (80098b0 <__pow5mult+0xb0>)
 800983c:	f000 fe22 	bl	800a484 <__assert_func>
 8009840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009844:	6004      	str	r4, [r0, #0]
 8009846:	60c4      	str	r4, [r0, #12]
 8009848:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800984c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009850:	b94c      	cbnz	r4, 8009866 <__pow5mult+0x66>
 8009852:	f240 2171 	movw	r1, #625	; 0x271
 8009856:	4630      	mov	r0, r6
 8009858:	f7ff ff14 	bl	8009684 <__i2b>
 800985c:	2300      	movs	r3, #0
 800985e:	4604      	mov	r4, r0
 8009860:	f8c8 0008 	str.w	r0, [r8, #8]
 8009864:	6003      	str	r3, [r0, #0]
 8009866:	f04f 0900 	mov.w	r9, #0
 800986a:	07eb      	lsls	r3, r5, #31
 800986c:	d50a      	bpl.n	8009884 <__pow5mult+0x84>
 800986e:	4639      	mov	r1, r7
 8009870:	4622      	mov	r2, r4
 8009872:	4630      	mov	r0, r6
 8009874:	f7ff ff1c 	bl	80096b0 <__multiply>
 8009878:	4680      	mov	r8, r0
 800987a:	4639      	mov	r1, r7
 800987c:	4630      	mov	r0, r6
 800987e:	f7ff fe01 	bl	8009484 <_Bfree>
 8009882:	4647      	mov	r7, r8
 8009884:	106d      	asrs	r5, r5, #1
 8009886:	d00b      	beq.n	80098a0 <__pow5mult+0xa0>
 8009888:	6820      	ldr	r0, [r4, #0]
 800988a:	b938      	cbnz	r0, 800989c <__pow5mult+0x9c>
 800988c:	4622      	mov	r2, r4
 800988e:	4621      	mov	r1, r4
 8009890:	4630      	mov	r0, r6
 8009892:	f7ff ff0d 	bl	80096b0 <__multiply>
 8009896:	6020      	str	r0, [r4, #0]
 8009898:	f8c0 9000 	str.w	r9, [r0]
 800989c:	4604      	mov	r4, r0
 800989e:	e7e4      	b.n	800986a <__pow5mult+0x6a>
 80098a0:	4638      	mov	r0, r7
 80098a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098a6:	bf00      	nop
 80098a8:	0800be20 	.word	0x0800be20
 80098ac:	0800bcbc 	.word	0x0800bcbc
 80098b0:	0800bcd3 	.word	0x0800bcd3

080098b4 <__lshift>:
 80098b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b8:	460c      	mov	r4, r1
 80098ba:	4607      	mov	r7, r0
 80098bc:	4691      	mov	r9, r2
 80098be:	6923      	ldr	r3, [r4, #16]
 80098c0:	6849      	ldr	r1, [r1, #4]
 80098c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098c6:	68a3      	ldr	r3, [r4, #8]
 80098c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098cc:	f108 0601 	add.w	r6, r8, #1
 80098d0:	42b3      	cmp	r3, r6
 80098d2:	db0b      	blt.n	80098ec <__lshift+0x38>
 80098d4:	4638      	mov	r0, r7
 80098d6:	f7ff fd95 	bl	8009404 <_Balloc>
 80098da:	4605      	mov	r5, r0
 80098dc:	b948      	cbnz	r0, 80098f2 <__lshift+0x3e>
 80098de:	4602      	mov	r2, r0
 80098e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80098e4:	4b29      	ldr	r3, [pc, #164]	; (800998c <__lshift+0xd8>)
 80098e6:	482a      	ldr	r0, [pc, #168]	; (8009990 <__lshift+0xdc>)
 80098e8:	f000 fdcc 	bl	800a484 <__assert_func>
 80098ec:	3101      	adds	r1, #1
 80098ee:	005b      	lsls	r3, r3, #1
 80098f0:	e7ee      	b.n	80098d0 <__lshift+0x1c>
 80098f2:	2300      	movs	r3, #0
 80098f4:	f100 0114 	add.w	r1, r0, #20
 80098f8:	f100 0210 	add.w	r2, r0, #16
 80098fc:	4618      	mov	r0, r3
 80098fe:	4553      	cmp	r3, sl
 8009900:	db37      	blt.n	8009972 <__lshift+0xbe>
 8009902:	6920      	ldr	r0, [r4, #16]
 8009904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009908:	f104 0314 	add.w	r3, r4, #20
 800990c:	f019 091f 	ands.w	r9, r9, #31
 8009910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009914:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009918:	d02f      	beq.n	800997a <__lshift+0xc6>
 800991a:	468a      	mov	sl, r1
 800991c:	f04f 0c00 	mov.w	ip, #0
 8009920:	f1c9 0e20 	rsb	lr, r9, #32
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	fa02 f209 	lsl.w	r2, r2, r9
 800992a:	ea42 020c 	orr.w	r2, r2, ip
 800992e:	f84a 2b04 	str.w	r2, [sl], #4
 8009932:	f853 2b04 	ldr.w	r2, [r3], #4
 8009936:	4298      	cmp	r0, r3
 8009938:	fa22 fc0e 	lsr.w	ip, r2, lr
 800993c:	d8f2      	bhi.n	8009924 <__lshift+0x70>
 800993e:	1b03      	subs	r3, r0, r4
 8009940:	3b15      	subs	r3, #21
 8009942:	f023 0303 	bic.w	r3, r3, #3
 8009946:	3304      	adds	r3, #4
 8009948:	f104 0215 	add.w	r2, r4, #21
 800994c:	4290      	cmp	r0, r2
 800994e:	bf38      	it	cc
 8009950:	2304      	movcc	r3, #4
 8009952:	f841 c003 	str.w	ip, [r1, r3]
 8009956:	f1bc 0f00 	cmp.w	ip, #0
 800995a:	d001      	beq.n	8009960 <__lshift+0xac>
 800995c:	f108 0602 	add.w	r6, r8, #2
 8009960:	3e01      	subs	r6, #1
 8009962:	4638      	mov	r0, r7
 8009964:	4621      	mov	r1, r4
 8009966:	612e      	str	r6, [r5, #16]
 8009968:	f7ff fd8c 	bl	8009484 <_Bfree>
 800996c:	4628      	mov	r0, r5
 800996e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009972:	f842 0f04 	str.w	r0, [r2, #4]!
 8009976:	3301      	adds	r3, #1
 8009978:	e7c1      	b.n	80098fe <__lshift+0x4a>
 800997a:	3904      	subs	r1, #4
 800997c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009980:	4298      	cmp	r0, r3
 8009982:	f841 2f04 	str.w	r2, [r1, #4]!
 8009986:	d8f9      	bhi.n	800997c <__lshift+0xc8>
 8009988:	e7ea      	b.n	8009960 <__lshift+0xac>
 800998a:	bf00      	nop
 800998c:	0800bc30 	.word	0x0800bc30
 8009990:	0800bcd3 	.word	0x0800bcd3

08009994 <__mcmp>:
 8009994:	4603      	mov	r3, r0
 8009996:	690a      	ldr	r2, [r1, #16]
 8009998:	6900      	ldr	r0, [r0, #16]
 800999a:	b530      	push	{r4, r5, lr}
 800999c:	1a80      	subs	r0, r0, r2
 800999e:	d10d      	bne.n	80099bc <__mcmp+0x28>
 80099a0:	3314      	adds	r3, #20
 80099a2:	3114      	adds	r1, #20
 80099a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80099a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80099ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099b4:	4295      	cmp	r5, r2
 80099b6:	d002      	beq.n	80099be <__mcmp+0x2a>
 80099b8:	d304      	bcc.n	80099c4 <__mcmp+0x30>
 80099ba:	2001      	movs	r0, #1
 80099bc:	bd30      	pop	{r4, r5, pc}
 80099be:	42a3      	cmp	r3, r4
 80099c0:	d3f4      	bcc.n	80099ac <__mcmp+0x18>
 80099c2:	e7fb      	b.n	80099bc <__mcmp+0x28>
 80099c4:	f04f 30ff 	mov.w	r0, #4294967295
 80099c8:	e7f8      	b.n	80099bc <__mcmp+0x28>
	...

080099cc <__mdiff>:
 80099cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d0:	460d      	mov	r5, r1
 80099d2:	4607      	mov	r7, r0
 80099d4:	4611      	mov	r1, r2
 80099d6:	4628      	mov	r0, r5
 80099d8:	4614      	mov	r4, r2
 80099da:	f7ff ffdb 	bl	8009994 <__mcmp>
 80099de:	1e06      	subs	r6, r0, #0
 80099e0:	d111      	bne.n	8009a06 <__mdiff+0x3a>
 80099e2:	4631      	mov	r1, r6
 80099e4:	4638      	mov	r0, r7
 80099e6:	f7ff fd0d 	bl	8009404 <_Balloc>
 80099ea:	4602      	mov	r2, r0
 80099ec:	b928      	cbnz	r0, 80099fa <__mdiff+0x2e>
 80099ee:	f240 2132 	movw	r1, #562	; 0x232
 80099f2:	4b3a      	ldr	r3, [pc, #232]	; (8009adc <__mdiff+0x110>)
 80099f4:	483a      	ldr	r0, [pc, #232]	; (8009ae0 <__mdiff+0x114>)
 80099f6:	f000 fd45 	bl	800a484 <__assert_func>
 80099fa:	2301      	movs	r3, #1
 80099fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009a00:	4610      	mov	r0, r2
 8009a02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a06:	bfa4      	itt	ge
 8009a08:	4623      	movge	r3, r4
 8009a0a:	462c      	movge	r4, r5
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	6861      	ldr	r1, [r4, #4]
 8009a10:	bfa6      	itte	ge
 8009a12:	461d      	movge	r5, r3
 8009a14:	2600      	movge	r6, #0
 8009a16:	2601      	movlt	r6, #1
 8009a18:	f7ff fcf4 	bl	8009404 <_Balloc>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	b918      	cbnz	r0, 8009a28 <__mdiff+0x5c>
 8009a20:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a24:	4b2d      	ldr	r3, [pc, #180]	; (8009adc <__mdiff+0x110>)
 8009a26:	e7e5      	b.n	80099f4 <__mdiff+0x28>
 8009a28:	f102 0814 	add.w	r8, r2, #20
 8009a2c:	46c2      	mov	sl, r8
 8009a2e:	f04f 0c00 	mov.w	ip, #0
 8009a32:	6927      	ldr	r7, [r4, #16]
 8009a34:	60c6      	str	r6, [r0, #12]
 8009a36:	692e      	ldr	r6, [r5, #16]
 8009a38:	f104 0014 	add.w	r0, r4, #20
 8009a3c:	f105 0914 	add.w	r9, r5, #20
 8009a40:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009a44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a48:	3410      	adds	r4, #16
 8009a4a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009a4e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a52:	fa1f f18b 	uxth.w	r1, fp
 8009a56:	448c      	add	ip, r1
 8009a58:	b299      	uxth	r1, r3
 8009a5a:	0c1b      	lsrs	r3, r3, #16
 8009a5c:	ebac 0101 	sub.w	r1, ip, r1
 8009a60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a64:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009a68:	b289      	uxth	r1, r1
 8009a6a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009a6e:	454e      	cmp	r6, r9
 8009a70:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009a74:	f84a 3b04 	str.w	r3, [sl], #4
 8009a78:	d8e7      	bhi.n	8009a4a <__mdiff+0x7e>
 8009a7a:	1b73      	subs	r3, r6, r5
 8009a7c:	3b15      	subs	r3, #21
 8009a7e:	f023 0303 	bic.w	r3, r3, #3
 8009a82:	3515      	adds	r5, #21
 8009a84:	3304      	adds	r3, #4
 8009a86:	42ae      	cmp	r6, r5
 8009a88:	bf38      	it	cc
 8009a8a:	2304      	movcc	r3, #4
 8009a8c:	4418      	add	r0, r3
 8009a8e:	4443      	add	r3, r8
 8009a90:	461e      	mov	r6, r3
 8009a92:	4605      	mov	r5, r0
 8009a94:	4575      	cmp	r5, lr
 8009a96:	d30e      	bcc.n	8009ab6 <__mdiff+0xea>
 8009a98:	f10e 0103 	add.w	r1, lr, #3
 8009a9c:	1a09      	subs	r1, r1, r0
 8009a9e:	f021 0103 	bic.w	r1, r1, #3
 8009aa2:	3803      	subs	r0, #3
 8009aa4:	4586      	cmp	lr, r0
 8009aa6:	bf38      	it	cc
 8009aa8:	2100      	movcc	r1, #0
 8009aaa:	4419      	add	r1, r3
 8009aac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009ab0:	b18b      	cbz	r3, 8009ad6 <__mdiff+0x10a>
 8009ab2:	6117      	str	r7, [r2, #16]
 8009ab4:	e7a4      	b.n	8009a00 <__mdiff+0x34>
 8009ab6:	f855 8b04 	ldr.w	r8, [r5], #4
 8009aba:	fa1f f188 	uxth.w	r1, r8
 8009abe:	4461      	add	r1, ip
 8009ac0:	140c      	asrs	r4, r1, #16
 8009ac2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ac6:	b289      	uxth	r1, r1
 8009ac8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009acc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009ad0:	f846 1b04 	str.w	r1, [r6], #4
 8009ad4:	e7de      	b.n	8009a94 <__mdiff+0xc8>
 8009ad6:	3f01      	subs	r7, #1
 8009ad8:	e7e8      	b.n	8009aac <__mdiff+0xe0>
 8009ada:	bf00      	nop
 8009adc:	0800bc30 	.word	0x0800bc30
 8009ae0:	0800bcd3 	.word	0x0800bcd3

08009ae4 <__ulp>:
 8009ae4:	4b11      	ldr	r3, [pc, #68]	; (8009b2c <__ulp+0x48>)
 8009ae6:	400b      	ands	r3, r1
 8009ae8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	dd02      	ble.n	8009af6 <__ulp+0x12>
 8009af0:	2000      	movs	r0, #0
 8009af2:	4619      	mov	r1, r3
 8009af4:	4770      	bx	lr
 8009af6:	425b      	negs	r3, r3
 8009af8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009afc:	f04f 0000 	mov.w	r0, #0
 8009b00:	f04f 0100 	mov.w	r1, #0
 8009b04:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b08:	da04      	bge.n	8009b14 <__ulp+0x30>
 8009b0a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009b0e:	fa43 f102 	asr.w	r1, r3, r2
 8009b12:	4770      	bx	lr
 8009b14:	f1a2 0314 	sub.w	r3, r2, #20
 8009b18:	2b1e      	cmp	r3, #30
 8009b1a:	bfd6      	itet	le
 8009b1c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009b20:	2301      	movgt	r3, #1
 8009b22:	fa22 f303 	lsrle.w	r3, r2, r3
 8009b26:	4618      	mov	r0, r3
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	7ff00000 	.word	0x7ff00000

08009b30 <__b2d>:
 8009b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b34:	6907      	ldr	r7, [r0, #16]
 8009b36:	f100 0914 	add.w	r9, r0, #20
 8009b3a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009b3e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009b42:	f1a7 0804 	sub.w	r8, r7, #4
 8009b46:	4630      	mov	r0, r6
 8009b48:	f7ff fd4e 	bl	80095e8 <__hi0bits>
 8009b4c:	f1c0 0320 	rsb	r3, r0, #32
 8009b50:	280a      	cmp	r0, #10
 8009b52:	600b      	str	r3, [r1, #0]
 8009b54:	491f      	ldr	r1, [pc, #124]	; (8009bd4 <__b2d+0xa4>)
 8009b56:	dc17      	bgt.n	8009b88 <__b2d+0x58>
 8009b58:	45c1      	cmp	r9, r8
 8009b5a:	bf28      	it	cs
 8009b5c:	2200      	movcs	r2, #0
 8009b5e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009b62:	fa26 f30c 	lsr.w	r3, r6, ip
 8009b66:	bf38      	it	cc
 8009b68:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009b6c:	ea43 0501 	orr.w	r5, r3, r1
 8009b70:	f100 0315 	add.w	r3, r0, #21
 8009b74:	fa06 f303 	lsl.w	r3, r6, r3
 8009b78:	fa22 f20c 	lsr.w	r2, r2, ip
 8009b7c:	ea43 0402 	orr.w	r4, r3, r2
 8009b80:	4620      	mov	r0, r4
 8009b82:	4629      	mov	r1, r5
 8009b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b88:	45c1      	cmp	r9, r8
 8009b8a:	bf2e      	itee	cs
 8009b8c:	2200      	movcs	r2, #0
 8009b8e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009b92:	f1a7 0808 	subcc.w	r8, r7, #8
 8009b96:	f1b0 030b 	subs.w	r3, r0, #11
 8009b9a:	d016      	beq.n	8009bca <__b2d+0x9a>
 8009b9c:	f1c3 0720 	rsb	r7, r3, #32
 8009ba0:	fa22 f107 	lsr.w	r1, r2, r7
 8009ba4:	45c8      	cmp	r8, r9
 8009ba6:	fa06 f603 	lsl.w	r6, r6, r3
 8009baa:	ea46 0601 	orr.w	r6, r6, r1
 8009bae:	bf94      	ite	ls
 8009bb0:	2100      	movls	r1, #0
 8009bb2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009bb6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009bba:	fa02 f003 	lsl.w	r0, r2, r3
 8009bbe:	40f9      	lsrs	r1, r7
 8009bc0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009bc4:	ea40 0401 	orr.w	r4, r0, r1
 8009bc8:	e7da      	b.n	8009b80 <__b2d+0x50>
 8009bca:	4614      	mov	r4, r2
 8009bcc:	ea46 0501 	orr.w	r5, r6, r1
 8009bd0:	e7d6      	b.n	8009b80 <__b2d+0x50>
 8009bd2:	bf00      	nop
 8009bd4:	3ff00000 	.word	0x3ff00000

08009bd8 <__d2b>:
 8009bd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009bdc:	2101      	movs	r1, #1
 8009bde:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009be2:	4690      	mov	r8, r2
 8009be4:	461d      	mov	r5, r3
 8009be6:	f7ff fc0d 	bl	8009404 <_Balloc>
 8009bea:	4604      	mov	r4, r0
 8009bec:	b930      	cbnz	r0, 8009bfc <__d2b+0x24>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	f240 310a 	movw	r1, #778	; 0x30a
 8009bf4:	4b24      	ldr	r3, [pc, #144]	; (8009c88 <__d2b+0xb0>)
 8009bf6:	4825      	ldr	r0, [pc, #148]	; (8009c8c <__d2b+0xb4>)
 8009bf8:	f000 fc44 	bl	800a484 <__assert_func>
 8009bfc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009c00:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009c04:	bb2d      	cbnz	r5, 8009c52 <__d2b+0x7a>
 8009c06:	9301      	str	r3, [sp, #4]
 8009c08:	f1b8 0300 	subs.w	r3, r8, #0
 8009c0c:	d026      	beq.n	8009c5c <__d2b+0x84>
 8009c0e:	4668      	mov	r0, sp
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	f7ff fd09 	bl	8009628 <__lo0bits>
 8009c16:	9900      	ldr	r1, [sp, #0]
 8009c18:	b1f0      	cbz	r0, 8009c58 <__d2b+0x80>
 8009c1a:	9a01      	ldr	r2, [sp, #4]
 8009c1c:	f1c0 0320 	rsb	r3, r0, #32
 8009c20:	fa02 f303 	lsl.w	r3, r2, r3
 8009c24:	430b      	orrs	r3, r1
 8009c26:	40c2      	lsrs	r2, r0
 8009c28:	6163      	str	r3, [r4, #20]
 8009c2a:	9201      	str	r2, [sp, #4]
 8009c2c:	9b01      	ldr	r3, [sp, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bf14      	ite	ne
 8009c32:	2102      	movne	r1, #2
 8009c34:	2101      	moveq	r1, #1
 8009c36:	61a3      	str	r3, [r4, #24]
 8009c38:	6121      	str	r1, [r4, #16]
 8009c3a:	b1c5      	cbz	r5, 8009c6e <__d2b+0x96>
 8009c3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c40:	4405      	add	r5, r0
 8009c42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c46:	603d      	str	r5, [r7, #0]
 8009c48:	6030      	str	r0, [r6, #0]
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	b002      	add	sp, #8
 8009c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c56:	e7d6      	b.n	8009c06 <__d2b+0x2e>
 8009c58:	6161      	str	r1, [r4, #20]
 8009c5a:	e7e7      	b.n	8009c2c <__d2b+0x54>
 8009c5c:	a801      	add	r0, sp, #4
 8009c5e:	f7ff fce3 	bl	8009628 <__lo0bits>
 8009c62:	2101      	movs	r1, #1
 8009c64:	9b01      	ldr	r3, [sp, #4]
 8009c66:	6121      	str	r1, [r4, #16]
 8009c68:	6163      	str	r3, [r4, #20]
 8009c6a:	3020      	adds	r0, #32
 8009c6c:	e7e5      	b.n	8009c3a <__d2b+0x62>
 8009c6e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009c72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c76:	6038      	str	r0, [r7, #0]
 8009c78:	6918      	ldr	r0, [r3, #16]
 8009c7a:	f7ff fcb5 	bl	80095e8 <__hi0bits>
 8009c7e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009c82:	6031      	str	r1, [r6, #0]
 8009c84:	e7e1      	b.n	8009c4a <__d2b+0x72>
 8009c86:	bf00      	nop
 8009c88:	0800bc30 	.word	0x0800bc30
 8009c8c:	0800bcd3 	.word	0x0800bcd3

08009c90 <__ratio>:
 8009c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	4688      	mov	r8, r1
 8009c96:	4669      	mov	r1, sp
 8009c98:	4681      	mov	r9, r0
 8009c9a:	f7ff ff49 	bl	8009b30 <__b2d>
 8009c9e:	460f      	mov	r7, r1
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	460d      	mov	r5, r1
 8009ca4:	4640      	mov	r0, r8
 8009ca6:	a901      	add	r1, sp, #4
 8009ca8:	f7ff ff42 	bl	8009b30 <__b2d>
 8009cac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009cb4:	468b      	mov	fp, r1
 8009cb6:	eba3 0c02 	sub.w	ip, r3, r2
 8009cba:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009cbe:	1a9b      	subs	r3, r3, r2
 8009cc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bfd5      	itete	le
 8009cc8:	460a      	movle	r2, r1
 8009cca:	462a      	movgt	r2, r5
 8009ccc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009cd0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009cd4:	bfd8      	it	le
 8009cd6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009cda:	465b      	mov	r3, fp
 8009cdc:	4602      	mov	r2, r0
 8009cde:	4639      	mov	r1, r7
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f7f6 fe47 	bl	8000974 <__aeabi_ddiv>
 8009ce6:	b003      	add	sp, #12
 8009ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009cec <__copybits>:
 8009cec:	3901      	subs	r1, #1
 8009cee:	b570      	push	{r4, r5, r6, lr}
 8009cf0:	1149      	asrs	r1, r1, #5
 8009cf2:	6914      	ldr	r4, [r2, #16]
 8009cf4:	3101      	adds	r1, #1
 8009cf6:	f102 0314 	add.w	r3, r2, #20
 8009cfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009cfe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d02:	1f05      	subs	r5, r0, #4
 8009d04:	42a3      	cmp	r3, r4
 8009d06:	d30c      	bcc.n	8009d22 <__copybits+0x36>
 8009d08:	1aa3      	subs	r3, r4, r2
 8009d0a:	3b11      	subs	r3, #17
 8009d0c:	f023 0303 	bic.w	r3, r3, #3
 8009d10:	3211      	adds	r2, #17
 8009d12:	42a2      	cmp	r2, r4
 8009d14:	bf88      	it	hi
 8009d16:	2300      	movhi	r3, #0
 8009d18:	4418      	add	r0, r3
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	4288      	cmp	r0, r1
 8009d1e:	d305      	bcc.n	8009d2c <__copybits+0x40>
 8009d20:	bd70      	pop	{r4, r5, r6, pc}
 8009d22:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d26:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d2a:	e7eb      	b.n	8009d04 <__copybits+0x18>
 8009d2c:	f840 3b04 	str.w	r3, [r0], #4
 8009d30:	e7f4      	b.n	8009d1c <__copybits+0x30>

08009d32 <__any_on>:
 8009d32:	f100 0214 	add.w	r2, r0, #20
 8009d36:	6900      	ldr	r0, [r0, #16]
 8009d38:	114b      	asrs	r3, r1, #5
 8009d3a:	4298      	cmp	r0, r3
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	db11      	blt.n	8009d64 <__any_on+0x32>
 8009d40:	dd0a      	ble.n	8009d58 <__any_on+0x26>
 8009d42:	f011 011f 	ands.w	r1, r1, #31
 8009d46:	d007      	beq.n	8009d58 <__any_on+0x26>
 8009d48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d4c:	fa24 f001 	lsr.w	r0, r4, r1
 8009d50:	fa00 f101 	lsl.w	r1, r0, r1
 8009d54:	428c      	cmp	r4, r1
 8009d56:	d10b      	bne.n	8009d70 <__any_on+0x3e>
 8009d58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d803      	bhi.n	8009d68 <__any_on+0x36>
 8009d60:	2000      	movs	r0, #0
 8009d62:	bd10      	pop	{r4, pc}
 8009d64:	4603      	mov	r3, r0
 8009d66:	e7f7      	b.n	8009d58 <__any_on+0x26>
 8009d68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d6c:	2900      	cmp	r1, #0
 8009d6e:	d0f5      	beq.n	8009d5c <__any_on+0x2a>
 8009d70:	2001      	movs	r0, #1
 8009d72:	e7f6      	b.n	8009d62 <__any_on+0x30>

08009d74 <_calloc_r>:
 8009d74:	b570      	push	{r4, r5, r6, lr}
 8009d76:	fba1 5402 	umull	r5, r4, r1, r2
 8009d7a:	b934      	cbnz	r4, 8009d8a <_calloc_r+0x16>
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	f7fd ff65 	bl	8007c4c <_malloc_r>
 8009d82:	4606      	mov	r6, r0
 8009d84:	b928      	cbnz	r0, 8009d92 <_calloc_r+0x1e>
 8009d86:	4630      	mov	r0, r6
 8009d88:	bd70      	pop	{r4, r5, r6, pc}
 8009d8a:	220c      	movs	r2, #12
 8009d8c:	2600      	movs	r6, #0
 8009d8e:	6002      	str	r2, [r0, #0]
 8009d90:	e7f9      	b.n	8009d86 <_calloc_r+0x12>
 8009d92:	462a      	mov	r2, r5
 8009d94:	4621      	mov	r1, r4
 8009d96:	f7fd ff30 	bl	8007bfa <memset>
 8009d9a:	e7f4      	b.n	8009d86 <_calloc_r+0x12>

08009d9c <_free_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4605      	mov	r5, r0
 8009da0:	2900      	cmp	r1, #0
 8009da2:	d040      	beq.n	8009e26 <_free_r+0x8a>
 8009da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009da8:	1f0c      	subs	r4, r1, #4
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	bfb8      	it	lt
 8009dae:	18e4      	addlt	r4, r4, r3
 8009db0:	f7ff fb1c 	bl	80093ec <__malloc_lock>
 8009db4:	4a1c      	ldr	r2, [pc, #112]	; (8009e28 <_free_r+0x8c>)
 8009db6:	6813      	ldr	r3, [r2, #0]
 8009db8:	b933      	cbnz	r3, 8009dc8 <_free_r+0x2c>
 8009dba:	6063      	str	r3, [r4, #4]
 8009dbc:	6014      	str	r4, [r2, #0]
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dc4:	f7ff bb18 	b.w	80093f8 <__malloc_unlock>
 8009dc8:	42a3      	cmp	r3, r4
 8009dca:	d908      	bls.n	8009dde <_free_r+0x42>
 8009dcc:	6820      	ldr	r0, [r4, #0]
 8009dce:	1821      	adds	r1, r4, r0
 8009dd0:	428b      	cmp	r3, r1
 8009dd2:	bf01      	itttt	eq
 8009dd4:	6819      	ldreq	r1, [r3, #0]
 8009dd6:	685b      	ldreq	r3, [r3, #4]
 8009dd8:	1809      	addeq	r1, r1, r0
 8009dda:	6021      	streq	r1, [r4, #0]
 8009ddc:	e7ed      	b.n	8009dba <_free_r+0x1e>
 8009dde:	461a      	mov	r2, r3
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	b10b      	cbz	r3, 8009de8 <_free_r+0x4c>
 8009de4:	42a3      	cmp	r3, r4
 8009de6:	d9fa      	bls.n	8009dde <_free_r+0x42>
 8009de8:	6811      	ldr	r1, [r2, #0]
 8009dea:	1850      	adds	r0, r2, r1
 8009dec:	42a0      	cmp	r0, r4
 8009dee:	d10b      	bne.n	8009e08 <_free_r+0x6c>
 8009df0:	6820      	ldr	r0, [r4, #0]
 8009df2:	4401      	add	r1, r0
 8009df4:	1850      	adds	r0, r2, r1
 8009df6:	4283      	cmp	r3, r0
 8009df8:	6011      	str	r1, [r2, #0]
 8009dfa:	d1e0      	bne.n	8009dbe <_free_r+0x22>
 8009dfc:	6818      	ldr	r0, [r3, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	4401      	add	r1, r0
 8009e02:	6011      	str	r1, [r2, #0]
 8009e04:	6053      	str	r3, [r2, #4]
 8009e06:	e7da      	b.n	8009dbe <_free_r+0x22>
 8009e08:	d902      	bls.n	8009e10 <_free_r+0x74>
 8009e0a:	230c      	movs	r3, #12
 8009e0c:	602b      	str	r3, [r5, #0]
 8009e0e:	e7d6      	b.n	8009dbe <_free_r+0x22>
 8009e10:	6820      	ldr	r0, [r4, #0]
 8009e12:	1821      	adds	r1, r4, r0
 8009e14:	428b      	cmp	r3, r1
 8009e16:	bf01      	itttt	eq
 8009e18:	6819      	ldreq	r1, [r3, #0]
 8009e1a:	685b      	ldreq	r3, [r3, #4]
 8009e1c:	1809      	addeq	r1, r1, r0
 8009e1e:	6021      	streq	r1, [r4, #0]
 8009e20:	6063      	str	r3, [r4, #4]
 8009e22:	6054      	str	r4, [r2, #4]
 8009e24:	e7cb      	b.n	8009dbe <_free_r+0x22>
 8009e26:	bd38      	pop	{r3, r4, r5, pc}
 8009e28:	20001e6c 	.word	0x20001e6c

08009e2c <__ssputs_r>:
 8009e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e30:	688e      	ldr	r6, [r1, #8]
 8009e32:	4682      	mov	sl, r0
 8009e34:	429e      	cmp	r6, r3
 8009e36:	460c      	mov	r4, r1
 8009e38:	4690      	mov	r8, r2
 8009e3a:	461f      	mov	r7, r3
 8009e3c:	d838      	bhi.n	8009eb0 <__ssputs_r+0x84>
 8009e3e:	898a      	ldrh	r2, [r1, #12]
 8009e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e44:	d032      	beq.n	8009eac <__ssputs_r+0x80>
 8009e46:	6825      	ldr	r5, [r4, #0]
 8009e48:	6909      	ldr	r1, [r1, #16]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	eba5 0901 	sub.w	r9, r5, r1
 8009e50:	6965      	ldr	r5, [r4, #20]
 8009e52:	444b      	add	r3, r9
 8009e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e5c:	106d      	asrs	r5, r5, #1
 8009e5e:	429d      	cmp	r5, r3
 8009e60:	bf38      	it	cc
 8009e62:	461d      	movcc	r5, r3
 8009e64:	0553      	lsls	r3, r2, #21
 8009e66:	d531      	bpl.n	8009ecc <__ssputs_r+0xa0>
 8009e68:	4629      	mov	r1, r5
 8009e6a:	f7fd feef 	bl	8007c4c <_malloc_r>
 8009e6e:	4606      	mov	r6, r0
 8009e70:	b950      	cbnz	r0, 8009e88 <__ssputs_r+0x5c>
 8009e72:	230c      	movs	r3, #12
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295
 8009e78:	f8ca 3000 	str.w	r3, [sl]
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e82:	81a3      	strh	r3, [r4, #12]
 8009e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e88:	464a      	mov	r2, r9
 8009e8a:	6921      	ldr	r1, [r4, #16]
 8009e8c:	f7fd fea7 	bl	8007bde <memcpy>
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	6126      	str	r6, [r4, #16]
 8009e9e:	444e      	add	r6, r9
 8009ea0:	6026      	str	r6, [r4, #0]
 8009ea2:	463e      	mov	r6, r7
 8009ea4:	6165      	str	r5, [r4, #20]
 8009ea6:	eba5 0509 	sub.w	r5, r5, r9
 8009eaa:	60a5      	str	r5, [r4, #8]
 8009eac:	42be      	cmp	r6, r7
 8009eae:	d900      	bls.n	8009eb2 <__ssputs_r+0x86>
 8009eb0:	463e      	mov	r6, r7
 8009eb2:	4632      	mov	r2, r6
 8009eb4:	4641      	mov	r1, r8
 8009eb6:	6820      	ldr	r0, [r4, #0]
 8009eb8:	f000 fb2a 	bl	800a510 <memmove>
 8009ebc:	68a3      	ldr	r3, [r4, #8]
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	1b9b      	subs	r3, r3, r6
 8009ec2:	60a3      	str	r3, [r4, #8]
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	4433      	add	r3, r6
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	e7db      	b.n	8009e84 <__ssputs_r+0x58>
 8009ecc:	462a      	mov	r2, r5
 8009ece:	f000 fb39 	bl	800a544 <_realloc_r>
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d1e1      	bne.n	8009e9c <__ssputs_r+0x70>
 8009ed8:	4650      	mov	r0, sl
 8009eda:	6921      	ldr	r1, [r4, #16]
 8009edc:	f7ff ff5e 	bl	8009d9c <_free_r>
 8009ee0:	e7c7      	b.n	8009e72 <__ssputs_r+0x46>
	...

08009ee4 <_svfiprintf_r>:
 8009ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee8:	4698      	mov	r8, r3
 8009eea:	898b      	ldrh	r3, [r1, #12]
 8009eec:	4607      	mov	r7, r0
 8009eee:	061b      	lsls	r3, r3, #24
 8009ef0:	460d      	mov	r5, r1
 8009ef2:	4614      	mov	r4, r2
 8009ef4:	b09d      	sub	sp, #116	; 0x74
 8009ef6:	d50e      	bpl.n	8009f16 <_svfiprintf_r+0x32>
 8009ef8:	690b      	ldr	r3, [r1, #16]
 8009efa:	b963      	cbnz	r3, 8009f16 <_svfiprintf_r+0x32>
 8009efc:	2140      	movs	r1, #64	; 0x40
 8009efe:	f7fd fea5 	bl	8007c4c <_malloc_r>
 8009f02:	6028      	str	r0, [r5, #0]
 8009f04:	6128      	str	r0, [r5, #16]
 8009f06:	b920      	cbnz	r0, 8009f12 <_svfiprintf_r+0x2e>
 8009f08:	230c      	movs	r3, #12
 8009f0a:	603b      	str	r3, [r7, #0]
 8009f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f10:	e0d1      	b.n	800a0b6 <_svfiprintf_r+0x1d2>
 8009f12:	2340      	movs	r3, #64	; 0x40
 8009f14:	616b      	str	r3, [r5, #20]
 8009f16:	2300      	movs	r3, #0
 8009f18:	9309      	str	r3, [sp, #36]	; 0x24
 8009f1a:	2320      	movs	r3, #32
 8009f1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f20:	2330      	movs	r3, #48	; 0x30
 8009f22:	f04f 0901 	mov.w	r9, #1
 8009f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a0d0 <_svfiprintf_r+0x1ec>
 8009f2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f32:	4623      	mov	r3, r4
 8009f34:	469a      	mov	sl, r3
 8009f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f3a:	b10a      	cbz	r2, 8009f40 <_svfiprintf_r+0x5c>
 8009f3c:	2a25      	cmp	r2, #37	; 0x25
 8009f3e:	d1f9      	bne.n	8009f34 <_svfiprintf_r+0x50>
 8009f40:	ebba 0b04 	subs.w	fp, sl, r4
 8009f44:	d00b      	beq.n	8009f5e <_svfiprintf_r+0x7a>
 8009f46:	465b      	mov	r3, fp
 8009f48:	4622      	mov	r2, r4
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	f7ff ff6d 	bl	8009e2c <__ssputs_r>
 8009f52:	3001      	adds	r0, #1
 8009f54:	f000 80aa 	beq.w	800a0ac <_svfiprintf_r+0x1c8>
 8009f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f5a:	445a      	add	r2, fp
 8009f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f000 80a2 	beq.w	800a0ac <_svfiprintf_r+0x1c8>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f72:	f10a 0a01 	add.w	sl, sl, #1
 8009f76:	9304      	str	r3, [sp, #16]
 8009f78:	9307      	str	r3, [sp, #28]
 8009f7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f7e:	931a      	str	r3, [sp, #104]	; 0x68
 8009f80:	4654      	mov	r4, sl
 8009f82:	2205      	movs	r2, #5
 8009f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f88:	4851      	ldr	r0, [pc, #324]	; (800a0d0 <_svfiprintf_r+0x1ec>)
 8009f8a:	f000 fab3 	bl	800a4f4 <memchr>
 8009f8e:	9a04      	ldr	r2, [sp, #16]
 8009f90:	b9d8      	cbnz	r0, 8009fca <_svfiprintf_r+0xe6>
 8009f92:	06d0      	lsls	r0, r2, #27
 8009f94:	bf44      	itt	mi
 8009f96:	2320      	movmi	r3, #32
 8009f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f9c:	0711      	lsls	r1, r2, #28
 8009f9e:	bf44      	itt	mi
 8009fa0:	232b      	movmi	r3, #43	; 0x2b
 8009fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8009faa:	2b2a      	cmp	r3, #42	; 0x2a
 8009fac:	d015      	beq.n	8009fda <_svfiprintf_r+0xf6>
 8009fae:	4654      	mov	r4, sl
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	f04f 0c0a 	mov.w	ip, #10
 8009fb6:	9a07      	ldr	r2, [sp, #28]
 8009fb8:	4621      	mov	r1, r4
 8009fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fbe:	3b30      	subs	r3, #48	; 0x30
 8009fc0:	2b09      	cmp	r3, #9
 8009fc2:	d94e      	bls.n	800a062 <_svfiprintf_r+0x17e>
 8009fc4:	b1b0      	cbz	r0, 8009ff4 <_svfiprintf_r+0x110>
 8009fc6:	9207      	str	r2, [sp, #28]
 8009fc8:	e014      	b.n	8009ff4 <_svfiprintf_r+0x110>
 8009fca:	eba0 0308 	sub.w	r3, r0, r8
 8009fce:	fa09 f303 	lsl.w	r3, r9, r3
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	46a2      	mov	sl, r4
 8009fd6:	9304      	str	r3, [sp, #16]
 8009fd8:	e7d2      	b.n	8009f80 <_svfiprintf_r+0x9c>
 8009fda:	9b03      	ldr	r3, [sp, #12]
 8009fdc:	1d19      	adds	r1, r3, #4
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	9103      	str	r1, [sp, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	bfbb      	ittet	lt
 8009fe6:	425b      	neglt	r3, r3
 8009fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8009fec:	9307      	strge	r3, [sp, #28]
 8009fee:	9307      	strlt	r3, [sp, #28]
 8009ff0:	bfb8      	it	lt
 8009ff2:	9204      	strlt	r2, [sp, #16]
 8009ff4:	7823      	ldrb	r3, [r4, #0]
 8009ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ff8:	d10c      	bne.n	800a014 <_svfiprintf_r+0x130>
 8009ffa:	7863      	ldrb	r3, [r4, #1]
 8009ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8009ffe:	d135      	bne.n	800a06c <_svfiprintf_r+0x188>
 800a000:	9b03      	ldr	r3, [sp, #12]
 800a002:	3402      	adds	r4, #2
 800a004:	1d1a      	adds	r2, r3, #4
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	9203      	str	r2, [sp, #12]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	bfb8      	it	lt
 800a00e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a012:	9305      	str	r3, [sp, #20]
 800a014:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a0d4 <_svfiprintf_r+0x1f0>
 800a018:	2203      	movs	r2, #3
 800a01a:	4650      	mov	r0, sl
 800a01c:	7821      	ldrb	r1, [r4, #0]
 800a01e:	f000 fa69 	bl	800a4f4 <memchr>
 800a022:	b140      	cbz	r0, 800a036 <_svfiprintf_r+0x152>
 800a024:	2340      	movs	r3, #64	; 0x40
 800a026:	eba0 000a 	sub.w	r0, r0, sl
 800a02a:	fa03 f000 	lsl.w	r0, r3, r0
 800a02e:	9b04      	ldr	r3, [sp, #16]
 800a030:	3401      	adds	r4, #1
 800a032:	4303      	orrs	r3, r0
 800a034:	9304      	str	r3, [sp, #16]
 800a036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a03a:	2206      	movs	r2, #6
 800a03c:	4826      	ldr	r0, [pc, #152]	; (800a0d8 <_svfiprintf_r+0x1f4>)
 800a03e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a042:	f000 fa57 	bl	800a4f4 <memchr>
 800a046:	2800      	cmp	r0, #0
 800a048:	d038      	beq.n	800a0bc <_svfiprintf_r+0x1d8>
 800a04a:	4b24      	ldr	r3, [pc, #144]	; (800a0dc <_svfiprintf_r+0x1f8>)
 800a04c:	bb1b      	cbnz	r3, 800a096 <_svfiprintf_r+0x1b2>
 800a04e:	9b03      	ldr	r3, [sp, #12]
 800a050:	3307      	adds	r3, #7
 800a052:	f023 0307 	bic.w	r3, r3, #7
 800a056:	3308      	adds	r3, #8
 800a058:	9303      	str	r3, [sp, #12]
 800a05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05c:	4433      	add	r3, r6
 800a05e:	9309      	str	r3, [sp, #36]	; 0x24
 800a060:	e767      	b.n	8009f32 <_svfiprintf_r+0x4e>
 800a062:	460c      	mov	r4, r1
 800a064:	2001      	movs	r0, #1
 800a066:	fb0c 3202 	mla	r2, ip, r2, r3
 800a06a:	e7a5      	b.n	8009fb8 <_svfiprintf_r+0xd4>
 800a06c:	2300      	movs	r3, #0
 800a06e:	f04f 0c0a 	mov.w	ip, #10
 800a072:	4619      	mov	r1, r3
 800a074:	3401      	adds	r4, #1
 800a076:	9305      	str	r3, [sp, #20]
 800a078:	4620      	mov	r0, r4
 800a07a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a07e:	3a30      	subs	r2, #48	; 0x30
 800a080:	2a09      	cmp	r2, #9
 800a082:	d903      	bls.n	800a08c <_svfiprintf_r+0x1a8>
 800a084:	2b00      	cmp	r3, #0
 800a086:	d0c5      	beq.n	800a014 <_svfiprintf_r+0x130>
 800a088:	9105      	str	r1, [sp, #20]
 800a08a:	e7c3      	b.n	800a014 <_svfiprintf_r+0x130>
 800a08c:	4604      	mov	r4, r0
 800a08e:	2301      	movs	r3, #1
 800a090:	fb0c 2101 	mla	r1, ip, r1, r2
 800a094:	e7f0      	b.n	800a078 <_svfiprintf_r+0x194>
 800a096:	ab03      	add	r3, sp, #12
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	462a      	mov	r2, r5
 800a09c:	4638      	mov	r0, r7
 800a09e:	4b10      	ldr	r3, [pc, #64]	; (800a0e0 <_svfiprintf_r+0x1fc>)
 800a0a0:	a904      	add	r1, sp, #16
 800a0a2:	f3af 8000 	nop.w
 800a0a6:	1c42      	adds	r2, r0, #1
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	d1d6      	bne.n	800a05a <_svfiprintf_r+0x176>
 800a0ac:	89ab      	ldrh	r3, [r5, #12]
 800a0ae:	065b      	lsls	r3, r3, #25
 800a0b0:	f53f af2c 	bmi.w	8009f0c <_svfiprintf_r+0x28>
 800a0b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0b6:	b01d      	add	sp, #116	; 0x74
 800a0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0bc:	ab03      	add	r3, sp, #12
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	462a      	mov	r2, r5
 800a0c2:	4638      	mov	r0, r7
 800a0c4:	4b06      	ldr	r3, [pc, #24]	; (800a0e0 <_svfiprintf_r+0x1fc>)
 800a0c6:	a904      	add	r1, sp, #16
 800a0c8:	f000 f87c 	bl	800a1c4 <_printf_i>
 800a0cc:	e7eb      	b.n	800a0a6 <_svfiprintf_r+0x1c2>
 800a0ce:	bf00      	nop
 800a0d0:	0800be2c 	.word	0x0800be2c
 800a0d4:	0800be32 	.word	0x0800be32
 800a0d8:	0800be36 	.word	0x0800be36
 800a0dc:	00000000 	.word	0x00000000
 800a0e0:	08009e2d 	.word	0x08009e2d

0800a0e4 <_printf_common>:
 800a0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0e8:	4616      	mov	r6, r2
 800a0ea:	4699      	mov	r9, r3
 800a0ec:	688a      	ldr	r2, [r1, #8]
 800a0ee:	690b      	ldr	r3, [r1, #16]
 800a0f0:	4607      	mov	r7, r0
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	bfb8      	it	lt
 800a0f6:	4613      	movlt	r3, r2
 800a0f8:	6033      	str	r3, [r6, #0]
 800a0fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0fe:	460c      	mov	r4, r1
 800a100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a104:	b10a      	cbz	r2, 800a10a <_printf_common+0x26>
 800a106:	3301      	adds	r3, #1
 800a108:	6033      	str	r3, [r6, #0]
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	0699      	lsls	r1, r3, #26
 800a10e:	bf42      	ittt	mi
 800a110:	6833      	ldrmi	r3, [r6, #0]
 800a112:	3302      	addmi	r3, #2
 800a114:	6033      	strmi	r3, [r6, #0]
 800a116:	6825      	ldr	r5, [r4, #0]
 800a118:	f015 0506 	ands.w	r5, r5, #6
 800a11c:	d106      	bne.n	800a12c <_printf_common+0x48>
 800a11e:	f104 0a19 	add.w	sl, r4, #25
 800a122:	68e3      	ldr	r3, [r4, #12]
 800a124:	6832      	ldr	r2, [r6, #0]
 800a126:	1a9b      	subs	r3, r3, r2
 800a128:	42ab      	cmp	r3, r5
 800a12a:	dc28      	bgt.n	800a17e <_printf_common+0x9a>
 800a12c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a130:	1e13      	subs	r3, r2, #0
 800a132:	6822      	ldr	r2, [r4, #0]
 800a134:	bf18      	it	ne
 800a136:	2301      	movne	r3, #1
 800a138:	0692      	lsls	r2, r2, #26
 800a13a:	d42d      	bmi.n	800a198 <_printf_common+0xb4>
 800a13c:	4649      	mov	r1, r9
 800a13e:	4638      	mov	r0, r7
 800a140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a144:	47c0      	blx	r8
 800a146:	3001      	adds	r0, #1
 800a148:	d020      	beq.n	800a18c <_printf_common+0xa8>
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	68e5      	ldr	r5, [r4, #12]
 800a14e:	f003 0306 	and.w	r3, r3, #6
 800a152:	2b04      	cmp	r3, #4
 800a154:	bf18      	it	ne
 800a156:	2500      	movne	r5, #0
 800a158:	6832      	ldr	r2, [r6, #0]
 800a15a:	f04f 0600 	mov.w	r6, #0
 800a15e:	68a3      	ldr	r3, [r4, #8]
 800a160:	bf08      	it	eq
 800a162:	1aad      	subeq	r5, r5, r2
 800a164:	6922      	ldr	r2, [r4, #16]
 800a166:	bf08      	it	eq
 800a168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a16c:	4293      	cmp	r3, r2
 800a16e:	bfc4      	itt	gt
 800a170:	1a9b      	subgt	r3, r3, r2
 800a172:	18ed      	addgt	r5, r5, r3
 800a174:	341a      	adds	r4, #26
 800a176:	42b5      	cmp	r5, r6
 800a178:	d11a      	bne.n	800a1b0 <_printf_common+0xcc>
 800a17a:	2000      	movs	r0, #0
 800a17c:	e008      	b.n	800a190 <_printf_common+0xac>
 800a17e:	2301      	movs	r3, #1
 800a180:	4652      	mov	r2, sl
 800a182:	4649      	mov	r1, r9
 800a184:	4638      	mov	r0, r7
 800a186:	47c0      	blx	r8
 800a188:	3001      	adds	r0, #1
 800a18a:	d103      	bne.n	800a194 <_printf_common+0xb0>
 800a18c:	f04f 30ff 	mov.w	r0, #4294967295
 800a190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a194:	3501      	adds	r5, #1
 800a196:	e7c4      	b.n	800a122 <_printf_common+0x3e>
 800a198:	2030      	movs	r0, #48	; 0x30
 800a19a:	18e1      	adds	r1, r4, r3
 800a19c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1a0:	1c5a      	adds	r2, r3, #1
 800a1a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1a6:	4422      	add	r2, r4
 800a1a8:	3302      	adds	r3, #2
 800a1aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1ae:	e7c5      	b.n	800a13c <_printf_common+0x58>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	4622      	mov	r2, r4
 800a1b4:	4649      	mov	r1, r9
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	47c0      	blx	r8
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d0e6      	beq.n	800a18c <_printf_common+0xa8>
 800a1be:	3601      	adds	r6, #1
 800a1c0:	e7d9      	b.n	800a176 <_printf_common+0x92>
	...

0800a1c4 <_printf_i>:
 800a1c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c8:	7e0f      	ldrb	r7, [r1, #24]
 800a1ca:	4691      	mov	r9, r2
 800a1cc:	2f78      	cmp	r7, #120	; 0x78
 800a1ce:	4680      	mov	r8, r0
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	469a      	mov	sl, r3
 800a1d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1da:	d807      	bhi.n	800a1ec <_printf_i+0x28>
 800a1dc:	2f62      	cmp	r7, #98	; 0x62
 800a1de:	d80a      	bhi.n	800a1f6 <_printf_i+0x32>
 800a1e0:	2f00      	cmp	r7, #0
 800a1e2:	f000 80d9 	beq.w	800a398 <_printf_i+0x1d4>
 800a1e6:	2f58      	cmp	r7, #88	; 0x58
 800a1e8:	f000 80a4 	beq.w	800a334 <_printf_i+0x170>
 800a1ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1f4:	e03a      	b.n	800a26c <_printf_i+0xa8>
 800a1f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1fa:	2b15      	cmp	r3, #21
 800a1fc:	d8f6      	bhi.n	800a1ec <_printf_i+0x28>
 800a1fe:	a101      	add	r1, pc, #4	; (adr r1, 800a204 <_printf_i+0x40>)
 800a200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a204:	0800a25d 	.word	0x0800a25d
 800a208:	0800a271 	.word	0x0800a271
 800a20c:	0800a1ed 	.word	0x0800a1ed
 800a210:	0800a1ed 	.word	0x0800a1ed
 800a214:	0800a1ed 	.word	0x0800a1ed
 800a218:	0800a1ed 	.word	0x0800a1ed
 800a21c:	0800a271 	.word	0x0800a271
 800a220:	0800a1ed 	.word	0x0800a1ed
 800a224:	0800a1ed 	.word	0x0800a1ed
 800a228:	0800a1ed 	.word	0x0800a1ed
 800a22c:	0800a1ed 	.word	0x0800a1ed
 800a230:	0800a37f 	.word	0x0800a37f
 800a234:	0800a2a1 	.word	0x0800a2a1
 800a238:	0800a361 	.word	0x0800a361
 800a23c:	0800a1ed 	.word	0x0800a1ed
 800a240:	0800a1ed 	.word	0x0800a1ed
 800a244:	0800a3a1 	.word	0x0800a3a1
 800a248:	0800a1ed 	.word	0x0800a1ed
 800a24c:	0800a2a1 	.word	0x0800a2a1
 800a250:	0800a1ed 	.word	0x0800a1ed
 800a254:	0800a1ed 	.word	0x0800a1ed
 800a258:	0800a369 	.word	0x0800a369
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	1d1a      	adds	r2, r3, #4
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	602a      	str	r2, [r5, #0]
 800a264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a26c:	2301      	movs	r3, #1
 800a26e:	e0a4      	b.n	800a3ba <_printf_i+0x1f6>
 800a270:	6820      	ldr	r0, [r4, #0]
 800a272:	6829      	ldr	r1, [r5, #0]
 800a274:	0606      	lsls	r6, r0, #24
 800a276:	f101 0304 	add.w	r3, r1, #4
 800a27a:	d50a      	bpl.n	800a292 <_printf_i+0xce>
 800a27c:	680e      	ldr	r6, [r1, #0]
 800a27e:	602b      	str	r3, [r5, #0]
 800a280:	2e00      	cmp	r6, #0
 800a282:	da03      	bge.n	800a28c <_printf_i+0xc8>
 800a284:	232d      	movs	r3, #45	; 0x2d
 800a286:	4276      	negs	r6, r6
 800a288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a28c:	230a      	movs	r3, #10
 800a28e:	485e      	ldr	r0, [pc, #376]	; (800a408 <_printf_i+0x244>)
 800a290:	e019      	b.n	800a2c6 <_printf_i+0x102>
 800a292:	680e      	ldr	r6, [r1, #0]
 800a294:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a298:	602b      	str	r3, [r5, #0]
 800a29a:	bf18      	it	ne
 800a29c:	b236      	sxthne	r6, r6
 800a29e:	e7ef      	b.n	800a280 <_printf_i+0xbc>
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	6820      	ldr	r0, [r4, #0]
 800a2a4:	1d19      	adds	r1, r3, #4
 800a2a6:	6029      	str	r1, [r5, #0]
 800a2a8:	0601      	lsls	r1, r0, #24
 800a2aa:	d501      	bpl.n	800a2b0 <_printf_i+0xec>
 800a2ac:	681e      	ldr	r6, [r3, #0]
 800a2ae:	e002      	b.n	800a2b6 <_printf_i+0xf2>
 800a2b0:	0646      	lsls	r6, r0, #25
 800a2b2:	d5fb      	bpl.n	800a2ac <_printf_i+0xe8>
 800a2b4:	881e      	ldrh	r6, [r3, #0]
 800a2b6:	2f6f      	cmp	r7, #111	; 0x6f
 800a2b8:	bf0c      	ite	eq
 800a2ba:	2308      	moveq	r3, #8
 800a2bc:	230a      	movne	r3, #10
 800a2be:	4852      	ldr	r0, [pc, #328]	; (800a408 <_printf_i+0x244>)
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2c6:	6865      	ldr	r5, [r4, #4]
 800a2c8:	2d00      	cmp	r5, #0
 800a2ca:	bfa8      	it	ge
 800a2cc:	6821      	ldrge	r1, [r4, #0]
 800a2ce:	60a5      	str	r5, [r4, #8]
 800a2d0:	bfa4      	itt	ge
 800a2d2:	f021 0104 	bicge.w	r1, r1, #4
 800a2d6:	6021      	strge	r1, [r4, #0]
 800a2d8:	b90e      	cbnz	r6, 800a2de <_printf_i+0x11a>
 800a2da:	2d00      	cmp	r5, #0
 800a2dc:	d04d      	beq.n	800a37a <_printf_i+0x1b6>
 800a2de:	4615      	mov	r5, r2
 800a2e0:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2e4:	fb03 6711 	mls	r7, r3, r1, r6
 800a2e8:	5dc7      	ldrb	r7, [r0, r7]
 800a2ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2ee:	4637      	mov	r7, r6
 800a2f0:	42bb      	cmp	r3, r7
 800a2f2:	460e      	mov	r6, r1
 800a2f4:	d9f4      	bls.n	800a2e0 <_printf_i+0x11c>
 800a2f6:	2b08      	cmp	r3, #8
 800a2f8:	d10b      	bne.n	800a312 <_printf_i+0x14e>
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	07de      	lsls	r6, r3, #31
 800a2fe:	d508      	bpl.n	800a312 <_printf_i+0x14e>
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	6861      	ldr	r1, [r4, #4]
 800a304:	4299      	cmp	r1, r3
 800a306:	bfde      	ittt	le
 800a308:	2330      	movle	r3, #48	; 0x30
 800a30a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a30e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a312:	1b52      	subs	r2, r2, r5
 800a314:	6122      	str	r2, [r4, #16]
 800a316:	464b      	mov	r3, r9
 800a318:	4621      	mov	r1, r4
 800a31a:	4640      	mov	r0, r8
 800a31c:	f8cd a000 	str.w	sl, [sp]
 800a320:	aa03      	add	r2, sp, #12
 800a322:	f7ff fedf 	bl	800a0e4 <_printf_common>
 800a326:	3001      	adds	r0, #1
 800a328:	d14c      	bne.n	800a3c4 <_printf_i+0x200>
 800a32a:	f04f 30ff 	mov.w	r0, #4294967295
 800a32e:	b004      	add	sp, #16
 800a330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a334:	4834      	ldr	r0, [pc, #208]	; (800a408 <_printf_i+0x244>)
 800a336:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a33a:	6829      	ldr	r1, [r5, #0]
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	f851 6b04 	ldr.w	r6, [r1], #4
 800a342:	6029      	str	r1, [r5, #0]
 800a344:	061d      	lsls	r5, r3, #24
 800a346:	d514      	bpl.n	800a372 <_printf_i+0x1ae>
 800a348:	07df      	lsls	r7, r3, #31
 800a34a:	bf44      	itt	mi
 800a34c:	f043 0320 	orrmi.w	r3, r3, #32
 800a350:	6023      	strmi	r3, [r4, #0]
 800a352:	b91e      	cbnz	r6, 800a35c <_printf_i+0x198>
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	f023 0320 	bic.w	r3, r3, #32
 800a35a:	6023      	str	r3, [r4, #0]
 800a35c:	2310      	movs	r3, #16
 800a35e:	e7af      	b.n	800a2c0 <_printf_i+0xfc>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	f043 0320 	orr.w	r3, r3, #32
 800a366:	6023      	str	r3, [r4, #0]
 800a368:	2378      	movs	r3, #120	; 0x78
 800a36a:	4828      	ldr	r0, [pc, #160]	; (800a40c <_printf_i+0x248>)
 800a36c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a370:	e7e3      	b.n	800a33a <_printf_i+0x176>
 800a372:	0659      	lsls	r1, r3, #25
 800a374:	bf48      	it	mi
 800a376:	b2b6      	uxthmi	r6, r6
 800a378:	e7e6      	b.n	800a348 <_printf_i+0x184>
 800a37a:	4615      	mov	r5, r2
 800a37c:	e7bb      	b.n	800a2f6 <_printf_i+0x132>
 800a37e:	682b      	ldr	r3, [r5, #0]
 800a380:	6826      	ldr	r6, [r4, #0]
 800a382:	1d18      	adds	r0, r3, #4
 800a384:	6961      	ldr	r1, [r4, #20]
 800a386:	6028      	str	r0, [r5, #0]
 800a388:	0635      	lsls	r5, r6, #24
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	d501      	bpl.n	800a392 <_printf_i+0x1ce>
 800a38e:	6019      	str	r1, [r3, #0]
 800a390:	e002      	b.n	800a398 <_printf_i+0x1d4>
 800a392:	0670      	lsls	r0, r6, #25
 800a394:	d5fb      	bpl.n	800a38e <_printf_i+0x1ca>
 800a396:	8019      	strh	r1, [r3, #0]
 800a398:	2300      	movs	r3, #0
 800a39a:	4615      	mov	r5, r2
 800a39c:	6123      	str	r3, [r4, #16]
 800a39e:	e7ba      	b.n	800a316 <_printf_i+0x152>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	1d1a      	adds	r2, r3, #4
 800a3a6:	602a      	str	r2, [r5, #0]
 800a3a8:	681d      	ldr	r5, [r3, #0]
 800a3aa:	6862      	ldr	r2, [r4, #4]
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f000 f8a1 	bl	800a4f4 <memchr>
 800a3b2:	b108      	cbz	r0, 800a3b8 <_printf_i+0x1f4>
 800a3b4:	1b40      	subs	r0, r0, r5
 800a3b6:	6060      	str	r0, [r4, #4]
 800a3b8:	6863      	ldr	r3, [r4, #4]
 800a3ba:	6123      	str	r3, [r4, #16]
 800a3bc:	2300      	movs	r3, #0
 800a3be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c2:	e7a8      	b.n	800a316 <_printf_i+0x152>
 800a3c4:	462a      	mov	r2, r5
 800a3c6:	4649      	mov	r1, r9
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	6923      	ldr	r3, [r4, #16]
 800a3cc:	47d0      	blx	sl
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	d0ab      	beq.n	800a32a <_printf_i+0x166>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	079b      	lsls	r3, r3, #30
 800a3d6:	d413      	bmi.n	800a400 <_printf_i+0x23c>
 800a3d8:	68e0      	ldr	r0, [r4, #12]
 800a3da:	9b03      	ldr	r3, [sp, #12]
 800a3dc:	4298      	cmp	r0, r3
 800a3de:	bfb8      	it	lt
 800a3e0:	4618      	movlt	r0, r3
 800a3e2:	e7a4      	b.n	800a32e <_printf_i+0x16a>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	4632      	mov	r2, r6
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	47d0      	blx	sl
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	d09b      	beq.n	800a32a <_printf_i+0x166>
 800a3f2:	3501      	adds	r5, #1
 800a3f4:	68e3      	ldr	r3, [r4, #12]
 800a3f6:	9903      	ldr	r1, [sp, #12]
 800a3f8:	1a5b      	subs	r3, r3, r1
 800a3fa:	42ab      	cmp	r3, r5
 800a3fc:	dcf2      	bgt.n	800a3e4 <_printf_i+0x220>
 800a3fe:	e7eb      	b.n	800a3d8 <_printf_i+0x214>
 800a400:	2500      	movs	r5, #0
 800a402:	f104 0619 	add.w	r6, r4, #25
 800a406:	e7f5      	b.n	800a3f4 <_printf_i+0x230>
 800a408:	0800be3d 	.word	0x0800be3d
 800a40c:	0800be4e 	.word	0x0800be4e

0800a410 <_read_r>:
 800a410:	b538      	push	{r3, r4, r5, lr}
 800a412:	4604      	mov	r4, r0
 800a414:	4608      	mov	r0, r1
 800a416:	4611      	mov	r1, r2
 800a418:	2200      	movs	r2, #0
 800a41a:	4d05      	ldr	r5, [pc, #20]	; (800a430 <_read_r+0x20>)
 800a41c:	602a      	str	r2, [r5, #0]
 800a41e:	461a      	mov	r2, r3
 800a420:	f7f8 fc4b 	bl	8002cba <_read>
 800a424:	1c43      	adds	r3, r0, #1
 800a426:	d102      	bne.n	800a42e <_read_r+0x1e>
 800a428:	682b      	ldr	r3, [r5, #0]
 800a42a:	b103      	cbz	r3, 800a42e <_read_r+0x1e>
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	bd38      	pop	{r3, r4, r5, pc}
 800a430:	20001e74 	.word	0x20001e74

0800a434 <nan>:
 800a434:	2000      	movs	r0, #0
 800a436:	4901      	ldr	r1, [pc, #4]	; (800a43c <nan+0x8>)
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	7ff80000 	.word	0x7ff80000

0800a440 <strncmp>:
 800a440:	4603      	mov	r3, r0
 800a442:	b510      	push	{r4, lr}
 800a444:	b172      	cbz	r2, 800a464 <strncmp+0x24>
 800a446:	3901      	subs	r1, #1
 800a448:	1884      	adds	r4, r0, r2
 800a44a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a44e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a452:	4290      	cmp	r0, r2
 800a454:	d101      	bne.n	800a45a <strncmp+0x1a>
 800a456:	42a3      	cmp	r3, r4
 800a458:	d101      	bne.n	800a45e <strncmp+0x1e>
 800a45a:	1a80      	subs	r0, r0, r2
 800a45c:	bd10      	pop	{r4, pc}
 800a45e:	2800      	cmp	r0, #0
 800a460:	d1f3      	bne.n	800a44a <strncmp+0xa>
 800a462:	e7fa      	b.n	800a45a <strncmp+0x1a>
 800a464:	4610      	mov	r0, r2
 800a466:	e7f9      	b.n	800a45c <strncmp+0x1c>

0800a468 <__ascii_wctomb>:
 800a468:	4603      	mov	r3, r0
 800a46a:	4608      	mov	r0, r1
 800a46c:	b141      	cbz	r1, 800a480 <__ascii_wctomb+0x18>
 800a46e:	2aff      	cmp	r2, #255	; 0xff
 800a470:	d904      	bls.n	800a47c <__ascii_wctomb+0x14>
 800a472:	228a      	movs	r2, #138	; 0x8a
 800a474:	f04f 30ff 	mov.w	r0, #4294967295
 800a478:	601a      	str	r2, [r3, #0]
 800a47a:	4770      	bx	lr
 800a47c:	2001      	movs	r0, #1
 800a47e:	700a      	strb	r2, [r1, #0]
 800a480:	4770      	bx	lr
	...

0800a484 <__assert_func>:
 800a484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a486:	4614      	mov	r4, r2
 800a488:	461a      	mov	r2, r3
 800a48a:	4b09      	ldr	r3, [pc, #36]	; (800a4b0 <__assert_func+0x2c>)
 800a48c:	4605      	mov	r5, r0
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68d8      	ldr	r0, [r3, #12]
 800a492:	b14c      	cbz	r4, 800a4a8 <__assert_func+0x24>
 800a494:	4b07      	ldr	r3, [pc, #28]	; (800a4b4 <__assert_func+0x30>)
 800a496:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a49a:	9100      	str	r1, [sp, #0]
 800a49c:	462b      	mov	r3, r5
 800a49e:	4906      	ldr	r1, [pc, #24]	; (800a4b8 <__assert_func+0x34>)
 800a4a0:	f000 f80e 	bl	800a4c0 <fiprintf>
 800a4a4:	f000 fa94 	bl	800a9d0 <abort>
 800a4a8:	4b04      	ldr	r3, [pc, #16]	; (800a4bc <__assert_func+0x38>)
 800a4aa:	461c      	mov	r4, r3
 800a4ac:	e7f3      	b.n	800a496 <__assert_func+0x12>
 800a4ae:	bf00      	nop
 800a4b0:	20000010 	.word	0x20000010
 800a4b4:	0800be5f 	.word	0x0800be5f
 800a4b8:	0800be6c 	.word	0x0800be6c
 800a4bc:	0800be9a 	.word	0x0800be9a

0800a4c0 <fiprintf>:
 800a4c0:	b40e      	push	{r1, r2, r3}
 800a4c2:	b503      	push	{r0, r1, lr}
 800a4c4:	4601      	mov	r1, r0
 800a4c6:	ab03      	add	r3, sp, #12
 800a4c8:	4805      	ldr	r0, [pc, #20]	; (800a4e0 <fiprintf+0x20>)
 800a4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ce:	6800      	ldr	r0, [r0, #0]
 800a4d0:	9301      	str	r3, [sp, #4]
 800a4d2:	f000 f88d 	bl	800a5f0 <_vfiprintf_r>
 800a4d6:	b002      	add	sp, #8
 800a4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4dc:	b003      	add	sp, #12
 800a4de:	4770      	bx	lr
 800a4e0:	20000010 	.word	0x20000010

0800a4e4 <malloc>:
 800a4e4:	4b02      	ldr	r3, [pc, #8]	; (800a4f0 <malloc+0xc>)
 800a4e6:	4601      	mov	r1, r0
 800a4e8:	6818      	ldr	r0, [r3, #0]
 800a4ea:	f7fd bbaf 	b.w	8007c4c <_malloc_r>
 800a4ee:	bf00      	nop
 800a4f0:	20000010 	.word	0x20000010

0800a4f4 <memchr>:
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	b510      	push	{r4, lr}
 800a4f8:	b2c9      	uxtb	r1, r1
 800a4fa:	4402      	add	r2, r0
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	4618      	mov	r0, r3
 800a500:	d101      	bne.n	800a506 <memchr+0x12>
 800a502:	2000      	movs	r0, #0
 800a504:	e003      	b.n	800a50e <memchr+0x1a>
 800a506:	7804      	ldrb	r4, [r0, #0]
 800a508:	3301      	adds	r3, #1
 800a50a:	428c      	cmp	r4, r1
 800a50c:	d1f6      	bne.n	800a4fc <memchr+0x8>
 800a50e:	bd10      	pop	{r4, pc}

0800a510 <memmove>:
 800a510:	4288      	cmp	r0, r1
 800a512:	b510      	push	{r4, lr}
 800a514:	eb01 0402 	add.w	r4, r1, r2
 800a518:	d902      	bls.n	800a520 <memmove+0x10>
 800a51a:	4284      	cmp	r4, r0
 800a51c:	4623      	mov	r3, r4
 800a51e:	d807      	bhi.n	800a530 <memmove+0x20>
 800a520:	1e43      	subs	r3, r0, #1
 800a522:	42a1      	cmp	r1, r4
 800a524:	d008      	beq.n	800a538 <memmove+0x28>
 800a526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a52a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a52e:	e7f8      	b.n	800a522 <memmove+0x12>
 800a530:	4601      	mov	r1, r0
 800a532:	4402      	add	r2, r0
 800a534:	428a      	cmp	r2, r1
 800a536:	d100      	bne.n	800a53a <memmove+0x2a>
 800a538:	bd10      	pop	{r4, pc}
 800a53a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a53e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a542:	e7f7      	b.n	800a534 <memmove+0x24>

0800a544 <_realloc_r>:
 800a544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a548:	4680      	mov	r8, r0
 800a54a:	4614      	mov	r4, r2
 800a54c:	460e      	mov	r6, r1
 800a54e:	b921      	cbnz	r1, 800a55a <_realloc_r+0x16>
 800a550:	4611      	mov	r1, r2
 800a552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a556:	f7fd bb79 	b.w	8007c4c <_malloc_r>
 800a55a:	b92a      	cbnz	r2, 800a568 <_realloc_r+0x24>
 800a55c:	f7ff fc1e 	bl	8009d9c <_free_r>
 800a560:	4625      	mov	r5, r4
 800a562:	4628      	mov	r0, r5
 800a564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a568:	f000 fa9e 	bl	800aaa8 <_malloc_usable_size_r>
 800a56c:	4284      	cmp	r4, r0
 800a56e:	4607      	mov	r7, r0
 800a570:	d802      	bhi.n	800a578 <_realloc_r+0x34>
 800a572:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a576:	d812      	bhi.n	800a59e <_realloc_r+0x5a>
 800a578:	4621      	mov	r1, r4
 800a57a:	4640      	mov	r0, r8
 800a57c:	f7fd fb66 	bl	8007c4c <_malloc_r>
 800a580:	4605      	mov	r5, r0
 800a582:	2800      	cmp	r0, #0
 800a584:	d0ed      	beq.n	800a562 <_realloc_r+0x1e>
 800a586:	42bc      	cmp	r4, r7
 800a588:	4622      	mov	r2, r4
 800a58a:	4631      	mov	r1, r6
 800a58c:	bf28      	it	cs
 800a58e:	463a      	movcs	r2, r7
 800a590:	f7fd fb25 	bl	8007bde <memcpy>
 800a594:	4631      	mov	r1, r6
 800a596:	4640      	mov	r0, r8
 800a598:	f7ff fc00 	bl	8009d9c <_free_r>
 800a59c:	e7e1      	b.n	800a562 <_realloc_r+0x1e>
 800a59e:	4635      	mov	r5, r6
 800a5a0:	e7df      	b.n	800a562 <_realloc_r+0x1e>

0800a5a2 <__sfputc_r>:
 800a5a2:	6893      	ldr	r3, [r2, #8]
 800a5a4:	b410      	push	{r4}
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	6093      	str	r3, [r2, #8]
 800a5ac:	da07      	bge.n	800a5be <__sfputc_r+0x1c>
 800a5ae:	6994      	ldr	r4, [r2, #24]
 800a5b0:	42a3      	cmp	r3, r4
 800a5b2:	db01      	blt.n	800a5b8 <__sfputc_r+0x16>
 800a5b4:	290a      	cmp	r1, #10
 800a5b6:	d102      	bne.n	800a5be <__sfputc_r+0x1c>
 800a5b8:	bc10      	pop	{r4}
 800a5ba:	f000 b949 	b.w	800a850 <__swbuf_r>
 800a5be:	6813      	ldr	r3, [r2, #0]
 800a5c0:	1c58      	adds	r0, r3, #1
 800a5c2:	6010      	str	r0, [r2, #0]
 800a5c4:	7019      	strb	r1, [r3, #0]
 800a5c6:	4608      	mov	r0, r1
 800a5c8:	bc10      	pop	{r4}
 800a5ca:	4770      	bx	lr

0800a5cc <__sfputs_r>:
 800a5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ce:	4606      	mov	r6, r0
 800a5d0:	460f      	mov	r7, r1
 800a5d2:	4614      	mov	r4, r2
 800a5d4:	18d5      	adds	r5, r2, r3
 800a5d6:	42ac      	cmp	r4, r5
 800a5d8:	d101      	bne.n	800a5de <__sfputs_r+0x12>
 800a5da:	2000      	movs	r0, #0
 800a5dc:	e007      	b.n	800a5ee <__sfputs_r+0x22>
 800a5de:	463a      	mov	r2, r7
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e6:	f7ff ffdc 	bl	800a5a2 <__sfputc_r>
 800a5ea:	1c43      	adds	r3, r0, #1
 800a5ec:	d1f3      	bne.n	800a5d6 <__sfputs_r+0xa>
 800a5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5f0 <_vfiprintf_r>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	460d      	mov	r5, r1
 800a5f6:	4614      	mov	r4, r2
 800a5f8:	4698      	mov	r8, r3
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	b09d      	sub	sp, #116	; 0x74
 800a5fe:	b118      	cbz	r0, 800a608 <_vfiprintf_r+0x18>
 800a600:	6983      	ldr	r3, [r0, #24]
 800a602:	b90b      	cbnz	r3, 800a608 <_vfiprintf_r+0x18>
 800a604:	f7fd fa26 	bl	8007a54 <__sinit>
 800a608:	4b89      	ldr	r3, [pc, #548]	; (800a830 <_vfiprintf_r+0x240>)
 800a60a:	429d      	cmp	r5, r3
 800a60c:	d11b      	bne.n	800a646 <_vfiprintf_r+0x56>
 800a60e:	6875      	ldr	r5, [r6, #4]
 800a610:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a612:	07d9      	lsls	r1, r3, #31
 800a614:	d405      	bmi.n	800a622 <_vfiprintf_r+0x32>
 800a616:	89ab      	ldrh	r3, [r5, #12]
 800a618:	059a      	lsls	r2, r3, #22
 800a61a:	d402      	bmi.n	800a622 <_vfiprintf_r+0x32>
 800a61c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a61e:	f7fd fadc 	bl	8007bda <__retarget_lock_acquire_recursive>
 800a622:	89ab      	ldrh	r3, [r5, #12]
 800a624:	071b      	lsls	r3, r3, #28
 800a626:	d501      	bpl.n	800a62c <_vfiprintf_r+0x3c>
 800a628:	692b      	ldr	r3, [r5, #16]
 800a62a:	b9eb      	cbnz	r3, 800a668 <_vfiprintf_r+0x78>
 800a62c:	4629      	mov	r1, r5
 800a62e:	4630      	mov	r0, r6
 800a630:	f000 f960 	bl	800a8f4 <__swsetup_r>
 800a634:	b1c0      	cbz	r0, 800a668 <_vfiprintf_r+0x78>
 800a636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a638:	07dc      	lsls	r4, r3, #31
 800a63a:	d50e      	bpl.n	800a65a <_vfiprintf_r+0x6a>
 800a63c:	f04f 30ff 	mov.w	r0, #4294967295
 800a640:	b01d      	add	sp, #116	; 0x74
 800a642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a646:	4b7b      	ldr	r3, [pc, #492]	; (800a834 <_vfiprintf_r+0x244>)
 800a648:	429d      	cmp	r5, r3
 800a64a:	d101      	bne.n	800a650 <_vfiprintf_r+0x60>
 800a64c:	68b5      	ldr	r5, [r6, #8]
 800a64e:	e7df      	b.n	800a610 <_vfiprintf_r+0x20>
 800a650:	4b79      	ldr	r3, [pc, #484]	; (800a838 <_vfiprintf_r+0x248>)
 800a652:	429d      	cmp	r5, r3
 800a654:	bf08      	it	eq
 800a656:	68f5      	ldreq	r5, [r6, #12]
 800a658:	e7da      	b.n	800a610 <_vfiprintf_r+0x20>
 800a65a:	89ab      	ldrh	r3, [r5, #12]
 800a65c:	0598      	lsls	r0, r3, #22
 800a65e:	d4ed      	bmi.n	800a63c <_vfiprintf_r+0x4c>
 800a660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a662:	f7fd fabb 	bl	8007bdc <__retarget_lock_release_recursive>
 800a666:	e7e9      	b.n	800a63c <_vfiprintf_r+0x4c>
 800a668:	2300      	movs	r3, #0
 800a66a:	9309      	str	r3, [sp, #36]	; 0x24
 800a66c:	2320      	movs	r3, #32
 800a66e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a672:	2330      	movs	r3, #48	; 0x30
 800a674:	f04f 0901 	mov.w	r9, #1
 800a678:	f8cd 800c 	str.w	r8, [sp, #12]
 800a67c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a83c <_vfiprintf_r+0x24c>
 800a680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a684:	4623      	mov	r3, r4
 800a686:	469a      	mov	sl, r3
 800a688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a68c:	b10a      	cbz	r2, 800a692 <_vfiprintf_r+0xa2>
 800a68e:	2a25      	cmp	r2, #37	; 0x25
 800a690:	d1f9      	bne.n	800a686 <_vfiprintf_r+0x96>
 800a692:	ebba 0b04 	subs.w	fp, sl, r4
 800a696:	d00b      	beq.n	800a6b0 <_vfiprintf_r+0xc0>
 800a698:	465b      	mov	r3, fp
 800a69a:	4622      	mov	r2, r4
 800a69c:	4629      	mov	r1, r5
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f7ff ff94 	bl	800a5cc <__sfputs_r>
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	f000 80aa 	beq.w	800a7fe <_vfiprintf_r+0x20e>
 800a6aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6ac:	445a      	add	r2, fp
 800a6ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f000 80a2 	beq.w	800a7fe <_vfiprintf_r+0x20e>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6c4:	f10a 0a01 	add.w	sl, sl, #1
 800a6c8:	9304      	str	r3, [sp, #16]
 800a6ca:	9307      	str	r3, [sp, #28]
 800a6cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6d0:	931a      	str	r3, [sp, #104]	; 0x68
 800a6d2:	4654      	mov	r4, sl
 800a6d4:	2205      	movs	r2, #5
 800a6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6da:	4858      	ldr	r0, [pc, #352]	; (800a83c <_vfiprintf_r+0x24c>)
 800a6dc:	f7ff ff0a 	bl	800a4f4 <memchr>
 800a6e0:	9a04      	ldr	r2, [sp, #16]
 800a6e2:	b9d8      	cbnz	r0, 800a71c <_vfiprintf_r+0x12c>
 800a6e4:	06d1      	lsls	r1, r2, #27
 800a6e6:	bf44      	itt	mi
 800a6e8:	2320      	movmi	r3, #32
 800a6ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ee:	0713      	lsls	r3, r2, #28
 800a6f0:	bf44      	itt	mi
 800a6f2:	232b      	movmi	r3, #43	; 0x2b
 800a6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a6fe:	d015      	beq.n	800a72c <_vfiprintf_r+0x13c>
 800a700:	4654      	mov	r4, sl
 800a702:	2000      	movs	r0, #0
 800a704:	f04f 0c0a 	mov.w	ip, #10
 800a708:	9a07      	ldr	r2, [sp, #28]
 800a70a:	4621      	mov	r1, r4
 800a70c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a710:	3b30      	subs	r3, #48	; 0x30
 800a712:	2b09      	cmp	r3, #9
 800a714:	d94e      	bls.n	800a7b4 <_vfiprintf_r+0x1c4>
 800a716:	b1b0      	cbz	r0, 800a746 <_vfiprintf_r+0x156>
 800a718:	9207      	str	r2, [sp, #28]
 800a71a:	e014      	b.n	800a746 <_vfiprintf_r+0x156>
 800a71c:	eba0 0308 	sub.w	r3, r0, r8
 800a720:	fa09 f303 	lsl.w	r3, r9, r3
 800a724:	4313      	orrs	r3, r2
 800a726:	46a2      	mov	sl, r4
 800a728:	9304      	str	r3, [sp, #16]
 800a72a:	e7d2      	b.n	800a6d2 <_vfiprintf_r+0xe2>
 800a72c:	9b03      	ldr	r3, [sp, #12]
 800a72e:	1d19      	adds	r1, r3, #4
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	9103      	str	r1, [sp, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	bfbb      	ittet	lt
 800a738:	425b      	neglt	r3, r3
 800a73a:	f042 0202 	orrlt.w	r2, r2, #2
 800a73e:	9307      	strge	r3, [sp, #28]
 800a740:	9307      	strlt	r3, [sp, #28]
 800a742:	bfb8      	it	lt
 800a744:	9204      	strlt	r2, [sp, #16]
 800a746:	7823      	ldrb	r3, [r4, #0]
 800a748:	2b2e      	cmp	r3, #46	; 0x2e
 800a74a:	d10c      	bne.n	800a766 <_vfiprintf_r+0x176>
 800a74c:	7863      	ldrb	r3, [r4, #1]
 800a74e:	2b2a      	cmp	r3, #42	; 0x2a
 800a750:	d135      	bne.n	800a7be <_vfiprintf_r+0x1ce>
 800a752:	9b03      	ldr	r3, [sp, #12]
 800a754:	3402      	adds	r4, #2
 800a756:	1d1a      	adds	r2, r3, #4
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	9203      	str	r2, [sp, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	bfb8      	it	lt
 800a760:	f04f 33ff 	movlt.w	r3, #4294967295
 800a764:	9305      	str	r3, [sp, #20]
 800a766:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a840 <_vfiprintf_r+0x250>
 800a76a:	2203      	movs	r2, #3
 800a76c:	4650      	mov	r0, sl
 800a76e:	7821      	ldrb	r1, [r4, #0]
 800a770:	f7ff fec0 	bl	800a4f4 <memchr>
 800a774:	b140      	cbz	r0, 800a788 <_vfiprintf_r+0x198>
 800a776:	2340      	movs	r3, #64	; 0x40
 800a778:	eba0 000a 	sub.w	r0, r0, sl
 800a77c:	fa03 f000 	lsl.w	r0, r3, r0
 800a780:	9b04      	ldr	r3, [sp, #16]
 800a782:	3401      	adds	r4, #1
 800a784:	4303      	orrs	r3, r0
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a78c:	2206      	movs	r2, #6
 800a78e:	482d      	ldr	r0, [pc, #180]	; (800a844 <_vfiprintf_r+0x254>)
 800a790:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a794:	f7ff feae 	bl	800a4f4 <memchr>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d03f      	beq.n	800a81c <_vfiprintf_r+0x22c>
 800a79c:	4b2a      	ldr	r3, [pc, #168]	; (800a848 <_vfiprintf_r+0x258>)
 800a79e:	bb1b      	cbnz	r3, 800a7e8 <_vfiprintf_r+0x1f8>
 800a7a0:	9b03      	ldr	r3, [sp, #12]
 800a7a2:	3307      	adds	r3, #7
 800a7a4:	f023 0307 	bic.w	r3, r3, #7
 800a7a8:	3308      	adds	r3, #8
 800a7aa:	9303      	str	r3, [sp, #12]
 800a7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ae:	443b      	add	r3, r7
 800a7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b2:	e767      	b.n	800a684 <_vfiprintf_r+0x94>
 800a7b4:	460c      	mov	r4, r1
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7bc:	e7a5      	b.n	800a70a <_vfiprintf_r+0x11a>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	f04f 0c0a 	mov.w	ip, #10
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	3401      	adds	r4, #1
 800a7c8:	9305      	str	r3, [sp, #20]
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7d0:	3a30      	subs	r2, #48	; 0x30
 800a7d2:	2a09      	cmp	r2, #9
 800a7d4:	d903      	bls.n	800a7de <_vfiprintf_r+0x1ee>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0c5      	beq.n	800a766 <_vfiprintf_r+0x176>
 800a7da:	9105      	str	r1, [sp, #20]
 800a7dc:	e7c3      	b.n	800a766 <_vfiprintf_r+0x176>
 800a7de:	4604      	mov	r4, r0
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7e6:	e7f0      	b.n	800a7ca <_vfiprintf_r+0x1da>
 800a7e8:	ab03      	add	r3, sp, #12
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	462a      	mov	r2, r5
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	4b16      	ldr	r3, [pc, #88]	; (800a84c <_vfiprintf_r+0x25c>)
 800a7f2:	a904      	add	r1, sp, #16
 800a7f4:	f3af 8000 	nop.w
 800a7f8:	4607      	mov	r7, r0
 800a7fa:	1c78      	adds	r0, r7, #1
 800a7fc:	d1d6      	bne.n	800a7ac <_vfiprintf_r+0x1bc>
 800a7fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a800:	07d9      	lsls	r1, r3, #31
 800a802:	d405      	bmi.n	800a810 <_vfiprintf_r+0x220>
 800a804:	89ab      	ldrh	r3, [r5, #12]
 800a806:	059a      	lsls	r2, r3, #22
 800a808:	d402      	bmi.n	800a810 <_vfiprintf_r+0x220>
 800a80a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a80c:	f7fd f9e6 	bl	8007bdc <__retarget_lock_release_recursive>
 800a810:	89ab      	ldrh	r3, [r5, #12]
 800a812:	065b      	lsls	r3, r3, #25
 800a814:	f53f af12 	bmi.w	800a63c <_vfiprintf_r+0x4c>
 800a818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a81a:	e711      	b.n	800a640 <_vfiprintf_r+0x50>
 800a81c:	ab03      	add	r3, sp, #12
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	462a      	mov	r2, r5
 800a822:	4630      	mov	r0, r6
 800a824:	4b09      	ldr	r3, [pc, #36]	; (800a84c <_vfiprintf_r+0x25c>)
 800a826:	a904      	add	r1, sp, #16
 800a828:	f7ff fccc 	bl	800a1c4 <_printf_i>
 800a82c:	e7e4      	b.n	800a7f8 <_vfiprintf_r+0x208>
 800a82e:	bf00      	nop
 800a830:	0800bb8c 	.word	0x0800bb8c
 800a834:	0800bbac 	.word	0x0800bbac
 800a838:	0800bb6c 	.word	0x0800bb6c
 800a83c:	0800be2c 	.word	0x0800be2c
 800a840:	0800be32 	.word	0x0800be32
 800a844:	0800be36 	.word	0x0800be36
 800a848:	00000000 	.word	0x00000000
 800a84c:	0800a5cd 	.word	0x0800a5cd

0800a850 <__swbuf_r>:
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a852:	460e      	mov	r6, r1
 800a854:	4614      	mov	r4, r2
 800a856:	4605      	mov	r5, r0
 800a858:	b118      	cbz	r0, 800a862 <__swbuf_r+0x12>
 800a85a:	6983      	ldr	r3, [r0, #24]
 800a85c:	b90b      	cbnz	r3, 800a862 <__swbuf_r+0x12>
 800a85e:	f7fd f8f9 	bl	8007a54 <__sinit>
 800a862:	4b21      	ldr	r3, [pc, #132]	; (800a8e8 <__swbuf_r+0x98>)
 800a864:	429c      	cmp	r4, r3
 800a866:	d12b      	bne.n	800a8c0 <__swbuf_r+0x70>
 800a868:	686c      	ldr	r4, [r5, #4]
 800a86a:	69a3      	ldr	r3, [r4, #24]
 800a86c:	60a3      	str	r3, [r4, #8]
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	071a      	lsls	r2, r3, #28
 800a872:	d52f      	bpl.n	800a8d4 <__swbuf_r+0x84>
 800a874:	6923      	ldr	r3, [r4, #16]
 800a876:	b36b      	cbz	r3, 800a8d4 <__swbuf_r+0x84>
 800a878:	6923      	ldr	r3, [r4, #16]
 800a87a:	6820      	ldr	r0, [r4, #0]
 800a87c:	b2f6      	uxtb	r6, r6
 800a87e:	1ac0      	subs	r0, r0, r3
 800a880:	6963      	ldr	r3, [r4, #20]
 800a882:	4637      	mov	r7, r6
 800a884:	4283      	cmp	r3, r0
 800a886:	dc04      	bgt.n	800a892 <__swbuf_r+0x42>
 800a888:	4621      	mov	r1, r4
 800a88a:	4628      	mov	r0, r5
 800a88c:	f7fe f9e8 	bl	8008c60 <_fflush_r>
 800a890:	bb30      	cbnz	r0, 800a8e0 <__swbuf_r+0x90>
 800a892:	68a3      	ldr	r3, [r4, #8]
 800a894:	3001      	adds	r0, #1
 800a896:	3b01      	subs	r3, #1
 800a898:	60a3      	str	r3, [r4, #8]
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	1c5a      	adds	r2, r3, #1
 800a89e:	6022      	str	r2, [r4, #0]
 800a8a0:	701e      	strb	r6, [r3, #0]
 800a8a2:	6963      	ldr	r3, [r4, #20]
 800a8a4:	4283      	cmp	r3, r0
 800a8a6:	d004      	beq.n	800a8b2 <__swbuf_r+0x62>
 800a8a8:	89a3      	ldrh	r3, [r4, #12]
 800a8aa:	07db      	lsls	r3, r3, #31
 800a8ac:	d506      	bpl.n	800a8bc <__swbuf_r+0x6c>
 800a8ae:	2e0a      	cmp	r6, #10
 800a8b0:	d104      	bne.n	800a8bc <__swbuf_r+0x6c>
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	f7fe f9d3 	bl	8008c60 <_fflush_r>
 800a8ba:	b988      	cbnz	r0, 800a8e0 <__swbuf_r+0x90>
 800a8bc:	4638      	mov	r0, r7
 800a8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <__swbuf_r+0x9c>)
 800a8c2:	429c      	cmp	r4, r3
 800a8c4:	d101      	bne.n	800a8ca <__swbuf_r+0x7a>
 800a8c6:	68ac      	ldr	r4, [r5, #8]
 800a8c8:	e7cf      	b.n	800a86a <__swbuf_r+0x1a>
 800a8ca:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <__swbuf_r+0xa0>)
 800a8cc:	429c      	cmp	r4, r3
 800a8ce:	bf08      	it	eq
 800a8d0:	68ec      	ldreq	r4, [r5, #12]
 800a8d2:	e7ca      	b.n	800a86a <__swbuf_r+0x1a>
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	f000 f80c 	bl	800a8f4 <__swsetup_r>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d0cb      	beq.n	800a878 <__swbuf_r+0x28>
 800a8e0:	f04f 37ff 	mov.w	r7, #4294967295
 800a8e4:	e7ea      	b.n	800a8bc <__swbuf_r+0x6c>
 800a8e6:	bf00      	nop
 800a8e8:	0800bb8c 	.word	0x0800bb8c
 800a8ec:	0800bbac 	.word	0x0800bbac
 800a8f0:	0800bb6c 	.word	0x0800bb6c

0800a8f4 <__swsetup_r>:
 800a8f4:	4b32      	ldr	r3, [pc, #200]	; (800a9c0 <__swsetup_r+0xcc>)
 800a8f6:	b570      	push	{r4, r5, r6, lr}
 800a8f8:	681d      	ldr	r5, [r3, #0]
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	b125      	cbz	r5, 800a90a <__swsetup_r+0x16>
 800a900:	69ab      	ldr	r3, [r5, #24]
 800a902:	b913      	cbnz	r3, 800a90a <__swsetup_r+0x16>
 800a904:	4628      	mov	r0, r5
 800a906:	f7fd f8a5 	bl	8007a54 <__sinit>
 800a90a:	4b2e      	ldr	r3, [pc, #184]	; (800a9c4 <__swsetup_r+0xd0>)
 800a90c:	429c      	cmp	r4, r3
 800a90e:	d10f      	bne.n	800a930 <__swsetup_r+0x3c>
 800a910:	686c      	ldr	r4, [r5, #4]
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a918:	0719      	lsls	r1, r3, #28
 800a91a:	d42c      	bmi.n	800a976 <__swsetup_r+0x82>
 800a91c:	06dd      	lsls	r5, r3, #27
 800a91e:	d411      	bmi.n	800a944 <__swsetup_r+0x50>
 800a920:	2309      	movs	r3, #9
 800a922:	6033      	str	r3, [r6, #0]
 800a924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a928:	f04f 30ff 	mov.w	r0, #4294967295
 800a92c:	81a3      	strh	r3, [r4, #12]
 800a92e:	e03e      	b.n	800a9ae <__swsetup_r+0xba>
 800a930:	4b25      	ldr	r3, [pc, #148]	; (800a9c8 <__swsetup_r+0xd4>)
 800a932:	429c      	cmp	r4, r3
 800a934:	d101      	bne.n	800a93a <__swsetup_r+0x46>
 800a936:	68ac      	ldr	r4, [r5, #8]
 800a938:	e7eb      	b.n	800a912 <__swsetup_r+0x1e>
 800a93a:	4b24      	ldr	r3, [pc, #144]	; (800a9cc <__swsetup_r+0xd8>)
 800a93c:	429c      	cmp	r4, r3
 800a93e:	bf08      	it	eq
 800a940:	68ec      	ldreq	r4, [r5, #12]
 800a942:	e7e6      	b.n	800a912 <__swsetup_r+0x1e>
 800a944:	0758      	lsls	r0, r3, #29
 800a946:	d512      	bpl.n	800a96e <__swsetup_r+0x7a>
 800a948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a94a:	b141      	cbz	r1, 800a95e <__swsetup_r+0x6a>
 800a94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a950:	4299      	cmp	r1, r3
 800a952:	d002      	beq.n	800a95a <__swsetup_r+0x66>
 800a954:	4630      	mov	r0, r6
 800a956:	f7ff fa21 	bl	8009d9c <_free_r>
 800a95a:	2300      	movs	r3, #0
 800a95c:	6363      	str	r3, [r4, #52]	; 0x34
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	2300      	movs	r3, #0
 800a968:	6063      	str	r3, [r4, #4]
 800a96a:	6923      	ldr	r3, [r4, #16]
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	89a3      	ldrh	r3, [r4, #12]
 800a970:	f043 0308 	orr.w	r3, r3, #8
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	6923      	ldr	r3, [r4, #16]
 800a978:	b94b      	cbnz	r3, 800a98e <__swsetup_r+0x9a>
 800a97a:	89a3      	ldrh	r3, [r4, #12]
 800a97c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a984:	d003      	beq.n	800a98e <__swsetup_r+0x9a>
 800a986:	4621      	mov	r1, r4
 800a988:	4630      	mov	r0, r6
 800a98a:	f000 f84d 	bl	800aa28 <__smakebuf_r>
 800a98e:	89a0      	ldrh	r0, [r4, #12]
 800a990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a994:	f010 0301 	ands.w	r3, r0, #1
 800a998:	d00a      	beq.n	800a9b0 <__swsetup_r+0xbc>
 800a99a:	2300      	movs	r3, #0
 800a99c:	60a3      	str	r3, [r4, #8]
 800a99e:	6963      	ldr	r3, [r4, #20]
 800a9a0:	425b      	negs	r3, r3
 800a9a2:	61a3      	str	r3, [r4, #24]
 800a9a4:	6923      	ldr	r3, [r4, #16]
 800a9a6:	b943      	cbnz	r3, 800a9ba <__swsetup_r+0xc6>
 800a9a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9ac:	d1ba      	bne.n	800a924 <__swsetup_r+0x30>
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	0781      	lsls	r1, r0, #30
 800a9b2:	bf58      	it	pl
 800a9b4:	6963      	ldrpl	r3, [r4, #20]
 800a9b6:	60a3      	str	r3, [r4, #8]
 800a9b8:	e7f4      	b.n	800a9a4 <__swsetup_r+0xb0>
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	e7f7      	b.n	800a9ae <__swsetup_r+0xba>
 800a9be:	bf00      	nop
 800a9c0:	20000010 	.word	0x20000010
 800a9c4:	0800bb8c 	.word	0x0800bb8c
 800a9c8:	0800bbac 	.word	0x0800bbac
 800a9cc:	0800bb6c 	.word	0x0800bb6c

0800a9d0 <abort>:
 800a9d0:	2006      	movs	r0, #6
 800a9d2:	b508      	push	{r3, lr}
 800a9d4:	f000 f898 	bl	800ab08 <raise>
 800a9d8:	2001      	movs	r0, #1
 800a9da:	f7f8 f964 	bl	8002ca6 <_exit>

0800a9de <__swhatbuf_r>:
 800a9de:	b570      	push	{r4, r5, r6, lr}
 800a9e0:	460e      	mov	r6, r1
 800a9e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e6:	4614      	mov	r4, r2
 800a9e8:	2900      	cmp	r1, #0
 800a9ea:	461d      	mov	r5, r3
 800a9ec:	b096      	sub	sp, #88	; 0x58
 800a9ee:	da08      	bge.n	800aa02 <__swhatbuf_r+0x24>
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a9f6:	602a      	str	r2, [r5, #0]
 800a9f8:	061a      	lsls	r2, r3, #24
 800a9fa:	d410      	bmi.n	800aa1e <__swhatbuf_r+0x40>
 800a9fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa00:	e00e      	b.n	800aa20 <__swhatbuf_r+0x42>
 800aa02:	466a      	mov	r2, sp
 800aa04:	f000 f89c 	bl	800ab40 <_fstat_r>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	dbf1      	blt.n	800a9f0 <__swhatbuf_r+0x12>
 800aa0c:	9a01      	ldr	r2, [sp, #4]
 800aa0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa16:	425a      	negs	r2, r3
 800aa18:	415a      	adcs	r2, r3
 800aa1a:	602a      	str	r2, [r5, #0]
 800aa1c:	e7ee      	b.n	800a9fc <__swhatbuf_r+0x1e>
 800aa1e:	2340      	movs	r3, #64	; 0x40
 800aa20:	2000      	movs	r0, #0
 800aa22:	6023      	str	r3, [r4, #0]
 800aa24:	b016      	add	sp, #88	; 0x58
 800aa26:	bd70      	pop	{r4, r5, r6, pc}

0800aa28 <__smakebuf_r>:
 800aa28:	898b      	ldrh	r3, [r1, #12]
 800aa2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa2c:	079d      	lsls	r5, r3, #30
 800aa2e:	4606      	mov	r6, r0
 800aa30:	460c      	mov	r4, r1
 800aa32:	d507      	bpl.n	800aa44 <__smakebuf_r+0x1c>
 800aa34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa38:	6023      	str	r3, [r4, #0]
 800aa3a:	6123      	str	r3, [r4, #16]
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	6163      	str	r3, [r4, #20]
 800aa40:	b002      	add	sp, #8
 800aa42:	bd70      	pop	{r4, r5, r6, pc}
 800aa44:	466a      	mov	r2, sp
 800aa46:	ab01      	add	r3, sp, #4
 800aa48:	f7ff ffc9 	bl	800a9de <__swhatbuf_r>
 800aa4c:	9900      	ldr	r1, [sp, #0]
 800aa4e:	4605      	mov	r5, r0
 800aa50:	4630      	mov	r0, r6
 800aa52:	f7fd f8fb 	bl	8007c4c <_malloc_r>
 800aa56:	b948      	cbnz	r0, 800aa6c <__smakebuf_r+0x44>
 800aa58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa5c:	059a      	lsls	r2, r3, #22
 800aa5e:	d4ef      	bmi.n	800aa40 <__smakebuf_r+0x18>
 800aa60:	f023 0303 	bic.w	r3, r3, #3
 800aa64:	f043 0302 	orr.w	r3, r3, #2
 800aa68:	81a3      	strh	r3, [r4, #12]
 800aa6a:	e7e3      	b.n	800aa34 <__smakebuf_r+0xc>
 800aa6c:	4b0d      	ldr	r3, [pc, #52]	; (800aaa4 <__smakebuf_r+0x7c>)
 800aa6e:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa70:	89a3      	ldrh	r3, [r4, #12]
 800aa72:	6020      	str	r0, [r4, #0]
 800aa74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa78:	81a3      	strh	r3, [r4, #12]
 800aa7a:	9b00      	ldr	r3, [sp, #0]
 800aa7c:	6120      	str	r0, [r4, #16]
 800aa7e:	6163      	str	r3, [r4, #20]
 800aa80:	9b01      	ldr	r3, [sp, #4]
 800aa82:	b15b      	cbz	r3, 800aa9c <__smakebuf_r+0x74>
 800aa84:	4630      	mov	r0, r6
 800aa86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa8a:	f000 f86b 	bl	800ab64 <_isatty_r>
 800aa8e:	b128      	cbz	r0, 800aa9c <__smakebuf_r+0x74>
 800aa90:	89a3      	ldrh	r3, [r4, #12]
 800aa92:	f023 0303 	bic.w	r3, r3, #3
 800aa96:	f043 0301 	orr.w	r3, r3, #1
 800aa9a:	81a3      	strh	r3, [r4, #12]
 800aa9c:	89a0      	ldrh	r0, [r4, #12]
 800aa9e:	4305      	orrs	r5, r0
 800aaa0:	81a5      	strh	r5, [r4, #12]
 800aaa2:	e7cd      	b.n	800aa40 <__smakebuf_r+0x18>
 800aaa4:	080079ed 	.word	0x080079ed

0800aaa8 <_malloc_usable_size_r>:
 800aaa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaac:	1f18      	subs	r0, r3, #4
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	bfbc      	itt	lt
 800aab2:	580b      	ldrlt	r3, [r1, r0]
 800aab4:	18c0      	addlt	r0, r0, r3
 800aab6:	4770      	bx	lr

0800aab8 <_raise_r>:
 800aab8:	291f      	cmp	r1, #31
 800aaba:	b538      	push	{r3, r4, r5, lr}
 800aabc:	4604      	mov	r4, r0
 800aabe:	460d      	mov	r5, r1
 800aac0:	d904      	bls.n	800aacc <_raise_r+0x14>
 800aac2:	2316      	movs	r3, #22
 800aac4:	6003      	str	r3, [r0, #0]
 800aac6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aace:	b112      	cbz	r2, 800aad6 <_raise_r+0x1e>
 800aad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aad4:	b94b      	cbnz	r3, 800aaea <_raise_r+0x32>
 800aad6:	4620      	mov	r0, r4
 800aad8:	f000 f830 	bl	800ab3c <_getpid_r>
 800aadc:	462a      	mov	r2, r5
 800aade:	4601      	mov	r1, r0
 800aae0:	4620      	mov	r0, r4
 800aae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aae6:	f000 b817 	b.w	800ab18 <_kill_r>
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d00a      	beq.n	800ab04 <_raise_r+0x4c>
 800aaee:	1c59      	adds	r1, r3, #1
 800aaf0:	d103      	bne.n	800aafa <_raise_r+0x42>
 800aaf2:	2316      	movs	r3, #22
 800aaf4:	6003      	str	r3, [r0, #0]
 800aaf6:	2001      	movs	r0, #1
 800aaf8:	e7e7      	b.n	800aaca <_raise_r+0x12>
 800aafa:	2400      	movs	r4, #0
 800aafc:	4628      	mov	r0, r5
 800aafe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab02:	4798      	blx	r3
 800ab04:	2000      	movs	r0, #0
 800ab06:	e7e0      	b.n	800aaca <_raise_r+0x12>

0800ab08 <raise>:
 800ab08:	4b02      	ldr	r3, [pc, #8]	; (800ab14 <raise+0xc>)
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	6818      	ldr	r0, [r3, #0]
 800ab0e:	f7ff bfd3 	b.w	800aab8 <_raise_r>
 800ab12:	bf00      	nop
 800ab14:	20000010 	.word	0x20000010

0800ab18 <_kill_r>:
 800ab18:	b538      	push	{r3, r4, r5, lr}
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	4d06      	ldr	r5, [pc, #24]	; (800ab38 <_kill_r+0x20>)
 800ab1e:	4604      	mov	r4, r0
 800ab20:	4608      	mov	r0, r1
 800ab22:	4611      	mov	r1, r2
 800ab24:	602b      	str	r3, [r5, #0]
 800ab26:	f7f8 f8ae 	bl	8002c86 <_kill>
 800ab2a:	1c43      	adds	r3, r0, #1
 800ab2c:	d102      	bne.n	800ab34 <_kill_r+0x1c>
 800ab2e:	682b      	ldr	r3, [r5, #0]
 800ab30:	b103      	cbz	r3, 800ab34 <_kill_r+0x1c>
 800ab32:	6023      	str	r3, [r4, #0]
 800ab34:	bd38      	pop	{r3, r4, r5, pc}
 800ab36:	bf00      	nop
 800ab38:	20001e74 	.word	0x20001e74

0800ab3c <_getpid_r>:
 800ab3c:	f7f8 b89c 	b.w	8002c78 <_getpid>

0800ab40 <_fstat_r>:
 800ab40:	b538      	push	{r3, r4, r5, lr}
 800ab42:	2300      	movs	r3, #0
 800ab44:	4d06      	ldr	r5, [pc, #24]	; (800ab60 <_fstat_r+0x20>)
 800ab46:	4604      	mov	r4, r0
 800ab48:	4608      	mov	r0, r1
 800ab4a:	4611      	mov	r1, r2
 800ab4c:	602b      	str	r3, [r5, #0]
 800ab4e:	f7f8 f8f8 	bl	8002d42 <_fstat>
 800ab52:	1c43      	adds	r3, r0, #1
 800ab54:	d102      	bne.n	800ab5c <_fstat_r+0x1c>
 800ab56:	682b      	ldr	r3, [r5, #0]
 800ab58:	b103      	cbz	r3, 800ab5c <_fstat_r+0x1c>
 800ab5a:	6023      	str	r3, [r4, #0]
 800ab5c:	bd38      	pop	{r3, r4, r5, pc}
 800ab5e:	bf00      	nop
 800ab60:	20001e74 	.word	0x20001e74

0800ab64 <_isatty_r>:
 800ab64:	b538      	push	{r3, r4, r5, lr}
 800ab66:	2300      	movs	r3, #0
 800ab68:	4d05      	ldr	r5, [pc, #20]	; (800ab80 <_isatty_r+0x1c>)
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	4608      	mov	r0, r1
 800ab6e:	602b      	str	r3, [r5, #0]
 800ab70:	f7f8 f8f6 	bl	8002d60 <_isatty>
 800ab74:	1c43      	adds	r3, r0, #1
 800ab76:	d102      	bne.n	800ab7e <_isatty_r+0x1a>
 800ab78:	682b      	ldr	r3, [r5, #0]
 800ab7a:	b103      	cbz	r3, 800ab7e <_isatty_r+0x1a>
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	bd38      	pop	{r3, r4, r5, pc}
 800ab80:	20001e74 	.word	0x20001e74

0800ab84 <pow>:
 800ab84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab88:	4614      	mov	r4, r2
 800ab8a:	461d      	mov	r5, r3
 800ab8c:	4680      	mov	r8, r0
 800ab8e:	4689      	mov	r9, r1
 800ab90:	f000 f886 	bl	800aca0 <__ieee754_pow>
 800ab94:	4622      	mov	r2, r4
 800ab96:	4606      	mov	r6, r0
 800ab98:	460f      	mov	r7, r1
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	4629      	mov	r1, r5
 800aba0:	f7f6 f858 	bl	8000c54 <__aeabi_dcmpun>
 800aba4:	bbc8      	cbnz	r0, 800ac1a <pow+0x96>
 800aba6:	2200      	movs	r2, #0
 800aba8:	2300      	movs	r3, #0
 800abaa:	4640      	mov	r0, r8
 800abac:	4649      	mov	r1, r9
 800abae:	f7f6 f81f 	bl	8000bf0 <__aeabi_dcmpeq>
 800abb2:	b1b8      	cbz	r0, 800abe4 <pow+0x60>
 800abb4:	2200      	movs	r2, #0
 800abb6:	2300      	movs	r3, #0
 800abb8:	4620      	mov	r0, r4
 800abba:	4629      	mov	r1, r5
 800abbc:	f7f6 f818 	bl	8000bf0 <__aeabi_dcmpeq>
 800abc0:	2800      	cmp	r0, #0
 800abc2:	d141      	bne.n	800ac48 <pow+0xc4>
 800abc4:	4620      	mov	r0, r4
 800abc6:	4629      	mov	r1, r5
 800abc8:	f000 fe5f 	bl	800b88a <finite>
 800abcc:	b328      	cbz	r0, 800ac1a <pow+0x96>
 800abce:	2200      	movs	r2, #0
 800abd0:	2300      	movs	r3, #0
 800abd2:	4620      	mov	r0, r4
 800abd4:	4629      	mov	r1, r5
 800abd6:	f7f6 f815 	bl	8000c04 <__aeabi_dcmplt>
 800abda:	b1f0      	cbz	r0, 800ac1a <pow+0x96>
 800abdc:	f7fc fedc 	bl	8007998 <__errno>
 800abe0:	2322      	movs	r3, #34	; 0x22
 800abe2:	e019      	b.n	800ac18 <pow+0x94>
 800abe4:	4630      	mov	r0, r6
 800abe6:	4639      	mov	r1, r7
 800abe8:	f000 fe4f 	bl	800b88a <finite>
 800abec:	b9c8      	cbnz	r0, 800ac22 <pow+0x9e>
 800abee:	4640      	mov	r0, r8
 800abf0:	4649      	mov	r1, r9
 800abf2:	f000 fe4a 	bl	800b88a <finite>
 800abf6:	b1a0      	cbz	r0, 800ac22 <pow+0x9e>
 800abf8:	4620      	mov	r0, r4
 800abfa:	4629      	mov	r1, r5
 800abfc:	f000 fe45 	bl	800b88a <finite>
 800ac00:	b178      	cbz	r0, 800ac22 <pow+0x9e>
 800ac02:	4632      	mov	r2, r6
 800ac04:	463b      	mov	r3, r7
 800ac06:	4630      	mov	r0, r6
 800ac08:	4639      	mov	r1, r7
 800ac0a:	f7f6 f823 	bl	8000c54 <__aeabi_dcmpun>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d0e4      	beq.n	800abdc <pow+0x58>
 800ac12:	f7fc fec1 	bl	8007998 <__errno>
 800ac16:	2321      	movs	r3, #33	; 0x21
 800ac18:	6003      	str	r3, [r0, #0]
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	4639      	mov	r1, r7
 800ac1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac22:	2200      	movs	r2, #0
 800ac24:	2300      	movs	r3, #0
 800ac26:	4630      	mov	r0, r6
 800ac28:	4639      	mov	r1, r7
 800ac2a:	f7f5 ffe1 	bl	8000bf0 <__aeabi_dcmpeq>
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d0f3      	beq.n	800ac1a <pow+0x96>
 800ac32:	4640      	mov	r0, r8
 800ac34:	4649      	mov	r1, r9
 800ac36:	f000 fe28 	bl	800b88a <finite>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d0ed      	beq.n	800ac1a <pow+0x96>
 800ac3e:	4620      	mov	r0, r4
 800ac40:	4629      	mov	r1, r5
 800ac42:	f000 fe22 	bl	800b88a <finite>
 800ac46:	e7c8      	b.n	800abda <pow+0x56>
 800ac48:	2600      	movs	r6, #0
 800ac4a:	4f01      	ldr	r7, [pc, #4]	; (800ac50 <pow+0xcc>)
 800ac4c:	e7e5      	b.n	800ac1a <pow+0x96>
 800ac4e:	bf00      	nop
 800ac50:	3ff00000 	.word	0x3ff00000

0800ac54 <sqrt>:
 800ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac56:	4606      	mov	r6, r0
 800ac58:	460f      	mov	r7, r1
 800ac5a:	f000 fd37 	bl	800b6cc <__ieee754_sqrt>
 800ac5e:	4632      	mov	r2, r6
 800ac60:	4604      	mov	r4, r0
 800ac62:	460d      	mov	r5, r1
 800ac64:	463b      	mov	r3, r7
 800ac66:	4630      	mov	r0, r6
 800ac68:	4639      	mov	r1, r7
 800ac6a:	f7f5 fff3 	bl	8000c54 <__aeabi_dcmpun>
 800ac6e:	b990      	cbnz	r0, 800ac96 <sqrt+0x42>
 800ac70:	2200      	movs	r2, #0
 800ac72:	2300      	movs	r3, #0
 800ac74:	4630      	mov	r0, r6
 800ac76:	4639      	mov	r1, r7
 800ac78:	f7f5 ffc4 	bl	8000c04 <__aeabi_dcmplt>
 800ac7c:	b158      	cbz	r0, 800ac96 <sqrt+0x42>
 800ac7e:	f7fc fe8b 	bl	8007998 <__errno>
 800ac82:	2321      	movs	r3, #33	; 0x21
 800ac84:	2200      	movs	r2, #0
 800ac86:	6003      	str	r3, [r0, #0]
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4610      	mov	r0, r2
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	f7f5 fe71 	bl	8000974 <__aeabi_ddiv>
 800ac92:	4604      	mov	r4, r0
 800ac94:	460d      	mov	r5, r1
 800ac96:	4620      	mov	r0, r4
 800ac98:	4629      	mov	r1, r5
 800ac9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac9c:	0000      	movs	r0, r0
	...

0800aca0 <__ieee754_pow>:
 800aca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca4:	b093      	sub	sp, #76	; 0x4c
 800aca6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acaa:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800acae:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800acb2:	4689      	mov	r9, r1
 800acb4:	ea56 0102 	orrs.w	r1, r6, r2
 800acb8:	4680      	mov	r8, r0
 800acba:	d111      	bne.n	800ace0 <__ieee754_pow+0x40>
 800acbc:	1803      	adds	r3, r0, r0
 800acbe:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800acc2:	4152      	adcs	r2, r2
 800acc4:	4299      	cmp	r1, r3
 800acc6:	4b82      	ldr	r3, [pc, #520]	; (800aed0 <__ieee754_pow+0x230>)
 800acc8:	4193      	sbcs	r3, r2
 800acca:	f080 84b9 	bcs.w	800b640 <__ieee754_pow+0x9a0>
 800acce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acd2:	4640      	mov	r0, r8
 800acd4:	4649      	mov	r1, r9
 800acd6:	f7f5 fb6d 	bl	80003b4 <__adddf3>
 800acda:	4683      	mov	fp, r0
 800acdc:	468c      	mov	ip, r1
 800acde:	e06f      	b.n	800adc0 <__ieee754_pow+0x120>
 800ace0:	4b7c      	ldr	r3, [pc, #496]	; (800aed4 <__ieee754_pow+0x234>)
 800ace2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800ace6:	429c      	cmp	r4, r3
 800ace8:	464d      	mov	r5, r9
 800acea:	4682      	mov	sl, r0
 800acec:	dc06      	bgt.n	800acfc <__ieee754_pow+0x5c>
 800acee:	d101      	bne.n	800acf4 <__ieee754_pow+0x54>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d1ec      	bne.n	800acce <__ieee754_pow+0x2e>
 800acf4:	429e      	cmp	r6, r3
 800acf6:	dc01      	bgt.n	800acfc <__ieee754_pow+0x5c>
 800acf8:	d10f      	bne.n	800ad1a <__ieee754_pow+0x7a>
 800acfa:	b172      	cbz	r2, 800ad1a <__ieee754_pow+0x7a>
 800acfc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ad00:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ad04:	ea55 050a 	orrs.w	r5, r5, sl
 800ad08:	d1e1      	bne.n	800acce <__ieee754_pow+0x2e>
 800ad0a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ad0e:	18db      	adds	r3, r3, r3
 800ad10:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ad14:	4152      	adcs	r2, r2
 800ad16:	429d      	cmp	r5, r3
 800ad18:	e7d5      	b.n	800acc6 <__ieee754_pow+0x26>
 800ad1a:	2d00      	cmp	r5, #0
 800ad1c:	da39      	bge.n	800ad92 <__ieee754_pow+0xf2>
 800ad1e:	4b6e      	ldr	r3, [pc, #440]	; (800aed8 <__ieee754_pow+0x238>)
 800ad20:	429e      	cmp	r6, r3
 800ad22:	dc52      	bgt.n	800adca <__ieee754_pow+0x12a>
 800ad24:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ad28:	429e      	cmp	r6, r3
 800ad2a:	f340 849c 	ble.w	800b666 <__ieee754_pow+0x9c6>
 800ad2e:	1533      	asrs	r3, r6, #20
 800ad30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ad34:	2b14      	cmp	r3, #20
 800ad36:	dd0f      	ble.n	800ad58 <__ieee754_pow+0xb8>
 800ad38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ad3c:	fa22 f103 	lsr.w	r1, r2, r3
 800ad40:	fa01 f303 	lsl.w	r3, r1, r3
 800ad44:	4293      	cmp	r3, r2
 800ad46:	f040 848e 	bne.w	800b666 <__ieee754_pow+0x9c6>
 800ad4a:	f001 0101 	and.w	r1, r1, #1
 800ad4e:	f1c1 0302 	rsb	r3, r1, #2
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	b182      	cbz	r2, 800ad78 <__ieee754_pow+0xd8>
 800ad56:	e05d      	b.n	800ae14 <__ieee754_pow+0x174>
 800ad58:	2a00      	cmp	r2, #0
 800ad5a:	d159      	bne.n	800ae10 <__ieee754_pow+0x170>
 800ad5c:	f1c3 0314 	rsb	r3, r3, #20
 800ad60:	fa46 f103 	asr.w	r1, r6, r3
 800ad64:	fa01 f303 	lsl.w	r3, r1, r3
 800ad68:	42b3      	cmp	r3, r6
 800ad6a:	f040 8479 	bne.w	800b660 <__ieee754_pow+0x9c0>
 800ad6e:	f001 0101 	and.w	r1, r1, #1
 800ad72:	f1c1 0302 	rsb	r3, r1, #2
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	4b58      	ldr	r3, [pc, #352]	; (800aedc <__ieee754_pow+0x23c>)
 800ad7a:	429e      	cmp	r6, r3
 800ad7c:	d132      	bne.n	800ade4 <__ieee754_pow+0x144>
 800ad7e:	2f00      	cmp	r7, #0
 800ad80:	f280 846a 	bge.w	800b658 <__ieee754_pow+0x9b8>
 800ad84:	4642      	mov	r2, r8
 800ad86:	464b      	mov	r3, r9
 800ad88:	2000      	movs	r0, #0
 800ad8a:	4954      	ldr	r1, [pc, #336]	; (800aedc <__ieee754_pow+0x23c>)
 800ad8c:	f7f5 fdf2 	bl	8000974 <__aeabi_ddiv>
 800ad90:	e7a3      	b.n	800acda <__ieee754_pow+0x3a>
 800ad92:	2300      	movs	r3, #0
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	2a00      	cmp	r2, #0
 800ad98:	d13c      	bne.n	800ae14 <__ieee754_pow+0x174>
 800ad9a:	4b4e      	ldr	r3, [pc, #312]	; (800aed4 <__ieee754_pow+0x234>)
 800ad9c:	429e      	cmp	r6, r3
 800ad9e:	d1eb      	bne.n	800ad78 <__ieee754_pow+0xd8>
 800ada0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ada4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ada8:	ea53 030a 	orrs.w	r3, r3, sl
 800adac:	f000 8448 	beq.w	800b640 <__ieee754_pow+0x9a0>
 800adb0:	4b4b      	ldr	r3, [pc, #300]	; (800aee0 <__ieee754_pow+0x240>)
 800adb2:	429c      	cmp	r4, r3
 800adb4:	dd0b      	ble.n	800adce <__ieee754_pow+0x12e>
 800adb6:	2f00      	cmp	r7, #0
 800adb8:	f2c0 8448 	blt.w	800b64c <__ieee754_pow+0x9ac>
 800adbc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800adc0:	4658      	mov	r0, fp
 800adc2:	4661      	mov	r1, ip
 800adc4:	b013      	add	sp, #76	; 0x4c
 800adc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adca:	2302      	movs	r3, #2
 800adcc:	e7e2      	b.n	800ad94 <__ieee754_pow+0xf4>
 800adce:	2f00      	cmp	r7, #0
 800add0:	f04f 0b00 	mov.w	fp, #0
 800add4:	f04f 0c00 	mov.w	ip, #0
 800add8:	daf2      	bge.n	800adc0 <__ieee754_pow+0x120>
 800adda:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800adde:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ade2:	e7ed      	b.n	800adc0 <__ieee754_pow+0x120>
 800ade4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800ade8:	d106      	bne.n	800adf8 <__ieee754_pow+0x158>
 800adea:	4642      	mov	r2, r8
 800adec:	464b      	mov	r3, r9
 800adee:	4640      	mov	r0, r8
 800adf0:	4649      	mov	r1, r9
 800adf2:	f7f5 fc95 	bl	8000720 <__aeabi_dmul>
 800adf6:	e770      	b.n	800acda <__ieee754_pow+0x3a>
 800adf8:	4b3a      	ldr	r3, [pc, #232]	; (800aee4 <__ieee754_pow+0x244>)
 800adfa:	429f      	cmp	r7, r3
 800adfc:	d10a      	bne.n	800ae14 <__ieee754_pow+0x174>
 800adfe:	2d00      	cmp	r5, #0
 800ae00:	db08      	blt.n	800ae14 <__ieee754_pow+0x174>
 800ae02:	4640      	mov	r0, r8
 800ae04:	4649      	mov	r1, r9
 800ae06:	b013      	add	sp, #76	; 0x4c
 800ae08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0c:	f000 bc5e 	b.w	800b6cc <__ieee754_sqrt>
 800ae10:	2300      	movs	r3, #0
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	4640      	mov	r0, r8
 800ae16:	4649      	mov	r1, r9
 800ae18:	f000 fd34 	bl	800b884 <fabs>
 800ae1c:	4683      	mov	fp, r0
 800ae1e:	468c      	mov	ip, r1
 800ae20:	f1ba 0f00 	cmp.w	sl, #0
 800ae24:	d128      	bne.n	800ae78 <__ieee754_pow+0x1d8>
 800ae26:	b124      	cbz	r4, 800ae32 <__ieee754_pow+0x192>
 800ae28:	4b2c      	ldr	r3, [pc, #176]	; (800aedc <__ieee754_pow+0x23c>)
 800ae2a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d122      	bne.n	800ae78 <__ieee754_pow+0x1d8>
 800ae32:	2f00      	cmp	r7, #0
 800ae34:	da07      	bge.n	800ae46 <__ieee754_pow+0x1a6>
 800ae36:	465a      	mov	r2, fp
 800ae38:	4663      	mov	r3, ip
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	4927      	ldr	r1, [pc, #156]	; (800aedc <__ieee754_pow+0x23c>)
 800ae3e:	f7f5 fd99 	bl	8000974 <__aeabi_ddiv>
 800ae42:	4683      	mov	fp, r0
 800ae44:	468c      	mov	ip, r1
 800ae46:	2d00      	cmp	r5, #0
 800ae48:	daba      	bge.n	800adc0 <__ieee754_pow+0x120>
 800ae4a:	9b00      	ldr	r3, [sp, #0]
 800ae4c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ae50:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ae54:	4323      	orrs	r3, r4
 800ae56:	d108      	bne.n	800ae6a <__ieee754_pow+0x1ca>
 800ae58:	465a      	mov	r2, fp
 800ae5a:	4663      	mov	r3, ip
 800ae5c:	4658      	mov	r0, fp
 800ae5e:	4661      	mov	r1, ip
 800ae60:	f7f5 faa6 	bl	80003b0 <__aeabi_dsub>
 800ae64:	4602      	mov	r2, r0
 800ae66:	460b      	mov	r3, r1
 800ae68:	e790      	b.n	800ad8c <__ieee754_pow+0xec>
 800ae6a:	9b00      	ldr	r3, [sp, #0]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d1a7      	bne.n	800adc0 <__ieee754_pow+0x120>
 800ae70:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800ae74:	469c      	mov	ip, r3
 800ae76:	e7a3      	b.n	800adc0 <__ieee754_pow+0x120>
 800ae78:	0feb      	lsrs	r3, r5, #31
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	930c      	str	r3, [sp, #48]	; 0x30
 800ae7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae80:	9b00      	ldr	r3, [sp, #0]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	d104      	bne.n	800ae90 <__ieee754_pow+0x1f0>
 800ae86:	4642      	mov	r2, r8
 800ae88:	464b      	mov	r3, r9
 800ae8a:	4640      	mov	r0, r8
 800ae8c:	4649      	mov	r1, r9
 800ae8e:	e7e7      	b.n	800ae60 <__ieee754_pow+0x1c0>
 800ae90:	4b15      	ldr	r3, [pc, #84]	; (800aee8 <__ieee754_pow+0x248>)
 800ae92:	429e      	cmp	r6, r3
 800ae94:	f340 80f6 	ble.w	800b084 <__ieee754_pow+0x3e4>
 800ae98:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ae9c:	429e      	cmp	r6, r3
 800ae9e:	4b10      	ldr	r3, [pc, #64]	; (800aee0 <__ieee754_pow+0x240>)
 800aea0:	dd09      	ble.n	800aeb6 <__ieee754_pow+0x216>
 800aea2:	429c      	cmp	r4, r3
 800aea4:	dc0c      	bgt.n	800aec0 <__ieee754_pow+0x220>
 800aea6:	2f00      	cmp	r7, #0
 800aea8:	da0c      	bge.n	800aec4 <__ieee754_pow+0x224>
 800aeaa:	2000      	movs	r0, #0
 800aeac:	b013      	add	sp, #76	; 0x4c
 800aeae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb2:	f000 bce2 	b.w	800b87a <__math_oflow>
 800aeb6:	429c      	cmp	r4, r3
 800aeb8:	dbf5      	blt.n	800aea6 <__ieee754_pow+0x206>
 800aeba:	4b08      	ldr	r3, [pc, #32]	; (800aedc <__ieee754_pow+0x23c>)
 800aebc:	429c      	cmp	r4, r3
 800aebe:	dd15      	ble.n	800aeec <__ieee754_pow+0x24c>
 800aec0:	2f00      	cmp	r7, #0
 800aec2:	dcf2      	bgt.n	800aeaa <__ieee754_pow+0x20a>
 800aec4:	2000      	movs	r0, #0
 800aec6:	b013      	add	sp, #76	; 0x4c
 800aec8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aecc:	f000 bcd0 	b.w	800b870 <__math_uflow>
 800aed0:	fff00000 	.word	0xfff00000
 800aed4:	7ff00000 	.word	0x7ff00000
 800aed8:	433fffff 	.word	0x433fffff
 800aedc:	3ff00000 	.word	0x3ff00000
 800aee0:	3fefffff 	.word	0x3fefffff
 800aee4:	3fe00000 	.word	0x3fe00000
 800aee8:	41e00000 	.word	0x41e00000
 800aeec:	4661      	mov	r1, ip
 800aeee:	2200      	movs	r2, #0
 800aef0:	4658      	mov	r0, fp
 800aef2:	4b5f      	ldr	r3, [pc, #380]	; (800b070 <__ieee754_pow+0x3d0>)
 800aef4:	f7f5 fa5c 	bl	80003b0 <__aeabi_dsub>
 800aef8:	a355      	add	r3, pc, #340	; (adr r3, 800b050 <__ieee754_pow+0x3b0>)
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	4604      	mov	r4, r0
 800af00:	460d      	mov	r5, r1
 800af02:	f7f5 fc0d 	bl	8000720 <__aeabi_dmul>
 800af06:	a354      	add	r3, pc, #336	; (adr r3, 800b058 <__ieee754_pow+0x3b8>)
 800af08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0c:	4606      	mov	r6, r0
 800af0e:	460f      	mov	r7, r1
 800af10:	4620      	mov	r0, r4
 800af12:	4629      	mov	r1, r5
 800af14:	f7f5 fc04 	bl	8000720 <__aeabi_dmul>
 800af18:	2200      	movs	r2, #0
 800af1a:	4682      	mov	sl, r0
 800af1c:	468b      	mov	fp, r1
 800af1e:	4620      	mov	r0, r4
 800af20:	4629      	mov	r1, r5
 800af22:	4b54      	ldr	r3, [pc, #336]	; (800b074 <__ieee754_pow+0x3d4>)
 800af24:	f7f5 fbfc 	bl	8000720 <__aeabi_dmul>
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	a14c      	add	r1, pc, #304	; (adr r1, 800b060 <__ieee754_pow+0x3c0>)
 800af2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af32:	f7f5 fa3d 	bl	80003b0 <__aeabi_dsub>
 800af36:	4622      	mov	r2, r4
 800af38:	462b      	mov	r3, r5
 800af3a:	f7f5 fbf1 	bl	8000720 <__aeabi_dmul>
 800af3e:	4602      	mov	r2, r0
 800af40:	460b      	mov	r3, r1
 800af42:	2000      	movs	r0, #0
 800af44:	494c      	ldr	r1, [pc, #304]	; (800b078 <__ieee754_pow+0x3d8>)
 800af46:	f7f5 fa33 	bl	80003b0 <__aeabi_dsub>
 800af4a:	4622      	mov	r2, r4
 800af4c:	462b      	mov	r3, r5
 800af4e:	4680      	mov	r8, r0
 800af50:	4689      	mov	r9, r1
 800af52:	4620      	mov	r0, r4
 800af54:	4629      	mov	r1, r5
 800af56:	f7f5 fbe3 	bl	8000720 <__aeabi_dmul>
 800af5a:	4602      	mov	r2, r0
 800af5c:	460b      	mov	r3, r1
 800af5e:	4640      	mov	r0, r8
 800af60:	4649      	mov	r1, r9
 800af62:	f7f5 fbdd 	bl	8000720 <__aeabi_dmul>
 800af66:	a340      	add	r3, pc, #256	; (adr r3, 800b068 <__ieee754_pow+0x3c8>)
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	f7f5 fbd8 	bl	8000720 <__aeabi_dmul>
 800af70:	4602      	mov	r2, r0
 800af72:	460b      	mov	r3, r1
 800af74:	4650      	mov	r0, sl
 800af76:	4659      	mov	r1, fp
 800af78:	f7f5 fa1a 	bl	80003b0 <__aeabi_dsub>
 800af7c:	f04f 0a00 	mov.w	sl, #0
 800af80:	4602      	mov	r2, r0
 800af82:	460b      	mov	r3, r1
 800af84:	4604      	mov	r4, r0
 800af86:	460d      	mov	r5, r1
 800af88:	4630      	mov	r0, r6
 800af8a:	4639      	mov	r1, r7
 800af8c:	f7f5 fa12 	bl	80003b4 <__adddf3>
 800af90:	4632      	mov	r2, r6
 800af92:	463b      	mov	r3, r7
 800af94:	4650      	mov	r0, sl
 800af96:	468b      	mov	fp, r1
 800af98:	f7f5 fa0a 	bl	80003b0 <__aeabi_dsub>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4620      	mov	r0, r4
 800afa2:	4629      	mov	r1, r5
 800afa4:	f7f5 fa04 	bl	80003b0 <__aeabi_dsub>
 800afa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800afac:	9b00      	ldr	r3, [sp, #0]
 800afae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afb0:	3b01      	subs	r3, #1
 800afb2:	4313      	orrs	r3, r2
 800afb4:	f04f 0600 	mov.w	r6, #0
 800afb8:	f04f 0200 	mov.w	r2, #0
 800afbc:	bf0c      	ite	eq
 800afbe:	4b2f      	ldreq	r3, [pc, #188]	; (800b07c <__ieee754_pow+0x3dc>)
 800afc0:	4b2b      	ldrne	r3, [pc, #172]	; (800b070 <__ieee754_pow+0x3d0>)
 800afc2:	4604      	mov	r4, r0
 800afc4:	460d      	mov	r5, r1
 800afc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afca:	e9cd 2300 	strd	r2, r3, [sp]
 800afce:	4632      	mov	r2, r6
 800afd0:	463b      	mov	r3, r7
 800afd2:	f7f5 f9ed 	bl	80003b0 <__aeabi_dsub>
 800afd6:	4652      	mov	r2, sl
 800afd8:	465b      	mov	r3, fp
 800afda:	f7f5 fba1 	bl	8000720 <__aeabi_dmul>
 800afde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afe2:	4680      	mov	r8, r0
 800afe4:	4689      	mov	r9, r1
 800afe6:	4620      	mov	r0, r4
 800afe8:	4629      	mov	r1, r5
 800afea:	f7f5 fb99 	bl	8000720 <__aeabi_dmul>
 800afee:	4602      	mov	r2, r0
 800aff0:	460b      	mov	r3, r1
 800aff2:	4640      	mov	r0, r8
 800aff4:	4649      	mov	r1, r9
 800aff6:	f7f5 f9dd 	bl	80003b4 <__adddf3>
 800affa:	4632      	mov	r2, r6
 800affc:	463b      	mov	r3, r7
 800affe:	4680      	mov	r8, r0
 800b000:	4689      	mov	r9, r1
 800b002:	4650      	mov	r0, sl
 800b004:	4659      	mov	r1, fp
 800b006:	f7f5 fb8b 	bl	8000720 <__aeabi_dmul>
 800b00a:	4604      	mov	r4, r0
 800b00c:	460d      	mov	r5, r1
 800b00e:	460b      	mov	r3, r1
 800b010:	4602      	mov	r2, r0
 800b012:	4649      	mov	r1, r9
 800b014:	4640      	mov	r0, r8
 800b016:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b01a:	f7f5 f9cb 	bl	80003b4 <__adddf3>
 800b01e:	4b18      	ldr	r3, [pc, #96]	; (800b080 <__ieee754_pow+0x3e0>)
 800b020:	4682      	mov	sl, r0
 800b022:	4299      	cmp	r1, r3
 800b024:	460f      	mov	r7, r1
 800b026:	460e      	mov	r6, r1
 800b028:	f340 82e5 	ble.w	800b5f6 <__ieee754_pow+0x956>
 800b02c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b030:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b034:	4303      	orrs	r3, r0
 800b036:	f000 81df 	beq.w	800b3f8 <__ieee754_pow+0x758>
 800b03a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b03e:	2200      	movs	r2, #0
 800b040:	2300      	movs	r3, #0
 800b042:	f7f5 fddf 	bl	8000c04 <__aeabi_dcmplt>
 800b046:	3800      	subs	r0, #0
 800b048:	bf18      	it	ne
 800b04a:	2001      	movne	r0, #1
 800b04c:	e72e      	b.n	800aeac <__ieee754_pow+0x20c>
 800b04e:	bf00      	nop
 800b050:	60000000 	.word	0x60000000
 800b054:	3ff71547 	.word	0x3ff71547
 800b058:	f85ddf44 	.word	0xf85ddf44
 800b05c:	3e54ae0b 	.word	0x3e54ae0b
 800b060:	55555555 	.word	0x55555555
 800b064:	3fd55555 	.word	0x3fd55555
 800b068:	652b82fe 	.word	0x652b82fe
 800b06c:	3ff71547 	.word	0x3ff71547
 800b070:	3ff00000 	.word	0x3ff00000
 800b074:	3fd00000 	.word	0x3fd00000
 800b078:	3fe00000 	.word	0x3fe00000
 800b07c:	bff00000 	.word	0xbff00000
 800b080:	408fffff 	.word	0x408fffff
 800b084:	4bd2      	ldr	r3, [pc, #840]	; (800b3d0 <__ieee754_pow+0x730>)
 800b086:	2200      	movs	r2, #0
 800b088:	402b      	ands	r3, r5
 800b08a:	b943      	cbnz	r3, 800b09e <__ieee754_pow+0x3fe>
 800b08c:	4658      	mov	r0, fp
 800b08e:	4661      	mov	r1, ip
 800b090:	4bd0      	ldr	r3, [pc, #832]	; (800b3d4 <__ieee754_pow+0x734>)
 800b092:	f7f5 fb45 	bl	8000720 <__aeabi_dmul>
 800b096:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b09a:	4683      	mov	fp, r0
 800b09c:	460c      	mov	r4, r1
 800b09e:	1523      	asrs	r3, r4, #20
 800b0a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b0a4:	4413      	add	r3, r2
 800b0a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0a8:	4bcb      	ldr	r3, [pc, #812]	; (800b3d8 <__ieee754_pow+0x738>)
 800b0aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b0ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b0b2:	429c      	cmp	r4, r3
 800b0b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b0b8:	dd08      	ble.n	800b0cc <__ieee754_pow+0x42c>
 800b0ba:	4bc8      	ldr	r3, [pc, #800]	; (800b3dc <__ieee754_pow+0x73c>)
 800b0bc:	429c      	cmp	r4, r3
 800b0be:	f340 8199 	ble.w	800b3f4 <__ieee754_pow+0x754>
 800b0c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0c4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0cc:	2600      	movs	r6, #0
 800b0ce:	00f3      	lsls	r3, r6, #3
 800b0d0:	930d      	str	r3, [sp, #52]	; 0x34
 800b0d2:	4bc3      	ldr	r3, [pc, #780]	; (800b3e0 <__ieee754_pow+0x740>)
 800b0d4:	4658      	mov	r0, fp
 800b0d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b0da:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b0de:	4629      	mov	r1, r5
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b0e6:	4623      	mov	r3, r4
 800b0e8:	f7f5 f962 	bl	80003b0 <__aeabi_dsub>
 800b0ec:	46da      	mov	sl, fp
 800b0ee:	462b      	mov	r3, r5
 800b0f0:	4652      	mov	r2, sl
 800b0f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b0f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0fa:	f7f5 f95b 	bl	80003b4 <__adddf3>
 800b0fe:	4602      	mov	r2, r0
 800b100:	460b      	mov	r3, r1
 800b102:	2000      	movs	r0, #0
 800b104:	49b7      	ldr	r1, [pc, #732]	; (800b3e4 <__ieee754_pow+0x744>)
 800b106:	f7f5 fc35 	bl	8000974 <__aeabi_ddiv>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b112:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b116:	f7f5 fb03 	bl	8000720 <__aeabi_dmul>
 800b11a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b11e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b122:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b126:	2300      	movs	r3, #0
 800b128:	2200      	movs	r2, #0
 800b12a:	46ab      	mov	fp, r5
 800b12c:	106d      	asrs	r5, r5, #1
 800b12e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b132:	9304      	str	r3, [sp, #16]
 800b134:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b138:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b13c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b140:	4640      	mov	r0, r8
 800b142:	4649      	mov	r1, r9
 800b144:	4614      	mov	r4, r2
 800b146:	461d      	mov	r5, r3
 800b148:	f7f5 faea 	bl	8000720 <__aeabi_dmul>
 800b14c:	4602      	mov	r2, r0
 800b14e:	460b      	mov	r3, r1
 800b150:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b154:	f7f5 f92c 	bl	80003b0 <__aeabi_dsub>
 800b158:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b15c:	4606      	mov	r6, r0
 800b15e:	460f      	mov	r7, r1
 800b160:	4620      	mov	r0, r4
 800b162:	4629      	mov	r1, r5
 800b164:	f7f5 f924 	bl	80003b0 <__aeabi_dsub>
 800b168:	4602      	mov	r2, r0
 800b16a:	460b      	mov	r3, r1
 800b16c:	4650      	mov	r0, sl
 800b16e:	4659      	mov	r1, fp
 800b170:	f7f5 f91e 	bl	80003b0 <__aeabi_dsub>
 800b174:	4642      	mov	r2, r8
 800b176:	464b      	mov	r3, r9
 800b178:	f7f5 fad2 	bl	8000720 <__aeabi_dmul>
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	4630      	mov	r0, r6
 800b182:	4639      	mov	r1, r7
 800b184:	f7f5 f914 	bl	80003b0 <__aeabi_dsub>
 800b188:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b18c:	f7f5 fac8 	bl	8000720 <__aeabi_dmul>
 800b190:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b194:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b198:	4610      	mov	r0, r2
 800b19a:	4619      	mov	r1, r3
 800b19c:	f7f5 fac0 	bl	8000720 <__aeabi_dmul>
 800b1a0:	a379      	add	r3, pc, #484	; (adr r3, 800b388 <__ieee754_pow+0x6e8>)
 800b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a6:	4604      	mov	r4, r0
 800b1a8:	460d      	mov	r5, r1
 800b1aa:	f7f5 fab9 	bl	8000720 <__aeabi_dmul>
 800b1ae:	a378      	add	r3, pc, #480	; (adr r3, 800b390 <__ieee754_pow+0x6f0>)
 800b1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b4:	f7f5 f8fe 	bl	80003b4 <__adddf3>
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	462b      	mov	r3, r5
 800b1bc:	f7f5 fab0 	bl	8000720 <__aeabi_dmul>
 800b1c0:	a375      	add	r3, pc, #468	; (adr r3, 800b398 <__ieee754_pow+0x6f8>)
 800b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c6:	f7f5 f8f5 	bl	80003b4 <__adddf3>
 800b1ca:	4622      	mov	r2, r4
 800b1cc:	462b      	mov	r3, r5
 800b1ce:	f7f5 faa7 	bl	8000720 <__aeabi_dmul>
 800b1d2:	a373      	add	r3, pc, #460	; (adr r3, 800b3a0 <__ieee754_pow+0x700>)
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	f7f5 f8ec 	bl	80003b4 <__adddf3>
 800b1dc:	4622      	mov	r2, r4
 800b1de:	462b      	mov	r3, r5
 800b1e0:	f7f5 fa9e 	bl	8000720 <__aeabi_dmul>
 800b1e4:	a370      	add	r3, pc, #448	; (adr r3, 800b3a8 <__ieee754_pow+0x708>)
 800b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ea:	f7f5 f8e3 	bl	80003b4 <__adddf3>
 800b1ee:	4622      	mov	r2, r4
 800b1f0:	462b      	mov	r3, r5
 800b1f2:	f7f5 fa95 	bl	8000720 <__aeabi_dmul>
 800b1f6:	a36e      	add	r3, pc, #440	; (adr r3, 800b3b0 <__ieee754_pow+0x710>)
 800b1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fc:	f7f5 f8da 	bl	80003b4 <__adddf3>
 800b200:	4622      	mov	r2, r4
 800b202:	4606      	mov	r6, r0
 800b204:	460f      	mov	r7, r1
 800b206:	462b      	mov	r3, r5
 800b208:	4620      	mov	r0, r4
 800b20a:	4629      	mov	r1, r5
 800b20c:	f7f5 fa88 	bl	8000720 <__aeabi_dmul>
 800b210:	4602      	mov	r2, r0
 800b212:	460b      	mov	r3, r1
 800b214:	4630      	mov	r0, r6
 800b216:	4639      	mov	r1, r7
 800b218:	f7f5 fa82 	bl	8000720 <__aeabi_dmul>
 800b21c:	4604      	mov	r4, r0
 800b21e:	460d      	mov	r5, r1
 800b220:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b224:	4642      	mov	r2, r8
 800b226:	464b      	mov	r3, r9
 800b228:	f7f5 f8c4 	bl	80003b4 <__adddf3>
 800b22c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b230:	f7f5 fa76 	bl	8000720 <__aeabi_dmul>
 800b234:	4622      	mov	r2, r4
 800b236:	462b      	mov	r3, r5
 800b238:	f7f5 f8bc 	bl	80003b4 <__adddf3>
 800b23c:	4642      	mov	r2, r8
 800b23e:	4606      	mov	r6, r0
 800b240:	460f      	mov	r7, r1
 800b242:	464b      	mov	r3, r9
 800b244:	4640      	mov	r0, r8
 800b246:	4649      	mov	r1, r9
 800b248:	f7f5 fa6a 	bl	8000720 <__aeabi_dmul>
 800b24c:	2200      	movs	r2, #0
 800b24e:	4b66      	ldr	r3, [pc, #408]	; (800b3e8 <__ieee754_pow+0x748>)
 800b250:	4682      	mov	sl, r0
 800b252:	468b      	mov	fp, r1
 800b254:	f7f5 f8ae 	bl	80003b4 <__adddf3>
 800b258:	4632      	mov	r2, r6
 800b25a:	463b      	mov	r3, r7
 800b25c:	f7f5 f8aa 	bl	80003b4 <__adddf3>
 800b260:	2400      	movs	r4, #0
 800b262:	460d      	mov	r5, r1
 800b264:	4622      	mov	r2, r4
 800b266:	460b      	mov	r3, r1
 800b268:	4640      	mov	r0, r8
 800b26a:	4649      	mov	r1, r9
 800b26c:	f7f5 fa58 	bl	8000720 <__aeabi_dmul>
 800b270:	2200      	movs	r2, #0
 800b272:	4680      	mov	r8, r0
 800b274:	4689      	mov	r9, r1
 800b276:	4620      	mov	r0, r4
 800b278:	4629      	mov	r1, r5
 800b27a:	4b5b      	ldr	r3, [pc, #364]	; (800b3e8 <__ieee754_pow+0x748>)
 800b27c:	f7f5 f898 	bl	80003b0 <__aeabi_dsub>
 800b280:	4652      	mov	r2, sl
 800b282:	465b      	mov	r3, fp
 800b284:	f7f5 f894 	bl	80003b0 <__aeabi_dsub>
 800b288:	4602      	mov	r2, r0
 800b28a:	460b      	mov	r3, r1
 800b28c:	4630      	mov	r0, r6
 800b28e:	4639      	mov	r1, r7
 800b290:	f7f5 f88e 	bl	80003b0 <__aeabi_dsub>
 800b294:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b298:	f7f5 fa42 	bl	8000720 <__aeabi_dmul>
 800b29c:	4622      	mov	r2, r4
 800b29e:	4606      	mov	r6, r0
 800b2a0:	460f      	mov	r7, r1
 800b2a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b2a6:	462b      	mov	r3, r5
 800b2a8:	f7f5 fa3a 	bl	8000720 <__aeabi_dmul>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	4639      	mov	r1, r7
 800b2b4:	f7f5 f87e 	bl	80003b4 <__adddf3>
 800b2b8:	2400      	movs	r4, #0
 800b2ba:	4606      	mov	r6, r0
 800b2bc:	460f      	mov	r7, r1
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	f7f5 f875 	bl	80003b4 <__adddf3>
 800b2ca:	a33b      	add	r3, pc, #236	; (adr r3, 800b3b8 <__ieee754_pow+0x718>)
 800b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	460d      	mov	r5, r1
 800b2d4:	f7f5 fa24 	bl	8000720 <__aeabi_dmul>
 800b2d8:	4642      	mov	r2, r8
 800b2da:	464b      	mov	r3, r9
 800b2dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	f7f5 f864 	bl	80003b0 <__aeabi_dsub>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	4639      	mov	r1, r7
 800b2f0:	f7f5 f85e 	bl	80003b0 <__aeabi_dsub>
 800b2f4:	a332      	add	r3, pc, #200	; (adr r3, 800b3c0 <__ieee754_pow+0x720>)
 800b2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fa:	f7f5 fa11 	bl	8000720 <__aeabi_dmul>
 800b2fe:	a332      	add	r3, pc, #200	; (adr r3, 800b3c8 <__ieee754_pow+0x728>)
 800b300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b304:	4606      	mov	r6, r0
 800b306:	460f      	mov	r7, r1
 800b308:	4620      	mov	r0, r4
 800b30a:	4629      	mov	r1, r5
 800b30c:	f7f5 fa08 	bl	8000720 <__aeabi_dmul>
 800b310:	4602      	mov	r2, r0
 800b312:	460b      	mov	r3, r1
 800b314:	4630      	mov	r0, r6
 800b316:	4639      	mov	r1, r7
 800b318:	f7f5 f84c 	bl	80003b4 <__adddf3>
 800b31c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b31e:	4b33      	ldr	r3, [pc, #204]	; (800b3ec <__ieee754_pow+0x74c>)
 800b320:	f04f 0a00 	mov.w	sl, #0
 800b324:	4413      	add	r3, r2
 800b326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32a:	f7f5 f843 	bl	80003b4 <__adddf3>
 800b32e:	4680      	mov	r8, r0
 800b330:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b332:	4689      	mov	r9, r1
 800b334:	f7f5 f98a 	bl	800064c <__aeabi_i2d>
 800b338:	4604      	mov	r4, r0
 800b33a:	460d      	mov	r5, r1
 800b33c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b33e:	4b2c      	ldr	r3, [pc, #176]	; (800b3f0 <__ieee754_pow+0x750>)
 800b340:	4413      	add	r3, r2
 800b342:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b346:	4642      	mov	r2, r8
 800b348:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b34c:	464b      	mov	r3, r9
 800b34e:	f7f5 f831 	bl	80003b4 <__adddf3>
 800b352:	4632      	mov	r2, r6
 800b354:	463b      	mov	r3, r7
 800b356:	f7f5 f82d 	bl	80003b4 <__adddf3>
 800b35a:	4622      	mov	r2, r4
 800b35c:	462b      	mov	r3, r5
 800b35e:	f7f5 f829 	bl	80003b4 <__adddf3>
 800b362:	4622      	mov	r2, r4
 800b364:	462b      	mov	r3, r5
 800b366:	4650      	mov	r0, sl
 800b368:	468b      	mov	fp, r1
 800b36a:	f7f5 f821 	bl	80003b0 <__aeabi_dsub>
 800b36e:	4632      	mov	r2, r6
 800b370:	463b      	mov	r3, r7
 800b372:	f7f5 f81d 	bl	80003b0 <__aeabi_dsub>
 800b376:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b37a:	f7f5 f819 	bl	80003b0 <__aeabi_dsub>
 800b37e:	4602      	mov	r2, r0
 800b380:	460b      	mov	r3, r1
 800b382:	4640      	mov	r0, r8
 800b384:	4649      	mov	r1, r9
 800b386:	e60d      	b.n	800afa4 <__ieee754_pow+0x304>
 800b388:	4a454eef 	.word	0x4a454eef
 800b38c:	3fca7e28 	.word	0x3fca7e28
 800b390:	93c9db65 	.word	0x93c9db65
 800b394:	3fcd864a 	.word	0x3fcd864a
 800b398:	a91d4101 	.word	0xa91d4101
 800b39c:	3fd17460 	.word	0x3fd17460
 800b3a0:	518f264d 	.word	0x518f264d
 800b3a4:	3fd55555 	.word	0x3fd55555
 800b3a8:	db6fabff 	.word	0xdb6fabff
 800b3ac:	3fdb6db6 	.word	0x3fdb6db6
 800b3b0:	33333303 	.word	0x33333303
 800b3b4:	3fe33333 	.word	0x3fe33333
 800b3b8:	e0000000 	.word	0xe0000000
 800b3bc:	3feec709 	.word	0x3feec709
 800b3c0:	dc3a03fd 	.word	0xdc3a03fd
 800b3c4:	3feec709 	.word	0x3feec709
 800b3c8:	145b01f5 	.word	0x145b01f5
 800b3cc:	be3e2fe0 	.word	0xbe3e2fe0
 800b3d0:	7ff00000 	.word	0x7ff00000
 800b3d4:	43400000 	.word	0x43400000
 800b3d8:	0003988e 	.word	0x0003988e
 800b3dc:	000bb679 	.word	0x000bb679
 800b3e0:	0800bfa0 	.word	0x0800bfa0
 800b3e4:	3ff00000 	.word	0x3ff00000
 800b3e8:	40080000 	.word	0x40080000
 800b3ec:	0800bfc0 	.word	0x0800bfc0
 800b3f0:	0800bfb0 	.word	0x0800bfb0
 800b3f4:	2601      	movs	r6, #1
 800b3f6:	e66a      	b.n	800b0ce <__ieee754_pow+0x42e>
 800b3f8:	a39d      	add	r3, pc, #628	; (adr r3, 800b670 <__ieee754_pow+0x9d0>)
 800b3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fe:	4640      	mov	r0, r8
 800b400:	4649      	mov	r1, r9
 800b402:	f7f4 ffd7 	bl	80003b4 <__adddf3>
 800b406:	4622      	mov	r2, r4
 800b408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b40c:	462b      	mov	r3, r5
 800b40e:	4650      	mov	r0, sl
 800b410:	4639      	mov	r1, r7
 800b412:	f7f4 ffcd 	bl	80003b0 <__aeabi_dsub>
 800b416:	4602      	mov	r2, r0
 800b418:	460b      	mov	r3, r1
 800b41a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b41e:	f7f5 fc0f 	bl	8000c40 <__aeabi_dcmpgt>
 800b422:	2800      	cmp	r0, #0
 800b424:	f47f ae09 	bne.w	800b03a <__ieee754_pow+0x39a>
 800b428:	4aa3      	ldr	r2, [pc, #652]	; (800b6b8 <__ieee754_pow+0xa18>)
 800b42a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b42e:	4293      	cmp	r3, r2
 800b430:	f340 8101 	ble.w	800b636 <__ieee754_pow+0x996>
 800b434:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b438:	2000      	movs	r0, #0
 800b43a:	151b      	asrs	r3, r3, #20
 800b43c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b440:	fa4a f303 	asr.w	r3, sl, r3
 800b444:	4433      	add	r3, r6
 800b446:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b44a:	4f9c      	ldr	r7, [pc, #624]	; (800b6bc <__ieee754_pow+0xa1c>)
 800b44c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b450:	4117      	asrs	r7, r2
 800b452:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b456:	ea23 0107 	bic.w	r1, r3, r7
 800b45a:	f1c2 0214 	rsb	r2, r2, #20
 800b45e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b462:	460b      	mov	r3, r1
 800b464:	fa4a fa02 	asr.w	sl, sl, r2
 800b468:	2e00      	cmp	r6, #0
 800b46a:	4602      	mov	r2, r0
 800b46c:	4629      	mov	r1, r5
 800b46e:	4620      	mov	r0, r4
 800b470:	bfb8      	it	lt
 800b472:	f1ca 0a00 	rsblt	sl, sl, #0
 800b476:	f7f4 ff9b 	bl	80003b0 <__aeabi_dsub>
 800b47a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b482:	2400      	movs	r4, #0
 800b484:	4642      	mov	r2, r8
 800b486:	464b      	mov	r3, r9
 800b488:	f7f4 ff94 	bl	80003b4 <__adddf3>
 800b48c:	a37a      	add	r3, pc, #488	; (adr r3, 800b678 <__ieee754_pow+0x9d8>)
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	4620      	mov	r0, r4
 800b494:	460d      	mov	r5, r1
 800b496:	f7f5 f943 	bl	8000720 <__aeabi_dmul>
 800b49a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b49e:	4606      	mov	r6, r0
 800b4a0:	460f      	mov	r7, r1
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	f7f4 ff83 	bl	80003b0 <__aeabi_dsub>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	4640      	mov	r0, r8
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	f7f4 ff7d 	bl	80003b0 <__aeabi_dsub>
 800b4b6:	a372      	add	r3, pc, #456	; (adr r3, 800b680 <__ieee754_pow+0x9e0>)
 800b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4bc:	f7f5 f930 	bl	8000720 <__aeabi_dmul>
 800b4c0:	a371      	add	r3, pc, #452	; (adr r3, 800b688 <__ieee754_pow+0x9e8>)
 800b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c6:	4680      	mov	r8, r0
 800b4c8:	4689      	mov	r9, r1
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	f7f5 f927 	bl	8000720 <__aeabi_dmul>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	4640      	mov	r0, r8
 800b4d8:	4649      	mov	r1, r9
 800b4da:	f7f4 ff6b 	bl	80003b4 <__adddf3>
 800b4de:	4604      	mov	r4, r0
 800b4e0:	460d      	mov	r5, r1
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	4630      	mov	r0, r6
 800b4e8:	4639      	mov	r1, r7
 800b4ea:	f7f4 ff63 	bl	80003b4 <__adddf3>
 800b4ee:	4632      	mov	r2, r6
 800b4f0:	463b      	mov	r3, r7
 800b4f2:	4680      	mov	r8, r0
 800b4f4:	4689      	mov	r9, r1
 800b4f6:	f7f4 ff5b 	bl	80003b0 <__aeabi_dsub>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4620      	mov	r0, r4
 800b500:	4629      	mov	r1, r5
 800b502:	f7f4 ff55 	bl	80003b0 <__aeabi_dsub>
 800b506:	4642      	mov	r2, r8
 800b508:	4606      	mov	r6, r0
 800b50a:	460f      	mov	r7, r1
 800b50c:	464b      	mov	r3, r9
 800b50e:	4640      	mov	r0, r8
 800b510:	4649      	mov	r1, r9
 800b512:	f7f5 f905 	bl	8000720 <__aeabi_dmul>
 800b516:	a35e      	add	r3, pc, #376	; (adr r3, 800b690 <__ieee754_pow+0x9f0>)
 800b518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51c:	4604      	mov	r4, r0
 800b51e:	460d      	mov	r5, r1
 800b520:	f7f5 f8fe 	bl	8000720 <__aeabi_dmul>
 800b524:	a35c      	add	r3, pc, #368	; (adr r3, 800b698 <__ieee754_pow+0x9f8>)
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	f7f4 ff41 	bl	80003b0 <__aeabi_dsub>
 800b52e:	4622      	mov	r2, r4
 800b530:	462b      	mov	r3, r5
 800b532:	f7f5 f8f5 	bl	8000720 <__aeabi_dmul>
 800b536:	a35a      	add	r3, pc, #360	; (adr r3, 800b6a0 <__ieee754_pow+0xa00>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	f7f4 ff3a 	bl	80003b4 <__adddf3>
 800b540:	4622      	mov	r2, r4
 800b542:	462b      	mov	r3, r5
 800b544:	f7f5 f8ec 	bl	8000720 <__aeabi_dmul>
 800b548:	a357      	add	r3, pc, #348	; (adr r3, 800b6a8 <__ieee754_pow+0xa08>)
 800b54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54e:	f7f4 ff2f 	bl	80003b0 <__aeabi_dsub>
 800b552:	4622      	mov	r2, r4
 800b554:	462b      	mov	r3, r5
 800b556:	f7f5 f8e3 	bl	8000720 <__aeabi_dmul>
 800b55a:	a355      	add	r3, pc, #340	; (adr r3, 800b6b0 <__ieee754_pow+0xa10>)
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	f7f4 ff28 	bl	80003b4 <__adddf3>
 800b564:	4622      	mov	r2, r4
 800b566:	462b      	mov	r3, r5
 800b568:	f7f5 f8da 	bl	8000720 <__aeabi_dmul>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4640      	mov	r0, r8
 800b572:	4649      	mov	r1, r9
 800b574:	f7f4 ff1c 	bl	80003b0 <__aeabi_dsub>
 800b578:	4604      	mov	r4, r0
 800b57a:	460d      	mov	r5, r1
 800b57c:	4602      	mov	r2, r0
 800b57e:	460b      	mov	r3, r1
 800b580:	4640      	mov	r0, r8
 800b582:	4649      	mov	r1, r9
 800b584:	f7f5 f8cc 	bl	8000720 <__aeabi_dmul>
 800b588:	2200      	movs	r2, #0
 800b58a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b58e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b592:	4620      	mov	r0, r4
 800b594:	4629      	mov	r1, r5
 800b596:	f7f4 ff0b 	bl	80003b0 <__aeabi_dsub>
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5a2:	f7f5 f9e7 	bl	8000974 <__aeabi_ddiv>
 800b5a6:	4632      	mov	r2, r6
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	460d      	mov	r5, r1
 800b5ac:	463b      	mov	r3, r7
 800b5ae:	4640      	mov	r0, r8
 800b5b0:	4649      	mov	r1, r9
 800b5b2:	f7f5 f8b5 	bl	8000720 <__aeabi_dmul>
 800b5b6:	4632      	mov	r2, r6
 800b5b8:	463b      	mov	r3, r7
 800b5ba:	f7f4 fefb 	bl	80003b4 <__adddf3>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	f7f4 fef3 	bl	80003b0 <__aeabi_dsub>
 800b5ca:	4642      	mov	r2, r8
 800b5cc:	464b      	mov	r3, r9
 800b5ce:	f7f4 feef 	bl	80003b0 <__aeabi_dsub>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	4939      	ldr	r1, [pc, #228]	; (800b6c0 <__ieee754_pow+0xa20>)
 800b5da:	f7f4 fee9 	bl	80003b0 <__aeabi_dsub>
 800b5de:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b5e2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b5e6:	da29      	bge.n	800b63c <__ieee754_pow+0x99c>
 800b5e8:	4652      	mov	r2, sl
 800b5ea:	f000 f955 	bl	800b898 <scalbn>
 800b5ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5f2:	f7ff bbfe 	b.w	800adf2 <__ieee754_pow+0x152>
 800b5f6:	4b33      	ldr	r3, [pc, #204]	; (800b6c4 <__ieee754_pow+0xa24>)
 800b5f8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b5fc:	429f      	cmp	r7, r3
 800b5fe:	f77f af13 	ble.w	800b428 <__ieee754_pow+0x788>
 800b602:	4b31      	ldr	r3, [pc, #196]	; (800b6c8 <__ieee754_pow+0xa28>)
 800b604:	440b      	add	r3, r1
 800b606:	4303      	orrs	r3, r0
 800b608:	d009      	beq.n	800b61e <__ieee754_pow+0x97e>
 800b60a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b60e:	2200      	movs	r2, #0
 800b610:	2300      	movs	r3, #0
 800b612:	f7f5 faf7 	bl	8000c04 <__aeabi_dcmplt>
 800b616:	3800      	subs	r0, #0
 800b618:	bf18      	it	ne
 800b61a:	2001      	movne	r0, #1
 800b61c:	e453      	b.n	800aec6 <__ieee754_pow+0x226>
 800b61e:	4622      	mov	r2, r4
 800b620:	462b      	mov	r3, r5
 800b622:	f7f4 fec5 	bl	80003b0 <__aeabi_dsub>
 800b626:	4642      	mov	r2, r8
 800b628:	464b      	mov	r3, r9
 800b62a:	f7f5 faff 	bl	8000c2c <__aeabi_dcmpge>
 800b62e:	2800      	cmp	r0, #0
 800b630:	f43f aefa 	beq.w	800b428 <__ieee754_pow+0x788>
 800b634:	e7e9      	b.n	800b60a <__ieee754_pow+0x96a>
 800b636:	f04f 0a00 	mov.w	sl, #0
 800b63a:	e720      	b.n	800b47e <__ieee754_pow+0x7de>
 800b63c:	4621      	mov	r1, r4
 800b63e:	e7d6      	b.n	800b5ee <__ieee754_pow+0x94e>
 800b640:	f04f 0b00 	mov.w	fp, #0
 800b644:	f8df c078 	ldr.w	ip, [pc, #120]	; 800b6c0 <__ieee754_pow+0xa20>
 800b648:	f7ff bbba 	b.w	800adc0 <__ieee754_pow+0x120>
 800b64c:	f04f 0b00 	mov.w	fp, #0
 800b650:	f04f 0c00 	mov.w	ip, #0
 800b654:	f7ff bbb4 	b.w	800adc0 <__ieee754_pow+0x120>
 800b658:	4640      	mov	r0, r8
 800b65a:	4649      	mov	r1, r9
 800b65c:	f7ff bb3d 	b.w	800acda <__ieee754_pow+0x3a>
 800b660:	9200      	str	r2, [sp, #0]
 800b662:	f7ff bb89 	b.w	800ad78 <__ieee754_pow+0xd8>
 800b666:	2300      	movs	r3, #0
 800b668:	f7ff bb73 	b.w	800ad52 <__ieee754_pow+0xb2>
 800b66c:	f3af 8000 	nop.w
 800b670:	652b82fe 	.word	0x652b82fe
 800b674:	3c971547 	.word	0x3c971547
 800b678:	00000000 	.word	0x00000000
 800b67c:	3fe62e43 	.word	0x3fe62e43
 800b680:	fefa39ef 	.word	0xfefa39ef
 800b684:	3fe62e42 	.word	0x3fe62e42
 800b688:	0ca86c39 	.word	0x0ca86c39
 800b68c:	be205c61 	.word	0xbe205c61
 800b690:	72bea4d0 	.word	0x72bea4d0
 800b694:	3e663769 	.word	0x3e663769
 800b698:	c5d26bf1 	.word	0xc5d26bf1
 800b69c:	3ebbbd41 	.word	0x3ebbbd41
 800b6a0:	af25de2c 	.word	0xaf25de2c
 800b6a4:	3f11566a 	.word	0x3f11566a
 800b6a8:	16bebd93 	.word	0x16bebd93
 800b6ac:	3f66c16c 	.word	0x3f66c16c
 800b6b0:	5555553e 	.word	0x5555553e
 800b6b4:	3fc55555 	.word	0x3fc55555
 800b6b8:	3fe00000 	.word	0x3fe00000
 800b6bc:	000fffff 	.word	0x000fffff
 800b6c0:	3ff00000 	.word	0x3ff00000
 800b6c4:	4090cbff 	.word	0x4090cbff
 800b6c8:	3f6f3400 	.word	0x3f6f3400

0800b6cc <__ieee754_sqrt>:
 800b6cc:	f8df c158 	ldr.w	ip, [pc, #344]	; 800b828 <__ieee754_sqrt+0x15c>
 800b6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d4:	ea3c 0c01 	bics.w	ip, ip, r1
 800b6d8:	4606      	mov	r6, r0
 800b6da:	460d      	mov	r5, r1
 800b6dc:	460c      	mov	r4, r1
 800b6de:	460a      	mov	r2, r1
 800b6e0:	4607      	mov	r7, r0
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	d10f      	bne.n	800b706 <__ieee754_sqrt+0x3a>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	f7f5 f819 	bl	8000720 <__aeabi_dmul>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f7f4 fe5d 	bl	80003b4 <__adddf3>
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	460d      	mov	r5, r1
 800b6fe:	4630      	mov	r0, r6
 800b700:	4629      	mov	r1, r5
 800b702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b706:	2900      	cmp	r1, #0
 800b708:	dc0e      	bgt.n	800b728 <__ieee754_sqrt+0x5c>
 800b70a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b70e:	ea5c 0707 	orrs.w	r7, ip, r7
 800b712:	d0f4      	beq.n	800b6fe <__ieee754_sqrt+0x32>
 800b714:	b141      	cbz	r1, 800b728 <__ieee754_sqrt+0x5c>
 800b716:	4602      	mov	r2, r0
 800b718:	460b      	mov	r3, r1
 800b71a:	f7f4 fe49 	bl	80003b0 <__aeabi_dsub>
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	f7f5 f927 	bl	8000974 <__aeabi_ddiv>
 800b726:	e7e8      	b.n	800b6fa <__ieee754_sqrt+0x2e>
 800b728:	1521      	asrs	r1, r4, #20
 800b72a:	d075      	beq.n	800b818 <__ieee754_sqrt+0x14c>
 800b72c:	07cc      	lsls	r4, r1, #31
 800b72e:	f04f 0400 	mov.w	r4, #0
 800b732:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b736:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800b73a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b73e:	bf5e      	ittt	pl
 800b740:	0fd9      	lsrpl	r1, r3, #31
 800b742:	005b      	lslpl	r3, r3, #1
 800b744:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800b748:	0fd9      	lsrs	r1, r3, #31
 800b74a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b74e:	2516      	movs	r5, #22
 800b750:	4620      	mov	r0, r4
 800b752:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b756:	107f      	asrs	r7, r7, #1
 800b758:	005b      	lsls	r3, r3, #1
 800b75a:	1846      	adds	r6, r0, r1
 800b75c:	4296      	cmp	r6, r2
 800b75e:	bfde      	ittt	le
 800b760:	1b92      	suble	r2, r2, r6
 800b762:	1870      	addle	r0, r6, r1
 800b764:	1864      	addle	r4, r4, r1
 800b766:	0052      	lsls	r2, r2, #1
 800b768:	3d01      	subs	r5, #1
 800b76a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b76e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b772:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b776:	d1f0      	bne.n	800b75a <__ieee754_sqrt+0x8e>
 800b778:	4629      	mov	r1, r5
 800b77a:	f04f 0e20 	mov.w	lr, #32
 800b77e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b782:	4282      	cmp	r2, r0
 800b784:	eb06 0c05 	add.w	ip, r6, r5
 800b788:	dc02      	bgt.n	800b790 <__ieee754_sqrt+0xc4>
 800b78a:	d113      	bne.n	800b7b4 <__ieee754_sqrt+0xe8>
 800b78c:	459c      	cmp	ip, r3
 800b78e:	d811      	bhi.n	800b7b4 <__ieee754_sqrt+0xe8>
 800b790:	f1bc 0f00 	cmp.w	ip, #0
 800b794:	eb0c 0506 	add.w	r5, ip, r6
 800b798:	da43      	bge.n	800b822 <__ieee754_sqrt+0x156>
 800b79a:	2d00      	cmp	r5, #0
 800b79c:	db41      	blt.n	800b822 <__ieee754_sqrt+0x156>
 800b79e:	f100 0801 	add.w	r8, r0, #1
 800b7a2:	1a12      	subs	r2, r2, r0
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	459c      	cmp	ip, r3
 800b7a8:	bf88      	it	hi
 800b7aa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b7ae:	eba3 030c 	sub.w	r3, r3, ip
 800b7b2:	4431      	add	r1, r6
 800b7b4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b7b8:	f1be 0e01 	subs.w	lr, lr, #1
 800b7bc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800b7c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b7c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b7c8:	d1db      	bne.n	800b782 <__ieee754_sqrt+0xb6>
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	d006      	beq.n	800b7dc <__ieee754_sqrt+0x110>
 800b7ce:	1c48      	adds	r0, r1, #1
 800b7d0:	bf0b      	itete	eq
 800b7d2:	4671      	moveq	r1, lr
 800b7d4:	3101      	addne	r1, #1
 800b7d6:	3401      	addeq	r4, #1
 800b7d8:	f021 0101 	bicne.w	r1, r1, #1
 800b7dc:	1063      	asrs	r3, r4, #1
 800b7de:	0849      	lsrs	r1, r1, #1
 800b7e0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b7e4:	07e2      	lsls	r2, r4, #31
 800b7e6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b7ea:	bf48      	it	mi
 800b7ec:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b7f0:	460e      	mov	r6, r1
 800b7f2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b7f6:	e782      	b.n	800b6fe <__ieee754_sqrt+0x32>
 800b7f8:	0ada      	lsrs	r2, r3, #11
 800b7fa:	3815      	subs	r0, #21
 800b7fc:	055b      	lsls	r3, r3, #21
 800b7fe:	2a00      	cmp	r2, #0
 800b800:	d0fa      	beq.n	800b7f8 <__ieee754_sqrt+0x12c>
 800b802:	02d5      	lsls	r5, r2, #11
 800b804:	d50a      	bpl.n	800b81c <__ieee754_sqrt+0x150>
 800b806:	f1c1 0420 	rsb	r4, r1, #32
 800b80a:	fa23 f404 	lsr.w	r4, r3, r4
 800b80e:	1e4d      	subs	r5, r1, #1
 800b810:	408b      	lsls	r3, r1
 800b812:	4322      	orrs	r2, r4
 800b814:	1b41      	subs	r1, r0, r5
 800b816:	e789      	b.n	800b72c <__ieee754_sqrt+0x60>
 800b818:	4608      	mov	r0, r1
 800b81a:	e7f0      	b.n	800b7fe <__ieee754_sqrt+0x132>
 800b81c:	0052      	lsls	r2, r2, #1
 800b81e:	3101      	adds	r1, #1
 800b820:	e7ef      	b.n	800b802 <__ieee754_sqrt+0x136>
 800b822:	4680      	mov	r8, r0
 800b824:	e7bd      	b.n	800b7a2 <__ieee754_sqrt+0xd6>
 800b826:	bf00      	nop
 800b828:	7ff00000 	.word	0x7ff00000

0800b82c <with_errno>:
 800b82c:	b570      	push	{r4, r5, r6, lr}
 800b82e:	4604      	mov	r4, r0
 800b830:	460d      	mov	r5, r1
 800b832:	4616      	mov	r6, r2
 800b834:	f7fc f8b0 	bl	8007998 <__errno>
 800b838:	4629      	mov	r1, r5
 800b83a:	6006      	str	r6, [r0, #0]
 800b83c:	4620      	mov	r0, r4
 800b83e:	bd70      	pop	{r4, r5, r6, pc}

0800b840 <xflow>:
 800b840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b842:	4615      	mov	r5, r2
 800b844:	461c      	mov	r4, r3
 800b846:	b180      	cbz	r0, 800b86a <xflow+0x2a>
 800b848:	4610      	mov	r0, r2
 800b84a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b84e:	e9cd 0100 	strd	r0, r1, [sp]
 800b852:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b856:	4628      	mov	r0, r5
 800b858:	4621      	mov	r1, r4
 800b85a:	f7f4 ff61 	bl	8000720 <__aeabi_dmul>
 800b85e:	2222      	movs	r2, #34	; 0x22
 800b860:	b003      	add	sp, #12
 800b862:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b866:	f7ff bfe1 	b.w	800b82c <with_errno>
 800b86a:	4610      	mov	r0, r2
 800b86c:	4619      	mov	r1, r3
 800b86e:	e7ee      	b.n	800b84e <xflow+0xe>

0800b870 <__math_uflow>:
 800b870:	2200      	movs	r2, #0
 800b872:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b876:	f7ff bfe3 	b.w	800b840 <xflow>

0800b87a <__math_oflow>:
 800b87a:	2200      	movs	r2, #0
 800b87c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b880:	f7ff bfde 	b.w	800b840 <xflow>

0800b884 <fabs>:
 800b884:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b888:	4770      	bx	lr

0800b88a <finite>:
 800b88a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b88e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b892:	0fc0      	lsrs	r0, r0, #31
 800b894:	4770      	bx	lr
	...

0800b898 <scalbn>:
 800b898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b89e:	4604      	mov	r4, r0
 800b8a0:	460d      	mov	r5, r1
 800b8a2:	4617      	mov	r7, r2
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	b996      	cbnz	r6, 800b8ce <scalbn+0x36>
 800b8a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b8ac:	4303      	orrs	r3, r0
 800b8ae:	d039      	beq.n	800b924 <scalbn+0x8c>
 800b8b0:	4b33      	ldr	r3, [pc, #204]	; (800b980 <scalbn+0xe8>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f7f4 ff34 	bl	8000720 <__aeabi_dmul>
 800b8b8:	4b32      	ldr	r3, [pc, #200]	; (800b984 <scalbn+0xec>)
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	429f      	cmp	r7, r3
 800b8be:	460d      	mov	r5, r1
 800b8c0:	da0f      	bge.n	800b8e2 <scalbn+0x4a>
 800b8c2:	a32b      	add	r3, pc, #172	; (adr r3, 800b970 <scalbn+0xd8>)
 800b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c8:	f7f4 ff2a 	bl	8000720 <__aeabi_dmul>
 800b8cc:	e006      	b.n	800b8dc <scalbn+0x44>
 800b8ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b8d2:	4296      	cmp	r6, r2
 800b8d4:	d10a      	bne.n	800b8ec <scalbn+0x54>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	f7f4 fd6c 	bl	80003b4 <__adddf3>
 800b8dc:	4604      	mov	r4, r0
 800b8de:	460d      	mov	r5, r1
 800b8e0:	e020      	b.n	800b924 <scalbn+0x8c>
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b8e8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b8ec:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b8f0:	19b9      	adds	r1, r7, r6
 800b8f2:	4291      	cmp	r1, r2
 800b8f4:	dd0e      	ble.n	800b914 <scalbn+0x7c>
 800b8f6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b8fa:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b8fe:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b902:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b906:	4820      	ldr	r0, [pc, #128]	; (800b988 <scalbn+0xf0>)
 800b908:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b90c:	a31a      	add	r3, pc, #104	; (adr r3, 800b978 <scalbn+0xe0>)
 800b90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b912:	e7d9      	b.n	800b8c8 <scalbn+0x30>
 800b914:	2900      	cmp	r1, #0
 800b916:	dd08      	ble.n	800b92a <scalbn+0x92>
 800b918:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b91c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b920:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b924:	4620      	mov	r0, r4
 800b926:	4629      	mov	r1, r5
 800b928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b92a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800b92e:	da12      	bge.n	800b956 <scalbn+0xbe>
 800b930:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b934:	429f      	cmp	r7, r3
 800b936:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800b93a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800b93e:	dcdc      	bgt.n	800b8fa <scalbn+0x62>
 800b940:	a30b      	add	r3, pc, #44	; (adr r3, 800b970 <scalbn+0xd8>)
 800b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b946:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800b94a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800b94e:	480f      	ldr	r0, [pc, #60]	; (800b98c <scalbn+0xf4>)
 800b950:	f041 011f 	orr.w	r1, r1, #31
 800b954:	e7b8      	b.n	800b8c8 <scalbn+0x30>
 800b956:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b95a:	3136      	adds	r1, #54	; 0x36
 800b95c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b960:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b964:	4620      	mov	r0, r4
 800b966:	4629      	mov	r1, r5
 800b968:	2200      	movs	r2, #0
 800b96a:	4b09      	ldr	r3, [pc, #36]	; (800b990 <scalbn+0xf8>)
 800b96c:	e7ac      	b.n	800b8c8 <scalbn+0x30>
 800b96e:	bf00      	nop
 800b970:	c2f8f359 	.word	0xc2f8f359
 800b974:	01a56e1f 	.word	0x01a56e1f
 800b978:	8800759c 	.word	0x8800759c
 800b97c:	7e37e43c 	.word	0x7e37e43c
 800b980:	43500000 	.word	0x43500000
 800b984:	ffff3cb0 	.word	0xffff3cb0
 800b988:	8800759c 	.word	0x8800759c
 800b98c:	c2f8f359 	.word	0xc2f8f359
 800b990:	3c900000 	.word	0x3c900000

0800b994 <_init>:
 800b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b996:	bf00      	nop
 800b998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b99a:	bc08      	pop	{r3}
 800b99c:	469e      	mov	lr, r3
 800b99e:	4770      	bx	lr

0800b9a0 <_fini>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	bf00      	nop
 800b9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9a6:	bc08      	pop	{r3}
 800b9a8:	469e      	mov	lr, r3
 800b9aa:	4770      	bx	lr
