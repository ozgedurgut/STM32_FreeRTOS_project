
FreeRTOS_project_stm32f105.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e0  080060e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080060e0  080060e0  000160e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060e8  080060e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080060f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e8  20000074  08006164  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000165c  08006164  0002165c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001327c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003001  00000000  00000000  00033319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00036320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  00037738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ebb  00000000  00000000  00038a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158ff  00000000  00000000  000598c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c19c8  00000000  00000000  0006f1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130b8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005870  00000000  00000000  00130bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	08005f78 	.word	0x08005f78

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	08005f78 	.word	0x08005f78

08000230 <__aeabi_frsub>:
 8000230:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__addsf3>
 8000236:	bf00      	nop

08000238 <__aeabi_fsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800023c <__addsf3>:
 800023c:	0042      	lsls	r2, r0, #1
 800023e:	bf1f      	itttt	ne
 8000240:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000244:	ea92 0f03 	teqne	r2, r3
 8000248:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800024c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000250:	d06a      	beq.n	8000328 <__addsf3+0xec>
 8000252:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000256:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800025a:	bfc1      	itttt	gt
 800025c:	18d2      	addgt	r2, r2, r3
 800025e:	4041      	eorgt	r1, r0
 8000260:	4048      	eorgt	r0, r1
 8000262:	4041      	eorgt	r1, r0
 8000264:	bfb8      	it	lt
 8000266:	425b      	neglt	r3, r3
 8000268:	2b19      	cmp	r3, #25
 800026a:	bf88      	it	hi
 800026c:	4770      	bxhi	lr
 800026e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000272:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000276:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800027a:	bf18      	it	ne
 800027c:	4240      	negne	r0, r0
 800027e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000282:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000286:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800028a:	bf18      	it	ne
 800028c:	4249      	negne	r1, r1
 800028e:	ea92 0f03 	teq	r2, r3
 8000292:	d03f      	beq.n	8000314 <__addsf3+0xd8>
 8000294:	f1a2 0201 	sub.w	r2, r2, #1
 8000298:	fa41 fc03 	asr.w	ip, r1, r3
 800029c:	eb10 000c 	adds.w	r0, r0, ip
 80002a0:	f1c3 0320 	rsb	r3, r3, #32
 80002a4:	fa01 f103 	lsl.w	r1, r1, r3
 80002a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002ac:	d502      	bpl.n	80002b4 <__addsf3+0x78>
 80002ae:	4249      	negs	r1, r1
 80002b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002b8:	d313      	bcc.n	80002e2 <__addsf3+0xa6>
 80002ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002be:	d306      	bcc.n	80002ce <__addsf3+0x92>
 80002c0:	0840      	lsrs	r0, r0, #1
 80002c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80002c6:	f102 0201 	add.w	r2, r2, #1
 80002ca:	2afe      	cmp	r2, #254	; 0xfe
 80002cc:	d251      	bcs.n	8000372 <__addsf3+0x136>
 80002ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002d6:	bf08      	it	eq
 80002d8:	f020 0001 	biceq.w	r0, r0, #1
 80002dc:	ea40 0003 	orr.w	r0, r0, r3
 80002e0:	4770      	bx	lr
 80002e2:	0049      	lsls	r1, r1, #1
 80002e4:	eb40 0000 	adc.w	r0, r0, r0
 80002e8:	3a01      	subs	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002f0:	d2ed      	bcs.n	80002ce <__addsf3+0x92>
 80002f2:	fab0 fc80 	clz	ip, r0
 80002f6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002fa:	ebb2 020c 	subs.w	r2, r2, ip
 80002fe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000302:	bfaa      	itet	ge
 8000304:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000308:	4252      	neglt	r2, r2
 800030a:	4318      	orrge	r0, r3
 800030c:	bfbc      	itt	lt
 800030e:	40d0      	lsrlt	r0, r2
 8000310:	4318      	orrlt	r0, r3
 8000312:	4770      	bx	lr
 8000314:	f092 0f00 	teq	r2, #0
 8000318:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800031c:	bf06      	itte	eq
 800031e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000322:	3201      	addeq	r2, #1
 8000324:	3b01      	subne	r3, #1
 8000326:	e7b5      	b.n	8000294 <__addsf3+0x58>
 8000328:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800032c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000330:	bf18      	it	ne
 8000332:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000336:	d021      	beq.n	800037c <__addsf3+0x140>
 8000338:	ea92 0f03 	teq	r2, r3
 800033c:	d004      	beq.n	8000348 <__addsf3+0x10c>
 800033e:	f092 0f00 	teq	r2, #0
 8000342:	bf08      	it	eq
 8000344:	4608      	moveq	r0, r1
 8000346:	4770      	bx	lr
 8000348:	ea90 0f01 	teq	r0, r1
 800034c:	bf1c      	itt	ne
 800034e:	2000      	movne	r0, #0
 8000350:	4770      	bxne	lr
 8000352:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000356:	d104      	bne.n	8000362 <__addsf3+0x126>
 8000358:	0040      	lsls	r0, r0, #1
 800035a:	bf28      	it	cs
 800035c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000360:	4770      	bx	lr
 8000362:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000366:	bf3c      	itt	cc
 8000368:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800036c:	4770      	bxcc	lr
 800036e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000372:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000376:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800037a:	4770      	bx	lr
 800037c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000380:	bf16      	itet	ne
 8000382:	4608      	movne	r0, r1
 8000384:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000388:	4601      	movne	r1, r0
 800038a:	0242      	lsls	r2, r0, #9
 800038c:	bf06      	itte	eq
 800038e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000392:	ea90 0f01 	teqeq	r0, r1
 8000396:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800039a:	4770      	bx	lr

0800039c <__aeabi_ui2f>:
 800039c:	f04f 0300 	mov.w	r3, #0
 80003a0:	e004      	b.n	80003ac <__aeabi_i2f+0x8>
 80003a2:	bf00      	nop

080003a4 <__aeabi_i2f>:
 80003a4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003a8:	bf48      	it	mi
 80003aa:	4240      	negmi	r0, r0
 80003ac:	ea5f 0c00 	movs.w	ip, r0
 80003b0:	bf08      	it	eq
 80003b2:	4770      	bxeq	lr
 80003b4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003b8:	4601      	mov	r1, r0
 80003ba:	f04f 0000 	mov.w	r0, #0
 80003be:	e01c      	b.n	80003fa <__aeabi_l2f+0x2a>

080003c0 <__aeabi_ul2f>:
 80003c0:	ea50 0201 	orrs.w	r2, r0, r1
 80003c4:	bf08      	it	eq
 80003c6:	4770      	bxeq	lr
 80003c8:	f04f 0300 	mov.w	r3, #0
 80003cc:	e00a      	b.n	80003e4 <__aeabi_l2f+0x14>
 80003ce:	bf00      	nop

080003d0 <__aeabi_l2f>:
 80003d0:	ea50 0201 	orrs.w	r2, r0, r1
 80003d4:	bf08      	it	eq
 80003d6:	4770      	bxeq	lr
 80003d8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003dc:	d502      	bpl.n	80003e4 <__aeabi_l2f+0x14>
 80003de:	4240      	negs	r0, r0
 80003e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e4:	ea5f 0c01 	movs.w	ip, r1
 80003e8:	bf02      	ittt	eq
 80003ea:	4684      	moveq	ip, r0
 80003ec:	4601      	moveq	r1, r0
 80003ee:	2000      	moveq	r0, #0
 80003f0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003f4:	bf08      	it	eq
 80003f6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003fa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003fe:	fabc f28c 	clz	r2, ip
 8000402:	3a08      	subs	r2, #8
 8000404:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000408:	db10      	blt.n	800042c <__aeabi_l2f+0x5c>
 800040a:	fa01 fc02 	lsl.w	ip, r1, r2
 800040e:	4463      	add	r3, ip
 8000410:	fa00 fc02 	lsl.w	ip, r0, r2
 8000414:	f1c2 0220 	rsb	r2, r2, #32
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	fa20 f202 	lsr.w	r2, r0, r2
 8000420:	eb43 0002 	adc.w	r0, r3, r2
 8000424:	bf08      	it	eq
 8000426:	f020 0001 	biceq.w	r0, r0, #1
 800042a:	4770      	bx	lr
 800042c:	f102 0220 	add.w	r2, r2, #32
 8000430:	fa01 fc02 	lsl.w	ip, r1, r2
 8000434:	f1c2 0220 	rsb	r2, r2, #32
 8000438:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800043c:	fa21 f202 	lsr.w	r2, r1, r2
 8000440:	eb43 0002 	adc.w	r0, r3, r2
 8000444:	bf08      	it	eq
 8000446:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800044a:	4770      	bx	lr

0800044c <__aeabi_f2iz>:
 800044c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000450:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000454:	d30f      	bcc.n	8000476 <__aeabi_f2iz+0x2a>
 8000456:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800045a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800045e:	d90d      	bls.n	800047c <__aeabi_f2iz+0x30>
 8000460:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000464:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000468:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800046c:	fa23 f002 	lsr.w	r0, r3, r2
 8000470:	bf18      	it	ne
 8000472:	4240      	negne	r0, r0
 8000474:	4770      	bx	lr
 8000476:	f04f 0000 	mov.w	r0, #0
 800047a:	4770      	bx	lr
 800047c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000480:	d101      	bne.n	8000486 <__aeabi_f2iz+0x3a>
 8000482:	0242      	lsls	r2, r0, #9
 8000484:	d105      	bne.n	8000492 <__aeabi_f2iz+0x46>
 8000486:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800048a:	bf08      	it	eq
 800048c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000490:	4770      	bx	lr
 8000492:	f04f 0000 	mov.w	r0, #0
 8000496:	4770      	bx	lr

08000498 <__aeabi_uldivmod>:
 8000498:	b953      	cbnz	r3, 80004b0 <__aeabi_uldivmod+0x18>
 800049a:	b94a      	cbnz	r2, 80004b0 <__aeabi_uldivmod+0x18>
 800049c:	2900      	cmp	r1, #0
 800049e:	bf08      	it	eq
 80004a0:	2800      	cmpeq	r0, #0
 80004a2:	bf1c      	itt	ne
 80004a4:	f04f 31ff 	movne.w	r1, #4294967295
 80004a8:	f04f 30ff 	movne.w	r0, #4294967295
 80004ac:	f000 b976 	b.w	800079c <__aeabi_idiv0>
 80004b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80004b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004b8:	f000 f806 	bl	80004c8 <__udivmoddi4>
 80004bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004c4:	b004      	add	sp, #16
 80004c6:	4770      	bx	lr

080004c8 <__udivmoddi4>:
 80004c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004cc:	9e08      	ldr	r6, [sp, #32]
 80004ce:	460d      	mov	r5, r1
 80004d0:	4604      	mov	r4, r0
 80004d2:	4688      	mov	r8, r1
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d14d      	bne.n	8000574 <__udivmoddi4+0xac>
 80004d8:	428a      	cmp	r2, r1
 80004da:	4694      	mov	ip, r2
 80004dc:	d968      	bls.n	80005b0 <__udivmoddi4+0xe8>
 80004de:	fab2 f282 	clz	r2, r2
 80004e2:	b152      	cbz	r2, 80004fa <__udivmoddi4+0x32>
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	f1c2 0120 	rsb	r1, r2, #32
 80004ec:	fa20 f101 	lsr.w	r1, r0, r1
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	ea41 0803 	orr.w	r8, r1, r3
 80004f8:	4094      	lsls	r4, r2
 80004fa:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80004fe:	fbb8 f7f1 	udiv	r7, r8, r1
 8000502:	fa1f fe8c 	uxth.w	lr, ip
 8000506:	fb01 8817 	mls	r8, r1, r7, r8
 800050a:	fb07 f00e 	mul.w	r0, r7, lr
 800050e:	0c23      	lsrs	r3, r4, #16
 8000510:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000514:	4298      	cmp	r0, r3
 8000516:	d90a      	bls.n	800052e <__udivmoddi4+0x66>
 8000518:	eb1c 0303 	adds.w	r3, ip, r3
 800051c:	f107 35ff 	add.w	r5, r7, #4294967295
 8000520:	f080 811e 	bcs.w	8000760 <__udivmoddi4+0x298>
 8000524:	4298      	cmp	r0, r3
 8000526:	f240 811b 	bls.w	8000760 <__udivmoddi4+0x298>
 800052a:	3f02      	subs	r7, #2
 800052c:	4463      	add	r3, ip
 800052e:	1a1b      	subs	r3, r3, r0
 8000530:	fbb3 f0f1 	udiv	r0, r3, r1
 8000534:	fb01 3310 	mls	r3, r1, r0, r3
 8000538:	fb00 fe0e 	mul.w	lr, r0, lr
 800053c:	b2a4      	uxth	r4, r4
 800053e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000542:	45a6      	cmp	lr, r4
 8000544:	d90a      	bls.n	800055c <__udivmoddi4+0x94>
 8000546:	eb1c 0404 	adds.w	r4, ip, r4
 800054a:	f100 33ff 	add.w	r3, r0, #4294967295
 800054e:	f080 8109 	bcs.w	8000764 <__udivmoddi4+0x29c>
 8000552:	45a6      	cmp	lr, r4
 8000554:	f240 8106 	bls.w	8000764 <__udivmoddi4+0x29c>
 8000558:	4464      	add	r4, ip
 800055a:	3802      	subs	r0, #2
 800055c:	2100      	movs	r1, #0
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000566:	b11e      	cbz	r6, 8000570 <__udivmoddi4+0xa8>
 8000568:	2300      	movs	r3, #0
 800056a:	40d4      	lsrs	r4, r2
 800056c:	e9c6 4300 	strd	r4, r3, [r6]
 8000570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0xc2>
 8000578:	2e00      	cmp	r6, #0
 800057a:	f000 80ee 	beq.w	800075a <__udivmoddi4+0x292>
 800057e:	2100      	movs	r1, #0
 8000580:	e9c6 0500 	strd	r0, r5, [r6]
 8000584:	4608      	mov	r0, r1
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	fab3 f183 	clz	r1, r3
 800058e:	2900      	cmp	r1, #0
 8000590:	d14a      	bne.n	8000628 <__udivmoddi4+0x160>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d302      	bcc.n	800059c <__udivmoddi4+0xd4>
 8000596:	4282      	cmp	r2, r0
 8000598:	f200 80fc 	bhi.w	8000794 <__udivmoddi4+0x2cc>
 800059c:	1a84      	subs	r4, r0, r2
 800059e:	eb65 0303 	sbc.w	r3, r5, r3
 80005a2:	2001      	movs	r0, #1
 80005a4:	4698      	mov	r8, r3
 80005a6:	2e00      	cmp	r6, #0
 80005a8:	d0e2      	beq.n	8000570 <__udivmoddi4+0xa8>
 80005aa:	e9c6 4800 	strd	r4, r8, [r6]
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0xa8>
 80005b0:	b902      	cbnz	r2, 80005b4 <__udivmoddi4+0xec>
 80005b2:	deff      	udf	#255	; 0xff
 80005b4:	fab2 f282 	clz	r2, r2
 80005b8:	2a00      	cmp	r2, #0
 80005ba:	f040 8091 	bne.w	80006e0 <__udivmoddi4+0x218>
 80005be:	eba1 000c 	sub.w	r0, r1, ip
 80005c2:	2101      	movs	r1, #1
 80005c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005c8:	fa1f fe8c 	uxth.w	lr, ip
 80005cc:	fbb0 f3f7 	udiv	r3, r0, r7
 80005d0:	fb07 0013 	mls	r0, r7, r3, r0
 80005d4:	0c25      	lsrs	r5, r4, #16
 80005d6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80005da:	fb0e f003 	mul.w	r0, lr, r3
 80005de:	42a8      	cmp	r0, r5
 80005e0:	d908      	bls.n	80005f4 <__udivmoddi4+0x12c>
 80005e2:	eb1c 0505 	adds.w	r5, ip, r5
 80005e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80005ea:	d202      	bcs.n	80005f2 <__udivmoddi4+0x12a>
 80005ec:	42a8      	cmp	r0, r5
 80005ee:	f200 80ce 	bhi.w	800078e <__udivmoddi4+0x2c6>
 80005f2:	4643      	mov	r3, r8
 80005f4:	1a2d      	subs	r5, r5, r0
 80005f6:	fbb5 f0f7 	udiv	r0, r5, r7
 80005fa:	fb07 5510 	mls	r5, r7, r0, r5
 80005fe:	fb0e fe00 	mul.w	lr, lr, r0
 8000602:	b2a4      	uxth	r4, r4
 8000604:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000608:	45a6      	cmp	lr, r4
 800060a:	d908      	bls.n	800061e <__udivmoddi4+0x156>
 800060c:	eb1c 0404 	adds.w	r4, ip, r4
 8000610:	f100 35ff 	add.w	r5, r0, #4294967295
 8000614:	d202      	bcs.n	800061c <__udivmoddi4+0x154>
 8000616:	45a6      	cmp	lr, r4
 8000618:	f200 80b6 	bhi.w	8000788 <__udivmoddi4+0x2c0>
 800061c:	4628      	mov	r0, r5
 800061e:	eba4 040e 	sub.w	r4, r4, lr
 8000622:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000626:	e79e      	b.n	8000566 <__udivmoddi4+0x9e>
 8000628:	f1c1 0720 	rsb	r7, r1, #32
 800062c:	408b      	lsls	r3, r1
 800062e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000632:	ea4c 0c03 	orr.w	ip, ip, r3
 8000636:	fa25 fa07 	lsr.w	sl, r5, r7
 800063a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800063e:	fbba f8f9 	udiv	r8, sl, r9
 8000642:	fa20 f307 	lsr.w	r3, r0, r7
 8000646:	fb09 aa18 	mls	sl, r9, r8, sl
 800064a:	408d      	lsls	r5, r1
 800064c:	fa1f fe8c 	uxth.w	lr, ip
 8000650:	431d      	orrs	r5, r3
 8000652:	fa00 f301 	lsl.w	r3, r0, r1
 8000656:	fb08 f00e 	mul.w	r0, r8, lr
 800065a:	0c2c      	lsrs	r4, r5, #16
 800065c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000660:	42a0      	cmp	r0, r4
 8000662:	fa02 f201 	lsl.w	r2, r2, r1
 8000666:	d90b      	bls.n	8000680 <__udivmoddi4+0x1b8>
 8000668:	eb1c 0404 	adds.w	r4, ip, r4
 800066c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000670:	f080 8088 	bcs.w	8000784 <__udivmoddi4+0x2bc>
 8000674:	42a0      	cmp	r0, r4
 8000676:	f240 8085 	bls.w	8000784 <__udivmoddi4+0x2bc>
 800067a:	f1a8 0802 	sub.w	r8, r8, #2
 800067e:	4464      	add	r4, ip
 8000680:	1a24      	subs	r4, r4, r0
 8000682:	fbb4 f0f9 	udiv	r0, r4, r9
 8000686:	fb09 4410 	mls	r4, r9, r0, r4
 800068a:	fb00 fe0e 	mul.w	lr, r0, lr
 800068e:	b2ad      	uxth	r5, r5
 8000690:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000694:	45a6      	cmp	lr, r4
 8000696:	d908      	bls.n	80006aa <__udivmoddi4+0x1e2>
 8000698:	eb1c 0404 	adds.w	r4, ip, r4
 800069c:	f100 35ff 	add.w	r5, r0, #4294967295
 80006a0:	d26c      	bcs.n	800077c <__udivmoddi4+0x2b4>
 80006a2:	45a6      	cmp	lr, r4
 80006a4:	d96a      	bls.n	800077c <__udivmoddi4+0x2b4>
 80006a6:	3802      	subs	r0, #2
 80006a8:	4464      	add	r4, ip
 80006aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006ae:	fba0 9502 	umull	r9, r5, r0, r2
 80006b2:	eba4 040e 	sub.w	r4, r4, lr
 80006b6:	42ac      	cmp	r4, r5
 80006b8:	46c8      	mov	r8, r9
 80006ba:	46ae      	mov	lr, r5
 80006bc:	d356      	bcc.n	800076c <__udivmoddi4+0x2a4>
 80006be:	d053      	beq.n	8000768 <__udivmoddi4+0x2a0>
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d069      	beq.n	8000798 <__udivmoddi4+0x2d0>
 80006c4:	ebb3 0208 	subs.w	r2, r3, r8
 80006c8:	eb64 040e 	sbc.w	r4, r4, lr
 80006cc:	fa22 f301 	lsr.w	r3, r2, r1
 80006d0:	fa04 f707 	lsl.w	r7, r4, r7
 80006d4:	431f      	orrs	r7, r3
 80006d6:	40cc      	lsrs	r4, r1
 80006d8:	e9c6 7400 	strd	r7, r4, [r6]
 80006dc:	2100      	movs	r1, #0
 80006de:	e747      	b.n	8000570 <__udivmoddi4+0xa8>
 80006e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80006e4:	f1c2 0120 	rsb	r1, r2, #32
 80006e8:	fa25 f301 	lsr.w	r3, r5, r1
 80006ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006f0:	fa20 f101 	lsr.w	r1, r0, r1
 80006f4:	4095      	lsls	r5, r2
 80006f6:	430d      	orrs	r5, r1
 80006f8:	fbb3 f1f7 	udiv	r1, r3, r7
 80006fc:	fb07 3311 	mls	r3, r7, r1, r3
 8000700:	fa1f fe8c 	uxth.w	lr, ip
 8000704:	0c28      	lsrs	r0, r5, #16
 8000706:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800070a:	fb01 f30e 	mul.w	r3, r1, lr
 800070e:	4283      	cmp	r3, r0
 8000710:	fa04 f402 	lsl.w	r4, r4, r2
 8000714:	d908      	bls.n	8000728 <__udivmoddi4+0x260>
 8000716:	eb1c 0000 	adds.w	r0, ip, r0
 800071a:	f101 38ff 	add.w	r8, r1, #4294967295
 800071e:	d22f      	bcs.n	8000780 <__udivmoddi4+0x2b8>
 8000720:	4283      	cmp	r3, r0
 8000722:	d92d      	bls.n	8000780 <__udivmoddi4+0x2b8>
 8000724:	3902      	subs	r1, #2
 8000726:	4460      	add	r0, ip
 8000728:	1ac0      	subs	r0, r0, r3
 800072a:	fbb0 f3f7 	udiv	r3, r0, r7
 800072e:	fb07 0013 	mls	r0, r7, r3, r0
 8000732:	b2ad      	uxth	r5, r5
 8000734:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000738:	fb03 f00e 	mul.w	r0, r3, lr
 800073c:	42a8      	cmp	r0, r5
 800073e:	d908      	bls.n	8000752 <__udivmoddi4+0x28a>
 8000740:	eb1c 0505 	adds.w	r5, ip, r5
 8000744:	f103 38ff 	add.w	r8, r3, #4294967295
 8000748:	d216      	bcs.n	8000778 <__udivmoddi4+0x2b0>
 800074a:	42a8      	cmp	r0, r5
 800074c:	d914      	bls.n	8000778 <__udivmoddi4+0x2b0>
 800074e:	3b02      	subs	r3, #2
 8000750:	4465      	add	r5, ip
 8000752:	1a28      	subs	r0, r5, r0
 8000754:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000758:	e738      	b.n	80005cc <__udivmoddi4+0x104>
 800075a:	4631      	mov	r1, r6
 800075c:	4630      	mov	r0, r6
 800075e:	e707      	b.n	8000570 <__udivmoddi4+0xa8>
 8000760:	462f      	mov	r7, r5
 8000762:	e6e4      	b.n	800052e <__udivmoddi4+0x66>
 8000764:	4618      	mov	r0, r3
 8000766:	e6f9      	b.n	800055c <__udivmoddi4+0x94>
 8000768:	454b      	cmp	r3, r9
 800076a:	d2a9      	bcs.n	80006c0 <__udivmoddi4+0x1f8>
 800076c:	ebb9 0802 	subs.w	r8, r9, r2
 8000770:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000774:	3801      	subs	r0, #1
 8000776:	e7a3      	b.n	80006c0 <__udivmoddi4+0x1f8>
 8000778:	4643      	mov	r3, r8
 800077a:	e7ea      	b.n	8000752 <__udivmoddi4+0x28a>
 800077c:	4628      	mov	r0, r5
 800077e:	e794      	b.n	80006aa <__udivmoddi4+0x1e2>
 8000780:	4641      	mov	r1, r8
 8000782:	e7d1      	b.n	8000728 <__udivmoddi4+0x260>
 8000784:	46d0      	mov	r8, sl
 8000786:	e77b      	b.n	8000680 <__udivmoddi4+0x1b8>
 8000788:	4464      	add	r4, ip
 800078a:	3802      	subs	r0, #2
 800078c:	e747      	b.n	800061e <__udivmoddi4+0x156>
 800078e:	3b02      	subs	r3, #2
 8000790:	4465      	add	r5, ip
 8000792:	e72f      	b.n	80005f4 <__udivmoddi4+0x12c>
 8000794:	4608      	mov	r0, r1
 8000796:	e706      	b.n	80005a6 <__udivmoddi4+0xde>
 8000798:	4631      	mov	r1, r6
 800079a:	e6e9      	b.n	8000570 <__udivmoddi4+0xa8>

0800079c <__aeabi_idiv0>:
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop

080007a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <vApplicationGetIdleTaskMemory+0x28>)
 80007b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	4a05      	ldr	r2, [pc, #20]	; (80007cc <vApplicationGetIdleTaskMemory+0x2c>)
 80007b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	20000090 	.word	0x20000090
 80007cc:	200000e4 	.word	0x200000e4

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b5b0      	push	{r4, r5, r7, lr}
 80007d2:	b0a4      	sub	sp, #144	; 0x90
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d6:	f000 fe97 	bl	8001508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 f881 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f000 f9d5 	bl	8000b8c <MX_GPIO_Init>
  MX_DMA_Init();
 80007e2:	f000 f9b5 	bl	8000b50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007e6:	f000 f989 	bl	8000afc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80007ea:	f000 f91b 	bl	8000a24 <MX_SPI1_Init>
  MX_SPI3_Init();
 80007ee:	f000 f94f 	bl	8000a90 <MX_SPI3_Init>
  MX_ADC1_Init();
 80007f2:	f000 f8d9 	bl	80009a8 <MX_ADC1_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <main+0xe8>)
 80007f8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80007fc:	461d      	mov	r5, r3
 80007fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000802:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800080a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f003 fd49 	bl	80042a8 <osThreadCreate>
 8000816:	4603      	mov	r3, r0
 8000818:	4a28      	ldr	r2, [pc, #160]	; (80008bc <main+0xec>)
 800081a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_Init, osPriorityNormal, 0, 128);
 800081c:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <main+0xf0>)
 800081e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000822:	461d      	mov	r5, r3
 8000824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000828:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800082c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000830:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f003 fd36 	bl	80042a8 <osThreadCreate>
 800083c:	4603      	mov	r3, r0
 800083e:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <main+0xf4>)
 8000840:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, Task3_Init, osPriorityNormal, 0, 128);
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <main+0xf8>)
 8000844:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000848:	461d      	mov	r5, r3
 800084a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800084c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800084e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000852:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8000856:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f003 fd23 	bl	80042a8 <osThreadCreate>
 8000862:	4603      	mov	r3, r0
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <main+0xfc>)
 8000866:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task4 */
  osThreadDef(Task4, Task4_Init, osPriorityNormal, 0, 128);
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <main+0x100>)
 800086a:	f107 0420 	add.w	r4, r7, #32
 800086e:	461d      	mov	r5, r3
 8000870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000874:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000878:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task4Handle = osThreadCreate(osThread(Task4), NULL);
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f003 fd10 	bl	80042a8 <osThreadCreate>
 8000888:	4603      	mov	r3, r0
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <main+0x104>)
 800088c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task5 */
  osThreadDef(Task5, Task5_Init, osPriorityNormal, 0, 128);
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <main+0x108>)
 8000890:	1d3c      	adds	r4, r7, #4
 8000892:	461d      	mov	r5, r3
 8000894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000898:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800089c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task5Handle = osThreadCreate(osThread(Task5), NULL);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 fcff 	bl	80042a8 <osThreadCreate>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <main+0x10c>)
 80008ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008b0:	f003 fcf3 	bl	800429a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80008b4:	e7fe      	b.n	80008b4 <main+0xe4>
 80008b6:	bf00      	nop
 80008b8:	08005fbc 	.word	0x08005fbc
 80008bc:	2000049c 	.word	0x2000049c
 80008c0:	08005fd8 	.word	0x08005fd8
 80008c4:	200004a0 	.word	0x200004a0
 80008c8:	08005ff4 	.word	0x08005ff4
 80008cc:	200004a4 	.word	0x200004a4
 80008d0:	08006010 	.word	0x08006010
 80008d4:	200004a8 	.word	0x200004a8
 80008d8:	0800602c 	.word	0x0800602c
 80008dc:	200004ac 	.word	0x200004ac

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b09c      	sub	sp, #112	; 0x70
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008ea:	2238      	movs	r2, #56	; 0x38
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 fece 	bl	8005690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2220      	movs	r2, #32
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f004 fec0 	bl	8005690 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000910:	2301      	movs	r3, #1
 8000912:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000918:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091e:	2301      	movs	r3, #1
 8000920:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000922:	2300      	movs	r3, #0
 8000924:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000930:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000934:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000936:	2300      	movs	r3, #0
 8000938:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800093e:	4618      	mov	r0, r3
 8000940:	f001 ffd6 	bl	80028f0 <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800094a:	f000 fb69 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2302      	movs	r3, #2
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000968:	2102      	movs	r1, #2
 800096a:	4618      	mov	r0, r3
 800096c:	f002 fad6 	bl	8002f1c <HAL_RCC_ClockConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000976:	f000 fb53 	bl	8001020 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800097a:	2302      	movs	r3, #2
 800097c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fd45 	bl	8003414 <HAL_RCCEx_PeriphCLKConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000990:	f000 fb46 	bl	8001020 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <SystemClock_Config+0xc4>)
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
}
 800099a:	bf00      	nop
 800099c:	3770      	adds	r7, #112	; 0x70
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	42420070 	.word	0x42420070

080009a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009ba:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <MX_ADC1_Init+0x78>)
 80009bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_ADC1_Init+0x74>)
 80009e6:	f000 fde5 	bl	80015b4 <HAL_ADC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009f0:	f000 fb16 	bl	8001020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009f4:	230a      	movs	r3, #10
 80009f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80009fc:	2305      	movs	r3, #5
 80009fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_ADC1_Init+0x74>)
 8000a06:	f001 f899 	bl	8001b3c <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a10:	f000 fb06 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000334 	.word	0x20000334
 8000a20:	40012400 	.word	0x40012400

08000a24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a2a:	4a18      	ldr	r2, [pc, #96]	; (8000a8c <MX_SPI1_Init+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a58:	2218      	movs	r2, #24
 8000a5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a70:	220a      	movs	r2, #10
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_SPI1_Init+0x64>)
 8000a76:	f002 ff61 	bl	800393c <HAL_SPI_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a80:	f000 face 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200003a8 	.word	0x200003a8
 8000a8c:	40013000 	.word	0x40013000

08000a90 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_SPI3_Init+0x64>)
 8000a96:	4a18      	ldr	r2, [pc, #96]	; (8000af8 <MX_SPI3_Init+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_SPI3_Init+0x64>)
 8000a9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_SPI3_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_SPI3_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_SPI3_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_SPI3_Init+0x64>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_SPI3_Init+0x64>)
 8000abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_SPI3_Init+0x64>)
 8000ac4:	2218      	movs	r2, #24
 8000ac6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <MX_SPI3_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_SPI3_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <MX_SPI3_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_SPI3_Init+0x64>)
 8000adc:	220a      	movs	r2, #10
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_SPI3_Init+0x64>)
 8000ae2:	f002 ff2b 	bl	800393c <HAL_SPI_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000aec:	f000 fa98 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000400 	.word	0x20000400
 8000af8:	40003c00 	.word	0x40003c00

08000afc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_USART2_UART_Init+0x50>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b34:	f003 f9e2 	bl	8003efc <HAL_UART_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b3e:	f000 fa6f 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000458 	.word	0x20000458
 8000b4c:	40004400 	.word	0x40004400

08000b50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_DMA_Init+0x38>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <MX_DMA_Init+0x38>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6153      	str	r3, [r2, #20]
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_DMA_Init+0x38>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2105      	movs	r1, #5
 8000b72:	200b      	movs	r0, #11
 8000b74:	f001 fa2b 	bl	8001fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b78:	200b      	movs	r0, #11
 8000b7a:	f001 fa44 	bl	8002006 <HAL_NVIC_EnableIRQ>

}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba0:	4b37      	ldr	r3, [pc, #220]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a36      	ldr	r2, [pc, #216]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000ba6:	f043 0320 	orr.w	r3, r3, #32
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0320 	and.w	r3, r3, #32
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb8:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a30      	ldr	r2, [pc, #192]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0310 	and.w	r3, r3, #16
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a2a      	ldr	r2, [pc, #168]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be8:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a24      	ldr	r2, [pc, #144]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000bee:	f043 0308 	orr.w	r3, r3, #8
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <MX_GPIO_Init+0xf4>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0308 	and.w	r3, r3, #8
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8000c06:	481f      	ldr	r0, [pc, #124]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000c08:	f001 fe59 	bl	80028be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Sensor1_Pin Sensor7_Pin Sensor6_Pin Sensor5_Pin */
  GPIO_InitStruct.Pin = Sensor1_Pin|Sensor7_Pin|Sensor6_Pin|Sensor5_Pin;
 8000c0c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4819      	ldr	r0, [pc, #100]	; (8000c88 <MX_GPIO_Init+0xfc>)
 8000c22:	f001 fcb1 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor4_Pin Sensor3_Pin Sensor2_Pin */
  GPIO_InitStruct.Pin = Sensor4_Pin|Sensor3_Pin|Sensor2_Pin;
 8000c26:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <MX_GPIO_Init+0x100>)
 8000c3c:	f001 fca4 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8000c40:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	4619      	mov	r1, r3
 8000c58:	480a      	ldr	r0, [pc, #40]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000c5a:	f001 fc95 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS1_Pin */
  GPIO_InitStruct.Pin = SPI3_CS1_Pin;
 8000c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <MX_GPIO_Init+0x104>)
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI3_CS1_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	4619      	mov	r1, r3
 8000c72:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_GPIO_Init+0xf8>)
 8000c74:	f001 fc88 	bl	8002588 <HAL_GPIO_Init>

}
 8000c78:	bf00      	nop
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010800 	.word	0x40010800
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	10110000 	.word	0x10110000

08000c94 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		i++;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <StartDefaultTask+0x50>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <StartDefaultTask+0x50>)
 8000ca4:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cac:	480e      	ldr	r0, [pc, #56]	; (8000ce8 <StartDefaultTask+0x54>)
 8000cae:	f001 fe06 	bl	80028be <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000cb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb6:	f000 fc59 	bl	800156c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <StartDefaultTask+0x54>)
 8000cc2:	f001 fdfc 	bl	80028be <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cca:	f000 fc4f 	bl	800156c <HAL_Delay>
		if(i==3){
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <StartDefaultTask+0x50>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d102      	bne.n	8000cdc <StartDefaultTask+0x48>
			task2=1;
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <StartDefaultTask+0x58>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
		}
		osDelay(1);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f003 fb2f 	bl	8004340 <osDelay>
		i++;
 8000ce2:	e7db      	b.n	8000c9c <StartDefaultTask+0x8>
 8000ce4:	200002e8 	.word	0x200002e8
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	200002e4 	.word	0x200002e4

08000cf0 <Task2_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task2_Init */
void Task2_Init(void const * argument)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_Init */
	/* Infinite loop */
	for(;;)
	{
		if(task2==1){
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <Task2_Init+0x40>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d013      	beq.n	8000d28 <Task2_Init+0x38>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d06:	480b      	ldr	r0, [pc, #44]	; (8000d34 <Task2_Init+0x44>)
 8000d08:	f001 fdd9 	bl	80028be <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d10:	f000 fc2c 	bl	800156c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <Task2_Init+0x44>)
 8000d1c:	f001 fdcf 	bl	80028be <HAL_GPIO_WritePin>
			HAL_Delay(1000);}
 8000d20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d24:	f000 fc22 	bl	800156c <HAL_Delay>
		osDelay(1);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f003 fb09 	bl	8004340 <osDelay>
		if(task2==1){
 8000d2e:	e7e3      	b.n	8000cf8 <Task2_Init+0x8>
 8000d30:	200002e4 	.word	0x200002e4
 8000d34:	40010800 	.word	0x40010800

08000d38 <Task3_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task3_Init */
void Task3_Init(void const * argument)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_Init */
	/* Infinite loop */
	for(;;)
	{
		ADC_ChannelConfTypeDef sConfig = {3};
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	60fb      	str	r3, [r7, #12]

		sConfig.Channel = ADC_CHANNEL_10;
 8000d50:	230a      	movs	r3, #10
 8000d52:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000d58:	2305      	movs	r3, #5
 8000d5a:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	4619      	mov	r1, r3
 8000d62:	486b      	ldr	r0, [pc, #428]	; (8000f10 <Task3_Init+0x1d8>)
 8000d64:	f000 feea 	bl	8001b3c <HAL_ADC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <Task3_Init+0x3a>
		{
			Error_Handler();
 8000d6e:	f000 f957 	bl	8001020 <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 8000d72:	4867      	ldr	r0, [pc, #412]	; (8000f10 <Task3_Init+0x1d8>)
 8000d74:	f000 fcf6 	bl	8001764 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100);
 8000d78:	2164      	movs	r1, #100	; 0x64
 8000d7a:	4865      	ldr	r0, [pc, #404]	; (8000f10 <Task3_Init+0x1d8>)
 8000d7c:	f000 fdcc 	bl	8001918 <HAL_ADC_PollForConversion>
		adc_val1=(float)HAL_ADC_GetValue(&hadc1);
 8000d80:	4863      	ldr	r0, [pc, #396]	; (8000f10 <Task3_Init+0x1d8>)
 8000d82:	f000 fecf 	bl	8001b24 <HAL_ADC_GetValue>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fb07 	bl	800039c <__aeabi_ui2f>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fb5b 	bl	800044c <__aeabi_f2iz>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a5e      	ldr	r2, [pc, #376]	; (8000f14 <Task3_Init+0x1dc>)
 8000d9a:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8000d9c:	485c      	ldr	r0, [pc, #368]	; (8000f10 <Task3_Init+0x1d8>)
 8000d9e:	f000 fd8f 	bl	80018c0 <HAL_ADC_Stop>
		sprintf(str,"%d",adc_val1);
 8000da2:	4b5c      	ldr	r3, [pc, #368]	; (8000f14 <Task3_Init+0x1dc>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	495b      	ldr	r1, [pc, #364]	; (8000f18 <Task3_Init+0x1e0>)
 8000daa:	485c      	ldr	r0, [pc, #368]	; (8000f1c <Task3_Init+0x1e4>)
 8000dac:	f004 fc78 	bl	80056a0 <siprintf>
		HAL_UART_Transmit(&huart2,str,sizeof(str),500);
 8000db0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000db4:	220a      	movs	r2, #10
 8000db6:	4959      	ldr	r1, [pc, #356]	; (8000f1c <Task3_Init+0x1e4>)
 8000db8:	4859      	ldr	r0, [pc, #356]	; (8000f20 <Task3_Init+0x1e8>)
 8000dba:	f003 f8ec 	bl	8003f96 <HAL_UART_Transmit>
		//		  ADC_ChannelConfTypeDef sConfig = {1};

		sConfig.Channel = ADC_CHANNEL_11;
 8000dbe:	230b      	movs	r3, #11
 8000dc0:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	4619      	mov	r1, r3
 8000dd0:	484f      	ldr	r0, [pc, #316]	; (8000f10 <Task3_Init+0x1d8>)
 8000dd2:	f000 feb3 	bl	8001b3c <HAL_ADC_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <Task3_Init+0xa8>
		{
			Error_Handler();
 8000ddc:	f000 f920 	bl	8001020 <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 8000de0:	484b      	ldr	r0, [pc, #300]	; (8000f10 <Task3_Init+0x1d8>)
 8000de2:	f000 fcbf 	bl	8001764 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100);
 8000de6:	2164      	movs	r1, #100	; 0x64
 8000de8:	4849      	ldr	r0, [pc, #292]	; (8000f10 <Task3_Init+0x1d8>)
 8000dea:	f000 fd95 	bl	8001918 <HAL_ADC_PollForConversion>
		adc_val2=(float)HAL_ADC_GetValue(&hadc1);
 8000dee:	4848      	ldr	r0, [pc, #288]	; (8000f10 <Task3_Init+0x1d8>)
 8000df0:	f000 fe98 	bl	8001b24 <HAL_ADC_GetValue>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fad0 	bl	800039c <__aeabi_ui2f>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fb24 	bl	800044c <__aeabi_f2iz>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4a47      	ldr	r2, [pc, #284]	; (8000f24 <Task3_Init+0x1ec>)
 8000e08:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8000e0a:	4841      	ldr	r0, [pc, #260]	; (8000f10 <Task3_Init+0x1d8>)
 8000e0c:	f000 fd58 	bl	80018c0 <HAL_ADC_Stop>
		sprintf(str2,"%d",adc_val2);
 8000e10:	4b44      	ldr	r3, [pc, #272]	; (8000f24 <Task3_Init+0x1ec>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4940      	ldr	r1, [pc, #256]	; (8000f18 <Task3_Init+0x1e0>)
 8000e18:	4843      	ldr	r0, [pc, #268]	; (8000f28 <Task3_Init+0x1f0>)
 8000e1a:	f004 fc41 	bl	80056a0 <siprintf>
		HAL_UART_Transmit(&huart2,str2,sizeof(str2),500);
 8000e1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e22:	220a      	movs	r2, #10
 8000e24:	4940      	ldr	r1, [pc, #256]	; (8000f28 <Task3_Init+0x1f0>)
 8000e26:	483e      	ldr	r0, [pc, #248]	; (8000f20 <Task3_Init+0x1e8>)
 8000e28:	f003 f8b5 	bl	8003f96 <HAL_UART_Transmit>

		sConfig.Channel = ADC_CHANNEL_12;
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000e34:	2305      	movs	r3, #5
 8000e36:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4834      	ldr	r0, [pc, #208]	; (8000f10 <Task3_Init+0x1d8>)
 8000e40:	f000 fe7c 	bl	8001b3c <HAL_ADC_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <Task3_Init+0x116>
		{
			Error_Handler();
 8000e4a:	f000 f8e9 	bl	8001020 <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 8000e4e:	4830      	ldr	r0, [pc, #192]	; (8000f10 <Task3_Init+0x1d8>)
 8000e50:	f000 fc88 	bl	8001764 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100);
 8000e54:	2164      	movs	r1, #100	; 0x64
 8000e56:	482e      	ldr	r0, [pc, #184]	; (8000f10 <Task3_Init+0x1d8>)
 8000e58:	f000 fd5e 	bl	8001918 <HAL_ADC_PollForConversion>
		adc_val3=(float)HAL_ADC_GetValue(&hadc1);
 8000e5c:	482c      	ldr	r0, [pc, #176]	; (8000f10 <Task3_Init+0x1d8>)
 8000e5e:	f000 fe61 	bl	8001b24 <HAL_ADC_GetValue>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fa99 	bl	800039c <__aeabi_ui2f>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff faed 	bl	800044c <__aeabi_f2iz>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4a2d      	ldr	r2, [pc, #180]	; (8000f2c <Task3_Init+0x1f4>)
 8000e76:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8000e78:	4825      	ldr	r0, [pc, #148]	; (8000f10 <Task3_Init+0x1d8>)
 8000e7a:	f000 fd21 	bl	80018c0 <HAL_ADC_Stop>
		sprintf(str3,"%d",adc_val2);
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <Task3_Init+0x1ec>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	4924      	ldr	r1, [pc, #144]	; (8000f18 <Task3_Init+0x1e0>)
 8000e86:	482a      	ldr	r0, [pc, #168]	; (8000f30 <Task3_Init+0x1f8>)
 8000e88:	f004 fc0a 	bl	80056a0 <siprintf>
		HAL_UART_Transmit(&huart2,str3,sizeof(str3),500);
 8000e8c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e90:	220a      	movs	r2, #10
 8000e92:	4927      	ldr	r1, [pc, #156]	; (8000f30 <Task3_Init+0x1f8>)
 8000e94:	4822      	ldr	r0, [pc, #136]	; (8000f20 <Task3_Init+0x1e8>)
 8000e96:	f003 f87e 	bl	8003f96 <HAL_UART_Transmit>

		sConfig.Channel = ADC_CHANNEL_13;
 8000e9a:	230d      	movs	r3, #13
 8000e9c:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4818      	ldr	r0, [pc, #96]	; (8000f10 <Task3_Init+0x1d8>)
 8000eae:	f000 fe45 	bl	8001b3c <HAL_ADC_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <Task3_Init+0x184>
		{
			Error_Handler();
 8000eb8:	f000 f8b2 	bl	8001020 <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 8000ebc:	4814      	ldr	r0, [pc, #80]	; (8000f10 <Task3_Init+0x1d8>)
 8000ebe:	f000 fc51 	bl	8001764 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100);
 8000ec2:	2164      	movs	r1, #100	; 0x64
 8000ec4:	4812      	ldr	r0, [pc, #72]	; (8000f10 <Task3_Init+0x1d8>)
 8000ec6:	f000 fd27 	bl	8001918 <HAL_ADC_PollForConversion>
		adc_val4=(float)HAL_ADC_GetValue(&hadc1);
 8000eca:	4811      	ldr	r0, [pc, #68]	; (8000f10 <Task3_Init+0x1d8>)
 8000ecc:	f000 fe2a 	bl	8001b24 <HAL_ADC_GetValue>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fa62 	bl	800039c <__aeabi_ui2f>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fab6 	bl	800044c <__aeabi_f2iz>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <Task3_Init+0x1fc>)
 8000ee4:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8000ee6:	480a      	ldr	r0, [pc, #40]	; (8000f10 <Task3_Init+0x1d8>)
 8000ee8:	f000 fcea 	bl	80018c0 <HAL_ADC_Stop>
		sprintf(str4,"%d",adc_val4);
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <Task3_Init+0x1fc>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4909      	ldr	r1, [pc, #36]	; (8000f18 <Task3_Init+0x1e0>)
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <Task3_Init+0x200>)
 8000ef6:	f004 fbd3 	bl	80056a0 <siprintf>
		HAL_UART_Transmit(&huart2,str4,sizeof(str4),500);
 8000efa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000efe:	220a      	movs	r2, #10
 8000f00:	490d      	ldr	r1, [pc, #52]	; (8000f38 <Task3_Init+0x200>)
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <Task3_Init+0x1e8>)
 8000f04:	f003 f847 	bl	8003f96 <HAL_UART_Transmit>

		osDelay(200);
 8000f08:	20c8      	movs	r0, #200	; 0xc8
 8000f0a:	f003 fa19 	bl	8004340 <osDelay>
	{
 8000f0e:	e717      	b.n	8000d40 <Task3_Init+0x8>
 8000f10:	20000334 	.word	0x20000334
 8000f14:	200002ec 	.word	0x200002ec
 8000f18:	08006048 	.word	0x08006048
 8000f1c:	200002f0 	.word	0x200002f0
 8000f20:	20000458 	.word	0x20000458
 8000f24:	200002fc 	.word	0x200002fc
 8000f28:	20000300 	.word	0x20000300
 8000f2c:	2000030c 	.word	0x2000030c
 8000f30:	20000310 	.word	0x20000310
 8000f34:	2000031c 	.word	0x2000031c
 8000f38:	20000320 	.word	0x20000320

08000f3c <Task4_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task4_Init */
void Task4_Init(void const * argument)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /*Configure GPIO pins : Sensor4_Pin Sensor3_Pin Sensor2_Pin Sensor1_Pin
		GPIO_InitStruct.Pin = Sensor4_Pin|Sensor3_Pin|Sensor2_Pin|Sensor1_Pin;
		*/


		Sensor1 = HAL_GPIO_ReadPin(GPIOB,Sensor1_Pin);
 8000f44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f48:	481f      	ldr	r0, [pc, #124]	; (8000fc8 <Task4_Init+0x8c>)
 8000f4a:	f001 fca1 	bl	8002890 <HAL_GPIO_ReadPin>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <Task4_Init+0x90>)
 8000f54:	701a      	strb	r2, [r3, #0]
		Sensor2 = HAL_GPIO_ReadPin(GPIOC,Sensor2_Pin);
 8000f56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5a:	481d      	ldr	r0, [pc, #116]	; (8000fd0 <Task4_Init+0x94>)
 8000f5c:	f001 fc98 	bl	8002890 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <Task4_Init+0x98>)
 8000f66:	701a      	strb	r2, [r3, #0]
		Sensor3 = HAL_GPIO_ReadPin(GPIOC,Sensor3_Pin);
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	4819      	ldr	r0, [pc, #100]	; (8000fd0 <Task4_Init+0x94>)
 8000f6c:	f001 fc90 	bl	8002890 <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <Task4_Init+0x9c>)
 8000f76:	701a      	strb	r2, [r3, #0]
		Sensor4 = HAL_GPIO_ReadPin(GPIOC,Sensor4_Pin);
 8000f78:	2140      	movs	r1, #64	; 0x40
 8000f7a:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <Task4_Init+0x94>)
 8000f7c:	f001 fc88 	bl	8002890 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <Task4_Init+0xa0>)
 8000f86:	701a      	strb	r2, [r3, #0]
		Sensor5 = HAL_GPIO_ReadPin(GPIOB,Sensor5_Pin);
 8000f88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f8c:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <Task4_Init+0x8c>)
 8000f8e:	f001 fc7f 	bl	8002890 <HAL_GPIO_ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <Task4_Init+0xa4>)
 8000f98:	701a      	strb	r2, [r3, #0]
		Sensor6 = HAL_GPIO_ReadPin(GPIOB,Sensor6_Pin);
 8000f9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9e:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <Task4_Init+0x8c>)
 8000fa0:	f001 fc76 	bl	8002890 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <Task4_Init+0xa8>)
 8000faa:	701a      	strb	r2, [r3, #0]
		Sensor7 = HAL_GPIO_ReadPin(GPIOB,Sensor7_Pin);
 8000fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <Task4_Init+0x8c>)
 8000fb2:	f001 fc6d 	bl	8002890 <HAL_GPIO_ReadPin>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <Task4_Init+0xac>)
 8000fbc:	701a      	strb	r2, [r3, #0]


		osDelay(100);
 8000fbe:	2064      	movs	r0, #100	; 0x64
 8000fc0:	f003 f9be 	bl	8004340 <osDelay>
		Sensor1 = HAL_GPIO_ReadPin(GPIOB,Sensor1_Pin);
 8000fc4:	e7be      	b.n	8000f44 <Task4_Init+0x8>
 8000fc6:	bf00      	nop
 8000fc8:	40010c00 	.word	0x40010c00
 8000fcc:	2000032a 	.word	0x2000032a
 8000fd0:	40011000 	.word	0x40011000
 8000fd4:	2000032b 	.word	0x2000032b
 8000fd8:	2000032c 	.word	0x2000032c
 8000fdc:	2000032d 	.word	0x2000032d
 8000fe0:	2000032e 	.word	0x2000032e
 8000fe4:	2000032f 	.word	0x2000032f
 8000fe8:	20000330 	.word	0x20000330

08000fec <Task5_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task5_Init */
void Task5_Init(void const * argument)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task5_Init */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f003 f9a3 	bl	8004340 <osDelay>
 8000ffa:	e7fb      	b.n	8000ff4 <Task5_Init+0x8>

08000ffc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d101      	bne.n	8001012 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800100e:	f000 fa91 	bl	8001534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40012c00 	.word	0x40012c00

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_MspInit+0x4c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <HAL_MspInit+0x4c>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_MspInit+0x4c>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_MspInit+0x4c>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_MspInit+0x4c>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_MspInit+0x4c>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	210f      	movs	r1, #15
 8001066:	f06f 0001 	mvn.w	r0, #1
 800106a:	f000 ffb0 	bl	8001fce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a28      	ldr	r2, [pc, #160]	; (8001138 <HAL_ADC_MspInit+0xbc>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d149      	bne.n	8001130 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <HAL_ADC_MspInit+0xc0>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a26      	ldr	r2, [pc, #152]	; (800113c <HAL_ADC_MspInit+0xc0>)
 80010a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <HAL_ADC_MspInit+0xc0>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <HAL_ADC_MspInit+0xc0>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a20      	ldr	r2, [pc, #128]	; (800113c <HAL_ADC_MspInit+0xc0>)
 80010ba:	f043 0310 	orr.w	r3, r3, #16
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <HAL_ADC_MspInit+0xc0>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0310 	and.w	r3, r3, #16
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80010cc:	230f      	movs	r3, #15
 80010ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d0:	2303      	movs	r3, #3
 80010d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4619      	mov	r1, r3
 80010da:	4819      	ldr	r0, [pc, #100]	; (8001140 <HAL_ADC_MspInit+0xc4>)
 80010dc:	f001 fa54 	bl	8002588 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <HAL_ADC_MspInit+0xc8>)
 80010e2:	4a19      	ldr	r2, [pc, #100]	; (8001148 <HAL_ADC_MspInit+0xcc>)
 80010e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_ADC_MspInit+0xc8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_ADC_MspInit+0xc8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <HAL_ADC_MspInit+0xc8>)
 80010f4:	2280      	movs	r2, #128	; 0x80
 80010f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_ADC_MspInit+0xc8>)
 80010fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <HAL_ADC_MspInit+0xc8>)
 8001102:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001106:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_ADC_MspInit+0xc8>)
 800110a:	2220      	movs	r2, #32
 800110c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_ADC_MspInit+0xc8>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <HAL_ADC_MspInit+0xc8>)
 8001116:	f000 ff85 	bl	8002024 <HAL_DMA_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001120:	f7ff ff7e 	bl	8001020 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_ADC_MspInit+0xc8>)
 8001128:	621a      	str	r2, [r3, #32]
 800112a:	4a06      	ldr	r2, [pc, #24]	; (8001144 <HAL_ADC_MspInit+0xc8>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40012400 	.word	0x40012400
 800113c:	40021000 	.word	0x40021000
 8001140:	40011000 	.word	0x40011000
 8001144:	20000364 	.word	0x20000364
 8001148:	40020008 	.word	0x40020008

0800114c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08c      	sub	sp, #48	; 0x30
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a3e      	ldr	r2, [pc, #248]	; (8001260 <HAL_SPI_MspInit+0x114>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d130      	bne.n	80011ce <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800116c:	4b3d      	ldr	r3, [pc, #244]	; (8001264 <HAL_SPI_MspInit+0x118>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a3c      	ldr	r2, [pc, #240]	; (8001264 <HAL_SPI_MspInit+0x118>)
 8001172:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <HAL_SPI_MspInit+0x118>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001180:	61bb      	str	r3, [r7, #24]
 8001182:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <HAL_SPI_MspInit+0x118>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a36      	ldr	r2, [pc, #216]	; (8001264 <HAL_SPI_MspInit+0x118>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b34      	ldr	r3, [pc, #208]	; (8001264 <HAL_SPI_MspInit+0x118>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800119c:	23a0      	movs	r3, #160	; 0xa0
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	482e      	ldr	r0, [pc, #184]	; (8001268 <HAL_SPI_MspInit+0x11c>)
 80011b0:	f001 f9ea 	bl	8002588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011b4:	2340      	movs	r3, #64	; 0x40
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4828      	ldr	r0, [pc, #160]	; (8001268 <HAL_SPI_MspInit+0x11c>)
 80011c8:	f001 f9de 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011cc:	e044      	b.n	8001258 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI3)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a26      	ldr	r2, [pc, #152]	; (800126c <HAL_SPI_MspInit+0x120>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d13f      	bne.n	8001258 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <HAL_SPI_MspInit+0x118>)
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	4a21      	ldr	r2, [pc, #132]	; (8001264 <HAL_SPI_MspInit+0x118>)
 80011de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011e2:	61d3      	str	r3, [r2, #28]
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <HAL_SPI_MspInit+0x118>)
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <HAL_SPI_MspInit+0x118>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <HAL_SPI_MspInit+0x118>)
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_SPI_MspInit+0x118>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0310 	and.w	r3, r3, #16
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001208:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	4814      	ldr	r0, [pc, #80]	; (8001270 <HAL_SPI_MspInit+0x124>)
 800121e:	f001 f9b3 	bl	8002588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001222:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <HAL_SPI_MspInit+0x124>)
 8001238:	f001 f9a6 	bl	8002588 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI3_ENABLE();
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_SPI_MspInit+0x128>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001244:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800124a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_SPI_MspInit+0x128>)
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	6053      	str	r3, [r2, #4]
}
 8001258:	bf00      	nop
 800125a:	3730      	adds	r7, #48	; 0x30
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40013000 	.word	0x40013000
 8001264:	40021000 	.word	0x40021000
 8001268:	40010800 	.word	0x40010800
 800126c:	40003c00 	.word	0x40003c00
 8001270:	40011000 	.word	0x40011000
 8001274:	40010000 	.word	0x40010000

08001278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <HAL_UART_MspInit+0x88>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d12f      	bne.n	80012f8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_UART_MspInit+0x8c>)
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	4a19      	ldr	r2, [pc, #100]	; (8001304 <HAL_UART_MspInit+0x8c>)
 800129e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a2:	61d3      	str	r3, [r2, #28]
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_UART_MspInit+0x8c>)
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_UART_MspInit+0x8c>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a13      	ldr	r2, [pc, #76]	; (8001304 <HAL_UART_MspInit+0x8c>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_UART_MspInit+0x8c>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c8:	2304      	movs	r3, #4
 80012ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4619      	mov	r1, r3
 80012da:	480b      	ldr	r0, [pc, #44]	; (8001308 <HAL_UART_MspInit+0x90>)
 80012dc:	f001 f954 	bl	8002588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012e0:	2308      	movs	r3, #8
 80012e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_UART_MspInit+0x90>)
 80012f4:	f001 f948 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40004400 	.word	0x40004400
 8001304:	40021000 	.word	0x40021000
 8001308:	40010800 	.word	0x40010800

0800130c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <HAL_InitTick+0xd0>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	4a2d      	ldr	r2, [pc, #180]	; (80013dc <HAL_InitTick+0xd0>)
 8001328:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800132c:	6193      	str	r3, [r2, #24]
 800132e:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <HAL_InitTick+0xd0>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800133a:	f107 020c 	add.w	r2, r7, #12
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f002 f817 	bl	8003378 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800134a:	f002 f801 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 800134e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001352:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <HAL_InitTick+0xd4>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	0c9b      	lsrs	r3, r3, #18
 800135a:	3b01      	subs	r3, #1
 800135c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <HAL_InitTick+0xd8>)
 8001360:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <HAL_InitTick+0xdc>)
 8001362:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <HAL_InitTick+0xd8>)
 8001366:	f240 32e7 	movw	r2, #999	; 0x3e7
 800136a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800136c:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <HAL_InitTick+0xd8>)
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <HAL_InitTick+0xd8>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <HAL_InitTick+0xd8>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_InitTick+0xd8>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001384:	4817      	ldr	r0, [pc, #92]	; (80013e4 <HAL_InitTick+0xd8>)
 8001386:	f002 fb5d 	bl	8003a44 <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001390:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001394:	2b00      	cmp	r3, #0
 8001396:	d11b      	bne.n	80013d0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001398:	4812      	ldr	r0, [pc, #72]	; (80013e4 <HAL_InitTick+0xd8>)
 800139a:	f002 fbab 	bl	8003af4 <HAL_TIM_Base_Start_IT>
 800139e:	4603      	mov	r3, r0
 80013a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80013a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d111      	bne.n	80013d0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013ac:	2019      	movs	r0, #25
 80013ae:	f000 fe2a 	bl	8002006 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d808      	bhi.n	80013ca <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	2019      	movs	r0, #25
 80013be:	f000 fe06 	bl	8001fce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_InitTick+0xe0>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e002      	b.n	80013d0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3730      	adds	r7, #48	; 0x30
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021000 	.word	0x40021000
 80013e0:	431bde83 	.word	0x431bde83
 80013e4:	200004b0 	.word	0x200004b0
 80013e8:	40012c00 	.word	0x40012c00
 80013ec:	20000004 	.word	0x20000004

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
	...

0800141c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <DMA1_Channel1_IRQHandler+0x10>)
 8001422:	f000 fe75 	bl	8002110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000364 	.word	0x20000364

08001430 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <TIM1_UP_IRQHandler+0x10>)
 8001436:	f002 fbb7 	bl	8003ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200004b0 	.word	0x200004b0

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f004 f8d4 	bl	8005620 <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20010000 	.word	0x20010000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	200004f8 	.word	0x200004f8
 80014ac:	20001660 	.word	0x20001660

080014b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <Reset_Handler>:
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <LoopFillZerobss+0x12>)
 80014be:	490d      	ldr	r1, [pc, #52]	; (80014f4 <LoopFillZerobss+0x16>)
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <LoopFillZerobss+0x1a>)
 80014c2:	2300      	movs	r3, #0
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:
 80014c6:	58d4      	ldr	r4, [r2, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:
 80014cc:	18c4      	adds	r4, r0, r3
 80014ce:	428c      	cmp	r4, r1
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <LoopFillZerobss+0x1e>)
 80014d4:	4c0a      	ldr	r4, [pc, #40]	; (8001500 <LoopFillZerobss+0x22>)
 80014d6:	2300      	movs	r3, #0
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:
 80014de:	42a2      	cmp	r2, r4
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>
 80014e2:	f7ff ffe5 	bl	80014b0 <SystemInit>
 80014e6:	f004 f8a1 	bl	800562c <__libc_init_array>
 80014ea:	f7ff f971 	bl	80007d0 <main>
 80014ee:	4770      	bx	lr
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000074 	.word	0x20000074
 80014f8:	080060f0 	.word	0x080060f0
 80014fc:	20000074 	.word	0x20000074
 8001500:	2000165c 	.word	0x2000165c

08001504 <ADC1_2_IRQHandler>:
 8001504:	e7fe      	b.n	8001504 <ADC1_2_IRQHandler>
	...

08001508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_Init+0x28>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_Init+0x28>)
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001518:	2003      	movs	r0, #3
 800151a:	f000 fd4d 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151e:	200f      	movs	r0, #15
 8001520:	f7ff fef4 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001524:	f7ff fd82 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40022000 	.word	0x40022000

08001534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_IncTick+0x1c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_IncTick+0x20>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <HAL_IncTick+0x20>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	20000008 	.word	0x20000008
 8001554:	200004fc 	.word	0x200004fc

08001558 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b02      	ldr	r3, [pc, #8]	; (8001568 <HAL_GetTick+0x10>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	200004fc 	.word	0x200004fc

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff fff0 	bl	8001558 <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001592:	bf00      	nop
 8001594:	f7ff ffe0 	bl	8001558 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008

080015b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0be      	b.n	8001754 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fd42 	bl	800107c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 fbf1 	bl	8001de0 <ADC_ConversionStop_Disable>
 80015fe:	4603      	mov	r3, r0
 8001600:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 8099 	bne.w	8001742 <HAL_ADC_Init+0x18e>
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 8095 	bne.w	8001742 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001620:	f023 0302 	bic.w	r3, r3, #2
 8001624:	f043 0202 	orr.w	r2, r3, #2
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001634:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7b1b      	ldrb	r3, [r3, #12]
 800163a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800163c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	4313      	orrs	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800164c:	d003      	beq.n	8001656 <HAL_ADC_Init+0xa2>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d102      	bne.n	800165c <HAL_ADC_Init+0xa8>
 8001656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165a:	e000      	b.n	800165e <HAL_ADC_Init+0xaa>
 800165c:	2300      	movs	r3, #0
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7d1b      	ldrb	r3, [r3, #20]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d119      	bne.n	80016a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7b1b      	ldrb	r3, [r3, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d109      	bne.n	8001688 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	3b01      	subs	r3, #1
 800167a:	035a      	lsls	r2, r3, #13
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	e00b      	b.n	80016a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	f043 0220 	orr.w	r2, r3, #32
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	f043 0201 	orr.w	r2, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	4b28      	ldr	r3, [pc, #160]	; (800175c <HAL_ADC_Init+0x1a8>)
 80016bc:	4013      	ands	r3, r2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	68b9      	ldr	r1, [r7, #8]
 80016c4:	430b      	orrs	r3, r1
 80016c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016d0:	d003      	beq.n	80016da <HAL_ADC_Init+0x126>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d104      	bne.n	80016e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	3b01      	subs	r3, #1
 80016e0:	051b      	lsls	r3, r3, #20
 80016e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <HAL_ADC_Init+0x1ac>)
 8001700:	4013      	ands	r3, r2
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	429a      	cmp	r2, r3
 8001706:	d10b      	bne.n	8001720 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800171e:	e018      	b.n	8001752 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	f023 0312 	bic.w	r3, r3, #18
 8001728:	f043 0210 	orr.w	r2, r3, #16
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001740:	e007      	b.n	8001752 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	f043 0210 	orr.w	r2, r3, #16
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001752:	7dfb      	ldrb	r3, [r7, #23]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	ffe1f7fd 	.word	0xffe1f7fd
 8001760:	ff1f0efe 	.word	0xff1f0efe

08001764 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_ADC_Start+0x1a>
 800177a:	2302      	movs	r3, #2
 800177c:	e098      	b.n	80018b0 <HAL_ADC_Start+0x14c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fad0 	bl	8001d2c <ADC_Enable>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f040 8087 	bne.w	80018a6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a41      	ldr	r2, [pc, #260]	; (80018b8 <HAL_ADC_Start+0x154>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d105      	bne.n	80017c2 <HAL_ADC_Start+0x5e>
 80017b6:	4b41      	ldr	r3, [pc, #260]	; (80018bc <HAL_ADC_Start+0x158>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d115      	bne.n	80017ee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d026      	beq.n	800182a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017ec:	e01d      	b.n	800182a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <HAL_ADC_Start+0x158>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d004      	beq.n	800180e <HAL_ADC_Start+0xaa>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a2b      	ldr	r2, [pc, #172]	; (80018b8 <HAL_ADC_Start+0x154>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d10d      	bne.n	800182a <HAL_ADC_Start+0xc6>
 800180e:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <HAL_ADC_Start+0x158>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001816:	2b00      	cmp	r3, #0
 8001818:	d007      	beq.n	800182a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001822:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	f023 0206 	bic.w	r2, r3, #6
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	62da      	str	r2, [r3, #44]	; 0x2c
 8001842:	e002      	b.n	800184a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f06f 0202 	mvn.w	r2, #2
 800185a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001866:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800186a:	d113      	bne.n	8001894 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001870:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <HAL_ADC_Start+0x154>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d105      	bne.n	8001882 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_ADC_Start+0x158>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800187e:	2b00      	cmp	r3, #0
 8001880:	d108      	bne.n	8001894 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	e00c      	b.n	80018ae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	e003      	b.n	80018ae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40012800 	.word	0x40012800
 80018bc:	40012400 	.word	0x40012400

080018c0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_ADC_Stop+0x1a>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e01a      	b.n	8001910 <HAL_ADC_Stop+0x50>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fa7c 	bl	8001de0 <ADC_ConversionStop_Disable>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800192e:	f7ff fe13 	bl	8001558 <HAL_GetTick>
 8001932:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	f043 0220 	orr.w	r2, r3, #32
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0d3      	b.n	8001b02 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001964:	2b00      	cmp	r3, #0
 8001966:	d131      	bne.n	80019cc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001972:	2b00      	cmp	r3, #0
 8001974:	d12a      	bne.n	80019cc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001976:	e021      	b.n	80019bc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197e:	d01d      	beq.n	80019bc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <HAL_ADC_PollForConversion+0x7e>
 8001986:	f7ff fde7 	bl	8001558 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d212      	bcs.n	80019bc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10b      	bne.n	80019bc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	f043 0204 	orr.w	r2, r3, #4
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e0a2      	b.n	8001b02 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0d6      	beq.n	8001978 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019ca:	e070      	b.n	8001aae <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80019cc:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <HAL_ADC_PollForConversion+0x1f4>)
 80019ce:	681c      	ldr	r4, [r3, #0]
 80019d0:	2002      	movs	r0, #2
 80019d2:	f001 fe51 	bl	8003678 <HAL_RCCEx_GetPeriphCLKFreq>
 80019d6:	4603      	mov	r3, r0
 80019d8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6919      	ldr	r1, [r3, #16]
 80019e2:	4b4b      	ldr	r3, [pc, #300]	; (8001b10 <HAL_ADC_PollForConversion+0x1f8>)
 80019e4:	400b      	ands	r3, r1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d118      	bne.n	8001a1c <HAL_ADC_PollForConversion+0x104>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68d9      	ldr	r1, [r3, #12]
 80019f0:	4b48      	ldr	r3, [pc, #288]	; (8001b14 <HAL_ADC_PollForConversion+0x1fc>)
 80019f2:	400b      	ands	r3, r1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d111      	bne.n	8001a1c <HAL_ADC_PollForConversion+0x104>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6919      	ldr	r1, [r3, #16]
 80019fe:	4b46      	ldr	r3, [pc, #280]	; (8001b18 <HAL_ADC_PollForConversion+0x200>)
 8001a00:	400b      	ands	r3, r1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d108      	bne.n	8001a18 <HAL_ADC_PollForConversion+0x100>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68d9      	ldr	r1, [r3, #12]
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <HAL_ADC_PollForConversion+0x204>)
 8001a0e:	400b      	ands	r3, r1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_PollForConversion+0x100>
 8001a14:	2314      	movs	r3, #20
 8001a16:	e020      	b.n	8001a5a <HAL_ADC_PollForConversion+0x142>
 8001a18:	2329      	movs	r3, #41	; 0x29
 8001a1a:	e01e      	b.n	8001a5a <HAL_ADC_PollForConversion+0x142>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6919      	ldr	r1, [r3, #16]
 8001a22:	4b3d      	ldr	r3, [pc, #244]	; (8001b18 <HAL_ADC_PollForConversion+0x200>)
 8001a24:	400b      	ands	r3, r1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d106      	bne.n	8001a38 <HAL_ADC_PollForConversion+0x120>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68d9      	ldr	r1, [r3, #12]
 8001a30:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <HAL_ADC_PollForConversion+0x204>)
 8001a32:	400b      	ands	r3, r1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00d      	beq.n	8001a54 <HAL_ADC_PollForConversion+0x13c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6919      	ldr	r1, [r3, #16]
 8001a3e:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_ADC_PollForConversion+0x208>)
 8001a40:	400b      	ands	r3, r1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d108      	bne.n	8001a58 <HAL_ADC_PollForConversion+0x140>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68d9      	ldr	r1, [r3, #12]
 8001a4c:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <HAL_ADC_PollForConversion+0x208>)
 8001a4e:	400b      	ands	r3, r1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_ADC_PollForConversion+0x140>
 8001a54:	2354      	movs	r3, #84	; 0x54
 8001a56:	e000      	b.n	8001a5a <HAL_ADC_PollForConversion+0x142>
 8001a58:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a60:	e021      	b.n	8001aa6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d01a      	beq.n	8001aa0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d007      	beq.n	8001a80 <HAL_ADC_PollForConversion+0x168>
 8001a70:	f7ff fd72 	bl	8001558 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d20f      	bcs.n	8001aa0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d90b      	bls.n	8001aa0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	f043 0204 	orr.w	r2, r3, #4
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e030      	b.n	8001b02 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d8d9      	bhi.n	8001a62 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f06f 0212 	mvn.w	r2, #18
 8001ab6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ace:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ad2:	d115      	bne.n	8001b00 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d111      	bne.n	8001b00 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d105      	bne.n	8001b00 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	24924924 	.word	0x24924924
 8001b14:	00924924 	.word	0x00924924
 8001b18:	12492492 	.word	0x12492492
 8001b1c:	00492492 	.word	0x00492492
 8001b20:	00249249 	.word	0x00249249

08001b24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x20>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e0dc      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x1da>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b06      	cmp	r3, #6
 8001b6a:	d81c      	bhi.n	8001ba6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b05      	subs	r3, #5
 8001b7e:	221f      	movs	r2, #31
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4019      	ands	r1, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3b05      	subs	r3, #5
 8001b98:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ba4:	e03c      	b.n	8001c20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	d81c      	bhi.n	8001be8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3b23      	subs	r3, #35	; 0x23
 8001bc0:	221f      	movs	r2, #31
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	4019      	ands	r1, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3b23      	subs	r3, #35	; 0x23
 8001bda:	fa00 f203 	lsl.w	r2, r0, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30
 8001be6:	e01b      	b.n	8001c20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b41      	subs	r3, #65	; 0x41
 8001bfa:	221f      	movs	r2, #31
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4019      	ands	r1, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b41      	subs	r3, #65	; 0x41
 8001c14:	fa00 f203 	lsl.w	r2, r0, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b09      	cmp	r3, #9
 8001c26:	d91c      	bls.n	8001c62 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68d9      	ldr	r1, [r3, #12]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	3b1e      	subs	r3, #30
 8001c3a:	2207      	movs	r2, #7
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	4019      	ands	r1, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	6898      	ldr	r0, [r3, #8]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	3b1e      	subs	r3, #30
 8001c54:	fa00 f203 	lsl.w	r2, r0, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	e019      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6919      	ldr	r1, [r3, #16]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	2207      	movs	r2, #7
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	4019      	ands	r1, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6898      	ldr	r0, [r3, #8]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d003      	beq.n	8001ca6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ca2:	2b11      	cmp	r3, #17
 8001ca4:	d132      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <HAL_ADC_ConfigChannel+0x1e4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d125      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d126      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ccc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b10      	cmp	r3, #16
 8001cd4:	d11a      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_ADC_ConfigChannel+0x1e8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <HAL_ADC_ConfigChannel+0x1ec>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	0c9a      	lsrs	r2, r3, #18
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cec:	e002      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x1b2>
 8001cfa:	e007      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d00:	f043 0220 	orr.w	r2, r3, #32
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40012400 	.word	0x40012400
 8001d24:	20000000 	.word	0x20000000
 8001d28:	431bde83 	.word	0x431bde83

08001d2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d040      	beq.n	8001dcc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d5a:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <ADC_Enable+0xac>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <ADC_Enable+0xb0>)
 8001d60:	fba2 2303 	umull	r2, r3, r2, r3
 8001d64:	0c9b      	lsrs	r3, r3, #18
 8001d66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d68:	e002      	b.n	8001d70 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d76:	f7ff fbef 	bl	8001558 <HAL_GetTick>
 8001d7a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d7c:	e01f      	b.n	8001dbe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d7e:	f7ff fbeb 	bl	8001558 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d918      	bls.n	8001dbe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d011      	beq.n	8001dbe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	f043 0210 	orr.w	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	f043 0201 	orr.w	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e007      	b.n	8001dce <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d1d8      	bne.n	8001d7e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	431bde83 	.word	0x431bde83

08001de0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d12e      	bne.n	8001e58 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0201 	bic.w	r2, r2, #1
 8001e08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e0a:	f7ff fba5 	bl	8001558 <HAL_GetTick>
 8001e0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e10:	e01b      	b.n	8001e4a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e12:	f7ff fba1 	bl	8001558 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d914      	bls.n	8001e4a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d10d      	bne.n	8001e4a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	f043 0210 	orr.w	r2, r3, #16
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	f043 0201 	orr.w	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e007      	b.n	8001e5a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d0dc      	beq.n	8001e12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0307 	and.w	r3, r3, #7
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db0b      	blt.n	8001ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4906      	ldr	r1, [pc, #24]	; (8001efc <__NVIC_EnableIRQ+0x34>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2001      	movs	r0, #1
 8001eea:	fa00 f202 	lsl.w	r2, r0, r2
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db0a      	blt.n	8001f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	490c      	ldr	r1, [pc, #48]	; (8001f4c <__NVIC_SetPriority+0x4c>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f28:	e00a      	b.n	8001f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <__NVIC_SetPriority+0x50>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3b04      	subs	r3, #4
 8001f38:	0112      	lsls	r2, r2, #4
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	761a      	strb	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f1c3 0307 	rsb	r3, r3, #7
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf28      	it	cs
 8001f72:	2304      	movcs	r3, #4
 8001f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d902      	bls.n	8001f84 <NVIC_EncodePriority+0x30>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3b03      	subs	r3, #3
 8001f82:	e000      	b.n	8001f86 <NVIC_EncodePriority+0x32>
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	4313      	orrs	r3, r2
         );
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff4f 	bl	8001e64 <__NVIC_SetPriorityGrouping>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe0:	f7ff ff64 	bl	8001eac <__NVIC_GetPriorityGrouping>
 8001fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	6978      	ldr	r0, [r7, #20]
 8001fec:	f7ff ffb2 	bl	8001f54 <NVIC_EncodePriority>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff81 	bl	8001f00 <__NVIC_SetPriority>
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff57 	bl	8001ec8 <__NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e059      	b.n	80020ee <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <HAL_DMA_Init+0xd4>)
 8002042:	429a      	cmp	r2, r3
 8002044:	d80f      	bhi.n	8002066 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_DMA_Init+0xd8>)
 800204e:	4413      	add	r3, r2
 8002050:	4a2b      	ldr	r2, [pc, #172]	; (8002100 <HAL_DMA_Init+0xdc>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	009a      	lsls	r2, r3, #2
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a28      	ldr	r2, [pc, #160]	; (8002104 <HAL_DMA_Init+0xe0>)
 8002062:	63da      	str	r2, [r3, #60]	; 0x3c
 8002064:	e00e      	b.n	8002084 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	4b26      	ldr	r3, [pc, #152]	; (8002108 <HAL_DMA_Init+0xe4>)
 800206e:	4413      	add	r3, r2
 8002070:	4a23      	ldr	r2, [pc, #140]	; (8002100 <HAL_DMA_Init+0xdc>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	009a      	lsls	r2, r3, #2
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_DMA_Init+0xe8>)
 8002082:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800209a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800209e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	40020407 	.word	0x40020407
 80020fc:	bffdfff8 	.word	0xbffdfff8
 8002100:	cccccccd 	.word	0xcccccccd
 8002104:	40020000 	.word	0x40020000
 8002108:	bffdfbf8 	.word	0xbffdfbf8
 800210c:	40020400 	.word	0x40020400

08002110 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	2204      	movs	r2, #4
 800212e:	409a      	lsls	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80f1 	beq.w	800231c <HAL_DMA_IRQHandler+0x20c>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80eb 	beq.w	800231c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d107      	bne.n	8002164 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0204 	bic.w	r2, r2, #4
 8002162:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b5f      	ldr	r3, [pc, #380]	; (80022e8 <HAL_DMA_IRQHandler+0x1d8>)
 800216c:	429a      	cmp	r2, r3
 800216e:	d958      	bls.n	8002222 <HAL_DMA_IRQHandler+0x112>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a5d      	ldr	r2, [pc, #372]	; (80022ec <HAL_DMA_IRQHandler+0x1dc>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d04f      	beq.n	800221a <HAL_DMA_IRQHandler+0x10a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a5c      	ldr	r2, [pc, #368]	; (80022f0 <HAL_DMA_IRQHandler+0x1e0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d048      	beq.n	8002216 <HAL_DMA_IRQHandler+0x106>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a5a      	ldr	r2, [pc, #360]	; (80022f4 <HAL_DMA_IRQHandler+0x1e4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d040      	beq.n	8002210 <HAL_DMA_IRQHandler+0x100>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a59      	ldr	r2, [pc, #356]	; (80022f8 <HAL_DMA_IRQHandler+0x1e8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d038      	beq.n	800220a <HAL_DMA_IRQHandler+0xfa>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a57      	ldr	r2, [pc, #348]	; (80022fc <HAL_DMA_IRQHandler+0x1ec>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d030      	beq.n	8002204 <HAL_DMA_IRQHandler+0xf4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a56      	ldr	r2, [pc, #344]	; (8002300 <HAL_DMA_IRQHandler+0x1f0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d028      	beq.n	80021fe <HAL_DMA_IRQHandler+0xee>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a4d      	ldr	r2, [pc, #308]	; (80022e8 <HAL_DMA_IRQHandler+0x1d8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d020      	beq.n	80021f8 <HAL_DMA_IRQHandler+0xe8>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_DMA_IRQHandler+0x1f4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d019      	beq.n	80021f4 <HAL_DMA_IRQHandler+0xe4>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a50      	ldr	r2, [pc, #320]	; (8002308 <HAL_DMA_IRQHandler+0x1f8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d012      	beq.n	80021f0 <HAL_DMA_IRQHandler+0xe0>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a4f      	ldr	r2, [pc, #316]	; (800230c <HAL_DMA_IRQHandler+0x1fc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00a      	beq.n	80021ea <HAL_DMA_IRQHandler+0xda>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a4d      	ldr	r2, [pc, #308]	; (8002310 <HAL_DMA_IRQHandler+0x200>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d102      	bne.n	80021e4 <HAL_DMA_IRQHandler+0xd4>
 80021de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021e2:	e01b      	b.n	800221c <HAL_DMA_IRQHandler+0x10c>
 80021e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021e8:	e018      	b.n	800221c <HAL_DMA_IRQHandler+0x10c>
 80021ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ee:	e015      	b.n	800221c <HAL_DMA_IRQHandler+0x10c>
 80021f0:	2340      	movs	r3, #64	; 0x40
 80021f2:	e013      	b.n	800221c <HAL_DMA_IRQHandler+0x10c>
 80021f4:	2304      	movs	r3, #4
 80021f6:	e011      	b.n	800221c <HAL_DMA_IRQHandler+0x10c>
 80021f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021fc:	e00e      	b.n	800221c <HAL_DMA_IRQHandler+0x10c>
 80021fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002202:	e00b      	b.n	800221c <HAL_DMA_IRQHandler+0x10c>
 8002204:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002208:	e008      	b.n	800221c <HAL_DMA_IRQHandler+0x10c>
 800220a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800220e:	e005      	b.n	800221c <HAL_DMA_IRQHandler+0x10c>
 8002210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002214:	e002      	b.n	800221c <HAL_DMA_IRQHandler+0x10c>
 8002216:	2340      	movs	r3, #64	; 0x40
 8002218:	e000      	b.n	800221c <HAL_DMA_IRQHandler+0x10c>
 800221a:	2304      	movs	r3, #4
 800221c:	4a3d      	ldr	r2, [pc, #244]	; (8002314 <HAL_DMA_IRQHandler+0x204>)
 800221e:	6053      	str	r3, [r2, #4]
 8002220:	e057      	b.n	80022d2 <HAL_DMA_IRQHandler+0x1c2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a31      	ldr	r2, [pc, #196]	; (80022ec <HAL_DMA_IRQHandler+0x1dc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d04f      	beq.n	80022cc <HAL_DMA_IRQHandler+0x1bc>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a2f      	ldr	r2, [pc, #188]	; (80022f0 <HAL_DMA_IRQHandler+0x1e0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d048      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x1b8>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a2e      	ldr	r2, [pc, #184]	; (80022f4 <HAL_DMA_IRQHandler+0x1e4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d040      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x1b2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2c      	ldr	r2, [pc, #176]	; (80022f8 <HAL_DMA_IRQHandler+0x1e8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d038      	beq.n	80022bc <HAL_DMA_IRQHandler+0x1ac>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a2b      	ldr	r2, [pc, #172]	; (80022fc <HAL_DMA_IRQHandler+0x1ec>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d030      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x1a6>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a29      	ldr	r2, [pc, #164]	; (8002300 <HAL_DMA_IRQHandler+0x1f0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d028      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x1a0>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <HAL_DMA_IRQHandler+0x1d8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d020      	beq.n	80022aa <HAL_DMA_IRQHandler+0x19a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a25      	ldr	r2, [pc, #148]	; (8002304 <HAL_DMA_IRQHandler+0x1f4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d019      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x196>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a24      	ldr	r2, [pc, #144]	; (8002308 <HAL_DMA_IRQHandler+0x1f8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d012      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x192>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a22      	ldr	r2, [pc, #136]	; (800230c <HAL_DMA_IRQHandler+0x1fc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00a      	beq.n	800229c <HAL_DMA_IRQHandler+0x18c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a21      	ldr	r2, [pc, #132]	; (8002310 <HAL_DMA_IRQHandler+0x200>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d102      	bne.n	8002296 <HAL_DMA_IRQHandler+0x186>
 8002290:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002294:	e01b      	b.n	80022ce <HAL_DMA_IRQHandler+0x1be>
 8002296:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800229a:	e018      	b.n	80022ce <HAL_DMA_IRQHandler+0x1be>
 800229c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a0:	e015      	b.n	80022ce <HAL_DMA_IRQHandler+0x1be>
 80022a2:	2340      	movs	r3, #64	; 0x40
 80022a4:	e013      	b.n	80022ce <HAL_DMA_IRQHandler+0x1be>
 80022a6:	2304      	movs	r3, #4
 80022a8:	e011      	b.n	80022ce <HAL_DMA_IRQHandler+0x1be>
 80022aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022ae:	e00e      	b.n	80022ce <HAL_DMA_IRQHandler+0x1be>
 80022b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022b4:	e00b      	b.n	80022ce <HAL_DMA_IRQHandler+0x1be>
 80022b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022ba:	e008      	b.n	80022ce <HAL_DMA_IRQHandler+0x1be>
 80022bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022c0:	e005      	b.n	80022ce <HAL_DMA_IRQHandler+0x1be>
 80022c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022c6:	e002      	b.n	80022ce <HAL_DMA_IRQHandler+0x1be>
 80022c8:	2340      	movs	r3, #64	; 0x40
 80022ca:	e000      	b.n	80022ce <HAL_DMA_IRQHandler+0x1be>
 80022cc:	2304      	movs	r3, #4
 80022ce:	4a12      	ldr	r2, [pc, #72]	; (8002318 <HAL_DMA_IRQHandler+0x208>)
 80022d0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8136 	beq.w	8002548 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022e4:	e130      	b.n	8002548 <HAL_DMA_IRQHandler+0x438>
 80022e6:	bf00      	nop
 80022e8:	40020080 	.word	0x40020080
 80022ec:	40020008 	.word	0x40020008
 80022f0:	4002001c 	.word	0x4002001c
 80022f4:	40020030 	.word	0x40020030
 80022f8:	40020044 	.word	0x40020044
 80022fc:	40020058 	.word	0x40020058
 8002300:	4002006c 	.word	0x4002006c
 8002304:	40020408 	.word	0x40020408
 8002308:	4002041c 	.word	0x4002041c
 800230c:	40020430 	.word	0x40020430
 8002310:	40020444 	.word	0x40020444
 8002314:	40020400 	.word	0x40020400
 8002318:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	2202      	movs	r2, #2
 8002322:	409a      	lsls	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80dd 	beq.w	80024e8 <HAL_DMA_IRQHandler+0x3d8>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80d7 	beq.w	80024e8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10b      	bne.n	8002360 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 020a 	bic.w	r2, r2, #10
 8002356:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	4b7b      	ldr	r3, [pc, #492]	; (8002554 <HAL_DMA_IRQHandler+0x444>)
 8002368:	429a      	cmp	r2, r3
 800236a:	d958      	bls.n	800241e <HAL_DMA_IRQHandler+0x30e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a79      	ldr	r2, [pc, #484]	; (8002558 <HAL_DMA_IRQHandler+0x448>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d04f      	beq.n	8002416 <HAL_DMA_IRQHandler+0x306>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a78      	ldr	r2, [pc, #480]	; (800255c <HAL_DMA_IRQHandler+0x44c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d048      	beq.n	8002412 <HAL_DMA_IRQHandler+0x302>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a76      	ldr	r2, [pc, #472]	; (8002560 <HAL_DMA_IRQHandler+0x450>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d040      	beq.n	800240c <HAL_DMA_IRQHandler+0x2fc>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a75      	ldr	r2, [pc, #468]	; (8002564 <HAL_DMA_IRQHandler+0x454>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d038      	beq.n	8002406 <HAL_DMA_IRQHandler+0x2f6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a73      	ldr	r2, [pc, #460]	; (8002568 <HAL_DMA_IRQHandler+0x458>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d030      	beq.n	8002400 <HAL_DMA_IRQHandler+0x2f0>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a72      	ldr	r2, [pc, #456]	; (800256c <HAL_DMA_IRQHandler+0x45c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d028      	beq.n	80023fa <HAL_DMA_IRQHandler+0x2ea>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a69      	ldr	r2, [pc, #420]	; (8002554 <HAL_DMA_IRQHandler+0x444>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d020      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x2e4>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6e      	ldr	r2, [pc, #440]	; (8002570 <HAL_DMA_IRQHandler+0x460>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d019      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x2e0>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a6c      	ldr	r2, [pc, #432]	; (8002574 <HAL_DMA_IRQHandler+0x464>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d012      	beq.n	80023ec <HAL_DMA_IRQHandler+0x2dc>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6b      	ldr	r2, [pc, #428]	; (8002578 <HAL_DMA_IRQHandler+0x468>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00a      	beq.n	80023e6 <HAL_DMA_IRQHandler+0x2d6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a69      	ldr	r2, [pc, #420]	; (800257c <HAL_DMA_IRQHandler+0x46c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d102      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x2d0>
 80023da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023de:	e01b      	b.n	8002418 <HAL_DMA_IRQHandler+0x308>
 80023e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e4:	e018      	b.n	8002418 <HAL_DMA_IRQHandler+0x308>
 80023e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ea:	e015      	b.n	8002418 <HAL_DMA_IRQHandler+0x308>
 80023ec:	2320      	movs	r3, #32
 80023ee:	e013      	b.n	8002418 <HAL_DMA_IRQHandler+0x308>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e011      	b.n	8002418 <HAL_DMA_IRQHandler+0x308>
 80023f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f8:	e00e      	b.n	8002418 <HAL_DMA_IRQHandler+0x308>
 80023fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023fe:	e00b      	b.n	8002418 <HAL_DMA_IRQHandler+0x308>
 8002400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002404:	e008      	b.n	8002418 <HAL_DMA_IRQHandler+0x308>
 8002406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800240a:	e005      	b.n	8002418 <HAL_DMA_IRQHandler+0x308>
 800240c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002410:	e002      	b.n	8002418 <HAL_DMA_IRQHandler+0x308>
 8002412:	2320      	movs	r3, #32
 8002414:	e000      	b.n	8002418 <HAL_DMA_IRQHandler+0x308>
 8002416:	2302      	movs	r3, #2
 8002418:	4a59      	ldr	r2, [pc, #356]	; (8002580 <HAL_DMA_IRQHandler+0x470>)
 800241a:	6053      	str	r3, [r2, #4]
 800241c:	e057      	b.n	80024ce <HAL_DMA_IRQHandler+0x3be>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a4d      	ldr	r2, [pc, #308]	; (8002558 <HAL_DMA_IRQHandler+0x448>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d04f      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x3b8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a4b      	ldr	r2, [pc, #300]	; (800255c <HAL_DMA_IRQHandler+0x44c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d048      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x3b4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a4a      	ldr	r2, [pc, #296]	; (8002560 <HAL_DMA_IRQHandler+0x450>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d040      	beq.n	80024be <HAL_DMA_IRQHandler+0x3ae>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a48      	ldr	r2, [pc, #288]	; (8002564 <HAL_DMA_IRQHandler+0x454>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d038      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x3a8>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a47      	ldr	r2, [pc, #284]	; (8002568 <HAL_DMA_IRQHandler+0x458>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d030      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x3a2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a45      	ldr	r2, [pc, #276]	; (800256c <HAL_DMA_IRQHandler+0x45c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d028      	beq.n	80024ac <HAL_DMA_IRQHandler+0x39c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a3d      	ldr	r2, [pc, #244]	; (8002554 <HAL_DMA_IRQHandler+0x444>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d020      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x396>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a41      	ldr	r2, [pc, #260]	; (8002570 <HAL_DMA_IRQHandler+0x460>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d019      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x392>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a40      	ldr	r2, [pc, #256]	; (8002574 <HAL_DMA_IRQHandler+0x464>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d012      	beq.n	800249e <HAL_DMA_IRQHandler+0x38e>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a3e      	ldr	r2, [pc, #248]	; (8002578 <HAL_DMA_IRQHandler+0x468>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00a      	beq.n	8002498 <HAL_DMA_IRQHandler+0x388>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a3d      	ldr	r2, [pc, #244]	; (800257c <HAL_DMA_IRQHandler+0x46c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d102      	bne.n	8002492 <HAL_DMA_IRQHandler+0x382>
 800248c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002490:	e01b      	b.n	80024ca <HAL_DMA_IRQHandler+0x3ba>
 8002492:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002496:	e018      	b.n	80024ca <HAL_DMA_IRQHandler+0x3ba>
 8002498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800249c:	e015      	b.n	80024ca <HAL_DMA_IRQHandler+0x3ba>
 800249e:	2320      	movs	r3, #32
 80024a0:	e013      	b.n	80024ca <HAL_DMA_IRQHandler+0x3ba>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e011      	b.n	80024ca <HAL_DMA_IRQHandler+0x3ba>
 80024a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024aa:	e00e      	b.n	80024ca <HAL_DMA_IRQHandler+0x3ba>
 80024ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024b0:	e00b      	b.n	80024ca <HAL_DMA_IRQHandler+0x3ba>
 80024b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b6:	e008      	b.n	80024ca <HAL_DMA_IRQHandler+0x3ba>
 80024b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024bc:	e005      	b.n	80024ca <HAL_DMA_IRQHandler+0x3ba>
 80024be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024c2:	e002      	b.n	80024ca <HAL_DMA_IRQHandler+0x3ba>
 80024c4:	2320      	movs	r3, #32
 80024c6:	e000      	b.n	80024ca <HAL_DMA_IRQHandler+0x3ba>
 80024c8:	2302      	movs	r3, #2
 80024ca:	4a2e      	ldr	r2, [pc, #184]	; (8002584 <HAL_DMA_IRQHandler+0x474>)
 80024cc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d034      	beq.n	8002548 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024e6:	e02f      	b.n	8002548 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	2208      	movs	r2, #8
 80024ee:	409a      	lsls	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d028      	beq.n	800254a <HAL_DMA_IRQHandler+0x43a>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d023      	beq.n	800254a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 020e 	bic.w	r2, r2, #14
 8002510:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251a:	2101      	movs	r1, #1
 800251c:	fa01 f202 	lsl.w	r2, r1, r2
 8002520:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	2b00      	cmp	r3, #0
 800253e:	d004      	beq.n	800254a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
    }
  }
  return;
 8002548:	bf00      	nop
 800254a:	bf00      	nop
}
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40020080 	.word	0x40020080
 8002558:	40020008 	.word	0x40020008
 800255c:	4002001c 	.word	0x4002001c
 8002560:	40020030 	.word	0x40020030
 8002564:	40020044 	.word	0x40020044
 8002568:	40020058 	.word	0x40020058
 800256c:	4002006c 	.word	0x4002006c
 8002570:	40020408 	.word	0x40020408
 8002574:	4002041c 	.word	0x4002041c
 8002578:	40020430 	.word	0x40020430
 800257c:	40020444 	.word	0x40020444
 8002580:	40020400 	.word	0x40020400
 8002584:	40020000 	.word	0x40020000

08002588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002588:	b480      	push	{r7}
 800258a:	b08b      	sub	sp, #44	; 0x2c
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259a:	e169      	b.n	8002870 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800259c:	2201      	movs	r2, #1
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	f040 8158 	bne.w	800286a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4a9a      	ldr	r2, [pc, #616]	; (8002828 <HAL_GPIO_Init+0x2a0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d05e      	beq.n	8002682 <HAL_GPIO_Init+0xfa>
 80025c4:	4a98      	ldr	r2, [pc, #608]	; (8002828 <HAL_GPIO_Init+0x2a0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d875      	bhi.n	80026b6 <HAL_GPIO_Init+0x12e>
 80025ca:	4a98      	ldr	r2, [pc, #608]	; (800282c <HAL_GPIO_Init+0x2a4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d058      	beq.n	8002682 <HAL_GPIO_Init+0xfa>
 80025d0:	4a96      	ldr	r2, [pc, #600]	; (800282c <HAL_GPIO_Init+0x2a4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d86f      	bhi.n	80026b6 <HAL_GPIO_Init+0x12e>
 80025d6:	4a96      	ldr	r2, [pc, #600]	; (8002830 <HAL_GPIO_Init+0x2a8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d052      	beq.n	8002682 <HAL_GPIO_Init+0xfa>
 80025dc:	4a94      	ldr	r2, [pc, #592]	; (8002830 <HAL_GPIO_Init+0x2a8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d869      	bhi.n	80026b6 <HAL_GPIO_Init+0x12e>
 80025e2:	4a94      	ldr	r2, [pc, #592]	; (8002834 <HAL_GPIO_Init+0x2ac>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d04c      	beq.n	8002682 <HAL_GPIO_Init+0xfa>
 80025e8:	4a92      	ldr	r2, [pc, #584]	; (8002834 <HAL_GPIO_Init+0x2ac>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d863      	bhi.n	80026b6 <HAL_GPIO_Init+0x12e>
 80025ee:	4a92      	ldr	r2, [pc, #584]	; (8002838 <HAL_GPIO_Init+0x2b0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d046      	beq.n	8002682 <HAL_GPIO_Init+0xfa>
 80025f4:	4a90      	ldr	r2, [pc, #576]	; (8002838 <HAL_GPIO_Init+0x2b0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d85d      	bhi.n	80026b6 <HAL_GPIO_Init+0x12e>
 80025fa:	2b12      	cmp	r3, #18
 80025fc:	d82a      	bhi.n	8002654 <HAL_GPIO_Init+0xcc>
 80025fe:	2b12      	cmp	r3, #18
 8002600:	d859      	bhi.n	80026b6 <HAL_GPIO_Init+0x12e>
 8002602:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <HAL_GPIO_Init+0x80>)
 8002604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002608:	08002683 	.word	0x08002683
 800260c:	0800265d 	.word	0x0800265d
 8002610:	0800266f 	.word	0x0800266f
 8002614:	080026b1 	.word	0x080026b1
 8002618:	080026b7 	.word	0x080026b7
 800261c:	080026b7 	.word	0x080026b7
 8002620:	080026b7 	.word	0x080026b7
 8002624:	080026b7 	.word	0x080026b7
 8002628:	080026b7 	.word	0x080026b7
 800262c:	080026b7 	.word	0x080026b7
 8002630:	080026b7 	.word	0x080026b7
 8002634:	080026b7 	.word	0x080026b7
 8002638:	080026b7 	.word	0x080026b7
 800263c:	080026b7 	.word	0x080026b7
 8002640:	080026b7 	.word	0x080026b7
 8002644:	080026b7 	.word	0x080026b7
 8002648:	080026b7 	.word	0x080026b7
 800264c:	08002665 	.word	0x08002665
 8002650:	08002679 	.word	0x08002679
 8002654:	4a79      	ldr	r2, [pc, #484]	; (800283c <HAL_GPIO_Init+0x2b4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800265a:	e02c      	b.n	80026b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	623b      	str	r3, [r7, #32]
          break;
 8002662:	e029      	b.n	80026b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	3304      	adds	r3, #4
 800266a:	623b      	str	r3, [r7, #32]
          break;
 800266c:	e024      	b.n	80026b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	3308      	adds	r3, #8
 8002674:	623b      	str	r3, [r7, #32]
          break;
 8002676:	e01f      	b.n	80026b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	330c      	adds	r3, #12
 800267e:	623b      	str	r3, [r7, #32]
          break;
 8002680:	e01a      	b.n	80026b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800268a:	2304      	movs	r3, #4
 800268c:	623b      	str	r3, [r7, #32]
          break;
 800268e:	e013      	b.n	80026b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d105      	bne.n	80026a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002698:	2308      	movs	r3, #8
 800269a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	611a      	str	r2, [r3, #16]
          break;
 80026a2:	e009      	b.n	80026b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a4:	2308      	movs	r3, #8
 80026a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	615a      	str	r2, [r3, #20]
          break;
 80026ae:	e003      	b.n	80026b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
          break;
 80026b4:	e000      	b.n	80026b8 <HAL_GPIO_Init+0x130>
          break;
 80026b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2bff      	cmp	r3, #255	; 0xff
 80026bc:	d801      	bhi.n	80026c2 <HAL_GPIO_Init+0x13a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	e001      	b.n	80026c6 <HAL_GPIO_Init+0x13e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3304      	adds	r3, #4
 80026c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2bff      	cmp	r3, #255	; 0xff
 80026cc:	d802      	bhi.n	80026d4 <HAL_GPIO_Init+0x14c>
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	e002      	b.n	80026da <HAL_GPIO_Init+0x152>
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	3b08      	subs	r3, #8
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	210f      	movs	r1, #15
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	401a      	ands	r2, r3
 80026ec:	6a39      	ldr	r1, [r7, #32]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	431a      	orrs	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 80b1 	beq.w	800286a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002708:	4b4d      	ldr	r3, [pc, #308]	; (8002840 <HAL_GPIO_Init+0x2b8>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	4a4c      	ldr	r2, [pc, #304]	; (8002840 <HAL_GPIO_Init+0x2b8>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6193      	str	r3, [r2, #24]
 8002714:	4b4a      	ldr	r3, [pc, #296]	; (8002840 <HAL_GPIO_Init+0x2b8>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002720:	4a48      	ldr	r2, [pc, #288]	; (8002844 <HAL_GPIO_Init+0x2bc>)
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	3302      	adds	r3, #2
 8002728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	220f      	movs	r2, #15
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4013      	ands	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a40      	ldr	r2, [pc, #256]	; (8002848 <HAL_GPIO_Init+0x2c0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d013      	beq.n	8002774 <HAL_GPIO_Init+0x1ec>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a3f      	ldr	r2, [pc, #252]	; (800284c <HAL_GPIO_Init+0x2c4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d00d      	beq.n	8002770 <HAL_GPIO_Init+0x1e8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a3e      	ldr	r2, [pc, #248]	; (8002850 <HAL_GPIO_Init+0x2c8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d007      	beq.n	800276c <HAL_GPIO_Init+0x1e4>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3d      	ldr	r2, [pc, #244]	; (8002854 <HAL_GPIO_Init+0x2cc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d101      	bne.n	8002768 <HAL_GPIO_Init+0x1e0>
 8002764:	2303      	movs	r3, #3
 8002766:	e006      	b.n	8002776 <HAL_GPIO_Init+0x1ee>
 8002768:	2304      	movs	r3, #4
 800276a:	e004      	b.n	8002776 <HAL_GPIO_Init+0x1ee>
 800276c:	2302      	movs	r3, #2
 800276e:	e002      	b.n	8002776 <HAL_GPIO_Init+0x1ee>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_GPIO_Init+0x1ee>
 8002774:	2300      	movs	r3, #0
 8002776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002778:	f002 0203 	and.w	r2, r2, #3
 800277c:	0092      	lsls	r2, r2, #2
 800277e:	4093      	lsls	r3, r2
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002786:	492f      	ldr	r1, [pc, #188]	; (8002844 <HAL_GPIO_Init+0x2bc>)
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d006      	beq.n	80027ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027a0:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	492c      	ldr	r1, [pc, #176]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
 80027ac:	e006      	b.n	80027bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027ae:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	4928      	ldr	r1, [pc, #160]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d006      	beq.n	80027d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027c8:	4b23      	ldr	r3, [pc, #140]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	4922      	ldr	r1, [pc, #136]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	604b      	str	r3, [r1, #4]
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027d6:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	43db      	mvns	r3, r3
 80027de:	491e      	ldr	r1, [pc, #120]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d006      	beq.n	80027fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	4918      	ldr	r1, [pc, #96]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]
 80027fc:	e006      	b.n	800280c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027fe:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	43db      	mvns	r3, r3
 8002806:	4914      	ldr	r1, [pc, #80]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 8002808:	4013      	ands	r3, r2
 800280a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d021      	beq.n	800285c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	490e      	ldr	r1, [pc, #56]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	60cb      	str	r3, [r1, #12]
 8002824:	e021      	b.n	800286a <HAL_GPIO_Init+0x2e2>
 8002826:	bf00      	nop
 8002828:	10320000 	.word	0x10320000
 800282c:	10310000 	.word	0x10310000
 8002830:	10220000 	.word	0x10220000
 8002834:	10210000 	.word	0x10210000
 8002838:	10120000 	.word	0x10120000
 800283c:	10110000 	.word	0x10110000
 8002840:	40021000 	.word	0x40021000
 8002844:	40010000 	.word	0x40010000
 8002848:	40010800 	.word	0x40010800
 800284c:	40010c00 	.word	0x40010c00
 8002850:	40011000 	.word	0x40011000
 8002854:	40011400 	.word	0x40011400
 8002858:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_GPIO_Init+0x304>)
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	43db      	mvns	r3, r3
 8002864:	4909      	ldr	r1, [pc, #36]	; (800288c <HAL_GPIO_Init+0x304>)
 8002866:	4013      	ands	r3, r2
 8002868:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	3301      	adds	r3, #1
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	f47f ae8e 	bne.w	800259c <HAL_GPIO_Init+0x14>
  }
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	372c      	adds	r7, #44	; 0x2c
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	40010400 	.word	0x40010400

08002890 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	887b      	ldrh	r3, [r7, #2]
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e001      	b.n	80028b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	807b      	strh	r3, [r7, #2]
 80028ca:	4613      	mov	r3, r2
 80028cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028ce:	787b      	ldrb	r3, [r7, #1]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d4:	887a      	ldrh	r2, [r7, #2]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028da:	e003      	b.n	80028e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028dc:	887b      	ldrh	r3, [r7, #2]
 80028de:	041a      	lsls	r2, r3, #16
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	611a      	str	r2, [r3, #16]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e304      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8087 	beq.w	8002a1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002910:	4b92      	ldr	r3, [pc, #584]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	2b04      	cmp	r3, #4
 800291a:	d00c      	beq.n	8002936 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800291c:	4b8f      	ldr	r3, [pc, #572]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	2b08      	cmp	r3, #8
 8002926:	d112      	bne.n	800294e <HAL_RCC_OscConfig+0x5e>
 8002928:	4b8c      	ldr	r3, [pc, #560]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002934:	d10b      	bne.n	800294e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002936:	4b89      	ldr	r3, [pc, #548]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d06c      	beq.n	8002a1c <HAL_RCC_OscConfig+0x12c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d168      	bne.n	8002a1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e2de      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x76>
 8002958:	4b80      	ldr	r3, [pc, #512]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a7f      	ldr	r2, [pc, #508]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800295e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	e02e      	b.n	80029c4 <HAL_RCC_OscConfig+0xd4>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x98>
 800296e:	4b7b      	ldr	r3, [pc, #492]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a7a      	ldr	r2, [pc, #488]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b78      	ldr	r3, [pc, #480]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a77      	ldr	r2, [pc, #476]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002980:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e01d      	b.n	80029c4 <HAL_RCC_OscConfig+0xd4>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0xbc>
 8002992:	4b72      	ldr	r3, [pc, #456]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a71      	ldr	r2, [pc, #452]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b6f      	ldr	r3, [pc, #444]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a6e      	ldr	r2, [pc, #440]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_OscConfig+0xd4>
 80029ac:	4b6b      	ldr	r3, [pc, #428]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a6a      	ldr	r2, [pc, #424]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a67      	ldr	r2, [pc, #412]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d013      	beq.n	80029f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7fe fdc4 	bl	8001558 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d4:	f7fe fdc0 	bl	8001558 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e292      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	4b5d      	ldr	r3, [pc, #372]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0xe4>
 80029f2:	e014      	b.n	8002a1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fdb0 	bl	8001558 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fe fdac 	bl	8001558 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e27e      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0e:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x10c>
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d063      	beq.n	8002af2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a2a:	4b4c      	ldr	r3, [pc, #304]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a36:	4b49      	ldr	r3, [pc, #292]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d11c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x18c>
 8002a42:	4b46      	ldr	r3, [pc, #280]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d116      	bne.n	8002a7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	4b43      	ldr	r3, [pc, #268]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_RCC_OscConfig+0x176>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d001      	beq.n	8002a66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e252      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a66:	4b3d      	ldr	r3, [pc, #244]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4939      	ldr	r1, [pc, #228]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	e03a      	b.n	8002af2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a84:	4b36      	ldr	r3, [pc, #216]	; (8002b60 <HAL_RCC_OscConfig+0x270>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fd65 	bl	8001558 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a92:	f7fe fd61 	bl	8001558 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e233      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4927      	ldr	r1, [pc, #156]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]
 8002ac4:	e015      	b.n	8002af2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac6:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe fd44 	bl	8001558 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad4:	f7fe fd40 	bl	8001558 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e212      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d03a      	beq.n	8002b74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d019      	beq.n	8002b3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0c:	f7fe fd24 	bl	8001558 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b14:	f7fe fd20 	bl	8001558 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1f2      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_RCC_OscConfig+0x26c>)
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b32:	2001      	movs	r0, #1
 8002b34:	f000 fc50 	bl	80033d8 <RCC_Delay>
 8002b38:	e01c      	b.n	8002b74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b40:	f7fe fd0a 	bl	8001558 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b46:	e00f      	b.n	8002b68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b48:	f7fe fd06 	bl	8001558 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d908      	bls.n	8002b68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e1d8      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	42420000 	.word	0x42420000
 8002b64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b68:	4b9b      	ldr	r3, [pc, #620]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e9      	bne.n	8002b48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80a6 	beq.w	8002cce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b86:	4b94      	ldr	r3, [pc, #592]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	4b91      	ldr	r3, [pc, #580]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4a90      	ldr	r2, [pc, #576]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	61d3      	str	r3, [r2, #28]
 8002b9e:	4b8e      	ldr	r3, [pc, #568]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bae:	4b8b      	ldr	r3, [pc, #556]	; (8002ddc <HAL_RCC_OscConfig+0x4ec>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d118      	bne.n	8002bec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bba:	4b88      	ldr	r3, [pc, #544]	; (8002ddc <HAL_RCC_OscConfig+0x4ec>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a87      	ldr	r2, [pc, #540]	; (8002ddc <HAL_RCC_OscConfig+0x4ec>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fcc7 	bl	8001558 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bce:	f7fe fcc3 	bl	8001558 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b64      	cmp	r3, #100	; 0x64
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e195      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be0:	4b7e      	ldr	r3, [pc, #504]	; (8002ddc <HAL_RCC_OscConfig+0x4ec>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x312>
 8002bf4:	4b78      	ldr	r3, [pc, #480]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4a77      	ldr	r2, [pc, #476]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6213      	str	r3, [r2, #32]
 8002c00:	e02d      	b.n	8002c5e <HAL_RCC_OscConfig+0x36e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x334>
 8002c0a:	4b73      	ldr	r3, [pc, #460]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	4a72      	ldr	r2, [pc, #456]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	6213      	str	r3, [r2, #32]
 8002c16:	4b70      	ldr	r3, [pc, #448]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4a6f      	ldr	r2, [pc, #444]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002c1c:	f023 0304 	bic.w	r3, r3, #4
 8002c20:	6213      	str	r3, [r2, #32]
 8002c22:	e01c      	b.n	8002c5e <HAL_RCC_OscConfig+0x36e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x356>
 8002c2c:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4a69      	ldr	r2, [pc, #420]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	6213      	str	r3, [r2, #32]
 8002c38:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4a66      	ldr	r2, [pc, #408]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6213      	str	r3, [r2, #32]
 8002c44:	e00b      	b.n	8002c5e <HAL_RCC_OscConfig+0x36e>
 8002c46:	4b64      	ldr	r3, [pc, #400]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4a63      	ldr	r2, [pc, #396]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	6213      	str	r3, [r2, #32]
 8002c52:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a60      	ldr	r2, [pc, #384]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d015      	beq.n	8002c92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c66:	f7fe fc77 	bl	8001558 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fe fc73 	bl	8001558 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e143      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	4b54      	ldr	r3, [pc, #336]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ee      	beq.n	8002c6e <HAL_RCC_OscConfig+0x37e>
 8002c90:	e014      	b.n	8002cbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c92:	f7fe fc61 	bl	8001558 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fe fc5d 	bl	8001558 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e12d      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb0:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ee      	bne.n	8002c9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d105      	bne.n	8002cce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc2:	4b45      	ldr	r3, [pc, #276]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4a44      	ldr	r2, [pc, #272]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 808c 	beq.w	8002df0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002cd8:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce4:	d10e      	bne.n	8002d04 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002ce6:	4b3c      	ldr	r3, [pc, #240]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d108      	bne.n	8002d04 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002cf2:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e103      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d14e      	bne.n	8002daa <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002d0c:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002d18:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0ef      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002d2c:	4b2c      	ldr	r3, [pc, #176]	; (8002de0 <HAL_RCC_OscConfig+0x4f0>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe fc11 	bl	8001558 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002d3a:	f7fe fc0d 	bl	8001558 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b64      	cmp	r3, #100	; 0x64
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e0df      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002d4c:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002d58:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	491c      	ldr	r1, [pc, #112]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4918      	ldr	r1, [pc, #96]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_RCC_OscConfig+0x4f0>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7fe fbe9 	bl	8001558 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002d8a:	f7fe fbe5 	bl	8001558 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b64      	cmp	r3, #100	; 0x64
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e0b7      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x49a>
 8002da8:	e022      	b.n	8002df0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <HAL_RCC_OscConfig+0x4e8>)
 8002db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_RCC_OscConfig+0x4f0>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fbcc 	bl	8001558 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002dc2:	e00f      	b.n	8002de4 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002dc4:	f7fe fbc8 	bl	8001558 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d908      	bls.n	8002de4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e09a      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40007000 	.word	0x40007000
 8002de0:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002de4:	4b4b      	ldr	r3, [pc, #300]	; (8002f14 <HAL_RCC_OscConfig+0x624>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e9      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8088 	beq.w	8002f0a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dfa:	4b46      	ldr	r3, [pc, #280]	; (8002f14 <HAL_RCC_OscConfig+0x624>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d068      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d14d      	bne.n	8002eaa <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0e:	4b42      	ldr	r3, [pc, #264]	; (8002f18 <HAL_RCC_OscConfig+0x628>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe fba0 	bl	8001558 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe fb9c 	bl	8001558 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e06e      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2e:	4b39      	ldr	r3, [pc, #228]	; (8002f14 <HAL_RCC_OscConfig+0x624>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e42:	d10f      	bne.n	8002e64 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002e44:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <HAL_RCC_OscConfig+0x624>)
 8002e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4931      	ldr	r1, [pc, #196]	; (8002f14 <HAL_RCC_OscConfig+0x624>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e52:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <HAL_RCC_OscConfig+0x624>)
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	f023 020f 	bic.w	r2, r3, #15
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	492d      	ldr	r1, [pc, #180]	; (8002f14 <HAL_RCC_OscConfig+0x624>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCC_OscConfig+0x624>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	430b      	orrs	r3, r1
 8002e76:	4927      	ldr	r1, [pc, #156]	; (8002f14 <HAL_RCC_OscConfig+0x624>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e7c:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <HAL_RCC_OscConfig+0x628>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e82:	f7fe fb69 	bl	8001558 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8a:	f7fe fb65 	bl	8001558 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e037      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <HAL_RCC_OscConfig+0x624>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x59a>
 8002ea8:	e02f      	b.n	8002f0a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <HAL_RCC_OscConfig+0x628>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fb52 	bl	8001558 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe fb4e 	bl	8001558 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e020      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_RCC_OscConfig+0x624>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x5c8>
 8002ed6:	e018      	b.n	8002f0a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e013      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_OscConfig+0x624>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d001      	beq.n	8002f0a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	42420060 	.word	0x42420060

08002f1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0d0      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b6a      	ldr	r3, [pc, #424]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d910      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b67      	ldr	r3, [pc, #412]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 0207 	bic.w	r2, r3, #7
 8002f46:	4965      	ldr	r1, [pc, #404]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b63      	ldr	r3, [pc, #396]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0b8      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d020      	beq.n	8002fae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f78:	4b59      	ldr	r3, [pc, #356]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a58      	ldr	r2, [pc, #352]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f90:	4b53      	ldr	r3, [pc, #332]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b50      	ldr	r3, [pc, #320]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	494d      	ldr	r1, [pc, #308]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d040      	beq.n	800303c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d115      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e07f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e073      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fea:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e06b      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b39      	ldr	r3, [pc, #228]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4936      	ldr	r1, [pc, #216]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800300c:	f7fe faa4 	bl	8001558 <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7fe faa0 	bl	8001558 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e053      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b2d      	ldr	r3, [pc, #180]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d210      	bcs.n	800306c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 0207 	bic.w	r2, r3, #7
 8003052:	4922      	ldr	r1, [pc, #136]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e032      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4916      	ldr	r1, [pc, #88]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	490e      	ldr	r1, [pc, #56]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030aa:	f000 f821 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	490a      	ldr	r1, [pc, #40]	; (80030e4 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	5ccb      	ldrb	r3, [r1, r3]
 80030be:	fa22 f303 	lsr.w	r3, r2, r3
 80030c2:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <HAL_RCC_ClockConfig+0x1cc>)
 80030c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_RCC_ClockConfig+0x1d0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe f91e 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40022000 	.word	0x40022000
 80030e0:	40021000 	.word	0x40021000
 80030e4:	08006094 	.word	0x08006094
 80030e8:	20000000 	.word	0x20000000
 80030ec:	20000004 	.word	0x20000004

080030f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f4:	b09d      	sub	sp, #116	; 0x74
 80030f6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80030f8:	4b81      	ldr	r3, [pc, #516]	; (8003300 <HAL_RCC_GetSysClockFreq+0x210>)
 80030fa:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80030fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003100:	c407      	stmia	r4!, {r0, r1, r2}
 8003102:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003104:	4b7f      	ldr	r3, [pc, #508]	; (8003304 <HAL_RCC_GetSysClockFreq+0x214>)
 8003106:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800310a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800310c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	667b      	str	r3, [r7, #100]	; 0x64
 8003114:	2300      	movs	r3, #0
 8003116:	663b      	str	r3, [r7, #96]	; 0x60
 8003118:	2300      	movs	r3, #0
 800311a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800311c:	2300      	movs	r3, #0
 800311e:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	65bb      	str	r3, [r7, #88]	; 0x58
 8003128:	2300      	movs	r3, #0
 800312a:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800312c:	4b76      	ldr	r3, [pc, #472]	; (8003308 <HAL_RCC_GetSysClockFreq+0x218>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b04      	cmp	r3, #4
 800313a:	d002      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x52>
 800313c:	2b08      	cmp	r3, #8
 800313e:	d003      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x58>
 8003140:	e0d4      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003142:	4b72      	ldr	r3, [pc, #456]	; (800330c <HAL_RCC_GetSysClockFreq+0x21c>)
 8003144:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8003146:	e0d4      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800314a:	0c9b      	lsrs	r3, r3, #18
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	3340      	adds	r3, #64	; 0x40
 8003152:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003156:	4413      	add	r3, r2
 8003158:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800315c:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800315e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80b9 	beq.w	80032dc <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800316a:	4b67      	ldr	r3, [pc, #412]	; (8003308 <HAL_RCC_GetSysClockFreq+0x218>)
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	3340      	adds	r3, #64	; 0x40
 8003174:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003178:	4413      	add	r3, r2
 800317a:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800317e:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003180:	4b61      	ldr	r3, [pc, #388]	; (8003308 <HAL_RCC_GetSysClockFreq+0x218>)
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8095 	beq.w	80032b8 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800318e:	4b5e      	ldr	r3, [pc, #376]	; (8003308 <HAL_RCC_GetSysClockFreq+0x218>)
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	3301      	adds	r3, #1
 800319a:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800319c:	4b5a      	ldr	r3, [pc, #360]	; (8003308 <HAL_RCC_GetSysClockFreq+0x218>)
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	3302      	adds	r3, #2
 80031a8:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80031aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ac:	2200      	movs	r2, #0
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	61fa      	str	r2, [r7, #28]
 80031b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b4:	2200      	movs	r2, #0
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80031be:	4622      	mov	r2, r4
 80031c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031c4:	4684      	mov	ip, r0
 80031c6:	fb0c f202 	mul.w	r2, ip, r2
 80031ca:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80031ce:	468c      	mov	ip, r1
 80031d0:	4618      	mov	r0, r3
 80031d2:	4621      	mov	r1, r4
 80031d4:	4603      	mov	r3, r0
 80031d6:	fb03 f30c 	mul.w	r3, r3, ip
 80031da:	4413      	add	r3, r2
 80031dc:	4602      	mov	r2, r0
 80031de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031e0:	fba2 8901 	umull	r8, r9, r2, r1
 80031e4:	444b      	add	r3, r9
 80031e6:	4699      	mov	r9, r3
 80031e8:	4642      	mov	r2, r8
 80031ea:	464b      	mov	r3, r9
 80031ec:	f04f 0000 	mov.w	r0, #0
 80031f0:	f04f 0100 	mov.w	r1, #0
 80031f4:	0159      	lsls	r1, r3, #5
 80031f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031fa:	0150      	lsls	r0, r2, #5
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	ebb2 0508 	subs.w	r5, r2, r8
 8003204:	eb63 0609 	sbc.w	r6, r3, r9
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	01b3      	lsls	r3, r6, #6
 8003212:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 8003216:	01aa      	lsls	r2, r5, #6
 8003218:	ebb2 0a05 	subs.w	sl, r2, r5
 800321c:	eb63 0b06 	sbc.w	fp, r3, r6
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800322c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003234:	4692      	mov	sl, r2
 8003236:	469b      	mov	fp, r3
 8003238:	eb1a 0308 	adds.w	r3, sl, r8
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	eb4b 0309 	adc.w	r3, fp, r9
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003250:	4629      	mov	r1, r5
 8003252:	024b      	lsls	r3, r1, #9
 8003254:	4620      	mov	r0, r4
 8003256:	4629      	mov	r1, r5
 8003258:	4604      	mov	r4, r0
 800325a:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800325e:	4601      	mov	r1, r0
 8003260:	024a      	lsls	r2, r1, #9
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003268:	2200      	movs	r2, #0
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	617a      	str	r2, [r7, #20]
 800326e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003270:	2200      	movs	r2, #0
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	60fa      	str	r2, [r7, #12]
 8003276:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800327a:	4622      	mov	r2, r4
 800327c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003280:	4645      	mov	r5, r8
 8003282:	fb05 f202 	mul.w	r2, r5, r2
 8003286:	464e      	mov	r6, r9
 8003288:	4625      	mov	r5, r4
 800328a:	461c      	mov	r4, r3
 800328c:	4623      	mov	r3, r4
 800328e:	fb03 f306 	mul.w	r3, r3, r6
 8003292:	4413      	add	r3, r2
 8003294:	4622      	mov	r2, r4
 8003296:	4644      	mov	r4, r8
 8003298:	fba2 2404 	umull	r2, r4, r2, r4
 800329c:	627c      	str	r4, [r7, #36]	; 0x24
 800329e:	623a      	str	r2, [r7, #32]
 80032a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a2:	4413      	add	r3, r2
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
 80032a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032aa:	f7fd f8f5 	bl	8000498 <__aeabi_uldivmod>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4613      	mov	r3, r2
 80032b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032b6:	e007      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80032b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ba:	4a14      	ldr	r2, [pc, #80]	; (800330c <HAL_RCC_GetSysClockFreq+0x21c>)
 80032bc:	fb03 f202 	mul.w	r2, r3, r2
 80032c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c6:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80032c8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80032cc:	461a      	mov	r2, r3
 80032ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d108      	bne.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 80032d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d6:	085b      	lsrs	r3, r3, #1
 80032d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032da:	e004      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032de:	4a0c      	ldr	r2, [pc, #48]	; (8003310 <HAL_RCC_GetSysClockFreq+0x220>)
 80032e0:	fb02 f303 	mul.w	r3, r2, r3
 80032e4:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 80032e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e8:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80032ea:	e002      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032ec:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_RCC_GetSysClockFreq+0x21c>)
 80032ee:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80032f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3774      	adds	r7, #116	; 0x74
 80032f8:	46bd      	mov	sp, r7
 80032fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032fe:	bf00      	nop
 8003300:	0800604c 	.word	0x0800604c
 8003304:	0800605c 	.word	0x0800605c
 8003308:	40021000 	.word	0x40021000
 800330c:	007a1200 	.word	0x007a1200
 8003310:	003d0900 	.word	0x003d0900

08003314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003318:	4b02      	ldr	r3, [pc, #8]	; (8003324 <HAL_RCC_GetHCLKFreq+0x10>)
 800331a:	681b      	ldr	r3, [r3, #0]
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	20000000 	.word	0x20000000

08003328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800332c:	f7ff fff2 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 8003330:	4602      	mov	r2, r0
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	4903      	ldr	r1, [pc, #12]	; (800334c <HAL_RCC_GetPCLK1Freq+0x24>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	080060a4 	.word	0x080060a4

08003350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003354:	f7ff ffde 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	0adb      	lsrs	r3, r3, #11
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4903      	ldr	r1, [pc, #12]	; (8003374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	080060a4 	.word	0x080060a4

08003378 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	220f      	movs	r2, #15
 8003386:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003388:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <HAL_RCC_GetClockConfig+0x58>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0203 	and.w	r2, r3, #3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003394:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <HAL_RCC_GetClockConfig+0x58>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_GetClockConfig+0x58>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <HAL_RCC_GetClockConfig+0x58>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	08db      	lsrs	r3, r3, #3
 80033b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_GetClockConfig+0x5c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0207 	and.w	r2, r3, #7
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40022000 	.word	0x40022000

080033d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033e0:	4b0a      	ldr	r3, [pc, #40]	; (800340c <RCC_Delay+0x34>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <RCC_Delay+0x38>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	0a5b      	lsrs	r3, r3, #9
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033f4:	bf00      	nop
  }
  while (Delay --);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1e5a      	subs	r2, r3, #1
 80033fa:	60fa      	str	r2, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f9      	bne.n	80033f4 <RCC_Delay+0x1c>
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	20000000 	.word	0x20000000
 8003410:	10624dd3 	.word	0x10624dd3

08003414 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d07d      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003434:	2300      	movs	r3, #0
 8003436:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003438:	4b8b      	ldr	r3, [pc, #556]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10d      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003444:	4b88      	ldr	r3, [pc, #544]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	4a87      	ldr	r2, [pc, #540]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800344a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344e:	61d3      	str	r3, [r2, #28]
 8003450:	4b85      	ldr	r3, [pc, #532]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800345c:	2301      	movs	r3, #1
 800345e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003460:	4b82      	ldr	r3, [pc, #520]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d118      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346c:	4b7f      	ldr	r3, [pc, #508]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a7e      	ldr	r2, [pc, #504]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003476:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003478:	f7fe f86e 	bl	8001558 <HAL_GetTick>
 800347c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347e:	e008      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003480:	f7fe f86a 	bl	8001558 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	; 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0e5      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	4b76      	ldr	r3, [pc, #472]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800349e:	4b72      	ldr	r3, [pc, #456]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a6:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d02e      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d027      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034bc:	4b6a      	ldr	r3, [pc, #424]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034c6:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034cc:	4b68      	ldr	r3, [pc, #416]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034d2:	4a65      	ldr	r2, [pc, #404]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d014      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7fe f839 	bl	8001558 <HAL_GetTick>
 80034e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e8:	e00a      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fe f835 	bl	8001558 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d901      	bls.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e0ae      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003500:	4b59      	ldr	r3, [pc, #356]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0ee      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800350c:	4b56      	ldr	r3, [pc, #344]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4953      	ldr	r1, [pc, #332]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800351a:	4313      	orrs	r3, r2
 800351c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800351e:	7efb      	ldrb	r3, [r7, #27]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003524:	4b50      	ldr	r3, [pc, #320]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	4a4f      	ldr	r2, [pc, #316]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800352a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800353c:	4b4a      	ldr	r3, [pc, #296]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4947      	ldr	r1, [pc, #284]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800354a:	4313      	orrs	r3, r2
 800354c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800355a:	4b43      	ldr	r3, [pc, #268]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4940      	ldr	r1, [pc, #256]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003568:	4313      	orrs	r3, r2
 800356a:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003578:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	4938      	ldr	r1, [pc, #224]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003586:	4313      	orrs	r3, r2
 8003588:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800358a:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d105      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003596:	4b34      	ldr	r3, [pc, #208]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d148      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80035ac:	4b2e      	ldr	r3, [pc, #184]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d138      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80035b8:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80035c4:	4b28      	ldr	r3, [pc, #160]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e042      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80035d8:	4b23      	ldr	r3, [pc, #140]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	4920      	ldr	r1, [pc, #128]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80035ea:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	491c      	ldr	r1, [pc, #112]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80035fc:	4b1d      	ldr	r3, [pc, #116]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fe:	2201      	movs	r2, #1
 8003600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003602:	f7fd ffa9 	bl	8001558 <HAL_GetTick>
 8003606:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003608:	e008      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800360a:	f7fd ffa5 	bl	8001558 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b64      	cmp	r3, #100	; 0x64
 8003616:	d901      	bls.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e020      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003628:	e009      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800362a:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	429a      	cmp	r2, r3
 8003638:	d001      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e00f      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800364a:	4b07      	ldr	r3, [pc, #28]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	4904      	ldr	r1, [pc, #16]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	40007000 	.word	0x40007000
 8003670:	42420440 	.word	0x42420440
 8003674:	42420070 	.word	0x42420070

08003678 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b093      	sub	sp, #76	; 0x4c
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003680:	4ba8      	ldr	r3, [pc, #672]	; (8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8003682:	f107 0418 	add.w	r4, r7, #24
 8003686:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003688:	c407      	stmia	r4!, {r0, r1, r2}
 800368a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800368c:	4ba6      	ldr	r3, [pc, #664]	; (8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800368e:	f107 0408 	add.w	r4, r7, #8
 8003692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800369c:	2300      	movs	r3, #0
 800369e:	647b      	str	r3, [r7, #68]	; 0x44
 80036a0:	2300      	movs	r3, #0
 80036a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
 80036a8:	2300      	movs	r3, #0
 80036aa:	633b      	str	r3, [r7, #48]	; 0x30
 80036ac:	2300      	movs	r3, #0
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b4:	2300      	movs	r3, #0
 80036b6:	643b      	str	r3, [r7, #64]	; 0x40

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	2b0f      	cmp	r3, #15
 80036be:	f200 8122 	bhi.w	8003906 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	08003885 	.word	0x08003885
 80036cc:	080038eb 	.word	0x080038eb
 80036d0:	08003907 	.word	0x08003907
 80036d4:	080037e3 	.word	0x080037e3
 80036d8:	08003907 	.word	0x08003907
 80036dc:	08003907 	.word	0x08003907
 80036e0:	08003907 	.word	0x08003907
 80036e4:	08003835 	.word	0x08003835
 80036e8:	08003907 	.word	0x08003907
 80036ec:	08003907 	.word	0x08003907
 80036f0:	08003907 	.word	0x08003907
 80036f4:	08003907 	.word	0x08003907
 80036f8:	08003907 	.word	0x08003907
 80036fc:	08003907 	.word	0x08003907
 8003700:	08003907 	.word	0x08003907
 8003704:	08003709 	.word	0x08003709
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003708:	4b88      	ldr	r3, [pc, #544]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800370e:	4b87      	ldr	r3, [pc, #540]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 80f7 	beq.w	800390a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	0c9b      	lsrs	r3, r3, #18
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	3348      	adds	r3, #72	; 0x48
 8003726:	443b      	add	r3, r7
 8003728:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800372c:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d03d      	beq.n	80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003738:	4b7c      	ldr	r3, [pc, #496]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	3348      	adds	r3, #72	; 0x48
 8003742:	443b      	add	r3, r7
 8003744:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8003748:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800374a:	4b78      	ldr	r3, [pc, #480]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01c      	beq.n	8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003756:	4b75      	ldr	r3, [pc, #468]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	3301      	adds	r3, #1
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003764:	4b71      	ldr	r3, [pc, #452]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	3302      	adds	r3, #2
 8003770:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8003772:	4a6f      	ldr	r2, [pc, #444]	; (8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	fbb2 f3f3 	udiv	r3, r2, r3
 800377a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800377c:	fb03 f202 	mul.w	r2, r3, r2
 8003780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003782:	fbb2 f2f3 	udiv	r2, r2, r3
 8003786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003788:	fb02 f303 	mul.w	r3, r2, r3
 800378c:	647b      	str	r3, [r7, #68]	; 0x44
 800378e:	e007      	b.n	80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003790:	4a67      	ldr	r2, [pc, #412]	; (8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003794:	fbb2 f2f3 	udiv	r2, r2, r3
 8003798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80037a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80037a4:	461a      	mov	r2, r3
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d108      	bne.n	80037be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            pllclk = pllclk / 2;
 80037ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	647b      	str	r3, [r7, #68]	; 0x44
 80037b2:	e004      	b.n	80037be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	4a5f      	ldr	r2, [pc, #380]	; (8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 80037be:	4b5b      	ldr	r3, [pc, #364]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ca:	d102      	bne.n	80037d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 80037cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ce:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80037d0:	e09b      	b.n	800390a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
          frequency = (2 * pllclk) / 3;
 80037d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	4a58      	ldr	r2, [pc, #352]	; (8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80037e0:	e093      	b.n	800390a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 80037e2:	4b52      	ldr	r3, [pc, #328]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d103      	bne.n	80037f6 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 80037ee:	f7ff fc7f 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80037f2:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80037f4:	e08b      	b.n	800390e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80037f6:	4b4d      	ldr	r3, [pc, #308]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8085 	beq.w	800390e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003804:	4b49      	ldr	r3, [pc, #292]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	3301      	adds	r3, #1
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8003812:	4b46      	ldr	r3, [pc, #280]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	0b1b      	lsrs	r3, r3, #12
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	3302      	adds	r3, #2
 800381e:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8003820:	4a43      	ldr	r2, [pc, #268]	; (8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003832:	e06c      	b.n	800390e <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8003834:	4b3d      	ldr	r3, [pc, #244]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8003840:	f7ff fc56 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 8003844:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003846:	e064      	b.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8003848:	4b38      	ldr	r3, [pc, #224]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d05e      	beq.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003854:	4b35      	ldr	r3, [pc, #212]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	3301      	adds	r3, #1
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8003862:	4b32      	ldr	r3, [pc, #200]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	0b1b      	lsrs	r3, r3, #12
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	3302      	adds	r3, #2
 800386e:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8003870:	4a2f      	ldr	r2, [pc, #188]	; (8003930 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003882:	e046      	b.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003884:	4b29      	ldr	r3, [pc, #164]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003894:	d108      	bne.n	80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSE_VALUE;
 80038a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038a4:	643b      	str	r3, [r7, #64]	; 0x40
 80038a6:	e01f      	b.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b2:	d109      	bne.n	80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
      {
        frequency = LSI_VALUE;
 80038c0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80038c4:	643b      	str	r3, [r7, #64]	; 0x40
 80038c6:	e00f      	b.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d2:	d120      	bne.n	8003916 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 80038d4:	4b15      	ldr	r3, [pc, #84]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01a      	beq.n	8003916 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
      {
        frequency = HSE_VALUE / 128U;
 80038e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80038e4:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80038e6:	e016      	b.n	8003916 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 80038e8:	e015      	b.n	8003916 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80038ea:	f7ff fd31 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 80038ee:	4602      	mov	r2, r0
 80038f0:	4b0e      	ldr	r3, [pc, #56]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	0b9b      	lsrs	r3, r3, #14
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	3301      	adds	r3, #1
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003904:	e008      	b.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
    }
    default:
    {
      break;
 8003906:	bf00      	nop
 8003908:	e006      	b.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 800390a:	bf00      	nop
 800390c:	e004      	b.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 800390e:	bf00      	nop
 8003910:	e002      	b.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 8003912:	bf00      	nop
 8003914:	e000      	b.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 8003916:	bf00      	nop
    }
  }
  return (frequency);
 8003918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800391a:	4618      	mov	r0, r3
 800391c:	374c      	adds	r7, #76	; 0x4c
 800391e:	46bd      	mov	sp, r7
 8003920:	bd90      	pop	{r4, r7, pc}
 8003922:	bf00      	nop
 8003924:	0800606c 	.word	0x0800606c
 8003928:	0800607c 	.word	0x0800607c
 800392c:	40021000 	.word	0x40021000
 8003930:	007a1200 	.word	0x007a1200
 8003934:	003d0900 	.word	0x003d0900
 8003938:	aaaaaaab 	.word	0xaaaaaaab

0800393c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e076      	b.n	8003a3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800395e:	d009      	beq.n	8003974 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	61da      	str	r2, [r3, #28]
 8003966:	e005      	b.n	8003974 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fd fbdc 	bl	800114c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	ea42 0103 	orr.w	r1, r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	0c1a      	lsrs	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f002 0204 	and.w	r2, r2, #4
 8003a1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e041      	b.n	8003ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f839 	bl	8003ae2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	4619      	mov	r1, r3
 8003a82:	4610      	mov	r0, r2
 8003a84:	f000 f9bc 	bl	8003e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d001      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e03f      	b.n	8003b8c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_TIM_Base_Start_IT+0xa4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_TIM_Base_Start_IT+0x62>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b36:	d00e      	beq.n	8003b56 <HAL_TIM_Base_Start_IT+0x62>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <HAL_TIM_Base_Start_IT+0xa8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d009      	beq.n	8003b56 <HAL_TIM_Base_Start_IT+0x62>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xac>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_TIM_Base_Start_IT+0x62>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d111      	bne.n	8003b7a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b06      	cmp	r3, #6
 8003b66:	d010      	beq.n	8003b8a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b78:	e007      	b.n	8003b8a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0201 	orr.w	r2, r2, #1
 8003b88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800
 8003ba4:	40000c00 	.word	0x40000c00

08003ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d122      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d11b      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0202 	mvn.w	r2, #2
 8003bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8ed 	bl	8003dca <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8e0 	bl	8003db8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f8ef 	bl	8003ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d122      	bne.n	8003c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d11b      	bne.n	8003c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0204 	mvn.w	r2, #4
 8003c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f8c3 	bl	8003dca <HAL_TIM_IC_CaptureCallback>
 8003c44:	e005      	b.n	8003c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f8b6 	bl	8003db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f8c5 	bl	8003ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d122      	bne.n	8003cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d11b      	bne.n	8003cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0208 	mvn.w	r2, #8
 8003c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2204      	movs	r2, #4
 8003c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f899 	bl	8003dca <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f88c 	bl	8003db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f89b 	bl	8003ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d122      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d11b      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0210 	mvn.w	r2, #16
 8003cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2208      	movs	r2, #8
 8003cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f86f 	bl	8003dca <HAL_TIM_IC_CaptureCallback>
 8003cec:	e005      	b.n	8003cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f862 	bl	8003db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f871 	bl	8003ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d10e      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d107      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0201 	mvn.w	r2, #1
 8003d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd f968 	bl	8000ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d36:	2b80      	cmp	r3, #128	; 0x80
 8003d38:	d10e      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d44:	2b80      	cmp	r3, #128	; 0x80
 8003d46:	d107      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f8c9 	bl	8003eea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d10e      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d107      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f835 	bl	8003dee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d10e      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d107      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0220 	mvn.w	r2, #32
 8003da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f894 	bl	8003ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a2d      	ldr	r2, [pc, #180]	; (8003ec8 <TIM_Base_SetConfig+0xc8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00f      	beq.n	8003e38 <TIM_Base_SetConfig+0x38>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1e:	d00b      	beq.n	8003e38 <TIM_Base_SetConfig+0x38>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <TIM_Base_SetConfig+0xcc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d007      	beq.n	8003e38 <TIM_Base_SetConfig+0x38>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a29      	ldr	r2, [pc, #164]	; (8003ed0 <TIM_Base_SetConfig+0xd0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_Base_SetConfig+0x38>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a28      	ldr	r2, [pc, #160]	; (8003ed4 <TIM_Base_SetConfig+0xd4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d108      	bne.n	8003e4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ec8 <TIM_Base_SetConfig+0xc8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00f      	beq.n	8003e72 <TIM_Base_SetConfig+0x72>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e58:	d00b      	beq.n	8003e72 <TIM_Base_SetConfig+0x72>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <TIM_Base_SetConfig+0xcc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d007      	beq.n	8003e72 <TIM_Base_SetConfig+0x72>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a1a      	ldr	r2, [pc, #104]	; (8003ed0 <TIM_Base_SetConfig+0xd0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d003      	beq.n	8003e72 <TIM_Base_SetConfig+0x72>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a19      	ldr	r2, [pc, #100]	; (8003ed4 <TIM_Base_SetConfig+0xd4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d108      	bne.n	8003e84 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a07      	ldr	r2, [pc, #28]	; (8003ec8 <TIM_Base_SetConfig+0xc8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d103      	bne.n	8003eb8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	615a      	str	r2, [r3, #20]
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	40012c00 	.word	0x40012c00
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	40000800 	.word	0x40000800
 8003ed4:	40000c00 	.word	0x40000c00

08003ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e03f      	b.n	8003f8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fd f9a8 	bl	8001278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2224      	movs	r2, #36	; 0x24
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f905 	bl	8004150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b08a      	sub	sp, #40	; 0x28
 8003f9a:	af02      	add	r7, sp, #8
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	603b      	str	r3, [r7, #0]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d17c      	bne.n	80040b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_UART_Transmit+0x2c>
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e075      	b.n	80040b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Transmit+0x3e>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e06e      	b.n	80040b2 <HAL_UART_Transmit+0x11c>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2221      	movs	r2, #33	; 0x21
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fea:	f7fd fab5 	bl	8001558 <HAL_GetTick>
 8003fee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004004:	d108      	bne.n	8004018 <HAL_UART_Transmit+0x82>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	e003      	b.n	8004020 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800401c:	2300      	movs	r3, #0
 800401e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004028:	e02a      	b.n	8004080 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2200      	movs	r2, #0
 8004032:	2180      	movs	r1, #128	; 0x80
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f840 	bl	80040ba <UART_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e036      	b.n	80040b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004058:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	3302      	adds	r3, #2
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	e007      	b.n	8004072 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	3301      	adds	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1cf      	bne.n	800402a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2200      	movs	r2, #0
 8004092:	2140      	movs	r1, #64	; 0x40
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f810 	bl	80040ba <UART_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e006      	b.n	80040b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e000      	b.n	80040b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
  }
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	4613      	mov	r3, r2
 80040c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ca:	e02c      	b.n	8004126 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d2:	d028      	beq.n	8004126 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <UART_WaitOnFlagUntilTimeout+0x30>
 80040da:	f7fd fa3d 	bl	8001558 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d21d      	bcs.n	8004126 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e00f      	b.n	8004146 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4013      	ands	r3, r2
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	429a      	cmp	r2, r3
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	429a      	cmp	r2, r3
 8004142:	d0c3      	beq.n	80040cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800418a:	f023 030c 	bic.w	r3, r3, #12
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	430b      	orrs	r3, r1
 8004196:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a2c      	ldr	r2, [pc, #176]	; (8004264 <UART_SetConfig+0x114>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d103      	bne.n	80041c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041b8:	f7ff f8ca 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	e002      	b.n	80041c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041c0:	f7ff f8b2 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 80041c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	009a      	lsls	r2, r3, #2
 80041d0:	441a      	add	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	4a22      	ldr	r2, [pc, #136]	; (8004268 <UART_SetConfig+0x118>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	0119      	lsls	r1, r3, #4
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	009a      	lsls	r2, r3, #2
 80041f0:	441a      	add	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041fc:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <UART_SetConfig+0x118>)
 80041fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2064      	movs	r0, #100	; 0x64
 8004206:	fb00 f303 	mul.w	r3, r0, r3
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	3332      	adds	r3, #50	; 0x32
 8004210:	4a15      	ldr	r2, [pc, #84]	; (8004268 <UART_SetConfig+0x118>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800421c:	4419      	add	r1, r3
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009a      	lsls	r2, r3, #2
 8004228:	441a      	add	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	fbb2 f2f3 	udiv	r2, r2, r3
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <UART_SetConfig+0x118>)
 8004236:	fba3 0302 	umull	r0, r3, r3, r2
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	2064      	movs	r0, #100	; 0x64
 800423e:	fb00 f303 	mul.w	r3, r0, r3
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	3332      	adds	r3, #50	; 0x32
 8004248:	4a07      	ldr	r2, [pc, #28]	; (8004268 <UART_SetConfig+0x118>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	f003 020f 	and.w	r2, r3, #15
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	440a      	add	r2, r1
 800425a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40013800 	.word	0x40013800
 8004268:	51eb851f 	.word	0x51eb851f

0800426c <makeFreeRtosPriority>:
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800427e:	2b84      	cmp	r3, #132	; 0x84
 8004280:	d005      	beq.n	800428e <makeFreeRtosPriority+0x22>
 8004282:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	3303      	adds	r3, #3
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr

0800429a <osKernelStart>:
 800429a:	b580      	push	{r7, lr}
 800429c:	af00      	add	r7, sp, #0
 800429e:	f000 fad1 	bl	8004844 <vTaskStartScheduler>
 80042a2:	2300      	movs	r3, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <osThreadCreate>:
 80042a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042aa:	b089      	sub	sp, #36	; 0x24
 80042ac:	af04      	add	r7, sp, #16
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d020      	beq.n	80042fc <osThreadCreate+0x54>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d01c      	beq.n	80042fc <osThreadCreate+0x54>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685c      	ldr	r4, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681d      	ldr	r5, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691e      	ldr	r6, [r3, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff ffc9 	bl	800426c <makeFreeRtosPriority>
 80042da:	4601      	mov	r1, r0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6992      	ldr	r2, [r2, #24]
 80042e4:	9202      	str	r2, [sp, #8]
 80042e6:	9301      	str	r3, [sp, #4]
 80042e8:	9100      	str	r1, [sp, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	4632      	mov	r2, r6
 80042ee:	4629      	mov	r1, r5
 80042f0:	4620      	mov	r0, r4
 80042f2:	f000 f8e8 	bl	80044c6 <xTaskCreateStatic>
 80042f6:	4603      	mov	r3, r0
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	e01c      	b.n	8004336 <osThreadCreate+0x8e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685c      	ldr	r4, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681d      	ldr	r5, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	b29e      	uxth	r6, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ffab 	bl	800426c <makeFreeRtosPriority>
 8004316:	4602      	mov	r2, r0
 8004318:	f107 030c 	add.w	r3, r7, #12
 800431c:	9301      	str	r3, [sp, #4]
 800431e:	9200      	str	r2, [sp, #0]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	4632      	mov	r2, r6
 8004324:	4629      	mov	r1, r5
 8004326:	4620      	mov	r0, r4
 8004328:	f000 f929 	bl	800457e <xTaskCreate>
 800432c:	4603      	mov	r3, r0
 800432e:	2b01      	cmp	r3, #1
 8004330:	d001      	beq.n	8004336 <osThreadCreate+0x8e>
 8004332:	2300      	movs	r3, #0
 8004334:	e000      	b.n	8004338 <osThreadCreate+0x90>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004340 <osDelay>:
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <osDelay+0x16>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	e000      	b.n	8004358 <osDelay+0x18>
 8004356:	2301      	movs	r3, #1
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fa3f 	bl	80047dc <vTaskDelay>
 800435e:	2300      	movs	r3, #0
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <vListInitialise>:
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f103 0208 	add.w	r2, r3, #8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f04f 32ff 	mov.w	r2, #4294967295
 8004380:	609a      	str	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f103 0208 	add.w	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f103 0208 	add.w	r2, r3, #8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	611a      	str	r2, [r3, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <vListInitialiseItem>:
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	611a      	str	r2, [r3, #16]
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <vListInsertEnd>:
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	6039      	str	r1, [r7, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	609a      	str	r2, [r3, #8]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	609a      	str	r2, [r3, #8]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	611a      	str	r2, [r3, #16]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	bf00      	nop
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <vListInsert>:
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d103      	bne.n	8004424 <vListInsert+0x20>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e00c      	b.n	800443e <vListInsert+0x3a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3308      	adds	r3, #8
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	e002      	b.n	8004432 <vListInsert+0x2e>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	429a      	cmp	r2, r3
 800443c:	d2f6      	bcs.n	800442c <vListInsert+0x28>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	609a      	str	r2, [r3, #8]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	611a      	str	r2, [r3, #16]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <uxListRemove>:
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6892      	ldr	r2, [r2, #8]
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6852      	ldr	r2, [r2, #4]
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	429a      	cmp	r2, r3
 800449e:	d103      	bne.n	80044a8 <uxListRemove+0x34>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	605a      	str	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	611a      	str	r2, [r3, #16]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	1e5a      	subs	r2, r3, #1
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <xTaskCreateStatic>:
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b08e      	sub	sp, #56	; 0x38
 80044ca:	af04      	add	r7, sp, #16
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <xTaskCreateStatic+0x2a>
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	623b      	str	r3, [r7, #32]
 80044ec:	bf00      	nop
 80044ee:	e7fe      	b.n	80044ee <xTaskCreateStatic+0x28>
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10a      	bne.n	800450c <xTaskCreateStatic+0x46>
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	61fb      	str	r3, [r7, #28]
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <xTaskCreateStatic+0x44>
 800450c:	2354      	movs	r3, #84	; 0x54
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b54      	cmp	r3, #84	; 0x54
 8004514:	d00a      	beq.n	800452c <xTaskCreateStatic+0x66>
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	bf00      	nop
 800452a:	e7fe      	b.n	800452a <xTaskCreateStatic+0x64>
 800452c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01e      	beq.n	8004570 <xTaskCreateStatic+0xaa>
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01b      	beq.n	8004570 <xTaskCreateStatic+0xaa>
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	2202      	movs	r2, #2
 8004546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800454a:	2300      	movs	r3, #0
 800454c:	9303      	str	r3, [sp, #12]
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	9302      	str	r3, [sp, #8]
 8004552:	f107 0314 	add.w	r3, r7, #20
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f850 	bl	8004608 <prvInitialiseNewTask>
 8004568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800456a:	f000 f8cd 	bl	8004708 <prvAddNewTaskToReadyList>
 800456e:	e001      	b.n	8004574 <xTaskCreateStatic+0xae>
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	4618      	mov	r0, r3
 8004578:	3728      	adds	r7, #40	; 0x28
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <xTaskCreate>:
 800457e:	b580      	push	{r7, lr}
 8004580:	b08c      	sub	sp, #48	; 0x30
 8004582:	af04      	add	r7, sp, #16
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	603b      	str	r3, [r7, #0]
 800458a:	4613      	mov	r3, r2
 800458c:	80fb      	strh	r3, [r7, #6]
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fe6c 	bl	8005270 <pvPortMalloc>
 8004598:	6178      	str	r0, [r7, #20]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00e      	beq.n	80045be <xTaskCreate+0x40>
 80045a0:	2054      	movs	r0, #84	; 0x54
 80045a2:	f000 fe65 	bl	8005270 <pvPortMalloc>
 80045a6:	61f8      	str	r0, [r7, #28]
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <xTaskCreate+0x38>
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
 80045b4:	e005      	b.n	80045c2 <xTaskCreate+0x44>
 80045b6:	6978      	ldr	r0, [r7, #20]
 80045b8:	f000 ff1e 	bl	80053f8 <vPortFree>
 80045bc:	e001      	b.n	80045c2 <xTaskCreate+0x44>
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d017      	beq.n	80045f8 <xTaskCreate+0x7a>
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80045d0:	88fa      	ldrh	r2, [r7, #6]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9303      	str	r3, [sp, #12]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	9302      	str	r3, [sp, #8]
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f80e 	bl	8004608 <prvInitialiseNewTask>
 80045ec:	69f8      	ldr	r0, [r7, #28]
 80045ee:	f000 f88b 	bl	8004708 <prvAddNewTaskToReadyList>
 80045f2:	2301      	movs	r3, #1
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e002      	b.n	80045fe <xTaskCreate+0x80>
 80045f8:	f04f 33ff 	mov.w	r3, #4294967295
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	4618      	mov	r0, r3
 8004602:	3720      	adds	r7, #32
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <prvInitialiseNewTask>:
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004620:	3b01      	subs	r3, #1
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	f023 0307 	bic.w	r3, r3, #7
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <prvInitialiseNewTask+0x48>
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <prvInitialiseNewTask+0x46>
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	e012      	b.n	800467c <prvInitialiseNewTask+0x74>
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	4413      	add	r3, r2
 800465c:	7819      	ldrb	r1, [r3, #0]
 800465e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	4413      	add	r3, r2
 8004664:	3334      	adds	r3, #52	; 0x34
 8004666:	460a      	mov	r2, r1
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	4413      	add	r3, r2
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d006      	beq.n	8004684 <prvInitialiseNewTask+0x7c>
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	3301      	adds	r3, #1
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	2b0f      	cmp	r3, #15
 8004680:	d9e9      	bls.n	8004656 <prvInitialiseNewTask+0x4e>
 8004682:	e000      	b.n	8004686 <prvInitialiseNewTask+0x7e>
 8004684:	bf00      	nop
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	2b06      	cmp	r3, #6
 8004692:	d901      	bls.n	8004698 <prvInitialiseNewTask+0x90>
 8004694:	2306      	movs	r3, #6
 8004696:	62bb      	str	r3, [r7, #40]	; 0x28
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800469c:	62da      	str	r2, [r3, #44]	; 0x2c
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	2200      	movs	r2, #0
 80046a8:	649a      	str	r2, [r3, #72]	; 0x48
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	3304      	adds	r3, #4
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fe79 	bl	80043a6 <vListInitialiseItem>
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	3318      	adds	r3, #24
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff fe74 	bl	80043a6 <vListInitialiseItem>
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046c2:	611a      	str	r2, [r3, #16]
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	f1c3 0207 	rsb	r2, r3, #7
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	619a      	str	r2, [r3, #24]
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24
 80046d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d6:	2200      	movs	r2, #0
 80046d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	68f9      	ldr	r1, [r7, #12]
 80046e6:	69b8      	ldr	r0, [r7, #24]
 80046e8:	f000 fc0e 	bl	8004f08 <pxPortInitialiseStack>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <prvInitialiseNewTask+0xf6>
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	bf00      	nop
 8004700:	3720      	adds	r7, #32
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <prvAddNewTaskToReadyList>:
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	f000 fcec 	bl	80050ec <vPortEnterCritical>
 8004714:	4b2a      	ldr	r3, [pc, #168]	; (80047c0 <prvAddNewTaskToReadyList+0xb8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3301      	adds	r3, #1
 800471a:	4a29      	ldr	r2, [pc, #164]	; (80047c0 <prvAddNewTaskToReadyList+0xb8>)
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <prvAddNewTaskToReadyList+0xbc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <prvAddNewTaskToReadyList+0x32>
 8004726:	4a27      	ldr	r2, [pc, #156]	; (80047c4 <prvAddNewTaskToReadyList+0xbc>)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <prvAddNewTaskToReadyList+0xb8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d110      	bne.n	8004756 <prvAddNewTaskToReadyList+0x4e>
 8004734:	f000 fac0 	bl	8004cb8 <prvInitialiseTaskLists>
 8004738:	e00d      	b.n	8004756 <prvAddNewTaskToReadyList+0x4e>
 800473a:	4b23      	ldr	r3, [pc, #140]	; (80047c8 <prvAddNewTaskToReadyList+0xc0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <prvAddNewTaskToReadyList+0x4e>
 8004742:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <prvAddNewTaskToReadyList+0xbc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	429a      	cmp	r2, r3
 800474e:	d802      	bhi.n	8004756 <prvAddNewTaskToReadyList+0x4e>
 8004750:	4a1c      	ldr	r2, [pc, #112]	; (80047c4 <prvAddNewTaskToReadyList+0xbc>)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <prvAddNewTaskToReadyList+0xc4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3301      	adds	r3, #1
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <prvAddNewTaskToReadyList+0xc4>)
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	2201      	movs	r2, #1
 8004766:	409a      	lsls	r2, r3
 8004768:	4b19      	ldr	r3, [pc, #100]	; (80047d0 <prvAddNewTaskToReadyList+0xc8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4313      	orrs	r3, r2
 800476e:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <prvAddNewTaskToReadyList+0xc8>)
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4a15      	ldr	r2, [pc, #84]	; (80047d4 <prvAddNewTaskToReadyList+0xcc>)
 8004780:	441a      	add	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3304      	adds	r3, #4
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f7ff fe18 	bl	80043be <vListInsertEnd>
 800478e:	f000 fcdd 	bl	800514c <vPortExitCritical>
 8004792:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <prvAddNewTaskToReadyList+0xc0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00e      	beq.n	80047b8 <prvAddNewTaskToReadyList+0xb0>
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <prvAddNewTaskToReadyList+0xbc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d207      	bcs.n	80047b8 <prvAddNewTaskToReadyList+0xb0>
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <prvAddNewTaskToReadyList+0xd0>)
 80047aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	bf00      	nop
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20000600 	.word	0x20000600
 80047c4:	20000500 	.word	0x20000500
 80047c8:	2000060c 	.word	0x2000060c
 80047cc:	2000061c 	.word	0x2000061c
 80047d0:	20000608 	.word	0x20000608
 80047d4:	20000504 	.word	0x20000504
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <vTaskDelay>:
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d017      	beq.n	800481e <vTaskDelay+0x42>
 80047ee:	4b13      	ldr	r3, [pc, #76]	; (800483c <vTaskDelay+0x60>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <vTaskDelay+0x30>
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	bf00      	nop
 800480a:	e7fe      	b.n	800480a <vTaskDelay+0x2e>
 800480c:	f000 f87a 	bl	8004904 <vTaskSuspendAll>
 8004810:	2100      	movs	r1, #0
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fb12 	bl	8004e3c <prvAddCurrentTaskToDelayedList>
 8004818:	f000 f882 	bl	8004920 <xTaskResumeAll>
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d107      	bne.n	8004834 <vTaskDelay+0x58>
 8004824:	4b06      	ldr	r3, [pc, #24]	; (8004840 <vTaskDelay+0x64>)
 8004826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	bf00      	nop
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20000628 	.word	0x20000628
 8004840:	e000ed04 	.word	0xe000ed04

08004844 <vTaskStartScheduler>:
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af04      	add	r7, sp, #16
 800484a:	2300      	movs	r3, #0
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	2300      	movs	r3, #0
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	463a      	mov	r2, r7
 8004854:	1d39      	adds	r1, r7, #4
 8004856:	f107 0308 	add.w	r3, r7, #8
 800485a:	4618      	mov	r0, r3
 800485c:	f7fb ffa0 	bl	80007a0 <vApplicationGetIdleTaskMemory>
 8004860:	6839      	ldr	r1, [r7, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	9202      	str	r2, [sp, #8]
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	2300      	movs	r3, #0
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	2300      	movs	r3, #0
 8004870:	460a      	mov	r2, r1
 8004872:	491e      	ldr	r1, [pc, #120]	; (80048ec <vTaskStartScheduler+0xa8>)
 8004874:	481e      	ldr	r0, [pc, #120]	; (80048f0 <vTaskStartScheduler+0xac>)
 8004876:	f7ff fe26 	bl	80044c6 <xTaskCreateStatic>
 800487a:	4603      	mov	r3, r0
 800487c:	4a1d      	ldr	r2, [pc, #116]	; (80048f4 <vTaskStartScheduler+0xb0>)
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <vTaskStartScheduler+0xb0>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <vTaskStartScheduler+0x4a>
 8004888:	2301      	movs	r3, #1
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	e001      	b.n	8004892 <vTaskStartScheduler+0x4e>
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d116      	bne.n	80048c6 <vTaskStartScheduler+0x82>
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	bf00      	nop
 80048ac:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <vTaskStartScheduler+0xb4>)
 80048ae:	f04f 32ff 	mov.w	r2, #4294967295
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	4b11      	ldr	r3, [pc, #68]	; (80048fc <vTaskStartScheduler+0xb8>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <vTaskStartScheduler+0xbc>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	f000 fba2 	bl	8005008 <xPortStartScheduler>
 80048c4:	e00e      	b.n	80048e4 <vTaskStartScheduler+0xa0>
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d10a      	bne.n	80048e4 <vTaskStartScheduler+0xa0>
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	bf00      	nop
 80048e2:	e7fe      	b.n	80048e2 <vTaskStartScheduler+0x9e>
 80048e4:	bf00      	nop
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	0800608c 	.word	0x0800608c
 80048f0:	08004c89 	.word	0x08004c89
 80048f4:	20000624 	.word	0x20000624
 80048f8:	20000620 	.word	0x20000620
 80048fc:	2000060c 	.word	0x2000060c
 8004900:	20000604 	.word	0x20000604

08004904 <vTaskSuspendAll>:
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
 8004908:	4b04      	ldr	r3, [pc, #16]	; (800491c <vTaskSuspendAll+0x18>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3301      	adds	r3, #1
 800490e:	4a03      	ldr	r2, [pc, #12]	; (800491c <vTaskSuspendAll+0x18>)
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	bf00      	nop
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20000628 	.word	0x20000628

08004920 <xTaskResumeAll>:
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	2300      	movs	r3, #0
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	4b41      	ldr	r3, [pc, #260]	; (8004a34 <xTaskResumeAll+0x114>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <xTaskResumeAll+0x2c>
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <xTaskResumeAll+0x2a>
 800494c:	f000 fbce 	bl	80050ec <vPortEnterCritical>
 8004950:	4b38      	ldr	r3, [pc, #224]	; (8004a34 <xTaskResumeAll+0x114>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3b01      	subs	r3, #1
 8004956:	4a37      	ldr	r2, [pc, #220]	; (8004a34 <xTaskResumeAll+0x114>)
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	4b36      	ldr	r3, [pc, #216]	; (8004a34 <xTaskResumeAll+0x114>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d161      	bne.n	8004a26 <xTaskResumeAll+0x106>
 8004962:	4b35      	ldr	r3, [pc, #212]	; (8004a38 <xTaskResumeAll+0x118>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d05d      	beq.n	8004a26 <xTaskResumeAll+0x106>
 800496a:	e02e      	b.n	80049ca <xTaskResumeAll+0xaa>
 800496c:	4b33      	ldr	r3, [pc, #204]	; (8004a3c <xTaskResumeAll+0x11c>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3318      	adds	r3, #24
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fd7b 	bl	8004474 <uxListRemove>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3304      	adds	r3, #4
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fd76 	bl	8004474 <uxListRemove>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	2201      	movs	r2, #1
 800498e:	409a      	lsls	r2, r3
 8004990:	4b2b      	ldr	r3, [pc, #172]	; (8004a40 <xTaskResumeAll+0x120>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4313      	orrs	r3, r2
 8004996:	4a2a      	ldr	r2, [pc, #168]	; (8004a40 <xTaskResumeAll+0x120>)
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4a27      	ldr	r2, [pc, #156]	; (8004a44 <xTaskResumeAll+0x124>)
 80049a8:	441a      	add	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3304      	adds	r3, #4
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f7ff fd04 	bl	80043be <vListInsertEnd>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ba:	4b23      	ldr	r3, [pc, #140]	; (8004a48 <xTaskResumeAll+0x128>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d302      	bcc.n	80049ca <xTaskResumeAll+0xaa>
 80049c4:	4b21      	ldr	r3, [pc, #132]	; (8004a4c <xTaskResumeAll+0x12c>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	4b1c      	ldr	r3, [pc, #112]	; (8004a3c <xTaskResumeAll+0x11c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1cc      	bne.n	800496c <xTaskResumeAll+0x4c>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <xTaskResumeAll+0xbc>
 80049d8:	f000 fa0c 	bl	8004df4 <prvResetNextTaskUnblockTime>
 80049dc:	4b1c      	ldr	r3, [pc, #112]	; (8004a50 <xTaskResumeAll+0x130>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d010      	beq.n	8004a0a <xTaskResumeAll+0xea>
 80049e8:	f000 f836 	bl	8004a58 <xTaskIncrementTick>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <xTaskResumeAll+0xd8>
 80049f2:	4b16      	ldr	r3, [pc, #88]	; (8004a4c <xTaskResumeAll+0x12c>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	607b      	str	r3, [r7, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f1      	bne.n	80049e8 <xTaskResumeAll+0xc8>
 8004a04:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <xTaskResumeAll+0x130>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <xTaskResumeAll+0x12c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <xTaskResumeAll+0x106>
 8004a12:	2301      	movs	r3, #1
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <xTaskResumeAll+0x134>)
 8004a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f000 fb91 	bl	800514c <vPortExitCritical>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000628 	.word	0x20000628
 8004a38:	20000600 	.word	0x20000600
 8004a3c:	200005c0 	.word	0x200005c0
 8004a40:	20000608 	.word	0x20000608
 8004a44:	20000504 	.word	0x20000504
 8004a48:	20000500 	.word	0x20000500
 8004a4c:	20000614 	.word	0x20000614
 8004a50:	20000610 	.word	0x20000610
 8004a54:	e000ed04 	.word	0xe000ed04

08004a58 <xTaskIncrementTick>:
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	4b51      	ldr	r3, [pc, #324]	; (8004ba8 <xTaskIncrementTick+0x150>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f040 808d 	bne.w	8004b86 <xTaskIncrementTick+0x12e>
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	; (8004bac <xTaskIncrementTick+0x154>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3301      	adds	r3, #1
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	4a4d      	ldr	r2, [pc, #308]	; (8004bac <xTaskIncrementTick+0x154>)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d120      	bne.n	8004ac2 <xTaskIncrementTick+0x6a>
 8004a80:	4b4b      	ldr	r3, [pc, #300]	; (8004bb0 <xTaskIncrementTick+0x158>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <xTaskIncrementTick+0x48>
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	bf00      	nop
 8004a9e:	e7fe      	b.n	8004a9e <xTaskIncrementTick+0x46>
 8004aa0:	4b43      	ldr	r3, [pc, #268]	; (8004bb0 <xTaskIncrementTick+0x158>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	4b43      	ldr	r3, [pc, #268]	; (8004bb4 <xTaskIncrementTick+0x15c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a41      	ldr	r2, [pc, #260]	; (8004bb0 <xTaskIncrementTick+0x158>)
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	4a41      	ldr	r2, [pc, #260]	; (8004bb4 <xTaskIncrementTick+0x15c>)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	4b40      	ldr	r3, [pc, #256]	; (8004bb8 <xTaskIncrementTick+0x160>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	4a3f      	ldr	r2, [pc, #252]	; (8004bb8 <xTaskIncrementTick+0x160>)
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	f000 f999 	bl	8004df4 <prvResetNextTaskUnblockTime>
 8004ac2:	4b3e      	ldr	r3, [pc, #248]	; (8004bbc <xTaskIncrementTick+0x164>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d34d      	bcc.n	8004b68 <xTaskIncrementTick+0x110>
 8004acc:	4b38      	ldr	r3, [pc, #224]	; (8004bb0 <xTaskIncrementTick+0x158>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <xTaskIncrementTick+0x82>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <xTaskIncrementTick+0x84>
 8004ada:	2300      	movs	r3, #0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d004      	beq.n	8004aea <xTaskIncrementTick+0x92>
 8004ae0:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <xTaskIncrementTick+0x164>)
 8004ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	e03e      	b.n	8004b68 <xTaskIncrementTick+0x110>
 8004aea:	4b31      	ldr	r3, [pc, #196]	; (8004bb0 <xTaskIncrementTick+0x158>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	607b      	str	r3, [r7, #4]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d203      	bcs.n	8004b0a <xTaskIncrementTick+0xb2>
 8004b02:	4a2e      	ldr	r2, [pc, #184]	; (8004bbc <xTaskIncrementTick+0x164>)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	e02e      	b.n	8004b68 <xTaskIncrementTick+0x110>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fcb0 	bl	8004474 <uxListRemove>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <xTaskIncrementTick+0xce>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	3318      	adds	r3, #24
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff fca7 	bl	8004474 <uxListRemove>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	409a      	lsls	r2, r3
 8004b2e:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <xTaskIncrementTick+0x168>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	4a22      	ldr	r2, [pc, #136]	; (8004bc0 <xTaskIncrementTick+0x168>)
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4a1f      	ldr	r2, [pc, #124]	; (8004bc4 <xTaskIncrementTick+0x16c>)
 8004b46:	441a      	add	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f7ff fc35 	bl	80043be <vListInsertEnd>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b58:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <xTaskIncrementTick+0x170>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d3b4      	bcc.n	8004acc <xTaskIncrementTick+0x74>
 8004b62:	2301      	movs	r3, #1
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	e7b1      	b.n	8004acc <xTaskIncrementTick+0x74>
 8004b68:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <xTaskIncrementTick+0x170>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6e:	4915      	ldr	r1, [pc, #84]	; (8004bc4 <xTaskIncrementTick+0x16c>)
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d907      	bls.n	8004b90 <xTaskIncrementTick+0x138>
 8004b80:	2301      	movs	r3, #1
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	e004      	b.n	8004b90 <xTaskIncrementTick+0x138>
 8004b86:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <xTaskIncrementTick+0x174>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	4a0f      	ldr	r2, [pc, #60]	; (8004bcc <xTaskIncrementTick+0x174>)
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <xTaskIncrementTick+0x178>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <xTaskIncrementTick+0x144>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000628 	.word	0x20000628
 8004bac:	20000604 	.word	0x20000604
 8004bb0:	200005b8 	.word	0x200005b8
 8004bb4:	200005bc 	.word	0x200005bc
 8004bb8:	20000618 	.word	0x20000618
 8004bbc:	20000620 	.word	0x20000620
 8004bc0:	20000608 	.word	0x20000608
 8004bc4:	20000504 	.word	0x20000504
 8004bc8:	20000500 	.word	0x20000500
 8004bcc:	20000610 	.word	0x20000610
 8004bd0:	20000614 	.word	0x20000614

08004bd4 <vTaskSwitchContext>:
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4b26      	ldr	r3, [pc, #152]	; (8004c74 <vTaskSwitchContext+0xa0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <vTaskSwitchContext+0x16>
 8004be2:	4b25      	ldr	r3, [pc, #148]	; (8004c78 <vTaskSwitchContext+0xa4>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	e03f      	b.n	8004c6a <vTaskSwitchContext+0x96>
 8004bea:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <vTaskSwitchContext+0xa4>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	4b22      	ldr	r3, [pc, #136]	; (8004c7c <vTaskSwitchContext+0xa8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	fab3 f383 	clz	r3, r3
 8004bfc:	72fb      	strb	r3, [r7, #11]
 8004bfe:	7afb      	ldrb	r3, [r7, #11]
 8004c00:	f1c3 031f 	rsb	r3, r3, #31
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	491e      	ldr	r1, [pc, #120]	; (8004c80 <vTaskSwitchContext+0xac>)
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10a      	bne.n	8004c30 <vTaskSwitchContext+0x5c>
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	607b      	str	r3, [r7, #4]
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <vTaskSwitchContext+0x5a>
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4a11      	ldr	r2, [pc, #68]	; (8004c80 <vTaskSwitchContext+0xac>)
 8004c3c:	4413      	add	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	605a      	str	r2, [r3, #4]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	3308      	adds	r3, #8
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d104      	bne.n	8004c60 <vTaskSwitchContext+0x8c>
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	605a      	str	r2, [r3, #4]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	4a07      	ldr	r2, [pc, #28]	; (8004c84 <vTaskSwitchContext+0xb0>)
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr
 8004c74:	20000628 	.word	0x20000628
 8004c78:	20000614 	.word	0x20000614
 8004c7c:	20000608 	.word	0x20000608
 8004c80:	20000504 	.word	0x20000504
 8004c84:	20000500 	.word	0x20000500

08004c88 <prvIdleTask>:
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	f000 f852 	bl	8004d38 <prvCheckTasksWaitingTermination>
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <prvIdleTask+0x28>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d9f9      	bls.n	8004c90 <prvIdleTask+0x8>
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <prvIdleTask+0x2c>)
 8004c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	e7f0      	b.n	8004c90 <prvIdleTask+0x8>
 8004cae:	bf00      	nop
 8004cb0:	20000504 	.word	0x20000504
 8004cb4:	e000ed04 	.word	0xe000ed04

08004cb8 <prvInitialiseTaskLists>:
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	e00c      	b.n	8004cde <prvInitialiseTaskLists+0x26>
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <prvInitialiseTaskLists+0x60>)
 8004cd0:	4413      	add	r3, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fb48 	bl	8004368 <vListInitialise>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b06      	cmp	r3, #6
 8004ce2:	d9ef      	bls.n	8004cc4 <prvInitialiseTaskLists+0xc>
 8004ce4:	480d      	ldr	r0, [pc, #52]	; (8004d1c <prvInitialiseTaskLists+0x64>)
 8004ce6:	f7ff fb3f 	bl	8004368 <vListInitialise>
 8004cea:	480d      	ldr	r0, [pc, #52]	; (8004d20 <prvInitialiseTaskLists+0x68>)
 8004cec:	f7ff fb3c 	bl	8004368 <vListInitialise>
 8004cf0:	480c      	ldr	r0, [pc, #48]	; (8004d24 <prvInitialiseTaskLists+0x6c>)
 8004cf2:	f7ff fb39 	bl	8004368 <vListInitialise>
 8004cf6:	480c      	ldr	r0, [pc, #48]	; (8004d28 <prvInitialiseTaskLists+0x70>)
 8004cf8:	f7ff fb36 	bl	8004368 <vListInitialise>
 8004cfc:	480b      	ldr	r0, [pc, #44]	; (8004d2c <prvInitialiseTaskLists+0x74>)
 8004cfe:	f7ff fb33 	bl	8004368 <vListInitialise>
 8004d02:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <prvInitialiseTaskLists+0x78>)
 8004d04:	4a05      	ldr	r2, [pc, #20]	; (8004d1c <prvInitialiseTaskLists+0x64>)
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <prvInitialiseTaskLists+0x7c>)
 8004d0a:	4a05      	ldr	r2, [pc, #20]	; (8004d20 <prvInitialiseTaskLists+0x68>)
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000504 	.word	0x20000504
 8004d1c:	20000590 	.word	0x20000590
 8004d20:	200005a4 	.word	0x200005a4
 8004d24:	200005c0 	.word	0x200005c0
 8004d28:	200005d4 	.word	0x200005d4
 8004d2c:	200005ec 	.word	0x200005ec
 8004d30:	200005b8 	.word	0x200005b8
 8004d34:	200005bc 	.word	0x200005bc

08004d38 <prvCheckTasksWaitingTermination>:
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	e019      	b.n	8004d74 <prvCheckTasksWaitingTermination+0x3c>
 8004d40:	f000 f9d4 	bl	80050ec <vPortEnterCritical>
 8004d44:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <prvCheckTasksWaitingTermination+0x50>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fb8f 	bl	8004474 <uxListRemove>
 8004d56:	4b0d      	ldr	r3, [pc, #52]	; (8004d8c <prvCheckTasksWaitingTermination+0x54>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	4a0b      	ldr	r2, [pc, #44]	; (8004d8c <prvCheckTasksWaitingTermination+0x54>)
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <prvCheckTasksWaitingTermination+0x58>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	4a0a      	ldr	r2, [pc, #40]	; (8004d90 <prvCheckTasksWaitingTermination+0x58>)
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	f000 f9ef 	bl	800514c <vPortExitCritical>
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f810 	bl	8004d94 <prvDeleteTCB>
 8004d74:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <prvCheckTasksWaitingTermination+0x58>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e1      	bne.n	8004d40 <prvCheckTasksWaitingTermination+0x8>
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	200005d4 	.word	0x200005d4
 8004d8c:	20000600 	.word	0x20000600
 8004d90:	200005e8 	.word	0x200005e8

08004d94 <prvDeleteTCB>:
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d108      	bne.n	8004db8 <prvDeleteTCB+0x24>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fb24 	bl	80053f8 <vPortFree>
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fb21 	bl	80053f8 <vPortFree>
 8004db6:	e018      	b.n	8004dea <prvDeleteTCB+0x56>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d103      	bne.n	8004dca <prvDeleteTCB+0x36>
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fb18 	bl	80053f8 <vPortFree>
 8004dc8:	e00f      	b.n	8004dea <prvDeleteTCB+0x56>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d00a      	beq.n	8004dea <prvDeleteTCB+0x56>
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	bf00      	nop
 8004de8:	e7fe      	b.n	8004de8 <prvDeleteTCB+0x54>
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <prvResetNextTaskUnblockTime>:
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <prvResetNextTaskUnblockTime+0x40>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <prvResetNextTaskUnblockTime+0x14>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <prvResetNextTaskUnblockTime+0x16>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d004      	beq.n	8004e18 <prvResetNextTaskUnblockTime+0x24>
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <prvResetNextTaskUnblockTime+0x44>)
 8004e10:	f04f 32ff 	mov.w	r2, #4294967295
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	e008      	b.n	8004e2a <prvResetNextTaskUnblockTime+0x36>
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <prvResetNextTaskUnblockTime+0x40>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	607b      	str	r3, [r7, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	4a04      	ldr	r2, [pc, #16]	; (8004e38 <prvResetNextTaskUnblockTime+0x44>)
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr
 8004e34:	200005b8 	.word	0x200005b8
 8004e38:	20000620 	.word	0x20000620

08004e3c <prvAddCurrentTaskToDelayedList>:
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
 8004e46:	4b29      	ldr	r3, [pc, #164]	; (8004eec <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	4b28      	ldr	r3, [pc, #160]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3304      	adds	r3, #4
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff fb0e 	bl	8004474 <uxListRemove>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10b      	bne.n	8004e76 <prvAddCurrentTaskToDelayedList+0x3a>
 8004e5e:	4b24      	ldr	r3, [pc, #144]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e64:	2201      	movs	r2, #1
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43da      	mvns	r2, r3
 8004e6c:	4b21      	ldr	r3, [pc, #132]	; (8004ef4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4013      	ands	r3, r2
 8004e72:	4a20      	ldr	r2, [pc, #128]	; (8004ef4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7c:	d10a      	bne.n	8004e94 <prvAddCurrentTaskToDelayedList+0x58>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d007      	beq.n	8004e94 <prvAddCurrentTaskToDelayedList+0x58>
 8004e84:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	481a      	ldr	r0, [pc, #104]	; (8004ef8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e8e:	f7ff fa96 	bl	80043be <vListInsertEnd>
 8004e92:	e026      	b.n	8004ee2 <prvAddCurrentTaskToDelayedList+0xa6>
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4413      	add	r3, r2
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	605a      	str	r2, [r3, #4]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d209      	bcs.n	8004ec0 <prvAddCurrentTaskToDelayedList+0x84>
 8004eac:	4b13      	ldr	r3, [pc, #76]	; (8004efc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f7ff faa3 	bl	8004404 <vListInsert>
 8004ebe:	e010      	b.n	8004ee2 <prvAddCurrentTaskToDelayedList+0xa6>
 8004ec0:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f7ff fa99 	bl	8004404 <vListInsert>
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d202      	bcs.n	8004ee2 <prvAddCurrentTaskToDelayedList+0xa6>
 8004edc:	4a09      	ldr	r2, [pc, #36]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000604 	.word	0x20000604
 8004ef0:	20000500 	.word	0x20000500
 8004ef4:	20000608 	.word	0x20000608
 8004ef8:	200005ec 	.word	0x200005ec
 8004efc:	200005bc 	.word	0x200005bc
 8004f00:	200005b8 	.word	0x200005b8
 8004f04:	20000620 	.word	0x20000620

08004f08 <pxPortInitialiseStack>:
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3b04      	subs	r3, #4
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3b04      	subs	r3, #4
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f023 0201 	bic.w	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3b04      	subs	r3, #4
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <pxPortInitialiseStack+0x54>)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3b14      	subs	r3, #20
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3b20      	subs	r3, #32
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr
 8004f5c:	08004f61 	.word	0x08004f61

08004f60 <prvTaskExitError>:
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	2300      	movs	r3, #0
 8004f68:	607b      	str	r3, [r7, #4]
 8004f6a:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <prvTaskExitError+0x54>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d00a      	beq.n	8004f8a <prvTaskExitError+0x2a>
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	bf00      	nop
 8004f88:	e7fe      	b.n	8004f88 <prvTaskExitError+0x28>
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	60bb      	str	r3, [r7, #8]
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0fc      	beq.n	8004fa0 <prvTaskExitError+0x40>
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	2000000c 	.word	0x2000000c
	...

08004fc0 <SVC_Handler>:
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <pxCurrentTCBConst2>)
 8004fc2:	6819      	ldr	r1, [r3, #0]
 8004fc4:	6808      	ldr	r0, [r1, #0]
 8004fc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fca:	f380 8809 	msr	PSP, r0
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f380 8811 	msr	BASEPRI, r0
 8004fda:	f04e 0e0d 	orr.w	lr, lr, #13
 8004fde:	4770      	bx	lr

08004fe0 <pxCurrentTCBConst2>:
 8004fe0:	20000500 	.word	0x20000500
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop

08004fe8 <prvPortStartFirstTask>:
 8004fe8:	4806      	ldr	r0, [pc, #24]	; (8005004 <prvPortStartFirstTask+0x1c>)
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	6800      	ldr	r0, [r0, #0]
 8004fee:	f380 8808 	msr	MSP, r0
 8004ff2:	b662      	cpsie	i
 8004ff4:	b661      	cpsie	f
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	df00      	svc	0
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	e000ed08 	.word	0xe000ed08

08005008 <xPortStartScheduler>:
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	4b32      	ldr	r3, [pc, #200]	; (80050d8 <xPortStartScheduler+0xd0>)
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	607b      	str	r3, [r7, #4]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	22ff      	movs	r2, #255	; 0xff
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	70fb      	strb	r3, [r7, #3]
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005030:	b2da      	uxtb	r2, r3
 8005032:	4b2a      	ldr	r3, [pc, #168]	; (80050dc <xPortStartScheduler+0xd4>)
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	4b2a      	ldr	r3, [pc, #168]	; (80050e0 <xPortStartScheduler+0xd8>)
 8005038:	2207      	movs	r2, #7
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	e009      	b.n	8005052 <xPortStartScheduler+0x4a>
 800503e:	4b28      	ldr	r3, [pc, #160]	; (80050e0 <xPortStartScheduler+0xd8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3b01      	subs	r3, #1
 8005044:	4a26      	ldr	r2, [pc, #152]	; (80050e0 <xPortStartScheduler+0xd8>)
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	b2db      	uxtb	r3, r3
 8005050:	70fb      	strb	r3, [r7, #3]
 8005052:	78fb      	ldrb	r3, [r7, #3]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b80      	cmp	r3, #128	; 0x80
 800505c:	d0ef      	beq.n	800503e <xPortStartScheduler+0x36>
 800505e:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <xPortStartScheduler+0xd8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f1c3 0307 	rsb	r3, r3, #7
 8005066:	2b04      	cmp	r3, #4
 8005068:	d00a      	beq.n	8005080 <xPortStartScheduler+0x78>
 800506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	bf00      	nop
 800507e:	e7fe      	b.n	800507e <xPortStartScheduler+0x76>
 8005080:	4b17      	ldr	r3, [pc, #92]	; (80050e0 <xPortStartScheduler+0xd8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	021b      	lsls	r3, r3, #8
 8005086:	4a16      	ldr	r2, [pc, #88]	; (80050e0 <xPortStartScheduler+0xd8>)
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <xPortStartScheduler+0xd8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005092:	4a13      	ldr	r2, [pc, #76]	; (80050e0 <xPortStartScheduler+0xd8>)
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	b2da      	uxtb	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	4b11      	ldr	r3, [pc, #68]	; (80050e4 <xPortStartScheduler+0xdc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a10      	ldr	r2, [pc, #64]	; (80050e4 <xPortStartScheduler+0xdc>)
 80050a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <xPortStartScheduler+0xdc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a0d      	ldr	r2, [pc, #52]	; (80050e4 <xPortStartScheduler+0xdc>)
 80050b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	f000 f8b9 	bl	800522c <vPortSetupTimerInterrupt>
 80050ba:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <xPortStartScheduler+0xe0>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	f7ff ff92 	bl	8004fe8 <prvPortStartFirstTask>
 80050c4:	f7ff fd86 	bl	8004bd4 <vTaskSwitchContext>
 80050c8:	f7ff ff4a 	bl	8004f60 <prvTaskExitError>
 80050cc:	2300      	movs	r3, #0
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	e000e400 	.word	0xe000e400
 80050dc:	2000062c 	.word	0x2000062c
 80050e0:	20000630 	.word	0x20000630
 80050e4:	e000ed20 	.word	0xe000ed20
 80050e8:	2000000c 	.word	0x2000000c

080050ec <vPortEnterCritical>:
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	bf00      	nop
 8005106:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <vPortEnterCritical+0x58>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3301      	adds	r3, #1
 800510c:	4a0d      	ldr	r2, [pc, #52]	; (8005144 <vPortEnterCritical+0x58>)
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <vPortEnterCritical+0x58>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d10f      	bne.n	8005138 <vPortEnterCritical+0x4c>
 8005118:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <vPortEnterCritical+0x5c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <vPortEnterCritical+0x4c>
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	bf00      	nop
 8005136:	e7fe      	b.n	8005136 <vPortEnterCritical+0x4a>
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	2000000c 	.word	0x2000000c
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <vPortExitCritical>:
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	4b11      	ldr	r3, [pc, #68]	; (8005198 <vPortExitCritical+0x4c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10a      	bne.n	8005170 <vPortExitCritical+0x24>
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	607b      	str	r3, [r7, #4]
 800516c:	bf00      	nop
 800516e:	e7fe      	b.n	800516e <vPortExitCritical+0x22>
 8005170:	4b09      	ldr	r3, [pc, #36]	; (8005198 <vPortExitCritical+0x4c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3b01      	subs	r3, #1
 8005176:	4a08      	ldr	r2, [pc, #32]	; (8005198 <vPortExitCritical+0x4c>)
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	4b07      	ldr	r3, [pc, #28]	; (8005198 <vPortExitCritical+0x4c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d105      	bne.n	800518e <vPortExitCritical+0x42>
 8005182:	2300      	movs	r3, #0
 8005184:	603b      	str	r3, [r7, #0]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	bf00      	nop
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr
 8005198:	2000000c 	.word	0x2000000c
 800519c:	00000000 	.word	0x00000000

080051a0 <PendSV_Handler>:
 80051a0:	f3ef 8009 	mrs	r0, PSP
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <pxCurrentTCBConst>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051b0:	6010      	str	r0, [r2, #0]
 80051b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80051b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051ba:	f380 8811 	msr	BASEPRI, r0
 80051be:	f7ff fd09 	bl	8004bd4 <vTaskSwitchContext>
 80051c2:	f04f 0000 	mov.w	r0, #0
 80051c6:	f380 8811 	msr	BASEPRI, r0
 80051ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	6808      	ldr	r0, [r1, #0]
 80051d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051d6:	f380 8809 	msr	PSP, r0
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	4770      	bx	lr

080051e0 <pxCurrentTCBConst>:
 80051e0:	20000500 	.word	0x20000500
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop

080051e8 <SysTick_Handler>:
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	607b      	str	r3, [r7, #4]
 8005200:	bf00      	nop
 8005202:	f7ff fc29 	bl	8004a58 <xTaskIncrementTick>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <SysTick_Handler+0x2c>
 800520c:	4b06      	ldr	r3, [pc, #24]	; (8005228 <SysTick_Handler+0x40>)
 800520e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	2300      	movs	r3, #0
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	bf00      	nop
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	e000ed04 	.word	0xe000ed04

0800522c <vPortSetupTimerInterrupt>:
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
 8005230:	4b0a      	ldr	r3, [pc, #40]	; (800525c <vPortSetupTimerInterrupt+0x30>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <vPortSetupTimerInterrupt+0x34>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	4b09      	ldr	r3, [pc, #36]	; (8005264 <vPortSetupTimerInterrupt+0x38>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a09      	ldr	r2, [pc, #36]	; (8005268 <vPortSetupTimerInterrupt+0x3c>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	099b      	lsrs	r3, r3, #6
 8005248:	4a08      	ldr	r2, [pc, #32]	; (800526c <vPortSetupTimerInterrupt+0x40>)
 800524a:	3b01      	subs	r3, #1
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	4b03      	ldr	r3, [pc, #12]	; (800525c <vPortSetupTimerInterrupt+0x30>)
 8005250:	2207      	movs	r2, #7
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr
 800525c:	e000e010 	.word	0xe000e010
 8005260:	e000e018 	.word	0xe000e018
 8005264:	20000000 	.word	0x20000000
 8005268:	10624dd3 	.word	0x10624dd3
 800526c:	e000e014 	.word	0xe000e014

08005270 <pvPortMalloc>:
 8005270:	b580      	push	{r7, lr}
 8005272:	b08a      	sub	sp, #40	; 0x28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	2300      	movs	r3, #0
 800527a:	61fb      	str	r3, [r7, #28]
 800527c:	f7ff fb42 	bl	8004904 <vTaskSuspendAll>
 8005280:	4b58      	ldr	r3, [pc, #352]	; (80053e4 <pvPortMalloc+0x174>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <pvPortMalloc+0x1c>
 8005288:	f000 f910 	bl	80054ac <prvHeapInit>
 800528c:	4b56      	ldr	r3, [pc, #344]	; (80053e8 <pvPortMalloc+0x178>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4013      	ands	r3, r2
 8005294:	2b00      	cmp	r3, #0
 8005296:	f040 808e 	bne.w	80053b6 <pvPortMalloc+0x146>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01d      	beq.n	80052dc <pvPortMalloc+0x6c>
 80052a0:	2208      	movs	r2, #8
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4413      	add	r3, r2
 80052a6:	607b      	str	r3, [r7, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d014      	beq.n	80052dc <pvPortMalloc+0x6c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f023 0307 	bic.w	r3, r3, #7
 80052b8:	3308      	adds	r3, #8
 80052ba:	607b      	str	r3, [r7, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <pvPortMalloc+0x6c>
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <pvPortMalloc+0x6a>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d069      	beq.n	80053b6 <pvPortMalloc+0x146>
 80052e2:	4b42      	ldr	r3, [pc, #264]	; (80053ec <pvPortMalloc+0x17c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d864      	bhi.n	80053b6 <pvPortMalloc+0x146>
 80052ec:	4b40      	ldr	r3, [pc, #256]	; (80053f0 <pvPortMalloc+0x180>)
 80052ee:	623b      	str	r3, [r7, #32]
 80052f0:	4b3f      	ldr	r3, [pc, #252]	; (80053f0 <pvPortMalloc+0x180>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
 80052f6:	e004      	b.n	8005302 <pvPortMalloc+0x92>
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	623b      	str	r3, [r7, #32]
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	429a      	cmp	r2, r3
 800530a:	d903      	bls.n	8005314 <pvPortMalloc+0xa4>
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f1      	bne.n	80052f8 <pvPortMalloc+0x88>
 8005314:	4b33      	ldr	r3, [pc, #204]	; (80053e4 <pvPortMalloc+0x174>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531a:	429a      	cmp	r2, r3
 800531c:	d04b      	beq.n	80053b6 <pvPortMalloc+0x146>
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2208      	movs	r2, #8
 8005324:	4413      	add	r3, r2
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	1ad2      	subs	r2, r2, r3
 8005338:	2308      	movs	r3, #8
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	429a      	cmp	r2, r3
 800533e:	d91f      	bls.n	8005380 <pvPortMalloc+0x110>
 8005340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4413      	add	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <pvPortMalloc+0xf8>
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <pvPortMalloc+0xf6>
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	1ad2      	subs	r2, r2, r3
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	605a      	str	r2, [r3, #4]
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	69b8      	ldr	r0, [r7, #24]
 800537c:	f000 f8f8 	bl	8005570 <prvInsertBlockIntoFreeList>
 8005380:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <pvPortMalloc+0x17c>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	4a18      	ldr	r2, [pc, #96]	; (80053ec <pvPortMalloc+0x17c>)
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	4b17      	ldr	r3, [pc, #92]	; (80053ec <pvPortMalloc+0x17c>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b18      	ldr	r3, [pc, #96]	; (80053f4 <pvPortMalloc+0x184>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d203      	bcs.n	80053a2 <pvPortMalloc+0x132>
 800539a:	4b14      	ldr	r3, [pc, #80]	; (80053ec <pvPortMalloc+0x17c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a15      	ldr	r2, [pc, #84]	; (80053f4 <pvPortMalloc+0x184>)
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <pvPortMalloc+0x178>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	605a      	str	r2, [r3, #4]
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	f7ff fab3 	bl	8004920 <xTaskResumeAll>
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <pvPortMalloc+0x16a>
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <pvPortMalloc+0x168>
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	4618      	mov	r0, r3
 80053de:	3728      	adds	r7, #40	; 0x28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	2000163c 	.word	0x2000163c
 80053e8:	20001648 	.word	0x20001648
 80053ec:	20001640 	.word	0x20001640
 80053f0:	20001634 	.word	0x20001634
 80053f4:	20001644 	.word	0x20001644

080053f8 <vPortFree>:
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d048      	beq.n	800549c <vPortFree+0xa4>
 800540a:	2308      	movs	r3, #8
 800540c:	425b      	negs	r3, r3
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4413      	add	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	4b21      	ldr	r3, [pc, #132]	; (80054a4 <vPortFree+0xac>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4013      	ands	r3, r2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <vPortFree+0x44>
 8005426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	bf00      	nop
 800543a:	e7fe      	b.n	800543a <vPortFree+0x42>
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <vPortFree+0x62>
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	bf00      	nop
 8005458:	e7fe      	b.n	8005458 <vPortFree+0x60>
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <vPortFree+0xac>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4013      	ands	r3, r2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d019      	beq.n	800549c <vPortFree+0xa4>
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d115      	bne.n	800549c <vPortFree+0xa4>
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <vPortFree+0xac>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	43db      	mvns	r3, r3
 800547a:	401a      	ands	r2, r3
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	605a      	str	r2, [r3, #4]
 8005480:	f7ff fa40 	bl	8004904 <vTaskSuspendAll>
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <vPortFree+0xb0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4413      	add	r3, r2
 800548e:	4a06      	ldr	r2, [pc, #24]	; (80054a8 <vPortFree+0xb0>)
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	6938      	ldr	r0, [r7, #16]
 8005494:	f000 f86c 	bl	8005570 <prvInsertBlockIntoFreeList>
 8005498:	f7ff fa42 	bl	8004920 <xTaskResumeAll>
 800549c:	bf00      	nop
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	20001648 	.word	0x20001648
 80054a8:	20001640 	.word	0x20001640

080054ac <prvHeapInit>:
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054b6:	60bb      	str	r3, [r7, #8]
 80054b8:	4b27      	ldr	r3, [pc, #156]	; (8005558 <prvHeapInit+0xac>)
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00c      	beq.n	80054e0 <prvHeapInit+0x34>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3307      	adds	r3, #7
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0307 	bic.w	r3, r3, #7
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <prvHeapInit+0xac>)
 80054dc:	4413      	add	r3, r2
 80054de:	60bb      	str	r3, [r7, #8]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	607b      	str	r3, [r7, #4]
 80054e4:	4a1d      	ldr	r2, [pc, #116]	; (800555c <prvHeapInit+0xb0>)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b1c      	ldr	r3, [pc, #112]	; (800555c <prvHeapInit+0xb0>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	605a      	str	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	4413      	add	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	2208      	movs	r2, #8
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0307 	bic.w	r3, r3, #7
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4a15      	ldr	r2, [pc, #84]	; (8005560 <prvHeapInit+0xb4>)
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	4b14      	ldr	r3, [pc, #80]	; (8005560 <prvHeapInit+0xb4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2200      	movs	r2, #0
 8005514:	605a      	str	r2, [r3, #4]
 8005516:	4b12      	ldr	r3, [pc, #72]	; (8005560 <prvHeapInit+0xb4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	1ad2      	subs	r2, r2, r3
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	605a      	str	r2, [r3, #4]
 800552c:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <prvHeapInit+0xb4>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	4a0a      	ldr	r2, [pc, #40]	; (8005564 <prvHeapInit+0xb8>)
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4a09      	ldr	r2, [pc, #36]	; (8005568 <prvHeapInit+0xbc>)
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	4b09      	ldr	r3, [pc, #36]	; (800556c <prvHeapInit+0xc0>)
 8005546:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	bf00      	nop
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	bc80      	pop	{r7}
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20000634 	.word	0x20000634
 800555c:	20001634 	.word	0x20001634
 8005560:	2000163c 	.word	0x2000163c
 8005564:	20001644 	.word	0x20001644
 8005568:	20001640 	.word	0x20001640
 800556c:	20001648 	.word	0x20001648

08005570 <prvInsertBlockIntoFreeList>:
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	4b27      	ldr	r3, [pc, #156]	; (8005618 <prvInsertBlockIntoFreeList+0xa8>)
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	e002      	b.n	8005584 <prvInsertBlockIntoFreeList+0x14>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	429a      	cmp	r2, r3
 800558c:	d8f7      	bhi.n	800557e <prvInsertBlockIntoFreeList+0xe>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	4413      	add	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	d108      	bne.n	80055b2 <prvInsertBlockIntoFreeList+0x42>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	441a      	add	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	441a      	add	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d118      	bne.n	80055f8 <prvInsertBlockIntoFreeList+0x88>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4b14      	ldr	r3, [pc, #80]	; (800561c <prvInsertBlockIntoFreeList+0xac>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d00d      	beq.n	80055ee <prvInsertBlockIntoFreeList+0x7e>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	441a      	add	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	605a      	str	r2, [r3, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	e008      	b.n	8005600 <prvInsertBlockIntoFreeList+0x90>
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <prvInsertBlockIntoFreeList+0xac>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e003      	b.n	8005600 <prvInsertBlockIntoFreeList+0x90>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d002      	beq.n	800560e <prvInsertBlockIntoFreeList+0x9e>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr
 8005618:	20001634 	.word	0x20001634
 800561c:	2000163c 	.word	0x2000163c

08005620 <__errno>:
 8005620:	4b01      	ldr	r3, [pc, #4]	; (8005628 <__errno+0x8>)
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000010 	.word	0x20000010

0800562c <__libc_init_array>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	2600      	movs	r6, #0
 8005630:	4d0c      	ldr	r5, [pc, #48]	; (8005664 <__libc_init_array+0x38>)
 8005632:	4c0d      	ldr	r4, [pc, #52]	; (8005668 <__libc_init_array+0x3c>)
 8005634:	1b64      	subs	r4, r4, r5
 8005636:	10a4      	asrs	r4, r4, #2
 8005638:	42a6      	cmp	r6, r4
 800563a:	d109      	bne.n	8005650 <__libc_init_array+0x24>
 800563c:	f000 fc9c 	bl	8005f78 <_init>
 8005640:	2600      	movs	r6, #0
 8005642:	4d0a      	ldr	r5, [pc, #40]	; (800566c <__libc_init_array+0x40>)
 8005644:	4c0a      	ldr	r4, [pc, #40]	; (8005670 <__libc_init_array+0x44>)
 8005646:	1b64      	subs	r4, r4, r5
 8005648:	10a4      	asrs	r4, r4, #2
 800564a:	42a6      	cmp	r6, r4
 800564c:	d105      	bne.n	800565a <__libc_init_array+0x2e>
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f855 3b04 	ldr.w	r3, [r5], #4
 8005654:	4798      	blx	r3
 8005656:	3601      	adds	r6, #1
 8005658:	e7ee      	b.n	8005638 <__libc_init_array+0xc>
 800565a:	f855 3b04 	ldr.w	r3, [r5], #4
 800565e:	4798      	blx	r3
 8005660:	3601      	adds	r6, #1
 8005662:	e7f2      	b.n	800564a <__libc_init_array+0x1e>
 8005664:	080060e8 	.word	0x080060e8
 8005668:	080060e8 	.word	0x080060e8
 800566c:	080060e8 	.word	0x080060e8
 8005670:	080060ec 	.word	0x080060ec

08005674 <memcpy>:
 8005674:	440a      	add	r2, r1
 8005676:	4291      	cmp	r1, r2
 8005678:	f100 33ff 	add.w	r3, r0, #4294967295
 800567c:	d100      	bne.n	8005680 <memcpy+0xc>
 800567e:	4770      	bx	lr
 8005680:	b510      	push	{r4, lr}
 8005682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005686:	4291      	cmp	r1, r2
 8005688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800568c:	d1f9      	bne.n	8005682 <memcpy+0xe>
 800568e:	bd10      	pop	{r4, pc}

08005690 <memset>:
 8005690:	4603      	mov	r3, r0
 8005692:	4402      	add	r2, r0
 8005694:	4293      	cmp	r3, r2
 8005696:	d100      	bne.n	800569a <memset+0xa>
 8005698:	4770      	bx	lr
 800569a:	f803 1b01 	strb.w	r1, [r3], #1
 800569e:	e7f9      	b.n	8005694 <memset+0x4>

080056a0 <siprintf>:
 80056a0:	b40e      	push	{r1, r2, r3}
 80056a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056a6:	b500      	push	{lr}
 80056a8:	b09c      	sub	sp, #112	; 0x70
 80056aa:	ab1d      	add	r3, sp, #116	; 0x74
 80056ac:	9002      	str	r0, [sp, #8]
 80056ae:	9006      	str	r0, [sp, #24]
 80056b0:	9107      	str	r1, [sp, #28]
 80056b2:	9104      	str	r1, [sp, #16]
 80056b4:	4808      	ldr	r0, [pc, #32]	; (80056d8 <siprintf+0x38>)
 80056b6:	4909      	ldr	r1, [pc, #36]	; (80056dc <siprintf+0x3c>)
 80056b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80056bc:	9105      	str	r1, [sp, #20]
 80056be:	6800      	ldr	r0, [r0, #0]
 80056c0:	a902      	add	r1, sp, #8
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	f000 f868 	bl	8005798 <_svfiprintf_r>
 80056c8:	2200      	movs	r2, #0
 80056ca:	9b02      	ldr	r3, [sp, #8]
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	b01c      	add	sp, #112	; 0x70
 80056d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056d4:	b003      	add	sp, #12
 80056d6:	4770      	bx	lr
 80056d8:	20000010 	.word	0x20000010
 80056dc:	ffff0208 	.word	0xffff0208

080056e0 <__ssputs_r>:
 80056e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056e4:	688e      	ldr	r6, [r1, #8]
 80056e6:	4682      	mov	sl, r0
 80056e8:	429e      	cmp	r6, r3
 80056ea:	460c      	mov	r4, r1
 80056ec:	4690      	mov	r8, r2
 80056ee:	461f      	mov	r7, r3
 80056f0:	d838      	bhi.n	8005764 <__ssputs_r+0x84>
 80056f2:	898a      	ldrh	r2, [r1, #12]
 80056f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056f8:	d032      	beq.n	8005760 <__ssputs_r+0x80>
 80056fa:	6825      	ldr	r5, [r4, #0]
 80056fc:	6909      	ldr	r1, [r1, #16]
 80056fe:	3301      	adds	r3, #1
 8005700:	eba5 0901 	sub.w	r9, r5, r1
 8005704:	6965      	ldr	r5, [r4, #20]
 8005706:	444b      	add	r3, r9
 8005708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800570c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005710:	106d      	asrs	r5, r5, #1
 8005712:	429d      	cmp	r5, r3
 8005714:	bf38      	it	cc
 8005716:	461d      	movcc	r5, r3
 8005718:	0553      	lsls	r3, r2, #21
 800571a:	d531      	bpl.n	8005780 <__ssputs_r+0xa0>
 800571c:	4629      	mov	r1, r5
 800571e:	f000 fb61 	bl	8005de4 <_malloc_r>
 8005722:	4606      	mov	r6, r0
 8005724:	b950      	cbnz	r0, 800573c <__ssputs_r+0x5c>
 8005726:	230c      	movs	r3, #12
 8005728:	f04f 30ff 	mov.w	r0, #4294967295
 800572c:	f8ca 3000 	str.w	r3, [sl]
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005736:	81a3      	strh	r3, [r4, #12]
 8005738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800573c:	464a      	mov	r2, r9
 800573e:	6921      	ldr	r1, [r4, #16]
 8005740:	f7ff ff98 	bl	8005674 <memcpy>
 8005744:	89a3      	ldrh	r3, [r4, #12]
 8005746:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800574a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800574e:	81a3      	strh	r3, [r4, #12]
 8005750:	6126      	str	r6, [r4, #16]
 8005752:	444e      	add	r6, r9
 8005754:	6026      	str	r6, [r4, #0]
 8005756:	463e      	mov	r6, r7
 8005758:	6165      	str	r5, [r4, #20]
 800575a:	eba5 0509 	sub.w	r5, r5, r9
 800575e:	60a5      	str	r5, [r4, #8]
 8005760:	42be      	cmp	r6, r7
 8005762:	d900      	bls.n	8005766 <__ssputs_r+0x86>
 8005764:	463e      	mov	r6, r7
 8005766:	4632      	mov	r2, r6
 8005768:	4641      	mov	r1, r8
 800576a:	6820      	ldr	r0, [r4, #0]
 800576c:	f000 fab8 	bl	8005ce0 <memmove>
 8005770:	68a3      	ldr	r3, [r4, #8]
 8005772:	2000      	movs	r0, #0
 8005774:	1b9b      	subs	r3, r3, r6
 8005776:	60a3      	str	r3, [r4, #8]
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	4433      	add	r3, r6
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	e7db      	b.n	8005738 <__ssputs_r+0x58>
 8005780:	462a      	mov	r2, r5
 8005782:	f000 fba3 	bl	8005ecc <_realloc_r>
 8005786:	4606      	mov	r6, r0
 8005788:	2800      	cmp	r0, #0
 800578a:	d1e1      	bne.n	8005750 <__ssputs_r+0x70>
 800578c:	4650      	mov	r0, sl
 800578e:	6921      	ldr	r1, [r4, #16]
 8005790:	f000 fac0 	bl	8005d14 <_free_r>
 8005794:	e7c7      	b.n	8005726 <__ssputs_r+0x46>
	...

08005798 <_svfiprintf_r>:
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	4698      	mov	r8, r3
 800579e:	898b      	ldrh	r3, [r1, #12]
 80057a0:	4607      	mov	r7, r0
 80057a2:	061b      	lsls	r3, r3, #24
 80057a4:	460d      	mov	r5, r1
 80057a6:	4614      	mov	r4, r2
 80057a8:	b09d      	sub	sp, #116	; 0x74
 80057aa:	d50e      	bpl.n	80057ca <_svfiprintf_r+0x32>
 80057ac:	690b      	ldr	r3, [r1, #16]
 80057ae:	b963      	cbnz	r3, 80057ca <_svfiprintf_r+0x32>
 80057b0:	2140      	movs	r1, #64	; 0x40
 80057b2:	f000 fb17 	bl	8005de4 <_malloc_r>
 80057b6:	6028      	str	r0, [r5, #0]
 80057b8:	6128      	str	r0, [r5, #16]
 80057ba:	b920      	cbnz	r0, 80057c6 <_svfiprintf_r+0x2e>
 80057bc:	230c      	movs	r3, #12
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	f04f 30ff 	mov.w	r0, #4294967295
 80057c4:	e0d1      	b.n	800596a <_svfiprintf_r+0x1d2>
 80057c6:	2340      	movs	r3, #64	; 0x40
 80057c8:	616b      	str	r3, [r5, #20]
 80057ca:	2300      	movs	r3, #0
 80057cc:	9309      	str	r3, [sp, #36]	; 0x24
 80057ce:	2320      	movs	r3, #32
 80057d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057d4:	2330      	movs	r3, #48	; 0x30
 80057d6:	f04f 0901 	mov.w	r9, #1
 80057da:	f8cd 800c 	str.w	r8, [sp, #12]
 80057de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005984 <_svfiprintf_r+0x1ec>
 80057e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057e6:	4623      	mov	r3, r4
 80057e8:	469a      	mov	sl, r3
 80057ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057ee:	b10a      	cbz	r2, 80057f4 <_svfiprintf_r+0x5c>
 80057f0:	2a25      	cmp	r2, #37	; 0x25
 80057f2:	d1f9      	bne.n	80057e8 <_svfiprintf_r+0x50>
 80057f4:	ebba 0b04 	subs.w	fp, sl, r4
 80057f8:	d00b      	beq.n	8005812 <_svfiprintf_r+0x7a>
 80057fa:	465b      	mov	r3, fp
 80057fc:	4622      	mov	r2, r4
 80057fe:	4629      	mov	r1, r5
 8005800:	4638      	mov	r0, r7
 8005802:	f7ff ff6d 	bl	80056e0 <__ssputs_r>
 8005806:	3001      	adds	r0, #1
 8005808:	f000 80aa 	beq.w	8005960 <_svfiprintf_r+0x1c8>
 800580c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800580e:	445a      	add	r2, fp
 8005810:	9209      	str	r2, [sp, #36]	; 0x24
 8005812:	f89a 3000 	ldrb.w	r3, [sl]
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 80a2 	beq.w	8005960 <_svfiprintf_r+0x1c8>
 800581c:	2300      	movs	r3, #0
 800581e:	f04f 32ff 	mov.w	r2, #4294967295
 8005822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005826:	f10a 0a01 	add.w	sl, sl, #1
 800582a:	9304      	str	r3, [sp, #16]
 800582c:	9307      	str	r3, [sp, #28]
 800582e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005832:	931a      	str	r3, [sp, #104]	; 0x68
 8005834:	4654      	mov	r4, sl
 8005836:	2205      	movs	r2, #5
 8005838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800583c:	4851      	ldr	r0, [pc, #324]	; (8005984 <_svfiprintf_r+0x1ec>)
 800583e:	f000 fa41 	bl	8005cc4 <memchr>
 8005842:	9a04      	ldr	r2, [sp, #16]
 8005844:	b9d8      	cbnz	r0, 800587e <_svfiprintf_r+0xe6>
 8005846:	06d0      	lsls	r0, r2, #27
 8005848:	bf44      	itt	mi
 800584a:	2320      	movmi	r3, #32
 800584c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005850:	0711      	lsls	r1, r2, #28
 8005852:	bf44      	itt	mi
 8005854:	232b      	movmi	r3, #43	; 0x2b
 8005856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800585a:	f89a 3000 	ldrb.w	r3, [sl]
 800585e:	2b2a      	cmp	r3, #42	; 0x2a
 8005860:	d015      	beq.n	800588e <_svfiprintf_r+0xf6>
 8005862:	4654      	mov	r4, sl
 8005864:	2000      	movs	r0, #0
 8005866:	f04f 0c0a 	mov.w	ip, #10
 800586a:	9a07      	ldr	r2, [sp, #28]
 800586c:	4621      	mov	r1, r4
 800586e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005872:	3b30      	subs	r3, #48	; 0x30
 8005874:	2b09      	cmp	r3, #9
 8005876:	d94e      	bls.n	8005916 <_svfiprintf_r+0x17e>
 8005878:	b1b0      	cbz	r0, 80058a8 <_svfiprintf_r+0x110>
 800587a:	9207      	str	r2, [sp, #28]
 800587c:	e014      	b.n	80058a8 <_svfiprintf_r+0x110>
 800587e:	eba0 0308 	sub.w	r3, r0, r8
 8005882:	fa09 f303 	lsl.w	r3, r9, r3
 8005886:	4313      	orrs	r3, r2
 8005888:	46a2      	mov	sl, r4
 800588a:	9304      	str	r3, [sp, #16]
 800588c:	e7d2      	b.n	8005834 <_svfiprintf_r+0x9c>
 800588e:	9b03      	ldr	r3, [sp, #12]
 8005890:	1d19      	adds	r1, r3, #4
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	9103      	str	r1, [sp, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	bfbb      	ittet	lt
 800589a:	425b      	neglt	r3, r3
 800589c:	f042 0202 	orrlt.w	r2, r2, #2
 80058a0:	9307      	strge	r3, [sp, #28]
 80058a2:	9307      	strlt	r3, [sp, #28]
 80058a4:	bfb8      	it	lt
 80058a6:	9204      	strlt	r2, [sp, #16]
 80058a8:	7823      	ldrb	r3, [r4, #0]
 80058aa:	2b2e      	cmp	r3, #46	; 0x2e
 80058ac:	d10c      	bne.n	80058c8 <_svfiprintf_r+0x130>
 80058ae:	7863      	ldrb	r3, [r4, #1]
 80058b0:	2b2a      	cmp	r3, #42	; 0x2a
 80058b2:	d135      	bne.n	8005920 <_svfiprintf_r+0x188>
 80058b4:	9b03      	ldr	r3, [sp, #12]
 80058b6:	3402      	adds	r4, #2
 80058b8:	1d1a      	adds	r2, r3, #4
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	9203      	str	r2, [sp, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	bfb8      	it	lt
 80058c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80058c6:	9305      	str	r3, [sp, #20]
 80058c8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005988 <_svfiprintf_r+0x1f0>
 80058cc:	2203      	movs	r2, #3
 80058ce:	4650      	mov	r0, sl
 80058d0:	7821      	ldrb	r1, [r4, #0]
 80058d2:	f000 f9f7 	bl	8005cc4 <memchr>
 80058d6:	b140      	cbz	r0, 80058ea <_svfiprintf_r+0x152>
 80058d8:	2340      	movs	r3, #64	; 0x40
 80058da:	eba0 000a 	sub.w	r0, r0, sl
 80058de:	fa03 f000 	lsl.w	r0, r3, r0
 80058e2:	9b04      	ldr	r3, [sp, #16]
 80058e4:	3401      	adds	r4, #1
 80058e6:	4303      	orrs	r3, r0
 80058e8:	9304      	str	r3, [sp, #16]
 80058ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ee:	2206      	movs	r2, #6
 80058f0:	4826      	ldr	r0, [pc, #152]	; (800598c <_svfiprintf_r+0x1f4>)
 80058f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058f6:	f000 f9e5 	bl	8005cc4 <memchr>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d038      	beq.n	8005970 <_svfiprintf_r+0x1d8>
 80058fe:	4b24      	ldr	r3, [pc, #144]	; (8005990 <_svfiprintf_r+0x1f8>)
 8005900:	bb1b      	cbnz	r3, 800594a <_svfiprintf_r+0x1b2>
 8005902:	9b03      	ldr	r3, [sp, #12]
 8005904:	3307      	adds	r3, #7
 8005906:	f023 0307 	bic.w	r3, r3, #7
 800590a:	3308      	adds	r3, #8
 800590c:	9303      	str	r3, [sp, #12]
 800590e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005910:	4433      	add	r3, r6
 8005912:	9309      	str	r3, [sp, #36]	; 0x24
 8005914:	e767      	b.n	80057e6 <_svfiprintf_r+0x4e>
 8005916:	460c      	mov	r4, r1
 8005918:	2001      	movs	r0, #1
 800591a:	fb0c 3202 	mla	r2, ip, r2, r3
 800591e:	e7a5      	b.n	800586c <_svfiprintf_r+0xd4>
 8005920:	2300      	movs	r3, #0
 8005922:	f04f 0c0a 	mov.w	ip, #10
 8005926:	4619      	mov	r1, r3
 8005928:	3401      	adds	r4, #1
 800592a:	9305      	str	r3, [sp, #20]
 800592c:	4620      	mov	r0, r4
 800592e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005932:	3a30      	subs	r2, #48	; 0x30
 8005934:	2a09      	cmp	r2, #9
 8005936:	d903      	bls.n	8005940 <_svfiprintf_r+0x1a8>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0c5      	beq.n	80058c8 <_svfiprintf_r+0x130>
 800593c:	9105      	str	r1, [sp, #20]
 800593e:	e7c3      	b.n	80058c8 <_svfiprintf_r+0x130>
 8005940:	4604      	mov	r4, r0
 8005942:	2301      	movs	r3, #1
 8005944:	fb0c 2101 	mla	r1, ip, r1, r2
 8005948:	e7f0      	b.n	800592c <_svfiprintf_r+0x194>
 800594a:	ab03      	add	r3, sp, #12
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	462a      	mov	r2, r5
 8005950:	4638      	mov	r0, r7
 8005952:	4b10      	ldr	r3, [pc, #64]	; (8005994 <_svfiprintf_r+0x1fc>)
 8005954:	a904      	add	r1, sp, #16
 8005956:	f3af 8000 	nop.w
 800595a:	1c42      	adds	r2, r0, #1
 800595c:	4606      	mov	r6, r0
 800595e:	d1d6      	bne.n	800590e <_svfiprintf_r+0x176>
 8005960:	89ab      	ldrh	r3, [r5, #12]
 8005962:	065b      	lsls	r3, r3, #25
 8005964:	f53f af2c 	bmi.w	80057c0 <_svfiprintf_r+0x28>
 8005968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800596a:	b01d      	add	sp, #116	; 0x74
 800596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005970:	ab03      	add	r3, sp, #12
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	462a      	mov	r2, r5
 8005976:	4638      	mov	r0, r7
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <_svfiprintf_r+0x1fc>)
 800597a:	a904      	add	r1, sp, #16
 800597c:	f000 f87c 	bl	8005a78 <_printf_i>
 8005980:	e7eb      	b.n	800595a <_svfiprintf_r+0x1c2>
 8005982:	bf00      	nop
 8005984:	080060ac 	.word	0x080060ac
 8005988:	080060b2 	.word	0x080060b2
 800598c:	080060b6 	.word	0x080060b6
 8005990:	00000000 	.word	0x00000000
 8005994:	080056e1 	.word	0x080056e1

08005998 <_printf_common>:
 8005998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800599c:	4616      	mov	r6, r2
 800599e:	4699      	mov	r9, r3
 80059a0:	688a      	ldr	r2, [r1, #8]
 80059a2:	690b      	ldr	r3, [r1, #16]
 80059a4:	4607      	mov	r7, r0
 80059a6:	4293      	cmp	r3, r2
 80059a8:	bfb8      	it	lt
 80059aa:	4613      	movlt	r3, r2
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059b2:	460c      	mov	r4, r1
 80059b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059b8:	b10a      	cbz	r2, 80059be <_printf_common+0x26>
 80059ba:	3301      	adds	r3, #1
 80059bc:	6033      	str	r3, [r6, #0]
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	0699      	lsls	r1, r3, #26
 80059c2:	bf42      	ittt	mi
 80059c4:	6833      	ldrmi	r3, [r6, #0]
 80059c6:	3302      	addmi	r3, #2
 80059c8:	6033      	strmi	r3, [r6, #0]
 80059ca:	6825      	ldr	r5, [r4, #0]
 80059cc:	f015 0506 	ands.w	r5, r5, #6
 80059d0:	d106      	bne.n	80059e0 <_printf_common+0x48>
 80059d2:	f104 0a19 	add.w	sl, r4, #25
 80059d6:	68e3      	ldr	r3, [r4, #12]
 80059d8:	6832      	ldr	r2, [r6, #0]
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	42ab      	cmp	r3, r5
 80059de:	dc28      	bgt.n	8005a32 <_printf_common+0x9a>
 80059e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059e4:	1e13      	subs	r3, r2, #0
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	bf18      	it	ne
 80059ea:	2301      	movne	r3, #1
 80059ec:	0692      	lsls	r2, r2, #26
 80059ee:	d42d      	bmi.n	8005a4c <_printf_common+0xb4>
 80059f0:	4649      	mov	r1, r9
 80059f2:	4638      	mov	r0, r7
 80059f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059f8:	47c0      	blx	r8
 80059fa:	3001      	adds	r0, #1
 80059fc:	d020      	beq.n	8005a40 <_printf_common+0xa8>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	68e5      	ldr	r5, [r4, #12]
 8005a02:	f003 0306 	and.w	r3, r3, #6
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	bf18      	it	ne
 8005a0a:	2500      	movne	r5, #0
 8005a0c:	6832      	ldr	r2, [r6, #0]
 8005a0e:	f04f 0600 	mov.w	r6, #0
 8005a12:	68a3      	ldr	r3, [r4, #8]
 8005a14:	bf08      	it	eq
 8005a16:	1aad      	subeq	r5, r5, r2
 8005a18:	6922      	ldr	r2, [r4, #16]
 8005a1a:	bf08      	it	eq
 8005a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a20:	4293      	cmp	r3, r2
 8005a22:	bfc4      	itt	gt
 8005a24:	1a9b      	subgt	r3, r3, r2
 8005a26:	18ed      	addgt	r5, r5, r3
 8005a28:	341a      	adds	r4, #26
 8005a2a:	42b5      	cmp	r5, r6
 8005a2c:	d11a      	bne.n	8005a64 <_printf_common+0xcc>
 8005a2e:	2000      	movs	r0, #0
 8005a30:	e008      	b.n	8005a44 <_printf_common+0xac>
 8005a32:	2301      	movs	r3, #1
 8005a34:	4652      	mov	r2, sl
 8005a36:	4649      	mov	r1, r9
 8005a38:	4638      	mov	r0, r7
 8005a3a:	47c0      	blx	r8
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d103      	bne.n	8005a48 <_printf_common+0xb0>
 8005a40:	f04f 30ff 	mov.w	r0, #4294967295
 8005a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a48:	3501      	adds	r5, #1
 8005a4a:	e7c4      	b.n	80059d6 <_printf_common+0x3e>
 8005a4c:	2030      	movs	r0, #48	; 0x30
 8005a4e:	18e1      	adds	r1, r4, r3
 8005a50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a5a:	4422      	add	r2, r4
 8005a5c:	3302      	adds	r3, #2
 8005a5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a62:	e7c5      	b.n	80059f0 <_printf_common+0x58>
 8005a64:	2301      	movs	r3, #1
 8005a66:	4622      	mov	r2, r4
 8005a68:	4649      	mov	r1, r9
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	47c0      	blx	r8
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d0e6      	beq.n	8005a40 <_printf_common+0xa8>
 8005a72:	3601      	adds	r6, #1
 8005a74:	e7d9      	b.n	8005a2a <_printf_common+0x92>
	...

08005a78 <_printf_i>:
 8005a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7c:	7e0f      	ldrb	r7, [r1, #24]
 8005a7e:	4691      	mov	r9, r2
 8005a80:	2f78      	cmp	r7, #120	; 0x78
 8005a82:	4680      	mov	r8, r0
 8005a84:	460c      	mov	r4, r1
 8005a86:	469a      	mov	sl, r3
 8005a88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a8e:	d807      	bhi.n	8005aa0 <_printf_i+0x28>
 8005a90:	2f62      	cmp	r7, #98	; 0x62
 8005a92:	d80a      	bhi.n	8005aaa <_printf_i+0x32>
 8005a94:	2f00      	cmp	r7, #0
 8005a96:	f000 80d9 	beq.w	8005c4c <_printf_i+0x1d4>
 8005a9a:	2f58      	cmp	r7, #88	; 0x58
 8005a9c:	f000 80a4 	beq.w	8005be8 <_printf_i+0x170>
 8005aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005aa8:	e03a      	b.n	8005b20 <_printf_i+0xa8>
 8005aaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005aae:	2b15      	cmp	r3, #21
 8005ab0:	d8f6      	bhi.n	8005aa0 <_printf_i+0x28>
 8005ab2:	a101      	add	r1, pc, #4	; (adr r1, 8005ab8 <_printf_i+0x40>)
 8005ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ab8:	08005b11 	.word	0x08005b11
 8005abc:	08005b25 	.word	0x08005b25
 8005ac0:	08005aa1 	.word	0x08005aa1
 8005ac4:	08005aa1 	.word	0x08005aa1
 8005ac8:	08005aa1 	.word	0x08005aa1
 8005acc:	08005aa1 	.word	0x08005aa1
 8005ad0:	08005b25 	.word	0x08005b25
 8005ad4:	08005aa1 	.word	0x08005aa1
 8005ad8:	08005aa1 	.word	0x08005aa1
 8005adc:	08005aa1 	.word	0x08005aa1
 8005ae0:	08005aa1 	.word	0x08005aa1
 8005ae4:	08005c33 	.word	0x08005c33
 8005ae8:	08005b55 	.word	0x08005b55
 8005aec:	08005c15 	.word	0x08005c15
 8005af0:	08005aa1 	.word	0x08005aa1
 8005af4:	08005aa1 	.word	0x08005aa1
 8005af8:	08005c55 	.word	0x08005c55
 8005afc:	08005aa1 	.word	0x08005aa1
 8005b00:	08005b55 	.word	0x08005b55
 8005b04:	08005aa1 	.word	0x08005aa1
 8005b08:	08005aa1 	.word	0x08005aa1
 8005b0c:	08005c1d 	.word	0x08005c1d
 8005b10:	682b      	ldr	r3, [r5, #0]
 8005b12:	1d1a      	adds	r2, r3, #4
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	602a      	str	r2, [r5, #0]
 8005b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0a4      	b.n	8005c6e <_printf_i+0x1f6>
 8005b24:	6820      	ldr	r0, [r4, #0]
 8005b26:	6829      	ldr	r1, [r5, #0]
 8005b28:	0606      	lsls	r6, r0, #24
 8005b2a:	f101 0304 	add.w	r3, r1, #4
 8005b2e:	d50a      	bpl.n	8005b46 <_printf_i+0xce>
 8005b30:	680e      	ldr	r6, [r1, #0]
 8005b32:	602b      	str	r3, [r5, #0]
 8005b34:	2e00      	cmp	r6, #0
 8005b36:	da03      	bge.n	8005b40 <_printf_i+0xc8>
 8005b38:	232d      	movs	r3, #45	; 0x2d
 8005b3a:	4276      	negs	r6, r6
 8005b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b40:	230a      	movs	r3, #10
 8005b42:	485e      	ldr	r0, [pc, #376]	; (8005cbc <_printf_i+0x244>)
 8005b44:	e019      	b.n	8005b7a <_printf_i+0x102>
 8005b46:	680e      	ldr	r6, [r1, #0]
 8005b48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b4c:	602b      	str	r3, [r5, #0]
 8005b4e:	bf18      	it	ne
 8005b50:	b236      	sxthne	r6, r6
 8005b52:	e7ef      	b.n	8005b34 <_printf_i+0xbc>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	6820      	ldr	r0, [r4, #0]
 8005b58:	1d19      	adds	r1, r3, #4
 8005b5a:	6029      	str	r1, [r5, #0]
 8005b5c:	0601      	lsls	r1, r0, #24
 8005b5e:	d501      	bpl.n	8005b64 <_printf_i+0xec>
 8005b60:	681e      	ldr	r6, [r3, #0]
 8005b62:	e002      	b.n	8005b6a <_printf_i+0xf2>
 8005b64:	0646      	lsls	r6, r0, #25
 8005b66:	d5fb      	bpl.n	8005b60 <_printf_i+0xe8>
 8005b68:	881e      	ldrh	r6, [r3, #0]
 8005b6a:	2f6f      	cmp	r7, #111	; 0x6f
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2308      	moveq	r3, #8
 8005b70:	230a      	movne	r3, #10
 8005b72:	4852      	ldr	r0, [pc, #328]	; (8005cbc <_printf_i+0x244>)
 8005b74:	2100      	movs	r1, #0
 8005b76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b7a:	6865      	ldr	r5, [r4, #4]
 8005b7c:	2d00      	cmp	r5, #0
 8005b7e:	bfa8      	it	ge
 8005b80:	6821      	ldrge	r1, [r4, #0]
 8005b82:	60a5      	str	r5, [r4, #8]
 8005b84:	bfa4      	itt	ge
 8005b86:	f021 0104 	bicge.w	r1, r1, #4
 8005b8a:	6021      	strge	r1, [r4, #0]
 8005b8c:	b90e      	cbnz	r6, 8005b92 <_printf_i+0x11a>
 8005b8e:	2d00      	cmp	r5, #0
 8005b90:	d04d      	beq.n	8005c2e <_printf_i+0x1b6>
 8005b92:	4615      	mov	r5, r2
 8005b94:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b98:	fb03 6711 	mls	r7, r3, r1, r6
 8005b9c:	5dc7      	ldrb	r7, [r0, r7]
 8005b9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ba2:	4637      	mov	r7, r6
 8005ba4:	42bb      	cmp	r3, r7
 8005ba6:	460e      	mov	r6, r1
 8005ba8:	d9f4      	bls.n	8005b94 <_printf_i+0x11c>
 8005baa:	2b08      	cmp	r3, #8
 8005bac:	d10b      	bne.n	8005bc6 <_printf_i+0x14e>
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	07de      	lsls	r6, r3, #31
 8005bb2:	d508      	bpl.n	8005bc6 <_printf_i+0x14e>
 8005bb4:	6923      	ldr	r3, [r4, #16]
 8005bb6:	6861      	ldr	r1, [r4, #4]
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	bfde      	ittt	le
 8005bbc:	2330      	movle	r3, #48	; 0x30
 8005bbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bc6:	1b52      	subs	r2, r2, r5
 8005bc8:	6122      	str	r2, [r4, #16]
 8005bca:	464b      	mov	r3, r9
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4640      	mov	r0, r8
 8005bd0:	f8cd a000 	str.w	sl, [sp]
 8005bd4:	aa03      	add	r2, sp, #12
 8005bd6:	f7ff fedf 	bl	8005998 <_printf_common>
 8005bda:	3001      	adds	r0, #1
 8005bdc:	d14c      	bne.n	8005c78 <_printf_i+0x200>
 8005bde:	f04f 30ff 	mov.w	r0, #4294967295
 8005be2:	b004      	add	sp, #16
 8005be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be8:	4834      	ldr	r0, [pc, #208]	; (8005cbc <_printf_i+0x244>)
 8005bea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005bee:	6829      	ldr	r1, [r5, #0]
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bf6:	6029      	str	r1, [r5, #0]
 8005bf8:	061d      	lsls	r5, r3, #24
 8005bfa:	d514      	bpl.n	8005c26 <_printf_i+0x1ae>
 8005bfc:	07df      	lsls	r7, r3, #31
 8005bfe:	bf44      	itt	mi
 8005c00:	f043 0320 	orrmi.w	r3, r3, #32
 8005c04:	6023      	strmi	r3, [r4, #0]
 8005c06:	b91e      	cbnz	r6, 8005c10 <_printf_i+0x198>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	f023 0320 	bic.w	r3, r3, #32
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	2310      	movs	r3, #16
 8005c12:	e7af      	b.n	8005b74 <_printf_i+0xfc>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	f043 0320 	orr.w	r3, r3, #32
 8005c1a:	6023      	str	r3, [r4, #0]
 8005c1c:	2378      	movs	r3, #120	; 0x78
 8005c1e:	4828      	ldr	r0, [pc, #160]	; (8005cc0 <_printf_i+0x248>)
 8005c20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c24:	e7e3      	b.n	8005bee <_printf_i+0x176>
 8005c26:	0659      	lsls	r1, r3, #25
 8005c28:	bf48      	it	mi
 8005c2a:	b2b6      	uxthmi	r6, r6
 8005c2c:	e7e6      	b.n	8005bfc <_printf_i+0x184>
 8005c2e:	4615      	mov	r5, r2
 8005c30:	e7bb      	b.n	8005baa <_printf_i+0x132>
 8005c32:	682b      	ldr	r3, [r5, #0]
 8005c34:	6826      	ldr	r6, [r4, #0]
 8005c36:	1d18      	adds	r0, r3, #4
 8005c38:	6961      	ldr	r1, [r4, #20]
 8005c3a:	6028      	str	r0, [r5, #0]
 8005c3c:	0635      	lsls	r5, r6, #24
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	d501      	bpl.n	8005c46 <_printf_i+0x1ce>
 8005c42:	6019      	str	r1, [r3, #0]
 8005c44:	e002      	b.n	8005c4c <_printf_i+0x1d4>
 8005c46:	0670      	lsls	r0, r6, #25
 8005c48:	d5fb      	bpl.n	8005c42 <_printf_i+0x1ca>
 8005c4a:	8019      	strh	r1, [r3, #0]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4615      	mov	r5, r2
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	e7ba      	b.n	8005bca <_printf_i+0x152>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	2100      	movs	r1, #0
 8005c58:	1d1a      	adds	r2, r3, #4
 8005c5a:	602a      	str	r2, [r5, #0]
 8005c5c:	681d      	ldr	r5, [r3, #0]
 8005c5e:	6862      	ldr	r2, [r4, #4]
 8005c60:	4628      	mov	r0, r5
 8005c62:	f000 f82f 	bl	8005cc4 <memchr>
 8005c66:	b108      	cbz	r0, 8005c6c <_printf_i+0x1f4>
 8005c68:	1b40      	subs	r0, r0, r5
 8005c6a:	6060      	str	r0, [r4, #4]
 8005c6c:	6863      	ldr	r3, [r4, #4]
 8005c6e:	6123      	str	r3, [r4, #16]
 8005c70:	2300      	movs	r3, #0
 8005c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c76:	e7a8      	b.n	8005bca <_printf_i+0x152>
 8005c78:	462a      	mov	r2, r5
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	4640      	mov	r0, r8
 8005c7e:	6923      	ldr	r3, [r4, #16]
 8005c80:	47d0      	blx	sl
 8005c82:	3001      	adds	r0, #1
 8005c84:	d0ab      	beq.n	8005bde <_printf_i+0x166>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	079b      	lsls	r3, r3, #30
 8005c8a:	d413      	bmi.n	8005cb4 <_printf_i+0x23c>
 8005c8c:	68e0      	ldr	r0, [r4, #12]
 8005c8e:	9b03      	ldr	r3, [sp, #12]
 8005c90:	4298      	cmp	r0, r3
 8005c92:	bfb8      	it	lt
 8005c94:	4618      	movlt	r0, r3
 8005c96:	e7a4      	b.n	8005be2 <_printf_i+0x16a>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	4632      	mov	r2, r6
 8005c9c:	4649      	mov	r1, r9
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	47d0      	blx	sl
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	d09b      	beq.n	8005bde <_printf_i+0x166>
 8005ca6:	3501      	adds	r5, #1
 8005ca8:	68e3      	ldr	r3, [r4, #12]
 8005caa:	9903      	ldr	r1, [sp, #12]
 8005cac:	1a5b      	subs	r3, r3, r1
 8005cae:	42ab      	cmp	r3, r5
 8005cb0:	dcf2      	bgt.n	8005c98 <_printf_i+0x220>
 8005cb2:	e7eb      	b.n	8005c8c <_printf_i+0x214>
 8005cb4:	2500      	movs	r5, #0
 8005cb6:	f104 0619 	add.w	r6, r4, #25
 8005cba:	e7f5      	b.n	8005ca8 <_printf_i+0x230>
 8005cbc:	080060bd 	.word	0x080060bd
 8005cc0:	080060ce 	.word	0x080060ce

08005cc4 <memchr>:
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	b510      	push	{r4, lr}
 8005cc8:	b2c9      	uxtb	r1, r1
 8005cca:	4402      	add	r2, r0
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	d101      	bne.n	8005cd6 <memchr+0x12>
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	e003      	b.n	8005cde <memchr+0x1a>
 8005cd6:	7804      	ldrb	r4, [r0, #0]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	428c      	cmp	r4, r1
 8005cdc:	d1f6      	bne.n	8005ccc <memchr+0x8>
 8005cde:	bd10      	pop	{r4, pc}

08005ce0 <memmove>:
 8005ce0:	4288      	cmp	r0, r1
 8005ce2:	b510      	push	{r4, lr}
 8005ce4:	eb01 0402 	add.w	r4, r1, r2
 8005ce8:	d902      	bls.n	8005cf0 <memmove+0x10>
 8005cea:	4284      	cmp	r4, r0
 8005cec:	4623      	mov	r3, r4
 8005cee:	d807      	bhi.n	8005d00 <memmove+0x20>
 8005cf0:	1e43      	subs	r3, r0, #1
 8005cf2:	42a1      	cmp	r1, r4
 8005cf4:	d008      	beq.n	8005d08 <memmove+0x28>
 8005cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cfe:	e7f8      	b.n	8005cf2 <memmove+0x12>
 8005d00:	4601      	mov	r1, r0
 8005d02:	4402      	add	r2, r0
 8005d04:	428a      	cmp	r2, r1
 8005d06:	d100      	bne.n	8005d0a <memmove+0x2a>
 8005d08:	bd10      	pop	{r4, pc}
 8005d0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d12:	e7f7      	b.n	8005d04 <memmove+0x24>

08005d14 <_free_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	4605      	mov	r5, r0
 8005d18:	2900      	cmp	r1, #0
 8005d1a:	d040      	beq.n	8005d9e <_free_r+0x8a>
 8005d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d20:	1f0c      	subs	r4, r1, #4
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	bfb8      	it	lt
 8005d26:	18e4      	addlt	r4, r4, r3
 8005d28:	f000 f910 	bl	8005f4c <__malloc_lock>
 8005d2c:	4a1c      	ldr	r2, [pc, #112]	; (8005da0 <_free_r+0x8c>)
 8005d2e:	6813      	ldr	r3, [r2, #0]
 8005d30:	b933      	cbnz	r3, 8005d40 <_free_r+0x2c>
 8005d32:	6063      	str	r3, [r4, #4]
 8005d34:	6014      	str	r4, [r2, #0]
 8005d36:	4628      	mov	r0, r5
 8005d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d3c:	f000 b90c 	b.w	8005f58 <__malloc_unlock>
 8005d40:	42a3      	cmp	r3, r4
 8005d42:	d908      	bls.n	8005d56 <_free_r+0x42>
 8005d44:	6820      	ldr	r0, [r4, #0]
 8005d46:	1821      	adds	r1, r4, r0
 8005d48:	428b      	cmp	r3, r1
 8005d4a:	bf01      	itttt	eq
 8005d4c:	6819      	ldreq	r1, [r3, #0]
 8005d4e:	685b      	ldreq	r3, [r3, #4]
 8005d50:	1809      	addeq	r1, r1, r0
 8005d52:	6021      	streq	r1, [r4, #0]
 8005d54:	e7ed      	b.n	8005d32 <_free_r+0x1e>
 8005d56:	461a      	mov	r2, r3
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	b10b      	cbz	r3, 8005d60 <_free_r+0x4c>
 8005d5c:	42a3      	cmp	r3, r4
 8005d5e:	d9fa      	bls.n	8005d56 <_free_r+0x42>
 8005d60:	6811      	ldr	r1, [r2, #0]
 8005d62:	1850      	adds	r0, r2, r1
 8005d64:	42a0      	cmp	r0, r4
 8005d66:	d10b      	bne.n	8005d80 <_free_r+0x6c>
 8005d68:	6820      	ldr	r0, [r4, #0]
 8005d6a:	4401      	add	r1, r0
 8005d6c:	1850      	adds	r0, r2, r1
 8005d6e:	4283      	cmp	r3, r0
 8005d70:	6011      	str	r1, [r2, #0]
 8005d72:	d1e0      	bne.n	8005d36 <_free_r+0x22>
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	4401      	add	r1, r0
 8005d7a:	6011      	str	r1, [r2, #0]
 8005d7c:	6053      	str	r3, [r2, #4]
 8005d7e:	e7da      	b.n	8005d36 <_free_r+0x22>
 8005d80:	d902      	bls.n	8005d88 <_free_r+0x74>
 8005d82:	230c      	movs	r3, #12
 8005d84:	602b      	str	r3, [r5, #0]
 8005d86:	e7d6      	b.n	8005d36 <_free_r+0x22>
 8005d88:	6820      	ldr	r0, [r4, #0]
 8005d8a:	1821      	adds	r1, r4, r0
 8005d8c:	428b      	cmp	r3, r1
 8005d8e:	bf01      	itttt	eq
 8005d90:	6819      	ldreq	r1, [r3, #0]
 8005d92:	685b      	ldreq	r3, [r3, #4]
 8005d94:	1809      	addeq	r1, r1, r0
 8005d96:	6021      	streq	r1, [r4, #0]
 8005d98:	6063      	str	r3, [r4, #4]
 8005d9a:	6054      	str	r4, [r2, #4]
 8005d9c:	e7cb      	b.n	8005d36 <_free_r+0x22>
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	2000164c 	.word	0x2000164c

08005da4 <sbrk_aligned>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	4e0e      	ldr	r6, [pc, #56]	; (8005de0 <sbrk_aligned+0x3c>)
 8005da8:	460c      	mov	r4, r1
 8005daa:	6831      	ldr	r1, [r6, #0]
 8005dac:	4605      	mov	r5, r0
 8005dae:	b911      	cbnz	r1, 8005db6 <sbrk_aligned+0x12>
 8005db0:	f000 f8bc 	bl	8005f2c <_sbrk_r>
 8005db4:	6030      	str	r0, [r6, #0]
 8005db6:	4621      	mov	r1, r4
 8005db8:	4628      	mov	r0, r5
 8005dba:	f000 f8b7 	bl	8005f2c <_sbrk_r>
 8005dbe:	1c43      	adds	r3, r0, #1
 8005dc0:	d00a      	beq.n	8005dd8 <sbrk_aligned+0x34>
 8005dc2:	1cc4      	adds	r4, r0, #3
 8005dc4:	f024 0403 	bic.w	r4, r4, #3
 8005dc8:	42a0      	cmp	r0, r4
 8005dca:	d007      	beq.n	8005ddc <sbrk_aligned+0x38>
 8005dcc:	1a21      	subs	r1, r4, r0
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f000 f8ac 	bl	8005f2c <_sbrk_r>
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d101      	bne.n	8005ddc <sbrk_aligned+0x38>
 8005dd8:	f04f 34ff 	mov.w	r4, #4294967295
 8005ddc:	4620      	mov	r0, r4
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
 8005de0:	20001650 	.word	0x20001650

08005de4 <_malloc_r>:
 8005de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de8:	1ccd      	adds	r5, r1, #3
 8005dea:	f025 0503 	bic.w	r5, r5, #3
 8005dee:	3508      	adds	r5, #8
 8005df0:	2d0c      	cmp	r5, #12
 8005df2:	bf38      	it	cc
 8005df4:	250c      	movcc	r5, #12
 8005df6:	2d00      	cmp	r5, #0
 8005df8:	4607      	mov	r7, r0
 8005dfa:	db01      	blt.n	8005e00 <_malloc_r+0x1c>
 8005dfc:	42a9      	cmp	r1, r5
 8005dfe:	d905      	bls.n	8005e0c <_malloc_r+0x28>
 8005e00:	230c      	movs	r3, #12
 8005e02:	2600      	movs	r6, #0
 8005e04:	603b      	str	r3, [r7, #0]
 8005e06:	4630      	mov	r0, r6
 8005e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e0c:	4e2e      	ldr	r6, [pc, #184]	; (8005ec8 <_malloc_r+0xe4>)
 8005e0e:	f000 f89d 	bl	8005f4c <__malloc_lock>
 8005e12:	6833      	ldr	r3, [r6, #0]
 8005e14:	461c      	mov	r4, r3
 8005e16:	bb34      	cbnz	r4, 8005e66 <_malloc_r+0x82>
 8005e18:	4629      	mov	r1, r5
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	f7ff ffc2 	bl	8005da4 <sbrk_aligned>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	4604      	mov	r4, r0
 8005e24:	d14d      	bne.n	8005ec2 <_malloc_r+0xde>
 8005e26:	6834      	ldr	r4, [r6, #0]
 8005e28:	4626      	mov	r6, r4
 8005e2a:	2e00      	cmp	r6, #0
 8005e2c:	d140      	bne.n	8005eb0 <_malloc_r+0xcc>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	4631      	mov	r1, r6
 8005e32:	4638      	mov	r0, r7
 8005e34:	eb04 0803 	add.w	r8, r4, r3
 8005e38:	f000 f878 	bl	8005f2c <_sbrk_r>
 8005e3c:	4580      	cmp	r8, r0
 8005e3e:	d13a      	bne.n	8005eb6 <_malloc_r+0xd2>
 8005e40:	6821      	ldr	r1, [r4, #0]
 8005e42:	3503      	adds	r5, #3
 8005e44:	1a6d      	subs	r5, r5, r1
 8005e46:	f025 0503 	bic.w	r5, r5, #3
 8005e4a:	3508      	adds	r5, #8
 8005e4c:	2d0c      	cmp	r5, #12
 8005e4e:	bf38      	it	cc
 8005e50:	250c      	movcc	r5, #12
 8005e52:	4638      	mov	r0, r7
 8005e54:	4629      	mov	r1, r5
 8005e56:	f7ff ffa5 	bl	8005da4 <sbrk_aligned>
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d02b      	beq.n	8005eb6 <_malloc_r+0xd2>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	442b      	add	r3, r5
 8005e62:	6023      	str	r3, [r4, #0]
 8005e64:	e00e      	b.n	8005e84 <_malloc_r+0xa0>
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	1b52      	subs	r2, r2, r5
 8005e6a:	d41e      	bmi.n	8005eaa <_malloc_r+0xc6>
 8005e6c:	2a0b      	cmp	r2, #11
 8005e6e:	d916      	bls.n	8005e9e <_malloc_r+0xba>
 8005e70:	1961      	adds	r1, r4, r5
 8005e72:	42a3      	cmp	r3, r4
 8005e74:	6025      	str	r5, [r4, #0]
 8005e76:	bf18      	it	ne
 8005e78:	6059      	strne	r1, [r3, #4]
 8005e7a:	6863      	ldr	r3, [r4, #4]
 8005e7c:	bf08      	it	eq
 8005e7e:	6031      	streq	r1, [r6, #0]
 8005e80:	5162      	str	r2, [r4, r5]
 8005e82:	604b      	str	r3, [r1, #4]
 8005e84:	4638      	mov	r0, r7
 8005e86:	f104 060b 	add.w	r6, r4, #11
 8005e8a:	f000 f865 	bl	8005f58 <__malloc_unlock>
 8005e8e:	f026 0607 	bic.w	r6, r6, #7
 8005e92:	1d23      	adds	r3, r4, #4
 8005e94:	1af2      	subs	r2, r6, r3
 8005e96:	d0b6      	beq.n	8005e06 <_malloc_r+0x22>
 8005e98:	1b9b      	subs	r3, r3, r6
 8005e9a:	50a3      	str	r3, [r4, r2]
 8005e9c:	e7b3      	b.n	8005e06 <_malloc_r+0x22>
 8005e9e:	6862      	ldr	r2, [r4, #4]
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	bf0c      	ite	eq
 8005ea4:	6032      	streq	r2, [r6, #0]
 8005ea6:	605a      	strne	r2, [r3, #4]
 8005ea8:	e7ec      	b.n	8005e84 <_malloc_r+0xa0>
 8005eaa:	4623      	mov	r3, r4
 8005eac:	6864      	ldr	r4, [r4, #4]
 8005eae:	e7b2      	b.n	8005e16 <_malloc_r+0x32>
 8005eb0:	4634      	mov	r4, r6
 8005eb2:	6876      	ldr	r6, [r6, #4]
 8005eb4:	e7b9      	b.n	8005e2a <_malloc_r+0x46>
 8005eb6:	230c      	movs	r3, #12
 8005eb8:	4638      	mov	r0, r7
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	f000 f84c 	bl	8005f58 <__malloc_unlock>
 8005ec0:	e7a1      	b.n	8005e06 <_malloc_r+0x22>
 8005ec2:	6025      	str	r5, [r4, #0]
 8005ec4:	e7de      	b.n	8005e84 <_malloc_r+0xa0>
 8005ec6:	bf00      	nop
 8005ec8:	2000164c 	.word	0x2000164c

08005ecc <_realloc_r>:
 8005ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed0:	4680      	mov	r8, r0
 8005ed2:	4614      	mov	r4, r2
 8005ed4:	460e      	mov	r6, r1
 8005ed6:	b921      	cbnz	r1, 8005ee2 <_realloc_r+0x16>
 8005ed8:	4611      	mov	r1, r2
 8005eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ede:	f7ff bf81 	b.w	8005de4 <_malloc_r>
 8005ee2:	b92a      	cbnz	r2, 8005ef0 <_realloc_r+0x24>
 8005ee4:	f7ff ff16 	bl	8005d14 <_free_r>
 8005ee8:	4625      	mov	r5, r4
 8005eea:	4628      	mov	r0, r5
 8005eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef0:	f000 f838 	bl	8005f64 <_malloc_usable_size_r>
 8005ef4:	4284      	cmp	r4, r0
 8005ef6:	4607      	mov	r7, r0
 8005ef8:	d802      	bhi.n	8005f00 <_realloc_r+0x34>
 8005efa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005efe:	d812      	bhi.n	8005f26 <_realloc_r+0x5a>
 8005f00:	4621      	mov	r1, r4
 8005f02:	4640      	mov	r0, r8
 8005f04:	f7ff ff6e 	bl	8005de4 <_malloc_r>
 8005f08:	4605      	mov	r5, r0
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d0ed      	beq.n	8005eea <_realloc_r+0x1e>
 8005f0e:	42bc      	cmp	r4, r7
 8005f10:	4622      	mov	r2, r4
 8005f12:	4631      	mov	r1, r6
 8005f14:	bf28      	it	cs
 8005f16:	463a      	movcs	r2, r7
 8005f18:	f7ff fbac 	bl	8005674 <memcpy>
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	4640      	mov	r0, r8
 8005f20:	f7ff fef8 	bl	8005d14 <_free_r>
 8005f24:	e7e1      	b.n	8005eea <_realloc_r+0x1e>
 8005f26:	4635      	mov	r5, r6
 8005f28:	e7df      	b.n	8005eea <_realloc_r+0x1e>
	...

08005f2c <_sbrk_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	2300      	movs	r3, #0
 8005f30:	4d05      	ldr	r5, [pc, #20]	; (8005f48 <_sbrk_r+0x1c>)
 8005f32:	4604      	mov	r4, r0
 8005f34:	4608      	mov	r0, r1
 8005f36:	602b      	str	r3, [r5, #0]
 8005f38:	f7fb fa84 	bl	8001444 <_sbrk>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d102      	bne.n	8005f46 <_sbrk_r+0x1a>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	b103      	cbz	r3, 8005f46 <_sbrk_r+0x1a>
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
 8005f48:	20001654 	.word	0x20001654

08005f4c <__malloc_lock>:
 8005f4c:	4801      	ldr	r0, [pc, #4]	; (8005f54 <__malloc_lock+0x8>)
 8005f4e:	f000 b811 	b.w	8005f74 <__retarget_lock_acquire_recursive>
 8005f52:	bf00      	nop
 8005f54:	20001658 	.word	0x20001658

08005f58 <__malloc_unlock>:
 8005f58:	4801      	ldr	r0, [pc, #4]	; (8005f60 <__malloc_unlock+0x8>)
 8005f5a:	f000 b80c 	b.w	8005f76 <__retarget_lock_release_recursive>
 8005f5e:	bf00      	nop
 8005f60:	20001658 	.word	0x20001658

08005f64 <_malloc_usable_size_r>:
 8005f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f68:	1f18      	subs	r0, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	bfbc      	itt	lt
 8005f6e:	580b      	ldrlt	r3, [r1, r0]
 8005f70:	18c0      	addlt	r0, r0, r3
 8005f72:	4770      	bx	lr

08005f74 <__retarget_lock_acquire_recursive>:
 8005f74:	4770      	bx	lr

08005f76 <__retarget_lock_release_recursive>:
 8005f76:	4770      	bx	lr

08005f78 <_init>:
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	bf00      	nop
 8005f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7e:	bc08      	pop	{r3}
 8005f80:	469e      	mov	lr, r3
 8005f82:	4770      	bx	lr

08005f84 <_fini>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	bf00      	nop
 8005f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8a:	bc08      	pop	{r3}
 8005f8c:	469e      	mov	lr, r3
 8005f8e:	4770      	bx	lr
