
FreeRTOS_project_stm32f105.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003400  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080035f0  080035f0  000135f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a0  080036a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036a8  080036a8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a8  080036a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036ac  080036ac  000136ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080036b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  20000010  080036c0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001468  080036c0  00021468  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed7d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002648  00000000  00000000  0002edb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00031400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00032410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f203  00000000  00000000  00033328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001017a  00000000  00000000  0005252b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba4be  00000000  00000000  000626a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011cb63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d0  00000000  00000000  0011cbb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	080035d8 	.word	0x080035d8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	080035d8 	.word	0x080035d8

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b976 	b.w	8000534 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000296:	fbb8 f7f1 	udiv	r7, r8, r1
 800029a:	fa1f fe8c 	uxth.w	lr, ip
 800029e:	fb01 8817 	mls	r8, r1, r7, r8
 80002a2:	fb07 f00e 	mul.w	r0, r7, lr
 80002a6:	0c23      	lsrs	r3, r4, #16
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	4298      	cmp	r0, r3
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x66>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f107 35ff 	add.w	r5, r7, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4298      	cmp	r0, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	3f02      	subs	r7, #2
 80002c4:	4463      	add	r3, ip
 80002c6:	1a1b      	subs	r3, r3, r0
 80002c8:	fbb3 f0f1 	udiv	r0, r3, r1
 80002cc:	fb01 3310 	mls	r3, r1, r0, r3
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002da:	45a6      	cmp	lr, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8109 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8106 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	2100      	movs	r1, #0
 80002f6:	eba4 040e 	sub.w	r4, r4, lr
 80002fa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	2300      	movs	r3, #0
 8000302:	40d4      	lsrs	r4, r2
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80fc 	bhi.w	800052c <__udivmoddi4+0x2cc>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 000c 	sub.w	r0, r1, ip
 800035a:	2101      	movs	r1, #1
 800035c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000360:	fa1f fe8c 	uxth.w	lr, ip
 8000364:	fbb0 f3f7 	udiv	r3, r0, r7
 8000368:	fb07 0013 	mls	r0, r7, r3, r0
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80ce 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000392:	fb07 5510 	mls	r5, r7, r0, r5
 8000396:	fb0e fe00 	mul.w	lr, lr, r0
 800039a:	b2a4      	uxth	r4, r4
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80b6 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d6:	fbba f8f9 	udiv	r8, sl, r9
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e2:	408d      	lsls	r5, r1
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	431d      	orrs	r5, r3
 80003ea:	fa00 f301 	lsl.w	r3, r0, r1
 80003ee:	fb08 f00e 	mul.w	r0, r8, lr
 80003f2:	0c2c      	lsrs	r4, r5, #16
 80003f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f8:	42a0      	cmp	r0, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a0      	cmp	r0, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1a24      	subs	r4, r4, r0
 800041a:	fbb4 f0f9 	udiv	r0, r4, r9
 800041e:	fb09 4410 	mls	r4, r9, r0, r4
 8000422:	fb00 fe0e 	mul.w	lr, r0, lr
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 35ff 	add.w	r5, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9502 	umull	r9, r5, r0, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2d0>
 800045c:	ebb3 0208 	subs.w	r2, r3, r8
 8000460:	eb64 040e 	sbc.w	r4, r4, lr
 8000464:	fa22 f301 	lsr.w	r3, r2, r1
 8000468:	fa04 f707 	lsl.w	r7, r4, r7
 800046c:	431f      	orrs	r7, r3
 800046e:	40cc      	lsrs	r4, r1
 8000470:	e9c6 7400 	strd	r7, r4, [r6]
 8000474:	2100      	movs	r1, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa8>
 8000478:	fa0c fc02 	lsl.w	ip, ip, r2
 800047c:	f1c2 0120 	rsb	r1, r2, #32
 8000480:	fa25 f301 	lsr.w	r3, r5, r1
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa20 f101 	lsr.w	r1, r0, r1
 800048c:	4095      	lsls	r5, r2
 800048e:	430d      	orrs	r5, r1
 8000490:	fbb3 f1f7 	udiv	r1, r3, r7
 8000494:	fb07 3311 	mls	r3, r7, r1, r3
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	0c28      	lsrs	r0, r5, #16
 800049e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004a2:	fb01 f30e 	mul.w	r3, r1, lr
 80004a6:	4283      	cmp	r3, r0
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0000 	adds.w	r0, ip, r0
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4283      	cmp	r3, r0
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4460      	add	r0, ip
 80004c0:	1ac0      	subs	r0, r0, r3
 80004c2:	fbb0 f3f7 	udiv	r3, r0, r7
 80004c6:	fb07 0013 	mls	r0, r7, r3, r0
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004d0:	fb03 f00e 	mul.w	r0, r3, lr
 80004d4:	42a8      	cmp	r0, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42a8      	cmp	r0, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1a28      	subs	r0, r5, r0
 80004ec:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	462f      	mov	r7, r5
 80004fa:	e6e4      	b.n	80002c6 <__udivmoddi4+0x66>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f9      	b.n	80002f4 <__udivmoddi4+0x94>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4643      	mov	r3, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4628      	mov	r0, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e747      	b.n	80003b6 <__udivmoddi4+0x156>
 8000526:	3b02      	subs	r3, #2
 8000528:	4465      	add	r5, ip
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x12c>
 800052c:	4608      	mov	r0, r1
 800052e:	e706      	b.n	800033e <__udivmoddi4+0xde>
 8000530:	4631      	mov	r1, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa8>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4a06      	ldr	r2, [pc, #24]	; (8000560 <vApplicationGetIdleTaskMemory+0x28>)
 8000548:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	4a05      	ldr	r2, [pc, #20]	; (8000564 <vApplicationGetIdleTaskMemory+0x2c>)
 800054e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	2000002c 	.word	0x2000002c
 8000564:	20000080 	.word	0x20000080

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b096      	sub	sp, #88	; 0x58
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fa91 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f84b 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8c1 	bl	80006fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057a:	f000 f895 	bl	80006a8 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <main+0x8c>)
 8000580:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000584:	461d      	mov	r5, r3
 8000586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000592:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fe35 	bl	8002208 <osThreadCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <main+0x90>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_Init, osPriorityNormal, 0, 128);
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <main+0x94>)
 80005a6:	f107 0420 	add.w	r4, r7, #32
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fe22 	bl	8002208 <osThreadCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <main+0x98>)
 80005c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, Task3_Init, osPriorityNormal, 0, 128);
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <main+0x9c>)
 80005cc:	1d3c      	adds	r4, r7, #4
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fe11 	bl	8002208 <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <main+0xa0>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f001 fe05 	bl	80021fa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x88>
 80005f2:	bf00      	nop
 80005f4:	0800360c 	.word	0x0800360c
 80005f8:	200002c4 	.word	0x200002c4
 80005fc:	08003628 	.word	0x08003628
 8000600:	200002c8 	.word	0x200002c8
 8000604:	08003644 	.word	0x08003644
 8000608:	200002cc 	.word	0x200002cc

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	2238      	movs	r2, #56	; 0x38
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 ffd4 	bl	80035c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800064e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000654:	2300      	movs	r3, #0
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0318 	add.w	r3, r7, #24
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fceb 	bl	8001038 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000668:	f000 f8de 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2102      	movs	r1, #2
 8000686:	4618      	mov	r0, r3
 8000688:	f000 ffec 	bl	8001664 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000692:	f000 f8c9 	bl	8000828 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <SystemClock_Config+0x98>)
 8000698:	2201      	movs	r2, #1
 800069a:	601a      	str	r2, [r3, #0]
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	; 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	42420070 	.word	0x42420070

080006a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_USART2_UART_Init+0x50>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006e0:	f001 fc98 	bl	8002014 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ea:	f000 f89d 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000280 	.word	0x20000280
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_GPIO_Init+0x78>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a17      	ldr	r2, [pc, #92]	; (8000774 <MX_GPIO_Init+0x78>)
 8000716:	f043 0320 	orr.w	r3, r3, #32
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_GPIO_Init+0x78>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0320 	and.w	r3, r3, #32
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_GPIO_Init+0x78>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a11      	ldr	r2, [pc, #68]	; (8000774 <MX_GPIO_Init+0x78>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_GPIO_Init+0x78>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_GPIO_Init+0x7c>)
 8000748:	f000 fc5e 	bl	8001008 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800074c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000750:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2302      	movs	r3, #2
 800075c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_GPIO_Init+0x7c>)
 8000766:	f000 facb 	bl	8000d00 <HAL_GPIO_Init>

}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000
 8000778:	40010800 	.word	0x40010800

0800077c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800078a:	480a      	ldr	r0, [pc, #40]	; (80007b4 <StartDefaultTask+0x38>)
 800078c:	f000 fc3c 	bl	8001008 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 8000790:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000794:	f000 f9b0 	bl	8000af8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <StartDefaultTask+0x38>)
 80007a0:	f000 fc32 	bl	8001008 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 80007a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007a8:	f000 f9a6 	bl	8000af8 <HAL_Delay>

    osDelay(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f001 fd77 	bl	80022a0 <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80007b2:	e7e7      	b.n	8000784 <StartDefaultTask+0x8>
 80007b4:	40010800 	.word	0x40010800

080007b8 <Task2_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_Init */
void Task2_Init(void const * argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_Init */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c6:	480a      	ldr	r0, [pc, #40]	; (80007f0 <Task2_Init+0x38>)
 80007c8:	f000 fc1e 	bl	8001008 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d0:	f000 f992 	bl	8000af8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <Task2_Init+0x38>)
 80007dc:	f000 fc14 	bl	8001008 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80007e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e4:	f000 f988 	bl	8000af8 <HAL_Delay>
    osDelay(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f001 fd59 	bl	80022a0 <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80007ee:	e7e7      	b.n	80007c0 <Task2_Init+0x8>
 80007f0:	40010800 	.word	0x40010800

080007f4 <Task3_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_Init */
void Task3_Init(void const * argument)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f001 fd4f 	bl	80022a0 <osDelay>
 8000802:	e7fb      	b.n	80007fc <Task3_Init+0x8>

08000804 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d101      	bne.n	800081a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000816:	f000 f953 	bl	8000ac0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40012c00 	.word	0x40012c00

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_MspInit+0x4c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <HAL_MspInit+0x4c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_MspInit+0x4c>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_MspInit+0x4c>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <HAL_MspInit+0x4c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	61d3      	str	r3, [r2, #28]
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_MspInit+0x4c>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	210f      	movs	r1, #15
 800086e:	f06f 0001 	mvn.w	r0, #1
 8000872:	f000 fa1a 	bl	8000caa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a1b      	ldr	r2, [pc, #108]	; (800090c <HAL_UART_MspInit+0x88>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d12f      	bne.n	8000904 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ae:	61d3      	str	r3, [r2, #28]
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a13      	ldr	r2, [pc, #76]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008d4:	2304      	movs	r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	480b      	ldr	r0, [pc, #44]	; (8000914 <HAL_UART_MspInit+0x90>)
 80008e8:	f000 fa0a 	bl	8000d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008ec:	2308      	movs	r3, #8
 80008ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <HAL_UART_MspInit+0x90>)
 8000900:	f000 f9fe 	bl	8000d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40004400 	.word	0x40004400
 8000910:	40021000 	.word	0x40021000
 8000914:	40010800 	.word	0x40010800

08000918 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	; 0x30
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000928:	2300      	movs	r3, #0
 800092a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800092e:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <HAL_InitTick+0xd0>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <HAL_InitTick+0xd0>)
 8000934:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000938:	6193      	str	r3, [r2, #24]
 800093a:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <HAL_InitTick+0xd0>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000946:	f107 020c 	add.w	r2, r7, #12
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f001 f8b5 	bl	8001ac0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000956:	f001 f89f 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 800095a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095e:	4a23      	ldr	r2, [pc, #140]	; (80009ec <HAL_InitTick+0xd4>)
 8000960:	fba2 2303 	umull	r2, r3, r2, r3
 8000964:	0c9b      	lsrs	r3, r3, #18
 8000966:	3b01      	subs	r3, #1
 8000968:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <HAL_InitTick+0xd8>)
 800096c:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <HAL_InitTick+0xdc>)
 800096e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <HAL_InitTick+0xd8>)
 8000972:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000976:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000978:	4a1d      	ldr	r2, [pc, #116]	; (80009f0 <HAL_InitTick+0xd8>)
 800097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <HAL_InitTick+0xd8>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <HAL_InitTick+0xd8>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <HAL_InitTick+0xd8>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000990:	4817      	ldr	r0, [pc, #92]	; (80009f0 <HAL_InitTick+0xd8>)
 8000992:	f001 f8e3 	bl	8001b5c <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800099c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d11b      	bne.n	80009dc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009a4:	4812      	ldr	r0, [pc, #72]	; (80009f0 <HAL_InitTick+0xd8>)
 80009a6:	f001 f931 	bl	8001c0c <HAL_TIM_Base_Start_IT>
 80009aa:	4603      	mov	r3, r0
 80009ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d111      	bne.n	80009dc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80009b8:	2019      	movs	r0, #25
 80009ba:	f000 f992 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d808      	bhi.n	80009d6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80009c4:	2200      	movs	r2, #0
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	2019      	movs	r0, #25
 80009ca:	f000 f96e 	bl	8000caa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_InitTick+0xe0>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	e002      	b.n	80009dc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3730      	adds	r7, #48	; 0x30
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021000 	.word	0x40021000
 80009ec:	431bde83 	.word	0x431bde83
 80009f0:	200002d0 	.word	0x200002d0
 80009f4:	40012c00 	.word	0x40012c00
 80009f8:	20000004 	.word	0x20000004

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
	...

08000a28 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM1_UP_IRQHandler+0x10>)
 8000a2e:	f001 f947 	bl	8001cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200002d0 	.word	0x200002d0

08000a3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a4a:	490d      	ldr	r1, [pc, #52]	; (8000a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a60:	4c0a      	ldr	r4, [pc, #40]	; (8000a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a6e:	f7ff ffe5 	bl	8000a3c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a72:	f002 fd85 	bl	8003580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a76:	f7ff fd77 	bl	8000568 <main>
  bx lr
 8000a7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a84:	080036b0 	.word	0x080036b0
  ldr r2, =_sbss
 8000a88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a8c:	20001468 	.word	0x20001468

08000a90 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC1_2_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_Init+0x28>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_Init+0x28>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f000 f8f5 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aaa:	200f      	movs	r0, #15
 8000aac:	f7ff ff34 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab0:	f7ff fec0 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40022000 	.word	0x40022000

08000ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x1c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x20>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a03      	ldr	r2, [pc, #12]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000318 	.word	0x20000318

08000ae4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <HAL_GetTick+0x10>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	20000318 	.word	0x20000318

08000af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b00:	f7ff fff0 	bl	8000ae4 <HAL_GetTick>
 8000b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b10:	d005      	beq.n	8000b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_Delay+0x44>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	461a      	mov	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b1e:	bf00      	nop
 8000b20:	f7ff ffe0 	bl	8000ae4 <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d8f7      	bhi.n	8000b20 <HAL_Delay+0x28>
  {
  }
}
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db0b      	blt.n	8000bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 021f 	and.w	r2, r3, #31
 8000bbc:	4906      	ldr	r1, [pc, #24]	; (8000bd8 <__NVIC_EnableIRQ+0x34>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
         );
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff4f 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff64 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ffb2 	bl	8000c30 <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff81 	bl	8000bdc <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff57 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b08b      	sub	sp, #44	; 0x2c
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d12:	e169      	b.n	8000fe8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d14:	2201      	movs	r2, #1
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	f040 8158 	bne.w	8000fe2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	4a9a      	ldr	r2, [pc, #616]	; (8000fa0 <HAL_GPIO_Init+0x2a0>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d05e      	beq.n	8000dfa <HAL_GPIO_Init+0xfa>
 8000d3c:	4a98      	ldr	r2, [pc, #608]	; (8000fa0 <HAL_GPIO_Init+0x2a0>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d875      	bhi.n	8000e2e <HAL_GPIO_Init+0x12e>
 8000d42:	4a98      	ldr	r2, [pc, #608]	; (8000fa4 <HAL_GPIO_Init+0x2a4>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d058      	beq.n	8000dfa <HAL_GPIO_Init+0xfa>
 8000d48:	4a96      	ldr	r2, [pc, #600]	; (8000fa4 <HAL_GPIO_Init+0x2a4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d86f      	bhi.n	8000e2e <HAL_GPIO_Init+0x12e>
 8000d4e:	4a96      	ldr	r2, [pc, #600]	; (8000fa8 <HAL_GPIO_Init+0x2a8>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d052      	beq.n	8000dfa <HAL_GPIO_Init+0xfa>
 8000d54:	4a94      	ldr	r2, [pc, #592]	; (8000fa8 <HAL_GPIO_Init+0x2a8>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d869      	bhi.n	8000e2e <HAL_GPIO_Init+0x12e>
 8000d5a:	4a94      	ldr	r2, [pc, #592]	; (8000fac <HAL_GPIO_Init+0x2ac>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d04c      	beq.n	8000dfa <HAL_GPIO_Init+0xfa>
 8000d60:	4a92      	ldr	r2, [pc, #584]	; (8000fac <HAL_GPIO_Init+0x2ac>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d863      	bhi.n	8000e2e <HAL_GPIO_Init+0x12e>
 8000d66:	4a92      	ldr	r2, [pc, #584]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d046      	beq.n	8000dfa <HAL_GPIO_Init+0xfa>
 8000d6c:	4a90      	ldr	r2, [pc, #576]	; (8000fb0 <HAL_GPIO_Init+0x2b0>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d85d      	bhi.n	8000e2e <HAL_GPIO_Init+0x12e>
 8000d72:	2b12      	cmp	r3, #18
 8000d74:	d82a      	bhi.n	8000dcc <HAL_GPIO_Init+0xcc>
 8000d76:	2b12      	cmp	r3, #18
 8000d78:	d859      	bhi.n	8000e2e <HAL_GPIO_Init+0x12e>
 8000d7a:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <HAL_GPIO_Init+0x80>)
 8000d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d80:	08000dfb 	.word	0x08000dfb
 8000d84:	08000dd5 	.word	0x08000dd5
 8000d88:	08000de7 	.word	0x08000de7
 8000d8c:	08000e29 	.word	0x08000e29
 8000d90:	08000e2f 	.word	0x08000e2f
 8000d94:	08000e2f 	.word	0x08000e2f
 8000d98:	08000e2f 	.word	0x08000e2f
 8000d9c:	08000e2f 	.word	0x08000e2f
 8000da0:	08000e2f 	.word	0x08000e2f
 8000da4:	08000e2f 	.word	0x08000e2f
 8000da8:	08000e2f 	.word	0x08000e2f
 8000dac:	08000e2f 	.word	0x08000e2f
 8000db0:	08000e2f 	.word	0x08000e2f
 8000db4:	08000e2f 	.word	0x08000e2f
 8000db8:	08000e2f 	.word	0x08000e2f
 8000dbc:	08000e2f 	.word	0x08000e2f
 8000dc0:	08000e2f 	.word	0x08000e2f
 8000dc4:	08000ddd 	.word	0x08000ddd
 8000dc8:	08000df1 	.word	0x08000df1
 8000dcc:	4a79      	ldr	r2, [pc, #484]	; (8000fb4 <HAL_GPIO_Init+0x2b4>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d013      	beq.n	8000dfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dd2:	e02c      	b.n	8000e2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	623b      	str	r3, [r7, #32]
          break;
 8000dda:	e029      	b.n	8000e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	3304      	adds	r3, #4
 8000de2:	623b      	str	r3, [r7, #32]
          break;
 8000de4:	e024      	b.n	8000e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	3308      	adds	r3, #8
 8000dec:	623b      	str	r3, [r7, #32]
          break;
 8000dee:	e01f      	b.n	8000e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	330c      	adds	r3, #12
 8000df6:	623b      	str	r3, [r7, #32]
          break;
 8000df8:	e01a      	b.n	8000e30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d102      	bne.n	8000e08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e02:	2304      	movs	r3, #4
 8000e04:	623b      	str	r3, [r7, #32]
          break;
 8000e06:	e013      	b.n	8000e30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d105      	bne.n	8000e1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e10:	2308      	movs	r3, #8
 8000e12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69fa      	ldr	r2, [r7, #28]
 8000e18:	611a      	str	r2, [r3, #16]
          break;
 8000e1a:	e009      	b.n	8000e30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e1c:	2308      	movs	r3, #8
 8000e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	615a      	str	r2, [r3, #20]
          break;
 8000e26:	e003      	b.n	8000e30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
          break;
 8000e2c:	e000      	b.n	8000e30 <HAL_GPIO_Init+0x130>
          break;
 8000e2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	2bff      	cmp	r3, #255	; 0xff
 8000e34:	d801      	bhi.n	8000e3a <HAL_GPIO_Init+0x13a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	e001      	b.n	8000e3e <HAL_GPIO_Init+0x13e>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2bff      	cmp	r3, #255	; 0xff
 8000e44:	d802      	bhi.n	8000e4c <HAL_GPIO_Init+0x14c>
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	e002      	b.n	8000e52 <HAL_GPIO_Init+0x152>
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	3b08      	subs	r3, #8
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	210f      	movs	r1, #15
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	401a      	ands	r2, r3
 8000e64:	6a39      	ldr	r1, [r7, #32]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 80b1 	beq.w	8000fe2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e80:	4b4d      	ldr	r3, [pc, #308]	; (8000fb8 <HAL_GPIO_Init+0x2b8>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a4c      	ldr	r2, [pc, #304]	; (8000fb8 <HAL_GPIO_Init+0x2b8>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b4a      	ldr	r3, [pc, #296]	; (8000fb8 <HAL_GPIO_Init+0x2b8>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e98:	4a48      	ldr	r2, [pc, #288]	; (8000fbc <HAL_GPIO_Init+0x2bc>)
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	220f      	movs	r2, #15
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a40      	ldr	r2, [pc, #256]	; (8000fc0 <HAL_GPIO_Init+0x2c0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d013      	beq.n	8000eec <HAL_GPIO_Init+0x1ec>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a3f      	ldr	r2, [pc, #252]	; (8000fc4 <HAL_GPIO_Init+0x2c4>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d00d      	beq.n	8000ee8 <HAL_GPIO_Init+0x1e8>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a3e      	ldr	r2, [pc, #248]	; (8000fc8 <HAL_GPIO_Init+0x2c8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d007      	beq.n	8000ee4 <HAL_GPIO_Init+0x1e4>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a3d      	ldr	r2, [pc, #244]	; (8000fcc <HAL_GPIO_Init+0x2cc>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d101      	bne.n	8000ee0 <HAL_GPIO_Init+0x1e0>
 8000edc:	2303      	movs	r3, #3
 8000ede:	e006      	b.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	e004      	b.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e002      	b.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000eec:	2300      	movs	r3, #0
 8000eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef0:	f002 0203 	and.w	r2, r2, #3
 8000ef4:	0092      	lsls	r2, r2, #2
 8000ef6:	4093      	lsls	r3, r2
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000efe:	492f      	ldr	r1, [pc, #188]	; (8000fbc <HAL_GPIO_Init+0x2bc>)
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3302      	adds	r3, #2
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f18:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <HAL_GPIO_Init+0x2d0>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	492c      	ldr	r1, [pc, #176]	; (8000fd0 <HAL_GPIO_Init+0x2d0>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_GPIO_Init+0x2d0>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	4928      	ldr	r1, [pc, #160]	; (8000fd0 <HAL_GPIO_Init+0x2d0>)
 8000f30:	4013      	ands	r3, r2
 8000f32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <HAL_GPIO_Init+0x2d0>)
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	4922      	ldr	r1, [pc, #136]	; (8000fd0 <HAL_GPIO_Init+0x2d0>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	604b      	str	r3, [r1, #4]
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <HAL_GPIO_Init+0x2d0>)
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	491e      	ldr	r1, [pc, #120]	; (8000fd0 <HAL_GPIO_Init+0x2d0>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d006      	beq.n	8000f76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <HAL_GPIO_Init+0x2d0>)
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	4918      	ldr	r1, [pc, #96]	; (8000fd0 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	608b      	str	r3, [r1, #8]
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_GPIO_Init+0x2d0>)
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	4914      	ldr	r1, [pc, #80]	; (8000fd0 <HAL_GPIO_Init+0x2d0>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d021      	beq.n	8000fd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_GPIO_Init+0x2d0>)
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	490e      	ldr	r1, [pc, #56]	; (8000fd0 <HAL_GPIO_Init+0x2d0>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	60cb      	str	r3, [r1, #12]
 8000f9c:	e021      	b.n	8000fe2 <HAL_GPIO_Init+0x2e2>
 8000f9e:	bf00      	nop
 8000fa0:	10320000 	.word	0x10320000
 8000fa4:	10310000 	.word	0x10310000
 8000fa8:	10220000 	.word	0x10220000
 8000fac:	10210000 	.word	0x10210000
 8000fb0:	10120000 	.word	0x10120000
 8000fb4:	10110000 	.word	0x10110000
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	40010800 	.word	0x40010800
 8000fc4:	40010c00 	.word	0x40010c00
 8000fc8:	40011000 	.word	0x40011000
 8000fcc:	40011400 	.word	0x40011400
 8000fd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_GPIO_Init+0x304>)
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	4909      	ldr	r1, [pc, #36]	; (8001004 <HAL_GPIO_Init+0x304>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f47f ae8e 	bne.w	8000d14 <HAL_GPIO_Init+0x14>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	372c      	adds	r7, #44	; 0x2c
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	40010400 	.word	0x40010400

08001008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
 8001014:	4613      	mov	r3, r2
 8001016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001018:	787b      	ldrb	r3, [r7, #1]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001024:	e003      	b.n	800102e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	041a      	lsls	r2, r3, #16
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	611a      	str	r2, [r3, #16]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e304      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 8087 	beq.w	8001166 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001058:	4b92      	ldr	r3, [pc, #584]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b04      	cmp	r3, #4
 8001062:	d00c      	beq.n	800107e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001064:	4b8f      	ldr	r3, [pc, #572]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 030c 	and.w	r3, r3, #12
 800106c:	2b08      	cmp	r3, #8
 800106e:	d112      	bne.n	8001096 <HAL_RCC_OscConfig+0x5e>
 8001070:	4b8c      	ldr	r3, [pc, #560]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107c:	d10b      	bne.n	8001096 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107e:	4b89      	ldr	r3, [pc, #548]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d06c      	beq.n	8001164 <HAL_RCC_OscConfig+0x12c>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d168      	bne.n	8001164 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e2de      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109e:	d106      	bne.n	80010ae <HAL_RCC_OscConfig+0x76>
 80010a0:	4b80      	ldr	r3, [pc, #512]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a7f      	ldr	r2, [pc, #508]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	e02e      	b.n	800110c <HAL_RCC_OscConfig+0xd4>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x98>
 80010b6:	4b7b      	ldr	r3, [pc, #492]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a7a      	ldr	r2, [pc, #488]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b78      	ldr	r3, [pc, #480]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a77      	ldr	r2, [pc, #476]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e01d      	b.n	800110c <HAL_RCC_OscConfig+0xd4>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0xbc>
 80010da:	4b72      	ldr	r3, [pc, #456]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a71      	ldr	r2, [pc, #452]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b6f      	ldr	r3, [pc, #444]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a6e      	ldr	r2, [pc, #440]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e00b      	b.n	800110c <HAL_RCC_OscConfig+0xd4>
 80010f4:	4b6b      	ldr	r3, [pc, #428]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a6a      	ldr	r2, [pc, #424]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b68      	ldr	r3, [pc, #416]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a67      	ldr	r2, [pc, #412]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 8001106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d013      	beq.n	800113c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fce6 	bl	8000ae4 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fce2 	bl	8000ae4 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	; 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e292      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4b5d      	ldr	r3, [pc, #372]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f0      	beq.n	800111c <HAL_RCC_OscConfig+0xe4>
 800113a:	e014      	b.n	8001166 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fcd2 	bl	8000ae4 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fcce 	bl	8000ae4 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e27e      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0x10c>
 8001162:	e000      	b.n	8001166 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d063      	beq.n	800123a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001172:	4b4c      	ldr	r3, [pc, #304]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00b      	beq.n	8001196 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800117e:	4b49      	ldr	r3, [pc, #292]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b08      	cmp	r3, #8
 8001188:	d11c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x18c>
 800118a:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d116      	bne.n	80011c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <HAL_RCC_OscConfig+0x176>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d001      	beq.n	80011ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e252      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4939      	ldr	r1, [pc, #228]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	e03a      	b.n	800123a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011cc:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <HAL_RCC_OscConfig+0x270>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d2:	f7ff fc87 	bl	8000ae4 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011da:	f7ff fc83 	bl	8000ae4 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e233      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4927      	ldr	r1, [pc, #156]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 8001208:	4313      	orrs	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
 800120c:	e015      	b.n	800123a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <HAL_RCC_OscConfig+0x270>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fc66 	bl	8000ae4 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121c:	f7ff fc62 	bl	8000ae4 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e212      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d03a      	beq.n	80012bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d019      	beq.n	8001282 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_RCC_OscConfig+0x274>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001254:	f7ff fc46 	bl	8000ae4 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fc42 	bl	8000ae4 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e1f2      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <HAL_RCC_OscConfig+0x26c>)
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f000 fc50 	bl	8001b20 <RCC_Delay>
 8001280:	e01c      	b.n	80012bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_RCC_OscConfig+0x274>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001288:	f7ff fc2c 	bl	8000ae4 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128e:	e00f      	b.n	80012b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001290:	f7ff fc28 	bl	8000ae4 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d908      	bls.n	80012b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e1d8      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	42420000 	.word	0x42420000
 80012ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b0:	4b9b      	ldr	r3, [pc, #620]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1e9      	bne.n	8001290 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 80a6 	beq.w	8001416 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ce:	4b94      	ldr	r3, [pc, #592]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10d      	bne.n	80012f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	4b91      	ldr	r3, [pc, #580]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	4a90      	ldr	r2, [pc, #576]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e4:	61d3      	str	r3, [r2, #28]
 80012e6:	4b8e      	ldr	r3, [pc, #568]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012f2:	2301      	movs	r3, #1
 80012f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f6:	4b8b      	ldr	r3, [pc, #556]	; (8001524 <HAL_RCC_OscConfig+0x4ec>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d118      	bne.n	8001334 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001302:	4b88      	ldr	r3, [pc, #544]	; (8001524 <HAL_RCC_OscConfig+0x4ec>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a87      	ldr	r2, [pc, #540]	; (8001524 <HAL_RCC_OscConfig+0x4ec>)
 8001308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800130e:	f7ff fbe9 	bl	8000ae4 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001316:	f7ff fbe5 	bl	8000ae4 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b64      	cmp	r3, #100	; 0x64
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e195      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	4b7e      	ldr	r3, [pc, #504]	; (8001524 <HAL_RCC_OscConfig+0x4ec>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d106      	bne.n	800134a <HAL_RCC_OscConfig+0x312>
 800133c:	4b78      	ldr	r3, [pc, #480]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4a77      	ldr	r2, [pc, #476]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6213      	str	r3, [r2, #32]
 8001348:	e02d      	b.n	80013a6 <HAL_RCC_OscConfig+0x36e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0x334>
 8001352:	4b73      	ldr	r3, [pc, #460]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	4a72      	ldr	r2, [pc, #456]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001358:	f023 0301 	bic.w	r3, r3, #1
 800135c:	6213      	str	r3, [r2, #32]
 800135e:	4b70      	ldr	r3, [pc, #448]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4a6f      	ldr	r2, [pc, #444]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001364:	f023 0304 	bic.w	r3, r3, #4
 8001368:	6213      	str	r3, [r2, #32]
 800136a:	e01c      	b.n	80013a6 <HAL_RCC_OscConfig+0x36e>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	2b05      	cmp	r3, #5
 8001372:	d10c      	bne.n	800138e <HAL_RCC_OscConfig+0x356>
 8001374:	4b6a      	ldr	r3, [pc, #424]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4a69      	ldr	r2, [pc, #420]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6213      	str	r3, [r2, #32]
 8001380:	4b67      	ldr	r3, [pc, #412]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	4a66      	ldr	r2, [pc, #408]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6213      	str	r3, [r2, #32]
 800138c:	e00b      	b.n	80013a6 <HAL_RCC_OscConfig+0x36e>
 800138e:	4b64      	ldr	r3, [pc, #400]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	4a63      	ldr	r2, [pc, #396]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001394:	f023 0301 	bic.w	r3, r3, #1
 8001398:	6213      	str	r3, [r2, #32]
 800139a:	4b61      	ldr	r3, [pc, #388]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	4a60      	ldr	r2, [pc, #384]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80013a0:	f023 0304 	bic.w	r3, r3, #4
 80013a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d015      	beq.n	80013da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fb99 	bl	8000ae4 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b4:	e00a      	b.n	80013cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b6:	f7ff fb95 	bl	8000ae4 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e143      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013cc:	4b54      	ldr	r3, [pc, #336]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0ee      	beq.n	80013b6 <HAL_RCC_OscConfig+0x37e>
 80013d8:	e014      	b.n	8001404 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7ff fb83 	bl	8000ae4 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e0:	e00a      	b.n	80013f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e2:	f7ff fb7f 	bl	8000ae4 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e12d      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f8:	4b49      	ldr	r3, [pc, #292]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1ee      	bne.n	80013e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d105      	bne.n	8001416 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800140a:	4b45      	ldr	r3, [pc, #276]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4a44      	ldr	r2, [pc, #272]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001414:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 808c 	beq.w	8001538 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001420:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142c:	d10e      	bne.n	800144c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001436:	2b08      	cmp	r3, #8
 8001438:	d108      	bne.n	800144c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800143a:	4b39      	ldr	r3, [pc, #228]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001446:	d101      	bne.n	800144c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e103      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	2b02      	cmp	r3, #2
 8001452:	d14e      	bne.n	80014f2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001454:	4b32      	ldr	r3, [pc, #200]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d009      	beq.n	8001474 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001460:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0ef      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001474:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <HAL_RCC_OscConfig+0x4f0>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fb33 	bl	8000ae4 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001482:	f7ff fb2f 	bl	8000ae4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b64      	cmp	r3, #100	; 0x64
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e0df      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ac:	491c      	ldr	r1, [pc, #112]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4918      	ldr	r1, [pc, #96]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_RCC_OscConfig+0x4f0>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ca:	f7ff fb0b 	bl	8000ae4 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80014d2:	f7ff fb07 	bl	8000ae4 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b64      	cmp	r3, #100	; 0x64
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e0b7      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x49a>
 80014f0:	e022      	b.n	8001538 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_RCC_OscConfig+0x4e8>)
 80014f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_RCC_OscConfig+0x4f0>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff faee 	bl	8000ae4 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800150a:	e00f      	b.n	800152c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800150c:	f7ff faea 	bl	8000ae4 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d908      	bls.n	800152c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e09a      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	40007000 	.word	0x40007000
 8001528:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800152c:	4b4b      	ldr	r3, [pc, #300]	; (800165c <HAL_RCC_OscConfig+0x624>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1e9      	bne.n	800150c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 8088 	beq.w	8001652 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001542:	4b46      	ldr	r3, [pc, #280]	; (800165c <HAL_RCC_OscConfig+0x624>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b08      	cmp	r3, #8
 800154c:	d068      	beq.n	8001620 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d14d      	bne.n	80015f2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001556:	4b42      	ldr	r3, [pc, #264]	; (8001660 <HAL_RCC_OscConfig+0x628>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fac2 	bl	8000ae4 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff fabe 	bl	8000ae4 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e06e      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <HAL_RCC_OscConfig+0x624>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158a:	d10f      	bne.n	80015ac <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800158c:	4b33      	ldr	r3, [pc, #204]	; (800165c <HAL_RCC_OscConfig+0x624>)
 800158e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4931      	ldr	r1, [pc, #196]	; (800165c <HAL_RCC_OscConfig+0x624>)
 8001596:	4313      	orrs	r3, r2
 8001598:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800159a:	4b30      	ldr	r3, [pc, #192]	; (800165c <HAL_RCC_OscConfig+0x624>)
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	f023 020f 	bic.w	r2, r3, #15
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	492d      	ldr	r1, [pc, #180]	; (800165c <HAL_RCC_OscConfig+0x624>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <HAL_RCC_OscConfig+0x624>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	430b      	orrs	r3, r1
 80015be:	4927      	ldr	r1, [pc, #156]	; (800165c <HAL_RCC_OscConfig+0x624>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_RCC_OscConfig+0x628>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff fa8b 	bl	8000ae4 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff fa87 	bl	8000ae4 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e037      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <HAL_RCC_OscConfig+0x624>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x59a>
 80015f0:	e02f      	b.n	8001652 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_RCC_OscConfig+0x628>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fa74 	bl	8000ae4 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff fa70 	bl	8000ae4 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e020      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_RCC_OscConfig+0x624>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x5c8>
 800161e:	e018      	b.n	8001652 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e013      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_OscConfig+0x624>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	429a      	cmp	r2, r3
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021000 	.word	0x40021000
 8001660:	42420060 	.word	0x42420060

08001664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0d0      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d910      	bls.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 0207 	bic.w	r2, r3, #7
 800168e:	4965      	ldr	r1, [pc, #404]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0b8      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	494d      	ldr	r1, [pc, #308]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d040      	beq.n	8001784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d115      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e07f      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e073      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06b      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f023 0203 	bic.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4936      	ldr	r1, [pc, #216]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff f9c6 	bl	8000ae4 <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	e00a      	b.n	8001772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff f9c2 	bl	8000ae4 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e053      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 020c 	and.w	r2, r3, #12
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1eb      	bne.n	800175c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d210      	bcs.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 0207 	bic.w	r2, r3, #7
 800179a:	4922      	ldr	r1, [pc, #136]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e032      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	490e      	ldr	r1, [pc, #56]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f2:	f000 f821 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80017f6:	4602      	mov	r2, r0
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	490a      	ldr	r1, [pc, #40]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	5ccb      	ldrb	r3, [r1, r3]
 8001806:	fa22 f303 	lsr.w	r3, r2, r3
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1cc>)
 800180c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1d0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f880 	bl	8000918 <HAL_InitTick>

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000
 8001828:	40021000 	.word	0x40021000
 800182c:	08003688 	.word	0x08003688
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800183c:	b09d      	sub	sp, #116	; 0x74
 800183e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001840:	4b81      	ldr	r3, [pc, #516]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x210>)
 8001842:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001848:	c407      	stmia	r4!, {r0, r1, r2}
 800184a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800184c:	4b7f      	ldr	r3, [pc, #508]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x214>)
 800184e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	667b      	str	r3, [r7, #100]	; 0x64
 800185c:	2300      	movs	r3, #0
 800185e:	663b      	str	r3, [r7, #96]	; 0x60
 8001860:	2300      	movs	r3, #0
 8001862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001864:	2300      	movs	r3, #0
 8001866:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001870:	2300      	movs	r3, #0
 8001872:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001874:	4b76      	ldr	r3, [pc, #472]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x218>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800187a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b04      	cmp	r3, #4
 8001882:	d002      	beq.n	800188a <HAL_RCC_GetSysClockFreq+0x52>
 8001884:	2b08      	cmp	r3, #8
 8001886:	d003      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x58>
 8001888:	e0d4      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800188a:	4b72      	ldr	r3, [pc, #456]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x21c>)
 800188c:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 800188e:	e0d4      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001892:	0c9b      	lsrs	r3, r3, #18
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	3340      	adds	r3, #64	; 0x40
 800189a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800189e:	4413      	add	r3, r2
 80018a0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80018a4:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80b9 	beq.w	8001a24 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80018b2:	4b67      	ldr	r3, [pc, #412]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x218>)
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3340      	adds	r3, #64	; 0x40
 80018bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018c0:	4413      	add	r3, r2
 80018c2:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80018c6:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80018c8:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x218>)
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 8095 	beq.w	8001a00 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80018d6:	4b5e      	ldr	r3, [pc, #376]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x218>)
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	3301      	adds	r3, #1
 80018e2:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80018e4:	4b5a      	ldr	r3, [pc, #360]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x218>)
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3302      	adds	r3, #2
 80018f0:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80018f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f4:	2200      	movs	r2, #0
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	61fa      	str	r2, [r7, #28]
 80018fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fc:	2200      	movs	r2, #0
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001900:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001902:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001906:	4622      	mov	r2, r4
 8001908:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800190c:	4684      	mov	ip, r0
 800190e:	fb0c f202 	mul.w	r2, ip, r2
 8001912:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001916:	468c      	mov	ip, r1
 8001918:	4618      	mov	r0, r3
 800191a:	4621      	mov	r1, r4
 800191c:	4603      	mov	r3, r0
 800191e:	fb03 f30c 	mul.w	r3, r3, ip
 8001922:	4413      	add	r3, r2
 8001924:	4602      	mov	r2, r0
 8001926:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001928:	fba2 8901 	umull	r8, r9, r2, r1
 800192c:	444b      	add	r3, r9
 800192e:	4699      	mov	r9, r3
 8001930:	4642      	mov	r2, r8
 8001932:	464b      	mov	r3, r9
 8001934:	f04f 0000 	mov.w	r0, #0
 8001938:	f04f 0100 	mov.w	r1, #0
 800193c:	0159      	lsls	r1, r3, #5
 800193e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001942:	0150      	lsls	r0, r2, #5
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	ebb2 0508 	subs.w	r5, r2, r8
 800194c:	eb63 0609 	sbc.w	r6, r3, r9
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	01b3      	lsls	r3, r6, #6
 800195a:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 800195e:	01aa      	lsls	r2, r5, #6
 8001960:	ebb2 0a05 	subs.w	sl, r2, r5
 8001964:	eb63 0b06 	sbc.w	fp, r3, r6
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001974:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800197c:	4692      	mov	sl, r2
 800197e:	469b      	mov	fp, r3
 8001980:	eb1a 0308 	adds.w	r3, sl, r8
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	eb4b 0309 	adc.w	r3, fp, r9
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001998:	4629      	mov	r1, r5
 800199a:	024b      	lsls	r3, r1, #9
 800199c:	4620      	mov	r0, r4
 800199e:	4629      	mov	r1, r5
 80019a0:	4604      	mov	r4, r0
 80019a2:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80019a6:	4601      	mov	r1, r0
 80019a8:	024a      	lsls	r2, r1, #9
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019b0:	2200      	movs	r2, #0
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	617a      	str	r2, [r7, #20]
 80019b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019b8:	2200      	movs	r2, #0
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	60fa      	str	r2, [r7, #12]
 80019be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80019c2:	4622      	mov	r2, r4
 80019c4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80019c8:	4645      	mov	r5, r8
 80019ca:	fb05 f202 	mul.w	r2, r5, r2
 80019ce:	464e      	mov	r6, r9
 80019d0:	4625      	mov	r5, r4
 80019d2:	461c      	mov	r4, r3
 80019d4:	4623      	mov	r3, r4
 80019d6:	fb03 f306 	mul.w	r3, r3, r6
 80019da:	4413      	add	r3, r2
 80019dc:	4622      	mov	r2, r4
 80019de:	4644      	mov	r4, r8
 80019e0:	fba2 2404 	umull	r2, r4, r2, r4
 80019e4:	627c      	str	r4, [r7, #36]	; 0x24
 80019e6:	623a      	str	r2, [r7, #32]
 80019e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ea:	4413      	add	r3, r2
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
 80019ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019f2:	f7fe fc1d 	bl	8000230 <__aeabi_uldivmod>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4613      	mov	r3, r2
 80019fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80019fe:	e007      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a02:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x21c>)
 8001a04:	fb03 f202 	mul.w	r2, r3, r2
 8001a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001a10:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001a14:	461a      	mov	r2, r3
 8001a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d108      	bne.n	8001a2e <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 8001a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a22:	e004      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a26:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x220>)
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 8001a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a30:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8001a32:	e002      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x21c>)
 8001a36:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8001a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3774      	adds	r7, #116	; 0x74
 8001a40:	46bd      	mov	sp, r7
 8001a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a46:	bf00      	nop
 8001a48:	08003660 	.word	0x08003660
 8001a4c:	08003670 	.word	0x08003670
 8001a50:	40021000 	.word	0x40021000
 8001a54:	007a1200 	.word	0x007a1200
 8001a58:	003d0900 	.word	0x003d0900

08001a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a60:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	20000000 	.word	0x20000000

08001a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a74:	f7ff fff2 	bl	8001a5c <HAL_RCC_GetHCLKFreq>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	4903      	ldr	r1, [pc, #12]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a86:	5ccb      	ldrb	r3, [r1, r3]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08003698 	.word	0x08003698

08001a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a9c:	f7ff ffde 	bl	8001a5c <HAL_RCC_GetHCLKFreq>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	0adb      	lsrs	r3, r3, #11
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4903      	ldr	r1, [pc, #12]	; (8001abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aae:	5ccb      	ldrb	r3, [r1, r3]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	08003698 	.word	0x08003698

08001ac0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	220f      	movs	r2, #15
 8001ace:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_RCC_GetClockConfig+0x58>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0203 	and.w	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_RCC_GetClockConfig+0x58>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_RCC_GetClockConfig+0x58>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_RCC_GetClockConfig+0x58>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0207 	and.w	r2, r3, #7
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40022000 	.word	0x40022000

08001b20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <RCC_Delay+0x34>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <RCC_Delay+0x38>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0a5b      	lsrs	r3, r3, #9
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	fb02 f303 	mul.w	r3, r2, r3
 8001b3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b3c:	bf00      	nop
  }
  while (Delay --);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1e5a      	subs	r2, r3, #1
 8001b42:	60fa      	str	r2, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f9      	bne.n	8001b3c <RCC_Delay+0x1c>
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	20000000 	.word	0x20000000
 8001b58:	10624dd3 	.word	0x10624dd3

08001b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e041      	b.n	8001bf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d106      	bne.n	8001b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f839 	bl	8001bfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3304      	adds	r3, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	f000 f9bc 	bl	8001f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d001      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e03f      	b.n	8001ca4 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xa4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_TIM_Base_Start_IT+0x62>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4e:	d00e      	beq.n	8001c6e <HAL_TIM_Base_Start_IT+0x62>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xa8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d009      	beq.n	8001c6e <HAL_TIM_Base_Start_IT+0x62>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a16      	ldr	r2, [pc, #88]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xac>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d004      	beq.n	8001c6e <HAL_TIM_Base_Start_IT+0x62>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <HAL_TIM_Base_Start_IT+0xb0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d111      	bne.n	8001c92 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b06      	cmp	r3, #6
 8001c7e:	d010      	beq.n	8001ca2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c90:	e007      	b.n	8001ca2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40012c00 	.word	0x40012c00
 8001cb4:	40000400 	.word	0x40000400
 8001cb8:	40000800 	.word	0x40000800
 8001cbc:	40000c00 	.word	0x40000c00

08001cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d122      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d11b      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0202 	mvn.w	r2, #2
 8001cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8ed 	bl	8001ee2 <HAL_TIM_IC_CaptureCallback>
 8001d08:	e005      	b.n	8001d16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8e0 	bl	8001ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f8ef 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d122      	bne.n	8001d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d11b      	bne.n	8001d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0204 	mvn.w	r2, #4
 8001d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2202      	movs	r2, #2
 8001d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8c3 	bl	8001ee2 <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8b6 	bl	8001ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f8c5 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d122      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0208 	mvn.w	r2, #8
 8001d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f899 	bl	8001ee2 <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f88c 	bl	8001ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f89b 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d122      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b10      	cmp	r3, #16
 8001dde:	d11b      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0210 	mvn.w	r2, #16
 8001de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2208      	movs	r2, #8
 8001dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f86f 	bl	8001ee2 <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f862 	bl	8001ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f871 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d10e      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d107      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0201 	mvn.w	r2, #1
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe fce0 	bl	8000804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4e:	2b80      	cmp	r3, #128	; 0x80
 8001e50:	d10e      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5c:	2b80      	cmp	r3, #128	; 0x80
 8001e5e:	d107      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8c9 	bl	8002002 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7a:	2b40      	cmp	r3, #64	; 0x40
 8001e7c:	d10e      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e88:	2b40      	cmp	r3, #64	; 0x40
 8001e8a:	d107      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f835 	bl	8001f06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d107      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0220 	mvn.w	r2, #32
 8001ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f894 	bl	8001ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a2d      	ldr	r2, [pc, #180]	; (8001fe0 <TIM_Base_SetConfig+0xc8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00f      	beq.n	8001f50 <TIM_Base_SetConfig+0x38>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f36:	d00b      	beq.n	8001f50 <TIM_Base_SetConfig+0x38>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a2a      	ldr	r2, [pc, #168]	; (8001fe4 <TIM_Base_SetConfig+0xcc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <TIM_Base_SetConfig+0x38>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a29      	ldr	r2, [pc, #164]	; (8001fe8 <TIM_Base_SetConfig+0xd0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <TIM_Base_SetConfig+0x38>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a28      	ldr	r2, [pc, #160]	; (8001fec <TIM_Base_SetConfig+0xd4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d108      	bne.n	8001f62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a1e      	ldr	r2, [pc, #120]	; (8001fe0 <TIM_Base_SetConfig+0xc8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00f      	beq.n	8001f8a <TIM_Base_SetConfig+0x72>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d00b      	beq.n	8001f8a <TIM_Base_SetConfig+0x72>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <TIM_Base_SetConfig+0xcc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d007      	beq.n	8001f8a <TIM_Base_SetConfig+0x72>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a1a      	ldr	r2, [pc, #104]	; (8001fe8 <TIM_Base_SetConfig+0xd0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d003      	beq.n	8001f8a <TIM_Base_SetConfig+0x72>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a19      	ldr	r2, [pc, #100]	; (8001fec <TIM_Base_SetConfig+0xd4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d108      	bne.n	8001f9c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <TIM_Base_SetConfig+0xc8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d103      	bne.n	8001fd0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	615a      	str	r2, [r3, #20]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	40012c00 	.word	0x40012c00
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40000800 	.word	0x40000800
 8001fec:	40000c00 	.word	0x40000c00

08001ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e03f      	b.n	80020a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe fc22 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2224      	movs	r2, #36	; 0x24
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f829 	bl	80020b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800206c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800207c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800208c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2220      	movs	r2, #32
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020ea:	f023 030c 	bic.w	r3, r3, #12
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a2c      	ldr	r2, [pc, #176]	; (80021c4 <UART_SetConfig+0x114>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d103      	bne.n	8002120 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002118:	f7ff fcbe 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	e002      	b.n	8002126 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002120:	f7ff fca6 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 8002124:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	009a      	lsls	r2, r3, #2
 8002130:	441a      	add	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <UART_SetConfig+0x118>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	0119      	lsls	r1, r3, #4
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	009a      	lsls	r2, r3, #2
 8002150:	441a      	add	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fbb2 f2f3 	udiv	r2, r2, r3
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <UART_SetConfig+0x118>)
 800215e:	fba3 0302 	umull	r0, r3, r3, r2
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2064      	movs	r0, #100	; 0x64
 8002166:	fb00 f303 	mul.w	r3, r0, r3
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	3332      	adds	r3, #50	; 0x32
 8002170:	4a15      	ldr	r2, [pc, #84]	; (80021c8 <UART_SetConfig+0x118>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800217c:	4419      	add	r1, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	009a      	lsls	r2, r3, #2
 8002188:	441a      	add	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	fbb2 f2f3 	udiv	r2, r2, r3
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <UART_SetConfig+0x118>)
 8002196:	fba3 0302 	umull	r0, r3, r3, r2
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2064      	movs	r0, #100	; 0x64
 800219e:	fb00 f303 	mul.w	r3, r0, r3
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	3332      	adds	r3, #50	; 0x32
 80021a8:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <UART_SetConfig+0x118>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	f003 020f 	and.w	r2, r3, #15
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	440a      	add	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40013800 	.word	0x40013800
 80021c8:	51eb851f 	.word	0x51eb851f

080021cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80021da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021de:	2b84      	cmp	r3, #132	; 0x84
 80021e0:	d005      	beq.n	80021ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80021e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4413      	add	r3, r2
 80021ea:	3303      	adds	r3, #3
 80021ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80021fe:	f000 fad1 	bl	80027a4 <vTaskStartScheduler>
  
  return osOK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}

08002208 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af04      	add	r7, sp, #16
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d020      	beq.n	800225c <osThreadCreate+0x54>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d01c      	beq.n	800225c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685c      	ldr	r4, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681d      	ldr	r5, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691e      	ldr	r6, [r3, #16]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ffc9 	bl	80021cc <makeFreeRtosPriority>
 800223a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002244:	9202      	str	r2, [sp, #8]
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	9100      	str	r1, [sp, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	4632      	mov	r2, r6
 800224e:	4629      	mov	r1, r5
 8002250:	4620      	mov	r0, r4
 8002252:	f000 f8e8 	bl	8002426 <xTaskCreateStatic>
 8002256:	4603      	mov	r3, r0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	e01c      	b.n	8002296 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685c      	ldr	r4, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002268:	b29e      	uxth	r6, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ffab 	bl	80021cc <makeFreeRtosPriority>
 8002276:	4602      	mov	r2, r0
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	9200      	str	r2, [sp, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4632      	mov	r2, r6
 8002284:	4629      	mov	r1, r5
 8002286:	4620      	mov	r0, r4
 8002288:	f000 f929 	bl	80024de <xTaskCreate>
 800228c:	4603      	mov	r3, r0
 800228e:	2b01      	cmp	r3, #1
 8002290:	d001      	beq.n	8002296 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002292:	2300      	movs	r3, #0
 8002294:	e000      	b.n	8002298 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <osDelay+0x16>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	e000      	b.n	80022b8 <osDelay+0x18>
 80022b6:	2301      	movs	r3, #1
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fa3f 	bl	800273c <vTaskDelay>
  
  return osOK;
 80022be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f103 0208 	add.w	r2, r3, #8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f103 0208 	add.w	r2, r3, #8
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f103 0208 	add.w	r2, r3, #8
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	601a      	str	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237a:	d103      	bne.n	8002384 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e00c      	b.n	800239e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3308      	adds	r3, #8
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	e002      	b.n	8002392 <vListInsert+0x2e>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	429a      	cmp	r2, r3
 800239c:	d2f6      	bcs.n	800238c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	601a      	str	r2, [r3, #0]
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6892      	ldr	r2, [r2, #8]
 80023ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6852      	ldr	r2, [r2, #4]
 80023f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d103      	bne.n	8002408 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	1e5a      	subs	r2, r3, #1
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002426:	b580      	push	{r7, lr}
 8002428:	b08e      	sub	sp, #56	; 0x38
 800242a:	af04      	add	r7, sp, #16
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10a      	bne.n	8002450 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800244c:	bf00      	nop
 800244e:	e7fe      	b.n	800244e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10a      	bne.n	800246c <xTaskCreateStatic+0x46>
	__asm volatile
 8002456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245a:	f383 8811 	msr	BASEPRI, r3
 800245e:	f3bf 8f6f 	isb	sy
 8002462:	f3bf 8f4f 	dsb	sy
 8002466:	61fb      	str	r3, [r7, #28]
}
 8002468:	bf00      	nop
 800246a:	e7fe      	b.n	800246a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800246c:	2354      	movs	r3, #84	; 0x54
 800246e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b54      	cmp	r3, #84	; 0x54
 8002474:	d00a      	beq.n	800248c <xTaskCreateStatic+0x66>
	__asm volatile
 8002476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	61bb      	str	r3, [r7, #24]
}
 8002488:	bf00      	nop
 800248a:	e7fe      	b.n	800248a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800248c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800248e:	2b00      	cmp	r3, #0
 8002490:	d01e      	beq.n	80024d0 <xTaskCreateStatic+0xaa>
 8002492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01b      	beq.n	80024d0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	2202      	movs	r2, #2
 80024a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80024aa:	2300      	movs	r3, #0
 80024ac:	9303      	str	r3, [sp, #12]
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	9302      	str	r3, [sp, #8]
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f850 	bl	8002568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024ca:	f000 f8cd 	bl	8002668 <prvAddNewTaskToReadyList>
 80024ce:	e001      	b.n	80024d4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80024d4:	697b      	ldr	r3, [r7, #20]
	}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3728      	adds	r7, #40	; 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b08c      	sub	sp, #48	; 0x30
 80024e2:	af04      	add	r7, sp, #16
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	603b      	str	r3, [r7, #0]
 80024ea:	4613      	mov	r3, r2
 80024ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fe6c 	bl	80031d0 <pvPortMalloc>
 80024f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00e      	beq.n	800251e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002500:	2054      	movs	r0, #84	; 0x54
 8002502:	f000 fe65 	bl	80031d0 <pvPortMalloc>
 8002506:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
 8002514:	e005      	b.n	8002522 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f000 ff1e 	bl	8003358 <vPortFree>
 800251c:	e001      	b.n	8002522 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d017      	beq.n	8002558 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002530:	88fa      	ldrh	r2, [r7, #6]
 8002532:	2300      	movs	r3, #0
 8002534:	9303      	str	r3, [sp, #12]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	9302      	str	r3, [sp, #8]
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f80e 	bl	8002568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800254c:	69f8      	ldr	r0, [r7, #28]
 800254e:	f000 f88b 	bl	8002668 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002552:	2301      	movs	r3, #1
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	e002      	b.n	800255e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002558:	f04f 33ff 	mov.w	r3, #4294967295
 800255c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800255e:	69bb      	ldr	r3, [r7, #24]
	}
 8002560:	4618      	mov	r0, r3
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002580:	3b01      	subs	r3, #1
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f023 0307 	bic.w	r3, r3, #7
 800258e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800259a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259e:	f383 8811 	msr	BASEPRI, r3
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	617b      	str	r3, [r7, #20]
}
 80025ac:	bf00      	nop
 80025ae:	e7fe      	b.n	80025ae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	e012      	b.n	80025dc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	4413      	add	r3, r2
 80025bc:	7819      	ldrb	r1, [r3, #0]
 80025be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	4413      	add	r3, r2
 80025c4:	3334      	adds	r3, #52	; 0x34
 80025c6:	460a      	mov	r2, r1
 80025c8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	4413      	add	r3, r2
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3301      	adds	r3, #1
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	2b0f      	cmp	r3, #15
 80025e0:	d9e9      	bls.n	80025b6 <prvInitialiseNewTask+0x4e>
 80025e2:	e000      	b.n	80025e6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80025e4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	2b06      	cmp	r3, #6
 80025f2:	d901      	bls.n	80025f8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025f4:	2306      	movs	r3, #6
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80025fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002602:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002606:	2200      	movs	r2, #0
 8002608:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	3304      	adds	r3, #4
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fe79 	bl	8002306 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	3318      	adds	r3, #24
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fe74 	bl	8002306 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002622:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	f1c3 0207 	rsb	r2, r3, #7
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002632:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002636:	2200      	movs	r2, #0
 8002638:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	68f9      	ldr	r1, [r7, #12]
 8002646:	69b8      	ldr	r0, [r7, #24]
 8002648:	f000 fc0e 	bl	8002e68 <pxPortInitialiseStack>
 800264c:	4602      	mov	r2, r0
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800265c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800265e:	bf00      	nop
 8002660:	3720      	adds	r7, #32
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002670:	f000 fcec 	bl	800304c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002674:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <prvAddNewTaskToReadyList+0xb8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	4a29      	ldr	r2, [pc, #164]	; (8002720 <prvAddNewTaskToReadyList+0xb8>)
 800267c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800267e:	4b29      	ldr	r3, [pc, #164]	; (8002724 <prvAddNewTaskToReadyList+0xbc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002686:	4a27      	ldr	r2, [pc, #156]	; (8002724 <prvAddNewTaskToReadyList+0xbc>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800268c:	4b24      	ldr	r3, [pc, #144]	; (8002720 <prvAddNewTaskToReadyList+0xb8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d110      	bne.n	80026b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002694:	f000 fac0 	bl	8002c18 <prvInitialiseTaskLists>
 8002698:	e00d      	b.n	80026b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800269a:	4b23      	ldr	r3, [pc, #140]	; (8002728 <prvAddNewTaskToReadyList+0xc0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026a2:	4b20      	ldr	r3, [pc, #128]	; (8002724 <prvAddNewTaskToReadyList+0xbc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d802      	bhi.n	80026b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80026b0:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <prvAddNewTaskToReadyList+0xbc>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80026b6:	4b1d      	ldr	r3, [pc, #116]	; (800272c <prvAddNewTaskToReadyList+0xc4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3301      	adds	r3, #1
 80026bc:	4a1b      	ldr	r2, [pc, #108]	; (800272c <prvAddNewTaskToReadyList+0xc4>)
 80026be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	2201      	movs	r2, #1
 80026c6:	409a      	lsls	r2, r3
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <prvAddNewTaskToReadyList+0xc8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	4a18      	ldr	r2, [pc, #96]	; (8002730 <prvAddNewTaskToReadyList+0xc8>)
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4a15      	ldr	r2, [pc, #84]	; (8002734 <prvAddNewTaskToReadyList+0xcc>)
 80026e0:	441a      	add	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	4619      	mov	r1, r3
 80026e8:	4610      	mov	r0, r2
 80026ea:	f7ff fe18 	bl	800231e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80026ee:	f000 fcdd 	bl	80030ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <prvAddNewTaskToReadyList+0xc0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00e      	beq.n	8002718 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <prvAddNewTaskToReadyList+0xbc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	429a      	cmp	r2, r3
 8002706:	d207      	bcs.n	8002718 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <prvAddNewTaskToReadyList+0xd0>)
 800270a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	2000041c 	.word	0x2000041c
 8002724:	2000031c 	.word	0x2000031c
 8002728:	20000428 	.word	0x20000428
 800272c:	20000438 	.word	0x20000438
 8002730:	20000424 	.word	0x20000424
 8002734:	20000320 	.word	0x20000320
 8002738:	e000ed04 	.word	0xe000ed04

0800273c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d017      	beq.n	800277e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800274e:	4b13      	ldr	r3, [pc, #76]	; (800279c <vTaskDelay+0x60>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <vTaskDelay+0x30>
	__asm volatile
 8002756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275a:	f383 8811 	msr	BASEPRI, r3
 800275e:	f3bf 8f6f 	isb	sy
 8002762:	f3bf 8f4f 	dsb	sy
 8002766:	60bb      	str	r3, [r7, #8]
}
 8002768:	bf00      	nop
 800276a:	e7fe      	b.n	800276a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800276c:	f000 f87a 	bl	8002864 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002770:	2100      	movs	r1, #0
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fb12 	bl	8002d9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002778:	f000 f882 	bl	8002880 <xTaskResumeAll>
 800277c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d107      	bne.n	8002794 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <vTaskDelay+0x64>)
 8002786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000444 	.word	0x20000444
 80027a0:	e000ed04 	.word	0xe000ed04

080027a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80027b2:	463a      	mov	r2, r7
 80027b4:	1d39      	adds	r1, r7, #4
 80027b6:	f107 0308 	add.w	r3, r7, #8
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd febc 	bl	8000538 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80027c0:	6839      	ldr	r1, [r7, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	9202      	str	r2, [sp, #8]
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	2300      	movs	r3, #0
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2300      	movs	r3, #0
 80027d0:	460a      	mov	r2, r1
 80027d2:	491e      	ldr	r1, [pc, #120]	; (800284c <vTaskStartScheduler+0xa8>)
 80027d4:	481e      	ldr	r0, [pc, #120]	; (8002850 <vTaskStartScheduler+0xac>)
 80027d6:	f7ff fe26 	bl	8002426 <xTaskCreateStatic>
 80027da:	4603      	mov	r3, r0
 80027dc:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <vTaskStartScheduler+0xb0>)
 80027de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80027e0:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <vTaskStartScheduler+0xb0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80027e8:	2301      	movs	r3, #1
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	e001      	b.n	80027f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d116      	bne.n	8002826 <vTaskStartScheduler+0x82>
	__asm volatile
 80027f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	613b      	str	r3, [r7, #16]
}
 800280a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <vTaskStartScheduler+0xb4>)
 800280e:	f04f 32ff 	mov.w	r2, #4294967295
 8002812:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <vTaskStartScheduler+0xb8>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <vTaskStartScheduler+0xbc>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002820:	f000 fba2 	bl	8002f68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002824:	e00e      	b.n	8002844 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d10a      	bne.n	8002844 <vTaskStartScheduler+0xa0>
	__asm volatile
 800282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	60fb      	str	r3, [r7, #12]
}
 8002840:	bf00      	nop
 8002842:	e7fe      	b.n	8002842 <vTaskStartScheduler+0x9e>
}
 8002844:	bf00      	nop
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	08003680 	.word	0x08003680
 8002850:	08002be9 	.word	0x08002be9
 8002854:	20000440 	.word	0x20000440
 8002858:	2000043c 	.word	0x2000043c
 800285c:	20000428 	.word	0x20000428
 8002860:	20000420 	.word	0x20000420

08002864 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <vTaskSuspendAll+0x18>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	3301      	adds	r3, #1
 800286e:	4a03      	ldr	r2, [pc, #12]	; (800287c <vTaskSuspendAll+0x18>)
 8002870:	6013      	str	r3, [r2, #0]
}
 8002872:	bf00      	nop
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000444 	.word	0x20000444

08002880 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800288e:	4b41      	ldr	r3, [pc, #260]	; (8002994 <xTaskResumeAll+0x114>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10a      	bne.n	80028ac <xTaskResumeAll+0x2c>
	__asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	603b      	str	r3, [r7, #0]
}
 80028a8:	bf00      	nop
 80028aa:	e7fe      	b.n	80028aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80028ac:	f000 fbce 	bl	800304c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80028b0:	4b38      	ldr	r3, [pc, #224]	; (8002994 <xTaskResumeAll+0x114>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	4a37      	ldr	r2, [pc, #220]	; (8002994 <xTaskResumeAll+0x114>)
 80028b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <xTaskResumeAll+0x114>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d161      	bne.n	8002986 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028c2:	4b35      	ldr	r3, [pc, #212]	; (8002998 <xTaskResumeAll+0x118>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d05d      	beq.n	8002986 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028ca:	e02e      	b.n	800292a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80028cc:	4b33      	ldr	r3, [pc, #204]	; (800299c <xTaskResumeAll+0x11c>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3318      	adds	r3, #24
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fd7b 	bl	80023d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3304      	adds	r3, #4
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fd76 	bl	80023d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	2201      	movs	r2, #1
 80028ee:	409a      	lsls	r2, r3
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <xTaskResumeAll+0x120>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	4a2a      	ldr	r2, [pc, #168]	; (80029a0 <xTaskResumeAll+0x120>)
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4a27      	ldr	r2, [pc, #156]	; (80029a4 <xTaskResumeAll+0x124>)
 8002908:	441a      	add	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3304      	adds	r3, #4
 800290e:	4619      	mov	r1, r3
 8002910:	4610      	mov	r0, r2
 8002912:	f7ff fd04 	bl	800231e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291a:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <xTaskResumeAll+0x128>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	429a      	cmp	r2, r3
 8002922:	d302      	bcc.n	800292a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002924:	4b21      	ldr	r3, [pc, #132]	; (80029ac <xTaskResumeAll+0x12c>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800292a:	4b1c      	ldr	r3, [pc, #112]	; (800299c <xTaskResumeAll+0x11c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1cc      	bne.n	80028cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002938:	f000 fa0c 	bl	8002d54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800293c:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <xTaskResumeAll+0x130>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d010      	beq.n	800296a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002948:	f000 f836 	bl	80029b8 <xTaskIncrementTick>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002952:	4b16      	ldr	r3, [pc, #88]	; (80029ac <xTaskResumeAll+0x12c>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f1      	bne.n	8002948 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <xTaskResumeAll+0x130>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <xTaskResumeAll+0x12c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002972:	2301      	movs	r3, #1
 8002974:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <xTaskResumeAll+0x134>)
 8002978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	f3bf 8f4f 	dsb	sy
 8002982:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002986:	f000 fb91 	bl	80030ac <vPortExitCritical>

	return xAlreadyYielded;
 800298a:	68bb      	ldr	r3, [r7, #8]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000444 	.word	0x20000444
 8002998:	2000041c 	.word	0x2000041c
 800299c:	200003dc 	.word	0x200003dc
 80029a0:	20000424 	.word	0x20000424
 80029a4:	20000320 	.word	0x20000320
 80029a8:	2000031c 	.word	0x2000031c
 80029ac:	20000430 	.word	0x20000430
 80029b0:	2000042c 	.word	0x2000042c
 80029b4:	e000ed04 	.word	0xe000ed04

080029b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029c2:	4b51      	ldr	r3, [pc, #324]	; (8002b08 <xTaskIncrementTick+0x150>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 808d 	bne.w	8002ae6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029cc:	4b4f      	ldr	r3, [pc, #316]	; (8002b0c <xTaskIncrementTick+0x154>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3301      	adds	r3, #1
 80029d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80029d4:	4a4d      	ldr	r2, [pc, #308]	; (8002b0c <xTaskIncrementTick+0x154>)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d120      	bne.n	8002a22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80029e0:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <xTaskIncrementTick+0x158>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <xTaskIncrementTick+0x48>
	__asm volatile
 80029ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	603b      	str	r3, [r7, #0]
}
 80029fc:	bf00      	nop
 80029fe:	e7fe      	b.n	80029fe <xTaskIncrementTick+0x46>
 8002a00:	4b43      	ldr	r3, [pc, #268]	; (8002b10 <xTaskIncrementTick+0x158>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	4b43      	ldr	r3, [pc, #268]	; (8002b14 <xTaskIncrementTick+0x15c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a41      	ldr	r2, [pc, #260]	; (8002b10 <xTaskIncrementTick+0x158>)
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4a41      	ldr	r2, [pc, #260]	; (8002b14 <xTaskIncrementTick+0x15c>)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b40      	ldr	r3, [pc, #256]	; (8002b18 <xTaskIncrementTick+0x160>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	4a3f      	ldr	r2, [pc, #252]	; (8002b18 <xTaskIncrementTick+0x160>)
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	f000 f999 	bl	8002d54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a22:	4b3e      	ldr	r3, [pc, #248]	; (8002b1c <xTaskIncrementTick+0x164>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d34d      	bcc.n	8002ac8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a2c:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <xTaskIncrementTick+0x158>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <xTaskIncrementTick+0x82>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <xTaskIncrementTick+0x84>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a40:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <xTaskIncrementTick+0x164>)
 8002a42:	f04f 32ff 	mov.w	r2, #4294967295
 8002a46:	601a      	str	r2, [r3, #0]
					break;
 8002a48:	e03e      	b.n	8002ac8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a4a:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <xTaskIncrementTick+0x158>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d203      	bcs.n	8002a6a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002a62:	4a2e      	ldr	r2, [pc, #184]	; (8002b1c <xTaskIncrementTick+0x164>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6013      	str	r3, [r2, #0]
						break;
 8002a68:	e02e      	b.n	8002ac8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fcb0 	bl	80023d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d004      	beq.n	8002a86 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	3318      	adds	r3, #24
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fca7 	bl	80023d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <xTaskIncrementTick+0x168>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	4a22      	ldr	r2, [pc, #136]	; (8002b20 <xTaskIncrementTick+0x168>)
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <xTaskIncrementTick+0x16c>)
 8002aa6:	441a      	add	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	3304      	adds	r3, #4
 8002aac:	4619      	mov	r1, r3
 8002aae:	4610      	mov	r0, r2
 8002ab0:	f7ff fc35 	bl	800231e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <xTaskIncrementTick+0x170>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d3b4      	bcc.n	8002a2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ac6:	e7b1      	b.n	8002a2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ac8:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <xTaskIncrementTick+0x170>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ace:	4915      	ldr	r1, [pc, #84]	; (8002b24 <xTaskIncrementTick+0x16c>)
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d907      	bls.n	8002af0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	e004      	b.n	8002af0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <xTaskIncrementTick+0x174>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3301      	adds	r3, #1
 8002aec:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <xTaskIncrementTick+0x174>)
 8002aee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <xTaskIncrementTick+0x178>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002af8:	2301      	movs	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002afc:	697b      	ldr	r3, [r7, #20]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000444 	.word	0x20000444
 8002b0c:	20000420 	.word	0x20000420
 8002b10:	200003d4 	.word	0x200003d4
 8002b14:	200003d8 	.word	0x200003d8
 8002b18:	20000434 	.word	0x20000434
 8002b1c:	2000043c 	.word	0x2000043c
 8002b20:	20000424 	.word	0x20000424
 8002b24:	20000320 	.word	0x20000320
 8002b28:	2000031c 	.word	0x2000031c
 8002b2c:	2000042c 	.word	0x2000042c
 8002b30:	20000430 	.word	0x20000430

08002b34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b3a:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <vTaskSwitchContext+0xa0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b42:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <vTaskSwitchContext+0xa4>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b48:	e03f      	b.n	8002bca <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002b4a:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <vTaskSwitchContext+0xa4>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b50:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <vTaskSwitchContext+0xa8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002b5e:	7afb      	ldrb	r3, [r7, #11]
 8002b60:	f1c3 031f 	rsb	r3, r3, #31
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	491e      	ldr	r1, [pc, #120]	; (8002be0 <vTaskSwitchContext+0xac>)
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	607b      	str	r3, [r7, #4]
}
 8002b8c:	bf00      	nop
 8002b8e:	e7fe      	b.n	8002b8e <vTaskSwitchContext+0x5a>
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4a11      	ldr	r2, [pc, #68]	; (8002be0 <vTaskSwitchContext+0xac>)
 8002b9c:	4413      	add	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	3308      	adds	r3, #8
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d104      	bne.n	8002bc0 <vTaskSwitchContext+0x8c>
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <vTaskSwitchContext+0xb0>)
 8002bc8:	6013      	str	r3, [r2, #0]
}
 8002bca:	bf00      	nop
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	20000444 	.word	0x20000444
 8002bd8:	20000430 	.word	0x20000430
 8002bdc:	20000424 	.word	0x20000424
 8002be0:	20000320 	.word	0x20000320
 8002be4:	2000031c 	.word	0x2000031c

08002be8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002bf0:	f000 f852 	bl	8002c98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <prvIdleTask+0x28>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d9f9      	bls.n	8002bf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <prvIdleTask+0x2c>)
 8002bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c0c:	e7f0      	b.n	8002bf0 <prvIdleTask+0x8>
 8002c0e:	bf00      	nop
 8002c10:	20000320 	.word	0x20000320
 8002c14:	e000ed04 	.word	0xe000ed04

08002c18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	e00c      	b.n	8002c3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <prvInitialiseTaskLists+0x60>)
 8002c30:	4413      	add	r3, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fb48 	bl	80022c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	607b      	str	r3, [r7, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b06      	cmp	r3, #6
 8002c42:	d9ef      	bls.n	8002c24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c44:	480d      	ldr	r0, [pc, #52]	; (8002c7c <prvInitialiseTaskLists+0x64>)
 8002c46:	f7ff fb3f 	bl	80022c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002c4a:	480d      	ldr	r0, [pc, #52]	; (8002c80 <prvInitialiseTaskLists+0x68>)
 8002c4c:	f7ff fb3c 	bl	80022c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002c50:	480c      	ldr	r0, [pc, #48]	; (8002c84 <prvInitialiseTaskLists+0x6c>)
 8002c52:	f7ff fb39 	bl	80022c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002c56:	480c      	ldr	r0, [pc, #48]	; (8002c88 <prvInitialiseTaskLists+0x70>)
 8002c58:	f7ff fb36 	bl	80022c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002c5c:	480b      	ldr	r0, [pc, #44]	; (8002c8c <prvInitialiseTaskLists+0x74>)
 8002c5e:	f7ff fb33 	bl	80022c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <prvInitialiseTaskLists+0x78>)
 8002c64:	4a05      	ldr	r2, [pc, #20]	; (8002c7c <prvInitialiseTaskLists+0x64>)
 8002c66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <prvInitialiseTaskLists+0x7c>)
 8002c6a:	4a05      	ldr	r2, [pc, #20]	; (8002c80 <prvInitialiseTaskLists+0x68>)
 8002c6c:	601a      	str	r2, [r3, #0]
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000320 	.word	0x20000320
 8002c7c:	200003ac 	.word	0x200003ac
 8002c80:	200003c0 	.word	0x200003c0
 8002c84:	200003dc 	.word	0x200003dc
 8002c88:	200003f0 	.word	0x200003f0
 8002c8c:	20000408 	.word	0x20000408
 8002c90:	200003d4 	.word	0x200003d4
 8002c94:	200003d8 	.word	0x200003d8

08002c98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c9e:	e019      	b.n	8002cd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002ca0:	f000 f9d4 	bl	800304c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <prvCheckTasksWaitingTermination+0x50>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fb8f 	bl	80023d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <prvCheckTasksWaitingTermination+0x54>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <prvCheckTasksWaitingTermination+0x54>)
 8002cbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <prvCheckTasksWaitingTermination+0x58>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <prvCheckTasksWaitingTermination+0x58>)
 8002cc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002cca:	f000 f9ef 	bl	80030ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f810 	bl	8002cf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <prvCheckTasksWaitingTermination+0x58>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1e1      	bne.n	8002ca0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200003f0 	.word	0x200003f0
 8002cec:	2000041c 	.word	0x2000041c
 8002cf0:	20000404 	.word	0x20000404

08002cf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d108      	bne.n	8002d18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fb24 	bl	8003358 <vPortFree>
				vPortFree( pxTCB );
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fb21 	bl	8003358 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d16:	e018      	b.n	8002d4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d103      	bne.n	8002d2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fb18 	bl	8003358 <vPortFree>
	}
 8002d28:	e00f      	b.n	8002d4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d00a      	beq.n	8002d4a <prvDeleteTCB+0x56>
	__asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	60fb      	str	r3, [r7, #12]
}
 8002d46:	bf00      	nop
 8002d48:	e7fe      	b.n	8002d48 <prvDeleteTCB+0x54>
	}
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <prvResetNextTaskUnblockTime+0x40>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <prvResetNextTaskUnblockTime+0x14>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <prvResetNextTaskUnblockTime+0x16>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d004      	beq.n	8002d78 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <prvResetNextTaskUnblockTime+0x44>)
 8002d70:	f04f 32ff 	mov.w	r2, #4294967295
 8002d74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002d76:	e008      	b.n	8002d8a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <prvResetNextTaskUnblockTime+0x40>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <prvResetNextTaskUnblockTime+0x44>)
 8002d88:	6013      	str	r3, [r2, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	200003d4 	.word	0x200003d4
 8002d98:	2000043c 	.word	0x2000043c

08002d9c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002da6:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dac:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3304      	adds	r3, #4
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fb0e 	bl	80023d4 <uxListRemove>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10b      	bne.n	8002dd6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002dbe:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	4a20      	ldr	r2, [pc, #128]	; (8002e54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002dd4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d10a      	bne.n	8002df4 <prvAddCurrentTaskToDelayedList+0x58>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002de4:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	3304      	adds	r3, #4
 8002dea:	4619      	mov	r1, r3
 8002dec:	481a      	ldr	r0, [pc, #104]	; (8002e58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002dee:	f7ff fa96 	bl	800231e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002df2:	e026      	b.n	8002e42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d209      	bcs.n	8002e20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e0c:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3304      	adds	r3, #4
 8002e16:	4619      	mov	r1, r3
 8002e18:	4610      	mov	r0, r2
 8002e1a:	f7ff faa3 	bl	8002364 <vListInsert>
}
 8002e1e:	e010      	b.n	8002e42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f7ff fa99 	bl	8002364 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e32:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d202      	bcs.n	8002e42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002e3c:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	6013      	str	r3, [r2, #0]
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000420 	.word	0x20000420
 8002e50:	2000031c 	.word	0x2000031c
 8002e54:	20000424 	.word	0x20000424
 8002e58:	20000408 	.word	0x20000408
 8002e5c:	200003d8 	.word	0x200003d8
 8002e60:	200003d4 	.word	0x200003d4
 8002e64:	2000043c 	.word	0x2000043c

08002e68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	3b04      	subs	r3, #4
 8002e78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3b04      	subs	r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f023 0201 	bic.w	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3b04      	subs	r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e98:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <pxPortInitialiseStack+0x54>)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3b14      	subs	r3, #20
 8002ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3b20      	subs	r3, #32
 8002eae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	08002ec1 	.word	0x08002ec1

08002ec0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <prvTaskExitError+0x54>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d00a      	beq.n	8002eea <prvTaskExitError+0x2a>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	60fb      	str	r3, [r7, #12]
}
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <prvTaskExitError+0x28>
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	60bb      	str	r3, [r7, #8]
}
 8002efc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002efe:	bf00      	nop
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0fc      	beq.n	8002f00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002f06:	bf00      	nop
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	2000000c 	.word	0x2000000c
	...

08002f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002f20:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <pxCurrentTCBConst2>)
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	6808      	ldr	r0, [r1, #0]
 8002f26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f2a:	f380 8809 	msr	PSP, r0
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	f380 8811 	msr	BASEPRI, r0
 8002f3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002f3e:	4770      	bx	lr

08002f40 <pxCurrentTCBConst2>:
 8002f40:	2000031c 	.word	0x2000031c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop

08002f48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002f48:	4806      	ldr	r0, [pc, #24]	; (8002f64 <prvPortStartFirstTask+0x1c>)
 8002f4a:	6800      	ldr	r0, [r0, #0]
 8002f4c:	6800      	ldr	r0, [r0, #0]
 8002f4e:	f380 8808 	msr	MSP, r0
 8002f52:	b662      	cpsie	i
 8002f54:	b661      	cpsie	f
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	df00      	svc	0
 8002f60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002f62:	bf00      	nop
 8002f64:	e000ed08 	.word	0xe000ed08

08002f68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f6e:	4b32      	ldr	r3, [pc, #200]	; (8003038 <xPortStartScheduler+0xd0>)
 8002f70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	22ff      	movs	r2, #255	; 0xff
 8002f7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	4b2a      	ldr	r3, [pc, #168]	; (800303c <xPortStartScheduler+0xd4>)
 8002f94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f96:	4b2a      	ldr	r3, [pc, #168]	; (8003040 <xPortStartScheduler+0xd8>)
 8002f98:	2207      	movs	r2, #7
 8002f9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f9c:	e009      	b.n	8002fb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002f9e:	4b28      	ldr	r3, [pc, #160]	; (8003040 <xPortStartScheduler+0xd8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	4a26      	ldr	r2, [pc, #152]	; (8003040 <xPortStartScheduler+0xd8>)
 8002fa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	2b80      	cmp	r3, #128	; 0x80
 8002fbc:	d0ef      	beq.n	8002f9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <xPortStartScheduler+0xd8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f1c3 0307 	rsb	r3, r3, #7
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d00a      	beq.n	8002fe0 <xPortStartScheduler+0x78>
	__asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	60bb      	str	r3, [r7, #8]
}
 8002fdc:	bf00      	nop
 8002fde:	e7fe      	b.n	8002fde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <xPortStartScheduler+0xd8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	4a16      	ldr	r2, [pc, #88]	; (8003040 <xPortStartScheduler+0xd8>)
 8002fe8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <xPortStartScheduler+0xd8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ff2:	4a13      	ldr	r2, [pc, #76]	; (8003040 <xPortStartScheduler+0xd8>)
 8002ff4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <xPortStartScheduler+0xdc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a10      	ldr	r2, [pc, #64]	; (8003044 <xPortStartScheduler+0xdc>)
 8003004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003008:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <xPortStartScheduler+0xdc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <xPortStartScheduler+0xdc>)
 8003010:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003014:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003016:	f000 f8b9 	bl	800318c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <xPortStartScheduler+0xe0>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003020:	f7ff ff92 	bl	8002f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003024:	f7ff fd86 	bl	8002b34 <vTaskSwitchContext>
	prvTaskExitError();
 8003028:	f7ff ff4a 	bl	8002ec0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	e000e400 	.word	0xe000e400
 800303c:	20000448 	.word	0x20000448
 8003040:	2000044c 	.word	0x2000044c
 8003044:	e000ed20 	.word	0xe000ed20
 8003048:	2000000c 	.word	0x2000000c

0800304c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
	__asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	607b      	str	r3, [r7, #4]
}
 8003064:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003066:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <vPortEnterCritical+0x58>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3301      	adds	r3, #1
 800306c:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <vPortEnterCritical+0x58>)
 800306e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <vPortEnterCritical+0x58>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d10f      	bne.n	8003098 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <vPortEnterCritical+0x5c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <vPortEnterCritical+0x4c>
	__asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	603b      	str	r3, [r7, #0]
}
 8003094:	bf00      	nop
 8003096:	e7fe      	b.n	8003096 <vPortEnterCritical+0x4a>
	}
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	2000000c 	.word	0x2000000c
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80030b2:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <vPortExitCritical+0x4c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <vPortExitCritical+0x24>
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	607b      	str	r3, [r7, #4]
}
 80030cc:	bf00      	nop
 80030ce:	e7fe      	b.n	80030ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80030d0:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <vPortExitCritical+0x4c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <vPortExitCritical+0x4c>)
 80030d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80030da:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <vPortExitCritical+0x4c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d105      	bne.n	80030ee <vPortExitCritical+0x42>
 80030e2:	2300      	movs	r3, #0
 80030e4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	2000000c 	.word	0x2000000c
 80030fc:	00000000 	.word	0x00000000

08003100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003100:	f3ef 8009 	mrs	r0, PSP
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <pxCurrentTCBConst>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003110:	6010      	str	r0, [r2, #0]
 8003112:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003116:	f04f 0050 	mov.w	r0, #80	; 0x50
 800311a:	f380 8811 	msr	BASEPRI, r0
 800311e:	f7ff fd09 	bl	8002b34 <vTaskSwitchContext>
 8003122:	f04f 0000 	mov.w	r0, #0
 8003126:	f380 8811 	msr	BASEPRI, r0
 800312a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800312e:	6819      	ldr	r1, [r3, #0]
 8003130:	6808      	ldr	r0, [r1, #0]
 8003132:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003136:	f380 8809 	msr	PSP, r0
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	4770      	bx	lr

08003140 <pxCurrentTCBConst>:
 8003140:	2000031c 	.word	0x2000031c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop

08003148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
	__asm volatile
 800314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	607b      	str	r3, [r7, #4]
}
 8003160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003162:	f7ff fc29 	bl	80029b8 <xTaskIncrementTick>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <SysTick_Handler+0x40>)
 800316e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	2300      	movs	r3, #0
 8003176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	f383 8811 	msr	BASEPRI, r3
}
 800317e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	e000ed04 	.word	0xe000ed04

0800318c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <vPortSetupTimerInterrupt+0x30>)
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <vPortSetupTimerInterrupt+0x34>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <vPortSetupTimerInterrupt+0x38>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a09      	ldr	r2, [pc, #36]	; (80031c8 <vPortSetupTimerInterrupt+0x3c>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	099b      	lsrs	r3, r3, #6
 80031a8:	4a08      	ldr	r2, [pc, #32]	; (80031cc <vPortSetupTimerInterrupt+0x40>)
 80031aa:	3b01      	subs	r3, #1
 80031ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031ae:	4b03      	ldr	r3, [pc, #12]	; (80031bc <vPortSetupTimerInterrupt+0x30>)
 80031b0:	2207      	movs	r2, #7
 80031b2:	601a      	str	r2, [r3, #0]
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	e000e010 	.word	0xe000e010
 80031c0:	e000e018 	.word	0xe000e018
 80031c4:	20000000 	.word	0x20000000
 80031c8:	10624dd3 	.word	0x10624dd3
 80031cc:	e000e014 	.word	0xe000e014

080031d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	; 0x28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80031dc:	f7ff fb42 	bl	8002864 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80031e0:	4b58      	ldr	r3, [pc, #352]	; (8003344 <pvPortMalloc+0x174>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80031e8:	f000 f910 	bl	800340c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80031ec:	4b56      	ldr	r3, [pc, #344]	; (8003348 <pvPortMalloc+0x178>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f040 808e 	bne.w	8003316 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01d      	beq.n	800323c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003200:	2208      	movs	r2, #8
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	2b00      	cmp	r3, #0
 8003210:	d014      	beq.n	800323c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f023 0307 	bic.w	r3, r3, #7
 8003218:	3308      	adds	r3, #8
 800321a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <pvPortMalloc+0x6c>
	__asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	617b      	str	r3, [r7, #20]
}
 8003238:	bf00      	nop
 800323a:	e7fe      	b.n	800323a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d069      	beq.n	8003316 <pvPortMalloc+0x146>
 8003242:	4b42      	ldr	r3, [pc, #264]	; (800334c <pvPortMalloc+0x17c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d864      	bhi.n	8003316 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800324c:	4b40      	ldr	r3, [pc, #256]	; (8003350 <pvPortMalloc+0x180>)
 800324e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003250:	4b3f      	ldr	r3, [pc, #252]	; (8003350 <pvPortMalloc+0x180>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003256:	e004      	b.n	8003262 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	d903      	bls.n	8003274 <pvPortMalloc+0xa4>
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f1      	bne.n	8003258 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003274:	4b33      	ldr	r3, [pc, #204]	; (8003344 <pvPortMalloc+0x174>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327a:	429a      	cmp	r2, r3
 800327c:	d04b      	beq.n	8003316 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2208      	movs	r2, #8
 8003284:	4413      	add	r3, r2
 8003286:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	1ad2      	subs	r2, r2, r3
 8003298:	2308      	movs	r3, #8
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	429a      	cmp	r2, r3
 800329e:	d91f      	bls.n	80032e0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <pvPortMalloc+0xf8>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	613b      	str	r3, [r7, #16]
}
 80032c4:	bf00      	nop
 80032c6:	e7fe      	b.n	80032c6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	1ad2      	subs	r2, r2, r3
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80032da:	69b8      	ldr	r0, [r7, #24]
 80032dc:	f000 f8f8 	bl	80034d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032e0:	4b1a      	ldr	r3, [pc, #104]	; (800334c <pvPortMalloc+0x17c>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	4a18      	ldr	r2, [pc, #96]	; (800334c <pvPortMalloc+0x17c>)
 80032ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <pvPortMalloc+0x17c>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4b18      	ldr	r3, [pc, #96]	; (8003354 <pvPortMalloc+0x184>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d203      	bcs.n	8003302 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80032fa:	4b14      	ldr	r3, [pc, #80]	; (800334c <pvPortMalloc+0x17c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a15      	ldr	r2, [pc, #84]	; (8003354 <pvPortMalloc+0x184>)
 8003300:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <pvPortMalloc+0x178>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	431a      	orrs	r2, r3
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003316:	f7ff fab3 	bl	8002880 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <pvPortMalloc+0x16a>
	__asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	60fb      	str	r3, [r7, #12]
}
 8003336:	bf00      	nop
 8003338:	e7fe      	b.n	8003338 <pvPortMalloc+0x168>
	return pvReturn;
 800333a:	69fb      	ldr	r3, [r7, #28]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3728      	adds	r7, #40	; 0x28
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20001458 	.word	0x20001458
 8003348:	20001464 	.word	0x20001464
 800334c:	2000145c 	.word	0x2000145c
 8003350:	20001450 	.word	0x20001450
 8003354:	20001460 	.word	0x20001460

08003358 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d048      	beq.n	80033fc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800336a:	2308      	movs	r3, #8
 800336c:	425b      	negs	r3, r3
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4413      	add	r3, r2
 8003372:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	4b21      	ldr	r3, [pc, #132]	; (8003404 <vPortFree+0xac>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4013      	ands	r3, r2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <vPortFree+0x44>
	__asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	60fb      	str	r3, [r7, #12]
}
 8003398:	bf00      	nop
 800339a:	e7fe      	b.n	800339a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <vPortFree+0x62>
	__asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	60bb      	str	r3, [r7, #8]
}
 80033b6:	bf00      	nop
 80033b8:	e7fe      	b.n	80033b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	4b11      	ldr	r3, [pc, #68]	; (8003404 <vPortFree+0xac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d019      	beq.n	80033fc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d115      	bne.n	80033fc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <vPortFree+0xac>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	43db      	mvns	r3, r3
 80033da:	401a      	ands	r2, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80033e0:	f7ff fa40 	bl	8002864 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4b07      	ldr	r3, [pc, #28]	; (8003408 <vPortFree+0xb0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4413      	add	r3, r2
 80033ee:	4a06      	ldr	r2, [pc, #24]	; (8003408 <vPortFree+0xb0>)
 80033f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80033f2:	6938      	ldr	r0, [r7, #16]
 80033f4:	f000 f86c 	bl	80034d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80033f8:	f7ff fa42 	bl	8002880 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80033fc:	bf00      	nop
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20001464 	.word	0x20001464
 8003408:	2000145c 	.word	0x2000145c

0800340c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003416:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <prvHeapInit+0xac>)
 800341a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00c      	beq.n	8003440 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	3307      	adds	r3, #7
 800342a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	4a1f      	ldr	r2, [pc, #124]	; (80034b8 <prvHeapInit+0xac>)
 800343c:	4413      	add	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003444:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <prvHeapInit+0xb0>)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800344a:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <prvHeapInit+0xb0>)
 800344c:	2200      	movs	r2, #0
 800344e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	4413      	add	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003458:	2208      	movs	r2, #8
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0307 	bic.w	r3, r3, #7
 8003466:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4a15      	ldr	r2, [pc, #84]	; (80034c0 <prvHeapInit+0xb4>)
 800346c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800346e:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <prvHeapInit+0xb4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003476:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <prvHeapInit+0xb4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	1ad2      	subs	r2, r2, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <prvHeapInit+0xb4>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <prvHeapInit+0xb8>)
 800349a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a09      	ldr	r2, [pc, #36]	; (80034c8 <prvHeapInit+0xbc>)
 80034a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034a4:	4b09      	ldr	r3, [pc, #36]	; (80034cc <prvHeapInit+0xc0>)
 80034a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80034aa:	601a      	str	r2, [r3, #0]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20000450 	.word	0x20000450
 80034bc:	20001450 	.word	0x20001450
 80034c0:	20001458 	.word	0x20001458
 80034c4:	20001460 	.word	0x20001460
 80034c8:	2000145c 	.word	0x2000145c
 80034cc:	20001464 	.word	0x20001464

080034d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80034d8:	4b27      	ldr	r3, [pc, #156]	; (8003578 <prvInsertBlockIntoFreeList+0xa8>)
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	e002      	b.n	80034e4 <prvInsertBlockIntoFreeList+0x14>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d8f7      	bhi.n	80034de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	4413      	add	r3, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d108      	bne.n	8003512 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	441a      	add	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	441a      	add	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d118      	bne.n	8003558 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4b14      	ldr	r3, [pc, #80]	; (800357c <prvInsertBlockIntoFreeList+0xac>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d00d      	beq.n	800354e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	441a      	add	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	e008      	b.n	8003560 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <prvInsertBlockIntoFreeList+0xac>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e003      	b.n	8003560 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d002      	beq.n	800356e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	20001450 	.word	0x20001450
 800357c:	20001458 	.word	0x20001458

08003580 <__libc_init_array>:
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	2600      	movs	r6, #0
 8003584:	4d0c      	ldr	r5, [pc, #48]	; (80035b8 <__libc_init_array+0x38>)
 8003586:	4c0d      	ldr	r4, [pc, #52]	; (80035bc <__libc_init_array+0x3c>)
 8003588:	1b64      	subs	r4, r4, r5
 800358a:	10a4      	asrs	r4, r4, #2
 800358c:	42a6      	cmp	r6, r4
 800358e:	d109      	bne.n	80035a4 <__libc_init_array+0x24>
 8003590:	f000 f822 	bl	80035d8 <_init>
 8003594:	2600      	movs	r6, #0
 8003596:	4d0a      	ldr	r5, [pc, #40]	; (80035c0 <__libc_init_array+0x40>)
 8003598:	4c0a      	ldr	r4, [pc, #40]	; (80035c4 <__libc_init_array+0x44>)
 800359a:	1b64      	subs	r4, r4, r5
 800359c:	10a4      	asrs	r4, r4, #2
 800359e:	42a6      	cmp	r6, r4
 80035a0:	d105      	bne.n	80035ae <__libc_init_array+0x2e>
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a8:	4798      	blx	r3
 80035aa:	3601      	adds	r6, #1
 80035ac:	e7ee      	b.n	800358c <__libc_init_array+0xc>
 80035ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b2:	4798      	blx	r3
 80035b4:	3601      	adds	r6, #1
 80035b6:	e7f2      	b.n	800359e <__libc_init_array+0x1e>
 80035b8:	080036a8 	.word	0x080036a8
 80035bc:	080036a8 	.word	0x080036a8
 80035c0:	080036a8 	.word	0x080036a8
 80035c4:	080036ac 	.word	0x080036ac

080035c8 <memset>:
 80035c8:	4603      	mov	r3, r0
 80035ca:	4402      	add	r2, r0
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d100      	bne.n	80035d2 <memset+0xa>
 80035d0:	4770      	bx	lr
 80035d2:	f803 1b01 	strb.w	r1, [r3], #1
 80035d6:	e7f9      	b.n	80035cc <memset+0x4>

080035d8 <_init>:
 80035d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035da:	bf00      	nop
 80035dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035de:	bc08      	pop	{r3}
 80035e0:	469e      	mov	lr, r3
 80035e2:	4770      	bx	lr

080035e4 <_fini>:
 80035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e6:	bf00      	nop
 80035e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ea:	bc08      	pop	{r3}
 80035ec:	469e      	mov	lr, r3
 80035ee:	4770      	bx	lr
