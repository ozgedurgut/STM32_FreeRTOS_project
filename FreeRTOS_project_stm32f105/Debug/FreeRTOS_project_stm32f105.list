
FreeRTOS_project_stm32f105.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d594  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800d788  0800d788  0001d788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de20  0800de20  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800de20  0800de20  0001de20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de28  0800de28  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de28  0800de28  0001de28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de2c  0800de2c  0001de2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800de30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  200001e8  0800e014  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008d0  0800e014  000208d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c6f  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a4  00000000  00000000  00036e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0003a520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  0003ba80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022840  00000000  00000000  0003ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017964  00000000  00000000  0005f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4cc2  00000000  00000000  0007700c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013bcce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007158  00000000  00000000  0013bd20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001e8 	.word	0x200001e8
 800020c:	00000000 	.word	0x00000000
 8000210:	0800d76c 	.word	0x0800d76c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001ec 	.word	0x200001ec
 800022c:	0800d76c 	.word	0x0800d76c

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_fmul>:
 8000240:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000244:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000248:	bf1e      	ittt	ne
 800024a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800024e:	ea92 0f0c 	teqne	r2, ip
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d06f      	beq.n	8000338 <__aeabi_fmul+0xf8>
 8000258:	441a      	add	r2, r3
 800025a:	ea80 0c01 	eor.w	ip, r0, r1
 800025e:	0240      	lsls	r0, r0, #9
 8000260:	bf18      	it	ne
 8000262:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000266:	d01e      	beq.n	80002a6 <__aeabi_fmul+0x66>
 8000268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800026c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000270:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000274:	fba0 3101 	umull	r3, r1, r0, r1
 8000278:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800027c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000280:	bf3e      	ittt	cc
 8000282:	0049      	lslcc	r1, r1, #1
 8000284:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000288:	005b      	lslcc	r3, r3, #1
 800028a:	ea40 0001 	orr.w	r0, r0, r1
 800028e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000292:	2afd      	cmp	r2, #253	; 0xfd
 8000294:	d81d      	bhi.n	80002d2 <__aeabi_fmul+0x92>
 8000296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800029a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800029e:	bf08      	it	eq
 80002a0:	f020 0001 	biceq.w	r0, r0, #1
 80002a4:	4770      	bx	lr
 80002a6:	f090 0f00 	teq	r0, #0
 80002aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002ae:	bf08      	it	eq
 80002b0:	0249      	lsleq	r1, r1, #9
 80002b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002ba:	3a7f      	subs	r2, #127	; 0x7f
 80002bc:	bfc2      	ittt	gt
 80002be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002c6:	4770      	bxgt	lr
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	3a01      	subs	r2, #1
 80002d2:	dc5d      	bgt.n	8000390 <__aeabi_fmul+0x150>
 80002d4:	f112 0f19 	cmn.w	r2, #25
 80002d8:	bfdc      	itt	le
 80002da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002de:	4770      	bxle	lr
 80002e0:	f1c2 0200 	rsb	r2, r2, #0
 80002e4:	0041      	lsls	r1, r0, #1
 80002e6:	fa21 f102 	lsr.w	r1, r1, r2
 80002ea:	f1c2 0220 	rsb	r2, r2, #32
 80002ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80002f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80002f6:	f140 0000 	adc.w	r0, r0, #0
 80002fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002fe:	bf08      	it	eq
 8000300:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000304:	4770      	bx	lr
 8000306:	f092 0f00 	teq	r2, #0
 800030a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800030e:	bf02      	ittt	eq
 8000310:	0040      	lsleq	r0, r0, #1
 8000312:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000316:	3a01      	subeq	r2, #1
 8000318:	d0f9      	beq.n	800030e <__aeabi_fmul+0xce>
 800031a:	ea40 000c 	orr.w	r0, r0, ip
 800031e:	f093 0f00 	teq	r3, #0
 8000322:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000326:	bf02      	ittt	eq
 8000328:	0049      	lsleq	r1, r1, #1
 800032a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800032e:	3b01      	subeq	r3, #1
 8000330:	d0f9      	beq.n	8000326 <__aeabi_fmul+0xe6>
 8000332:	ea41 010c 	orr.w	r1, r1, ip
 8000336:	e78f      	b.n	8000258 <__aeabi_fmul+0x18>
 8000338:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800033c:	ea92 0f0c 	teq	r2, ip
 8000340:	bf18      	it	ne
 8000342:	ea93 0f0c 	teqne	r3, ip
 8000346:	d00a      	beq.n	800035e <__aeabi_fmul+0x11e>
 8000348:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800034c:	bf18      	it	ne
 800034e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000352:	d1d8      	bne.n	8000306 <__aeabi_fmul+0xc6>
 8000354:	ea80 0001 	eor.w	r0, r0, r1
 8000358:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800035c:	4770      	bx	lr
 800035e:	f090 0f00 	teq	r0, #0
 8000362:	bf17      	itett	ne
 8000364:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000368:	4608      	moveq	r0, r1
 800036a:	f091 0f00 	teqne	r1, #0
 800036e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000372:	d014      	beq.n	800039e <__aeabi_fmul+0x15e>
 8000374:	ea92 0f0c 	teq	r2, ip
 8000378:	d101      	bne.n	800037e <__aeabi_fmul+0x13e>
 800037a:	0242      	lsls	r2, r0, #9
 800037c:	d10f      	bne.n	800039e <__aeabi_fmul+0x15e>
 800037e:	ea93 0f0c 	teq	r3, ip
 8000382:	d103      	bne.n	800038c <__aeabi_fmul+0x14c>
 8000384:	024b      	lsls	r3, r1, #9
 8000386:	bf18      	it	ne
 8000388:	4608      	movne	r0, r1
 800038a:	d108      	bne.n	800039e <__aeabi_fmul+0x15e>
 800038c:	ea80 0001 	eor.w	r0, r0, r1
 8000390:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000394:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000398:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800039c:	4770      	bx	lr
 800039e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003a6:	4770      	bx	lr

080003a8 <__aeabi_drsub>:
 80003a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	e002      	b.n	80003b4 <__adddf3>
 80003ae:	bf00      	nop

080003b0 <__aeabi_dsub>:
 80003b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b4 <__adddf3>:
 80003b4:	b530      	push	{r4, r5, lr}
 80003b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003be:	ea94 0f05 	teq	r4, r5
 80003c2:	bf08      	it	eq
 80003c4:	ea90 0f02 	teqeq	r0, r2
 80003c8:	bf1f      	itttt	ne
 80003ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003da:	f000 80e2 	beq.w	80005a2 <__adddf3+0x1ee>
 80003de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e6:	bfb8      	it	lt
 80003e8:	426d      	neglt	r5, r5
 80003ea:	dd0c      	ble.n	8000406 <__adddf3+0x52>
 80003ec:	442c      	add	r4, r5
 80003ee:	ea80 0202 	eor.w	r2, r0, r2
 80003f2:	ea81 0303 	eor.w	r3, r1, r3
 80003f6:	ea82 0000 	eor.w	r0, r2, r0
 80003fa:	ea83 0101 	eor.w	r1, r3, r1
 80003fe:	ea80 0202 	eor.w	r2, r0, r2
 8000402:	ea81 0303 	eor.w	r3, r1, r3
 8000406:	2d36      	cmp	r5, #54	; 0x36
 8000408:	bf88      	it	hi
 800040a:	bd30      	pophi	{r4, r5, pc}
 800040c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000410:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000414:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000418:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800041c:	d002      	beq.n	8000424 <__adddf3+0x70>
 800041e:	4240      	negs	r0, r0
 8000420:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000424:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000428:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800042c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000430:	d002      	beq.n	8000438 <__adddf3+0x84>
 8000432:	4252      	negs	r2, r2
 8000434:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000438:	ea94 0f05 	teq	r4, r5
 800043c:	f000 80a7 	beq.w	800058e <__adddf3+0x1da>
 8000440:	f1a4 0401 	sub.w	r4, r4, #1
 8000444:	f1d5 0e20 	rsbs	lr, r5, #32
 8000448:	db0d      	blt.n	8000466 <__adddf3+0xb2>
 800044a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044e:	fa22 f205 	lsr.w	r2, r2, r5
 8000452:	1880      	adds	r0, r0, r2
 8000454:	f141 0100 	adc.w	r1, r1, #0
 8000458:	fa03 f20e 	lsl.w	r2, r3, lr
 800045c:	1880      	adds	r0, r0, r2
 800045e:	fa43 f305 	asr.w	r3, r3, r5
 8000462:	4159      	adcs	r1, r3
 8000464:	e00e      	b.n	8000484 <__adddf3+0xd0>
 8000466:	f1a5 0520 	sub.w	r5, r5, #32
 800046a:	f10e 0e20 	add.w	lr, lr, #32
 800046e:	2a01      	cmp	r2, #1
 8000470:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000474:	bf28      	it	cs
 8000476:	f04c 0c02 	orrcs.w	ip, ip, #2
 800047a:	fa43 f305 	asr.w	r3, r3, r5
 800047e:	18c0      	adds	r0, r0, r3
 8000480:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000488:	d507      	bpl.n	800049a <__adddf3+0xe6>
 800048a:	f04f 0e00 	mov.w	lr, #0
 800048e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000492:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000496:	eb6e 0101 	sbc.w	r1, lr, r1
 800049a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049e:	d31b      	bcc.n	80004d8 <__adddf3+0x124>
 80004a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a4:	d30c      	bcc.n	80004c0 <__adddf3+0x10c>
 80004a6:	0849      	lsrs	r1, r1, #1
 80004a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b0:	f104 0401 	add.w	r4, r4, #1
 80004b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004bc:	f080 809a 	bcs.w	80005f4 <__adddf3+0x240>
 80004c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c4:	bf08      	it	eq
 80004c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ca:	f150 0000 	adcs.w	r0, r0, #0
 80004ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004d2:	ea41 0105 	orr.w	r1, r1, r5
 80004d6:	bd30      	pop	{r4, r5, pc}
 80004d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004dc:	4140      	adcs	r0, r0
 80004de:	eb41 0101 	adc.w	r1, r1, r1
 80004e2:	3c01      	subs	r4, #1
 80004e4:	bf28      	it	cs
 80004e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004ea:	d2e9      	bcs.n	80004c0 <__adddf3+0x10c>
 80004ec:	f091 0f00 	teq	r1, #0
 80004f0:	bf04      	itt	eq
 80004f2:	4601      	moveq	r1, r0
 80004f4:	2000      	moveq	r0, #0
 80004f6:	fab1 f381 	clz	r3, r1
 80004fa:	bf08      	it	eq
 80004fc:	3320      	addeq	r3, #32
 80004fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000502:	f1b3 0220 	subs.w	r2, r3, #32
 8000506:	da0c      	bge.n	8000522 <__adddf3+0x16e>
 8000508:	320c      	adds	r2, #12
 800050a:	dd08      	ble.n	800051e <__adddf3+0x16a>
 800050c:	f102 0c14 	add.w	ip, r2, #20
 8000510:	f1c2 020c 	rsb	r2, r2, #12
 8000514:	fa01 f00c 	lsl.w	r0, r1, ip
 8000518:	fa21 f102 	lsr.w	r1, r1, r2
 800051c:	e00c      	b.n	8000538 <__adddf3+0x184>
 800051e:	f102 0214 	add.w	r2, r2, #20
 8000522:	bfd8      	it	le
 8000524:	f1c2 0c20 	rsble	ip, r2, #32
 8000528:	fa01 f102 	lsl.w	r1, r1, r2
 800052c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000530:	bfdc      	itt	le
 8000532:	ea41 010c 	orrle.w	r1, r1, ip
 8000536:	4090      	lslle	r0, r2
 8000538:	1ae4      	subs	r4, r4, r3
 800053a:	bfa2      	ittt	ge
 800053c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000540:	4329      	orrge	r1, r5
 8000542:	bd30      	popge	{r4, r5, pc}
 8000544:	ea6f 0404 	mvn.w	r4, r4
 8000548:	3c1f      	subs	r4, #31
 800054a:	da1c      	bge.n	8000586 <__adddf3+0x1d2>
 800054c:	340c      	adds	r4, #12
 800054e:	dc0e      	bgt.n	800056e <__adddf3+0x1ba>
 8000550:	f104 0414 	add.w	r4, r4, #20
 8000554:	f1c4 0220 	rsb	r2, r4, #32
 8000558:	fa20 f004 	lsr.w	r0, r0, r4
 800055c:	fa01 f302 	lsl.w	r3, r1, r2
 8000560:	ea40 0003 	orr.w	r0, r0, r3
 8000564:	fa21 f304 	lsr.w	r3, r1, r4
 8000568:	ea45 0103 	orr.w	r1, r5, r3
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	f1c4 040c 	rsb	r4, r4, #12
 8000572:	f1c4 0220 	rsb	r2, r4, #32
 8000576:	fa20 f002 	lsr.w	r0, r0, r2
 800057a:	fa01 f304 	lsl.w	r3, r1, r4
 800057e:	ea40 0003 	orr.w	r0, r0, r3
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	fa21 f004 	lsr.w	r0, r1, r4
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	f094 0f00 	teq	r4, #0
 8000592:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000596:	bf06      	itte	eq
 8000598:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800059c:	3401      	addeq	r4, #1
 800059e:	3d01      	subne	r5, #1
 80005a0:	e74e      	b.n	8000440 <__adddf3+0x8c>
 80005a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a6:	bf18      	it	ne
 80005a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005ac:	d029      	beq.n	8000602 <__adddf3+0x24e>
 80005ae:	ea94 0f05 	teq	r4, r5
 80005b2:	bf08      	it	eq
 80005b4:	ea90 0f02 	teqeq	r0, r2
 80005b8:	d005      	beq.n	80005c6 <__adddf3+0x212>
 80005ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80005be:	bf04      	itt	eq
 80005c0:	4619      	moveq	r1, r3
 80005c2:	4610      	moveq	r0, r2
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	ea91 0f03 	teq	r1, r3
 80005ca:	bf1e      	ittt	ne
 80005cc:	2100      	movne	r1, #0
 80005ce:	2000      	movne	r0, #0
 80005d0:	bd30      	popne	{r4, r5, pc}
 80005d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d6:	d105      	bne.n	80005e4 <__adddf3+0x230>
 80005d8:	0040      	lsls	r0, r0, #1
 80005da:	4149      	adcs	r1, r1
 80005dc:	bf28      	it	cs
 80005de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005e2:	bd30      	pop	{r4, r5, pc}
 80005e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e8:	bf3c      	itt	cc
 80005ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ee:	bd30      	popcc	{r4, r5, pc}
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005fc:	f04f 0000 	mov.w	r0, #0
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000606:	bf1a      	itte	ne
 8000608:	4619      	movne	r1, r3
 800060a:	4610      	movne	r0, r2
 800060c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000610:	bf1c      	itt	ne
 8000612:	460b      	movne	r3, r1
 8000614:	4602      	movne	r2, r0
 8000616:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800061a:	bf06      	itte	eq
 800061c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000620:	ea91 0f03 	teqeq	r1, r3
 8000624:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	bf00      	nop

0800062c <__aeabi_ui2d>:
 800062c:	f090 0f00 	teq	r0, #0
 8000630:	bf04      	itt	eq
 8000632:	2100      	moveq	r1, #0
 8000634:	4770      	bxeq	lr
 8000636:	b530      	push	{r4, r5, lr}
 8000638:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800063c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000640:	f04f 0500 	mov.w	r5, #0
 8000644:	f04f 0100 	mov.w	r1, #0
 8000648:	e750      	b.n	80004ec <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_i2d>:
 800064c:	f090 0f00 	teq	r0, #0
 8000650:	bf04      	itt	eq
 8000652:	2100      	moveq	r1, #0
 8000654:	4770      	bxeq	lr
 8000656:	b530      	push	{r4, r5, lr}
 8000658:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800065c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000660:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000664:	bf48      	it	mi
 8000666:	4240      	negmi	r0, r0
 8000668:	f04f 0100 	mov.w	r1, #0
 800066c:	e73e      	b.n	80004ec <__adddf3+0x138>
 800066e:	bf00      	nop

08000670 <__aeabi_f2d>:
 8000670:	0042      	lsls	r2, r0, #1
 8000672:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000676:	ea4f 0131 	mov.w	r1, r1, rrx
 800067a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067e:	bf1f      	itttt	ne
 8000680:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000684:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000688:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800068c:	4770      	bxne	lr
 800068e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000692:	bf08      	it	eq
 8000694:	4770      	bxeq	lr
 8000696:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800069a:	bf04      	itt	eq
 800069c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a0:	4770      	bxeq	lr
 80006a2:	b530      	push	{r4, r5, lr}
 80006a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	e71c      	b.n	80004ec <__adddf3+0x138>
 80006b2:	bf00      	nop

080006b4 <__aeabi_ul2d>:
 80006b4:	ea50 0201 	orrs.w	r2, r0, r1
 80006b8:	bf08      	it	eq
 80006ba:	4770      	bxeq	lr
 80006bc:	b530      	push	{r4, r5, lr}
 80006be:	f04f 0500 	mov.w	r5, #0
 80006c2:	e00a      	b.n	80006da <__aeabi_l2d+0x16>

080006c4 <__aeabi_l2d>:
 80006c4:	ea50 0201 	orrs.w	r2, r0, r1
 80006c8:	bf08      	it	eq
 80006ca:	4770      	bxeq	lr
 80006cc:	b530      	push	{r4, r5, lr}
 80006ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006d2:	d502      	bpl.n	80006da <__aeabi_l2d+0x16>
 80006d4:	4240      	negs	r0, r0
 80006d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e6:	f43f aed8 	beq.w	800049a <__adddf3+0xe6>
 80006ea:	f04f 0203 	mov.w	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000702:	f1c2 0320 	rsb	r3, r2, #32
 8000706:	fa00 fc03 	lsl.w	ip, r0, r3
 800070a:	fa20 f002 	lsr.w	r0, r0, r2
 800070e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000712:	ea40 000e 	orr.w	r0, r0, lr
 8000716:	fa21 f102 	lsr.w	r1, r1, r2
 800071a:	4414      	add	r4, r2
 800071c:	e6bd      	b.n	800049a <__adddf3+0xe6>
 800071e:	bf00      	nop

08000720 <__aeabi_dmul>:
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000726:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072e:	bf1d      	ittte	ne
 8000730:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000734:	ea94 0f0c 	teqne	r4, ip
 8000738:	ea95 0f0c 	teqne	r5, ip
 800073c:	f000 f8de 	bleq	80008fc <__aeabi_dmul+0x1dc>
 8000740:	442c      	add	r4, r5
 8000742:	ea81 0603 	eor.w	r6, r1, r3
 8000746:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800074a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800074e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000752:	bf18      	it	ne
 8000754:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800075c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000760:	d038      	beq.n	80007d4 <__aeabi_dmul+0xb4>
 8000762:	fba0 ce02 	umull	ip, lr, r0, r2
 8000766:	f04f 0500 	mov.w	r5, #0
 800076a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800076e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000772:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000776:	f04f 0600 	mov.w	r6, #0
 800077a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800077e:	f09c 0f00 	teq	ip, #0
 8000782:	bf18      	it	ne
 8000784:	f04e 0e01 	orrne.w	lr, lr, #1
 8000788:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800078c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000790:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000794:	d204      	bcs.n	80007a0 <__aeabi_dmul+0x80>
 8000796:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800079a:	416d      	adcs	r5, r5
 800079c:	eb46 0606 	adc.w	r6, r6, r6
 80007a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b8:	bf88      	it	hi
 80007ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007be:	d81e      	bhi.n	80007fe <__aeabi_dmul+0xde>
 80007c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007c4:	bf08      	it	eq
 80007c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007ca:	f150 0000 	adcs.w	r0, r0, #0
 80007ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d8:	ea46 0101 	orr.w	r1, r6, r1
 80007dc:	ea40 0002 	orr.w	r0, r0, r2
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e8:	bfc2      	ittt	gt
 80007ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007f2:	bd70      	popgt	{r4, r5, r6, pc}
 80007f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f8:	f04f 0e00 	mov.w	lr, #0
 80007fc:	3c01      	subs	r4, #1
 80007fe:	f300 80ab 	bgt.w	8000958 <__aeabi_dmul+0x238>
 8000802:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000806:	bfde      	ittt	le
 8000808:	2000      	movle	r0, #0
 800080a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800080e:	bd70      	pople	{r4, r5, r6, pc}
 8000810:	f1c4 0400 	rsb	r4, r4, #0
 8000814:	3c20      	subs	r4, #32
 8000816:	da35      	bge.n	8000884 <__aeabi_dmul+0x164>
 8000818:	340c      	adds	r4, #12
 800081a:	dc1b      	bgt.n	8000854 <__aeabi_dmul+0x134>
 800081c:	f104 0414 	add.w	r4, r4, #20
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f305 	lsl.w	r3, r0, r5
 8000828:	fa20 f004 	lsr.w	r0, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800083c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000840:	fa21 f604 	lsr.w	r6, r1, r4
 8000844:	eb42 0106 	adc.w	r1, r2, r6
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f1c4 040c 	rsb	r4, r4, #12
 8000858:	f1c4 0520 	rsb	r5, r4, #32
 800085c:	fa00 f304 	lsl.w	r3, r0, r4
 8000860:	fa20 f005 	lsr.w	r0, r0, r5
 8000864:	fa01 f204 	lsl.w	r2, r1, r4
 8000868:	ea40 0002 	orr.w	r0, r0, r2
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000870:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000874:	f141 0100 	adc.w	r1, r1, #0
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f1c4 0520 	rsb	r5, r4, #32
 8000888:	fa00 f205 	lsl.w	r2, r0, r5
 800088c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000890:	fa20 f304 	lsr.w	r3, r0, r4
 8000894:	fa01 f205 	lsl.w	r2, r1, r5
 8000898:	ea43 0302 	orr.w	r3, r3, r2
 800089c:	fa21 f004 	lsr.w	r0, r1, r4
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	fa21 f204 	lsr.w	r2, r1, r4
 80008a8:	ea20 0002 	bic.w	r0, r0, r2
 80008ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008b4:	bf08      	it	eq
 80008b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008ba:	bd70      	pop	{r4, r5, r6, pc}
 80008bc:	f094 0f00 	teq	r4, #0
 80008c0:	d10f      	bne.n	80008e2 <__aeabi_dmul+0x1c2>
 80008c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008c6:	0040      	lsls	r0, r0, #1
 80008c8:	eb41 0101 	adc.w	r1, r1, r1
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf08      	it	eq
 80008d2:	3c01      	subeq	r4, #1
 80008d4:	d0f7      	beq.n	80008c6 <__aeabi_dmul+0x1a6>
 80008d6:	ea41 0106 	orr.w	r1, r1, r6
 80008da:	f095 0f00 	teq	r5, #0
 80008de:	bf18      	it	ne
 80008e0:	4770      	bxne	lr
 80008e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008e6:	0052      	lsls	r2, r2, #1
 80008e8:	eb43 0303 	adc.w	r3, r3, r3
 80008ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008f0:	bf08      	it	eq
 80008f2:	3d01      	subeq	r5, #1
 80008f4:	d0f7      	beq.n	80008e6 <__aeabi_dmul+0x1c6>
 80008f6:	ea43 0306 	orr.w	r3, r3, r6
 80008fa:	4770      	bx	lr
 80008fc:	ea94 0f0c 	teq	r4, ip
 8000900:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000904:	bf18      	it	ne
 8000906:	ea95 0f0c 	teqne	r5, ip
 800090a:	d00c      	beq.n	8000926 <__aeabi_dmul+0x206>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	d1d1      	bne.n	80008bc <__aeabi_dmul+0x19c>
 8000918:	ea81 0103 	eor.w	r1, r1, r3
 800091c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000920:	f04f 0000 	mov.w	r0, #0
 8000924:	bd70      	pop	{r4, r5, r6, pc}
 8000926:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800092a:	bf06      	itte	eq
 800092c:	4610      	moveq	r0, r2
 800092e:	4619      	moveq	r1, r3
 8000930:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000934:	d019      	beq.n	800096a <__aeabi_dmul+0x24a>
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	d102      	bne.n	8000942 <__aeabi_dmul+0x222>
 800093c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000940:	d113      	bne.n	800096a <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	d105      	bne.n	8000954 <__aeabi_dmul+0x234>
 8000948:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800094c:	bf1c      	itt	ne
 800094e:	4610      	movne	r0, r2
 8000950:	4619      	movne	r1, r3
 8000952:	d10a      	bne.n	800096a <__aeabi_dmul+0x24a>
 8000954:	ea81 0103 	eor.w	r1, r1, r3
 8000958:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800095c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000960:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	bd70      	pop	{r4, r5, r6, pc}
 800096a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800096e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000972:	bd70      	pop	{r4, r5, r6, pc}

08000974 <__aeabi_ddiv>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800097a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800097e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000982:	bf1d      	ittte	ne
 8000984:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000988:	ea94 0f0c 	teqne	r4, ip
 800098c:	ea95 0f0c 	teqne	r5, ip
 8000990:	f000 f8a7 	bleq	8000ae2 <__aeabi_ddiv+0x16e>
 8000994:	eba4 0405 	sub.w	r4, r4, r5
 8000998:	ea81 0e03 	eor.w	lr, r1, r3
 800099c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009a4:	f000 8088 	beq.w	8000ab8 <__aeabi_ddiv+0x144>
 80009a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009cc:	429d      	cmp	r5, r3
 80009ce:	bf08      	it	eq
 80009d0:	4296      	cmpeq	r6, r2
 80009d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009da:	d202      	bcs.n	80009e2 <__aeabi_ddiv+0x6e>
 80009dc:	085b      	lsrs	r3, r3, #1
 80009de:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e2:	1ab6      	subs	r6, r6, r2
 80009e4:	eb65 0503 	sbc.w	r5, r5, r3
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a16:	bf22      	ittt	cs
 8000a18:	1ab6      	subcs	r6, r6, r2
 8000a1a:	4675      	movcs	r5, lr
 8000a1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2e:	bf22      	ittt	cs
 8000a30:	1ab6      	subcs	r6, r6, r2
 8000a32:	4675      	movcs	r5, lr
 8000a34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a38:	085b      	lsrs	r3, r3, #1
 8000a3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a46:	bf22      	ittt	cs
 8000a48:	1ab6      	subcs	r6, r6, r2
 8000a4a:	4675      	movcs	r5, lr
 8000a4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a50:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a54:	d018      	beq.n	8000a88 <__aeabi_ddiv+0x114>
 8000a56:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a72:	d1c0      	bne.n	80009f6 <__aeabi_ddiv+0x82>
 8000a74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a78:	d10b      	bne.n	8000a92 <__aeabi_ddiv+0x11e>
 8000a7a:	ea41 0100 	orr.w	r1, r1, r0
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a86:	e7b6      	b.n	80009f6 <__aeabi_ddiv+0x82>
 8000a88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a8c:	bf04      	itt	eq
 8000a8e:	4301      	orreq	r1, r0
 8000a90:	2000      	moveq	r0, #0
 8000a92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a96:	bf88      	it	hi
 8000a98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a9c:	f63f aeaf 	bhi.w	80007fe <__aeabi_dmul+0xde>
 8000aa0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000aa4:	bf04      	itt	eq
 8000aa6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aae:	f150 0000 	adcs.w	r0, r0, #0
 8000ab2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}
 8000ab8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000abc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ac0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ac4:	bfc2      	ittt	gt
 8000ac6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ace:	bd70      	popgt	{r4, r5, r6, pc}
 8000ad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad4:	f04f 0e00 	mov.w	lr, #0
 8000ad8:	3c01      	subs	r4, #1
 8000ada:	e690      	b.n	80007fe <__aeabi_dmul+0xde>
 8000adc:	ea45 0e06 	orr.w	lr, r5, r6
 8000ae0:	e68d      	b.n	80007fe <__aeabi_dmul+0xde>
 8000ae2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ae6:	ea94 0f0c 	teq	r4, ip
 8000aea:	bf08      	it	eq
 8000aec:	ea95 0f0c 	teqeq	r5, ip
 8000af0:	f43f af3b 	beq.w	800096a <__aeabi_dmul+0x24a>
 8000af4:	ea94 0f0c 	teq	r4, ip
 8000af8:	d10a      	bne.n	8000b10 <__aeabi_ddiv+0x19c>
 8000afa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000afe:	f47f af34 	bne.w	800096a <__aeabi_dmul+0x24a>
 8000b02:	ea95 0f0c 	teq	r5, ip
 8000b06:	f47f af25 	bne.w	8000954 <__aeabi_dmul+0x234>
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	e72c      	b.n	800096a <__aeabi_dmul+0x24a>
 8000b10:	ea95 0f0c 	teq	r5, ip
 8000b14:	d106      	bne.n	8000b24 <__aeabi_ddiv+0x1b0>
 8000b16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b1a:	f43f aefd 	beq.w	8000918 <__aeabi_dmul+0x1f8>
 8000b1e:	4610      	mov	r0, r2
 8000b20:	4619      	mov	r1, r3
 8000b22:	e722      	b.n	800096a <__aeabi_dmul+0x24a>
 8000b24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b28:	bf18      	it	ne
 8000b2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b2e:	f47f aec5 	bne.w	80008bc <__aeabi_dmul+0x19c>
 8000b32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b36:	f47f af0d 	bne.w	8000954 <__aeabi_dmul+0x234>
 8000b3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b3e:	f47f aeeb 	bne.w	8000918 <__aeabi_dmul+0x1f8>
 8000b42:	e712      	b.n	800096a <__aeabi_dmul+0x24a>

08000b44 <__gedf2>:
 8000b44:	f04f 3cff 	mov.w	ip, #4294967295
 8000b48:	e006      	b.n	8000b58 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__ledf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	e002      	b.n	8000b58 <__cmpdf2+0x4>
 8000b52:	bf00      	nop

08000b54 <__cmpdf2>:
 8000b54:	f04f 0c01 	mov.w	ip, #1
 8000b58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	bf18      	it	ne
 8000b6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b6e:	d01b      	beq.n	8000ba8 <__cmpdf2+0x54>
 8000b70:	b001      	add	sp, #4
 8000b72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b76:	bf0c      	ite	eq
 8000b78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b7c:	ea91 0f03 	teqne	r1, r3
 8000b80:	bf02      	ittt	eq
 8000b82:	ea90 0f02 	teqeq	r0, r2
 8000b86:	2000      	moveq	r0, #0
 8000b88:	4770      	bxeq	lr
 8000b8a:	f110 0f00 	cmn.w	r0, #0
 8000b8e:	ea91 0f03 	teq	r1, r3
 8000b92:	bf58      	it	pl
 8000b94:	4299      	cmppl	r1, r3
 8000b96:	bf08      	it	eq
 8000b98:	4290      	cmpeq	r0, r2
 8000b9a:	bf2c      	ite	cs
 8000b9c:	17d8      	asrcs	r0, r3, #31
 8000b9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ba2:	f040 0001 	orr.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb0:	d102      	bne.n	8000bb8 <__cmpdf2+0x64>
 8000bb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bb6:	d107      	bne.n	8000bc8 <__cmpdf2+0x74>
 8000bb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc0:	d1d6      	bne.n	8000b70 <__cmpdf2+0x1c>
 8000bc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bc6:	d0d3      	beq.n	8000b70 <__cmpdf2+0x1c>
 8000bc8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_cdrcmple>:
 8000bd0:	4684      	mov	ip, r0
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	4662      	mov	r2, ip
 8000bd6:	468c      	mov	ip, r1
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4663      	mov	r3, ip
 8000bdc:	e000      	b.n	8000be0 <__aeabi_cdcmpeq>
 8000bde:	bf00      	nop

08000be0 <__aeabi_cdcmpeq>:
 8000be0:	b501      	push	{r0, lr}
 8000be2:	f7ff ffb7 	bl	8000b54 <__cmpdf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd01      	pop	{r0, pc}

08000bf0 <__aeabi_dcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cdcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cdcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cdcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffce 	bl	8000bd0 <__aeabi_cdrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_dcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc4 	bl	8000bd0 <__aeabi_cdrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_dcmpun>:
 8000c54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c5c:	d102      	bne.n	8000c64 <__aeabi_dcmpun+0x10>
 8000c5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c62:	d10a      	bne.n	8000c7a <__aeabi_dcmpun+0x26>
 8000c64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c6c:	d102      	bne.n	8000c74 <__aeabi_dcmpun+0x20>
 8000c6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c72:	d102      	bne.n	8000c7a <__aeabi_dcmpun+0x26>
 8000c74:	f04f 0000 	mov.w	r0, #0
 8000c78:	4770      	bx	lr
 8000c7a:	f04f 0001 	mov.w	r0, #1
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_d2iz>:
 8000c80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c88:	d215      	bcs.n	8000cb6 <__aeabi_d2iz+0x36>
 8000c8a:	d511      	bpl.n	8000cb0 <__aeabi_d2iz+0x30>
 8000c8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c94:	d912      	bls.n	8000cbc <__aeabi_d2iz+0x3c>
 8000c96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ca6:	fa23 f002 	lsr.w	r0, r3, r2
 8000caa:	bf18      	it	ne
 8000cac:	4240      	negne	r0, r0
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cba:	d105      	bne.n	8000cc8 <__aeabi_d2iz+0x48>
 8000cbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cc6:	4770      	bx	lr
 8000cc8:	f04f 0000 	mov.w	r0, #0
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_d2uiz>:
 8000cd0:	004a      	lsls	r2, r1, #1
 8000cd2:	d211      	bcs.n	8000cf8 <__aeabi_d2uiz+0x28>
 8000cd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd8:	d211      	bcs.n	8000cfe <__aeabi_d2uiz+0x2e>
 8000cda:	d50d      	bpl.n	8000cf8 <__aeabi_d2uiz+0x28>
 8000cdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ce0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ce4:	d40e      	bmi.n	8000d04 <__aeabi_d2uiz+0x34>
 8000ce6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000cf6:	4770      	bx	lr
 8000cf8:	f04f 0000 	mov.w	r0, #0
 8000cfc:	4770      	bx	lr
 8000cfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d02:	d102      	bne.n	8000d0a <__aeabi_d2uiz+0x3a>
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	4770      	bx	lr
 8000d0a:	f04f 0000 	mov.w	r0, #0
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_d2f>:
 8000d10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d18:	bf24      	itt	cs
 8000d1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d22:	d90d      	bls.n	8000d40 <__aeabi_d2f+0x30>
 8000d24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d38:	bf08      	it	eq
 8000d3a:	f020 0001 	biceq.w	r0, r0, #1
 8000d3e:	4770      	bx	lr
 8000d40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d44:	d121      	bne.n	8000d8a <__aeabi_d2f+0x7a>
 8000d46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d4a:	bfbc      	itt	lt
 8000d4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d50:	4770      	bxlt	lr
 8000d52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d5a:	f1c2 0218 	rsb	r2, r2, #24
 8000d5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000d62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d66:	fa20 f002 	lsr.w	r0, r0, r2
 8000d6a:	bf18      	it	ne
 8000d6c:	f040 0001 	orrne.w	r0, r0, #1
 8000d70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d7c:	ea40 000c 	orr.w	r0, r0, ip
 8000d80:	fa23 f302 	lsr.w	r3, r3, r2
 8000d84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d88:	e7cc      	b.n	8000d24 <__aeabi_d2f+0x14>
 8000d8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d8e:	d107      	bne.n	8000da0 <__aeabi_d2f+0x90>
 8000d90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d94:	bf1e      	ittt	ne
 8000d96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d9e:	4770      	bxne	lr
 8000da0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000da4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <__aeabi_frsub>:
 8000db0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000db4:	e002      	b.n	8000dbc <__addsf3>
 8000db6:	bf00      	nop

08000db8 <__aeabi_fsub>:
 8000db8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000dbc <__addsf3>:
 8000dbc:	0042      	lsls	r2, r0, #1
 8000dbe:	bf1f      	itttt	ne
 8000dc0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dc4:	ea92 0f03 	teqne	r2, r3
 8000dc8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dcc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd0:	d06a      	beq.n	8000ea8 <__addsf3+0xec>
 8000dd2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dd6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dda:	bfc1      	itttt	gt
 8000ddc:	18d2      	addgt	r2, r2, r3
 8000dde:	4041      	eorgt	r1, r0
 8000de0:	4048      	eorgt	r0, r1
 8000de2:	4041      	eorgt	r1, r0
 8000de4:	bfb8      	it	lt
 8000de6:	425b      	neglt	r3, r3
 8000de8:	2b19      	cmp	r3, #25
 8000dea:	bf88      	it	hi
 8000dec:	4770      	bxhi	lr
 8000dee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000df2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000dfa:	bf18      	it	ne
 8000dfc:	4240      	negne	r0, r0
 8000dfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e02:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000e06:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e0a:	bf18      	it	ne
 8000e0c:	4249      	negne	r1, r1
 8000e0e:	ea92 0f03 	teq	r2, r3
 8000e12:	d03f      	beq.n	8000e94 <__addsf3+0xd8>
 8000e14:	f1a2 0201 	sub.w	r2, r2, #1
 8000e18:	fa41 fc03 	asr.w	ip, r1, r3
 8000e1c:	eb10 000c 	adds.w	r0, r0, ip
 8000e20:	f1c3 0320 	rsb	r3, r3, #32
 8000e24:	fa01 f103 	lsl.w	r1, r1, r3
 8000e28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e2c:	d502      	bpl.n	8000e34 <__addsf3+0x78>
 8000e2e:	4249      	negs	r1, r1
 8000e30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e38:	d313      	bcc.n	8000e62 <__addsf3+0xa6>
 8000e3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e3e:	d306      	bcc.n	8000e4e <__addsf3+0x92>
 8000e40:	0840      	lsrs	r0, r0, #1
 8000e42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e46:	f102 0201 	add.w	r2, r2, #1
 8000e4a:	2afe      	cmp	r2, #254	; 0xfe
 8000e4c:	d251      	bcs.n	8000ef2 <__addsf3+0x136>
 8000e4e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e56:	bf08      	it	eq
 8000e58:	f020 0001 	biceq.w	r0, r0, #1
 8000e5c:	ea40 0003 	orr.w	r0, r0, r3
 8000e60:	4770      	bx	lr
 8000e62:	0049      	lsls	r1, r1, #1
 8000e64:	eb40 0000 	adc.w	r0, r0, r0
 8000e68:	3a01      	subs	r2, #1
 8000e6a:	bf28      	it	cs
 8000e6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e70:	d2ed      	bcs.n	8000e4e <__addsf3+0x92>
 8000e72:	fab0 fc80 	clz	ip, r0
 8000e76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000e7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e82:	bfaa      	itet	ge
 8000e84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e88:	4252      	neglt	r2, r2
 8000e8a:	4318      	orrge	r0, r3
 8000e8c:	bfbc      	itt	lt
 8000e8e:	40d0      	lsrlt	r0, r2
 8000e90:	4318      	orrlt	r0, r3
 8000e92:	4770      	bx	lr
 8000e94:	f092 0f00 	teq	r2, #0
 8000e98:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e9c:	bf06      	itte	eq
 8000e9e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ea2:	3201      	addeq	r2, #1
 8000ea4:	3b01      	subne	r3, #1
 8000ea6:	e7b5      	b.n	8000e14 <__addsf3+0x58>
 8000ea8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb0:	bf18      	it	ne
 8000eb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb6:	d021      	beq.n	8000efc <__addsf3+0x140>
 8000eb8:	ea92 0f03 	teq	r2, r3
 8000ebc:	d004      	beq.n	8000ec8 <__addsf3+0x10c>
 8000ebe:	f092 0f00 	teq	r2, #0
 8000ec2:	bf08      	it	eq
 8000ec4:	4608      	moveq	r0, r1
 8000ec6:	4770      	bx	lr
 8000ec8:	ea90 0f01 	teq	r0, r1
 8000ecc:	bf1c      	itt	ne
 8000ece:	2000      	movne	r0, #0
 8000ed0:	4770      	bxne	lr
 8000ed2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ed6:	d104      	bne.n	8000ee2 <__addsf3+0x126>
 8000ed8:	0040      	lsls	r0, r0, #1
 8000eda:	bf28      	it	cs
 8000edc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ee0:	4770      	bx	lr
 8000ee2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ee6:	bf3c      	itt	cc
 8000ee8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000eec:	4770      	bxcc	lr
 8000eee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ef2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ef6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efa:	4770      	bx	lr
 8000efc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000f00:	bf16      	itet	ne
 8000f02:	4608      	movne	r0, r1
 8000f04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f08:	4601      	movne	r1, r0
 8000f0a:	0242      	lsls	r2, r0, #9
 8000f0c:	bf06      	itte	eq
 8000f0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f12:	ea90 0f01 	teqeq	r0, r1
 8000f16:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_ui2f>:
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e004      	b.n	8000f2c <__aeabi_i2f+0x8>
 8000f22:	bf00      	nop

08000f24 <__aeabi_i2f>:
 8000f24:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f28:	bf48      	it	mi
 8000f2a:	4240      	negmi	r0, r0
 8000f2c:	ea5f 0c00 	movs.w	ip, r0
 8000f30:	bf08      	it	eq
 8000f32:	4770      	bxeq	lr
 8000f34:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f38:	4601      	mov	r1, r0
 8000f3a:	f04f 0000 	mov.w	r0, #0
 8000f3e:	e01c      	b.n	8000f7a <__aeabi_l2f+0x2a>

08000f40 <__aeabi_ul2f>:
 8000f40:	ea50 0201 	orrs.w	r2, r0, r1
 8000f44:	bf08      	it	eq
 8000f46:	4770      	bxeq	lr
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e00a      	b.n	8000f64 <__aeabi_l2f+0x14>
 8000f4e:	bf00      	nop

08000f50 <__aeabi_l2f>:
 8000f50:	ea50 0201 	orrs.w	r2, r0, r1
 8000f54:	bf08      	it	eq
 8000f56:	4770      	bxeq	lr
 8000f58:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f5c:	d502      	bpl.n	8000f64 <__aeabi_l2f+0x14>
 8000f5e:	4240      	negs	r0, r0
 8000f60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f64:	ea5f 0c01 	movs.w	ip, r1
 8000f68:	bf02      	ittt	eq
 8000f6a:	4684      	moveq	ip, r0
 8000f6c:	4601      	moveq	r1, r0
 8000f6e:	2000      	moveq	r0, #0
 8000f70:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f74:	bf08      	it	eq
 8000f76:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f7e:	fabc f28c 	clz	r2, ip
 8000f82:	3a08      	subs	r2, #8
 8000f84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f88:	db10      	blt.n	8000fac <__aeabi_l2f+0x5c>
 8000f8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f8e:	4463      	add	r3, ip
 8000f90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f94:	f1c2 0220 	rsb	r2, r2, #32
 8000f98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa0:	eb43 0002 	adc.w	r0, r3, r2
 8000fa4:	bf08      	it	eq
 8000fa6:	f020 0001 	biceq.w	r0, r0, #1
 8000faa:	4770      	bx	lr
 8000fac:	f102 0220 	add.w	r2, r2, #32
 8000fb0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fb4:	f1c2 0220 	rsb	r2, r2, #32
 8000fb8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fbc:	fa21 f202 	lsr.w	r2, r1, r2
 8000fc0:	eb43 0002 	adc.w	r0, r3, r2
 8000fc4:	bf08      	it	eq
 8000fc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fca:	4770      	bx	lr

08000fcc <__gesf2>:
 8000fcc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd0:	e006      	b.n	8000fe0 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__lesf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	e002      	b.n	8000fe0 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__cmpsf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff0:	bf18      	it	ne
 8000ff2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ff6:	d011      	beq.n	800101c <__cmpsf2+0x40>
 8000ff8:	b001      	add	sp, #4
 8000ffa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ffe:	bf18      	it	ne
 8001000:	ea90 0f01 	teqne	r0, r1
 8001004:	bf58      	it	pl
 8001006:	ebb2 0003 	subspl.w	r0, r2, r3
 800100a:	bf88      	it	hi
 800100c:	17c8      	asrhi	r0, r1, #31
 800100e:	bf38      	it	cc
 8001010:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001014:	bf18      	it	ne
 8001016:	f040 0001 	orrne.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001020:	d102      	bne.n	8001028 <__cmpsf2+0x4c>
 8001022:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001026:	d105      	bne.n	8001034 <__cmpsf2+0x58>
 8001028:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800102c:	d1e4      	bne.n	8000ff8 <__cmpsf2+0x1c>
 800102e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001032:	d0e1      	beq.n	8000ff8 <__cmpsf2+0x1c>
 8001034:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <__aeabi_cfrcmple>:
 800103c:	4684      	mov	ip, r0
 800103e:	4608      	mov	r0, r1
 8001040:	4661      	mov	r1, ip
 8001042:	e7ff      	b.n	8001044 <__aeabi_cfcmpeq>

08001044 <__aeabi_cfcmpeq>:
 8001044:	b50f      	push	{r0, r1, r2, r3, lr}
 8001046:	f7ff ffc9 	bl	8000fdc <__cmpsf2>
 800104a:	2800      	cmp	r0, #0
 800104c:	bf48      	it	mi
 800104e:	f110 0f00 	cmnmi.w	r0, #0
 8001052:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001054 <__aeabi_fcmpeq>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff fff4 	bl	8001044 <__aeabi_cfcmpeq>
 800105c:	bf0c      	ite	eq
 800105e:	2001      	moveq	r0, #1
 8001060:	2000      	movne	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_fcmplt>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff ffea 	bl	8001044 <__aeabi_cfcmpeq>
 8001070:	bf34      	ite	cc
 8001072:	2001      	movcc	r0, #1
 8001074:	2000      	movcs	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmple>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffe0 	bl	8001044 <__aeabi_cfcmpeq>
 8001084:	bf94      	ite	ls
 8001086:	2001      	movls	r0, #1
 8001088:	2000      	movhi	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmpge>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffd2 	bl	800103c <__aeabi_cfrcmple>
 8001098:	bf94      	ite	ls
 800109a:	2001      	movls	r0, #1
 800109c:	2000      	movhi	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmpgt>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffc8 	bl	800103c <__aeabi_cfrcmple>
 80010ac:	bf34      	ite	cc
 80010ae:	2001      	movcc	r0, #1
 80010b0:	2000      	movcs	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_f2iz>:
 80010b8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c0:	d30f      	bcc.n	80010e2 <__aeabi_f2iz+0x2a>
 80010c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ca:	d90d      	bls.n	80010e8 <__aeabi_f2iz+0x30>
 80010cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	bf18      	it	ne
 80010de:	4240      	negne	r0, r0
 80010e0:	4770      	bx	lr
 80010e2:	f04f 0000 	mov.w	r0, #0
 80010e6:	4770      	bx	lr
 80010e8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010ec:	d101      	bne.n	80010f2 <__aeabi_f2iz+0x3a>
 80010ee:	0242      	lsls	r2, r0, #9
 80010f0:	d105      	bne.n	80010fe <__aeabi_f2iz+0x46>
 80010f2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010f6:	bf08      	it	eq
 80010f8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010fc:	4770      	bx	lr
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	4770      	bx	lr

08001104 <__aeabi_f2uiz>:
 8001104:	0042      	lsls	r2, r0, #1
 8001106:	d20e      	bcs.n	8001126 <__aeabi_f2uiz+0x22>
 8001108:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800110c:	d30b      	bcc.n	8001126 <__aeabi_f2uiz+0x22>
 800110e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001112:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001116:	d409      	bmi.n	800112c <__aeabi_f2uiz+0x28>
 8001118:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800111c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2uiz+0x32>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d102      	bne.n	800113c <__aeabi_f2uiz+0x38>
 8001136:	f04f 30ff 	mov.w	r0, #4294967295
 800113a:	4770      	bx	lr
 800113c:	f04f 0000 	mov.w	r0, #0
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop

08001144 <__aeabi_uldivmod>:
 8001144:	b953      	cbnz	r3, 800115c <__aeabi_uldivmod+0x18>
 8001146:	b94a      	cbnz	r2, 800115c <__aeabi_uldivmod+0x18>
 8001148:	2900      	cmp	r1, #0
 800114a:	bf08      	it	eq
 800114c:	2800      	cmpeq	r0, #0
 800114e:	bf1c      	itt	ne
 8001150:	f04f 31ff 	movne.w	r1, #4294967295
 8001154:	f04f 30ff 	movne.w	r0, #4294967295
 8001158:	f000 b9ae 	b.w	80014b8 <__aeabi_idiv0>
 800115c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001164:	f000 f83e 	bl	80011e4 <__udivmoddi4>
 8001168:	f8dd e004 	ldr.w	lr, [sp, #4]
 800116c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001170:	b004      	add	sp, #16
 8001172:	4770      	bx	lr

08001174 <__aeabi_d2lz>:
 8001174:	b538      	push	{r3, r4, r5, lr}
 8001176:	4605      	mov	r5, r0
 8001178:	460c      	mov	r4, r1
 800117a:	2200      	movs	r2, #0
 800117c:	2300      	movs	r3, #0
 800117e:	4628      	mov	r0, r5
 8001180:	4621      	mov	r1, r4
 8001182:	f7ff fd3f 	bl	8000c04 <__aeabi_dcmplt>
 8001186:	b928      	cbnz	r0, 8001194 <__aeabi_d2lz+0x20>
 8001188:	4628      	mov	r0, r5
 800118a:	4621      	mov	r1, r4
 800118c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001190:	f000 b80a 	b.w	80011a8 <__aeabi_d2ulz>
 8001194:	4628      	mov	r0, r5
 8001196:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800119a:	f000 f805 	bl	80011a8 <__aeabi_d2ulz>
 800119e:	4240      	negs	r0, r0
 80011a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a4:	bd38      	pop	{r3, r4, r5, pc}
 80011a6:	bf00      	nop

080011a8 <__aeabi_d2ulz>:
 80011a8:	b5d0      	push	{r4, r6, r7, lr}
 80011aa:	2200      	movs	r2, #0
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <__aeabi_d2ulz+0x34>)
 80011ae:	4606      	mov	r6, r0
 80011b0:	460f      	mov	r7, r1
 80011b2:	f7ff fab5 	bl	8000720 <__aeabi_dmul>
 80011b6:	f7ff fd8b 	bl	8000cd0 <__aeabi_d2uiz>
 80011ba:	4604      	mov	r4, r0
 80011bc:	f7ff fa36 	bl	800062c <__aeabi_ui2d>
 80011c0:	2200      	movs	r2, #0
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <__aeabi_d2ulz+0x38>)
 80011c4:	f7ff faac 	bl	8000720 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4630      	mov	r0, r6
 80011ce:	4639      	mov	r1, r7
 80011d0:	f7ff f8ee 	bl	80003b0 <__aeabi_dsub>
 80011d4:	f7ff fd7c 	bl	8000cd0 <__aeabi_d2uiz>
 80011d8:	4621      	mov	r1, r4
 80011da:	bdd0      	pop	{r4, r6, r7, pc}
 80011dc:	3df00000 	.word	0x3df00000
 80011e0:	41f00000 	.word	0x41f00000

080011e4 <__udivmoddi4>:
 80011e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011e8:	9e08      	ldr	r6, [sp, #32]
 80011ea:	460d      	mov	r5, r1
 80011ec:	4604      	mov	r4, r0
 80011ee:	4688      	mov	r8, r1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d14d      	bne.n	8001290 <__udivmoddi4+0xac>
 80011f4:	428a      	cmp	r2, r1
 80011f6:	4694      	mov	ip, r2
 80011f8:	d968      	bls.n	80012cc <__udivmoddi4+0xe8>
 80011fa:	fab2 f282 	clz	r2, r2
 80011fe:	b152      	cbz	r2, 8001216 <__udivmoddi4+0x32>
 8001200:	fa01 f302 	lsl.w	r3, r1, r2
 8001204:	f1c2 0120 	rsb	r1, r2, #32
 8001208:	fa20 f101 	lsr.w	r1, r0, r1
 800120c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001210:	ea41 0803 	orr.w	r8, r1, r3
 8001214:	4094      	lsls	r4, r2
 8001216:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800121a:	fbb8 f7f1 	udiv	r7, r8, r1
 800121e:	fa1f fe8c 	uxth.w	lr, ip
 8001222:	fb01 8817 	mls	r8, r1, r7, r8
 8001226:	fb07 f00e 	mul.w	r0, r7, lr
 800122a:	0c23      	lsrs	r3, r4, #16
 800122c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001230:	4298      	cmp	r0, r3
 8001232:	d90a      	bls.n	800124a <__udivmoddi4+0x66>
 8001234:	eb1c 0303 	adds.w	r3, ip, r3
 8001238:	f107 35ff 	add.w	r5, r7, #4294967295
 800123c:	f080 811e 	bcs.w	800147c <__udivmoddi4+0x298>
 8001240:	4298      	cmp	r0, r3
 8001242:	f240 811b 	bls.w	800147c <__udivmoddi4+0x298>
 8001246:	3f02      	subs	r7, #2
 8001248:	4463      	add	r3, ip
 800124a:	1a1b      	subs	r3, r3, r0
 800124c:	fbb3 f0f1 	udiv	r0, r3, r1
 8001250:	fb01 3310 	mls	r3, r1, r0, r3
 8001254:	fb00 fe0e 	mul.w	lr, r0, lr
 8001258:	b2a4      	uxth	r4, r4
 800125a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800125e:	45a6      	cmp	lr, r4
 8001260:	d90a      	bls.n	8001278 <__udivmoddi4+0x94>
 8001262:	eb1c 0404 	adds.w	r4, ip, r4
 8001266:	f100 33ff 	add.w	r3, r0, #4294967295
 800126a:	f080 8109 	bcs.w	8001480 <__udivmoddi4+0x29c>
 800126e:	45a6      	cmp	lr, r4
 8001270:	f240 8106 	bls.w	8001480 <__udivmoddi4+0x29c>
 8001274:	4464      	add	r4, ip
 8001276:	3802      	subs	r0, #2
 8001278:	2100      	movs	r1, #0
 800127a:	eba4 040e 	sub.w	r4, r4, lr
 800127e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001282:	b11e      	cbz	r6, 800128c <__udivmoddi4+0xa8>
 8001284:	2300      	movs	r3, #0
 8001286:	40d4      	lsrs	r4, r2
 8001288:	e9c6 4300 	strd	r4, r3, [r6]
 800128c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001290:	428b      	cmp	r3, r1
 8001292:	d908      	bls.n	80012a6 <__udivmoddi4+0xc2>
 8001294:	2e00      	cmp	r6, #0
 8001296:	f000 80ee 	beq.w	8001476 <__udivmoddi4+0x292>
 800129a:	2100      	movs	r1, #0
 800129c:	e9c6 0500 	strd	r0, r5, [r6]
 80012a0:	4608      	mov	r0, r1
 80012a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a6:	fab3 f183 	clz	r1, r3
 80012aa:	2900      	cmp	r1, #0
 80012ac:	d14a      	bne.n	8001344 <__udivmoddi4+0x160>
 80012ae:	42ab      	cmp	r3, r5
 80012b0:	d302      	bcc.n	80012b8 <__udivmoddi4+0xd4>
 80012b2:	4282      	cmp	r2, r0
 80012b4:	f200 80fc 	bhi.w	80014b0 <__udivmoddi4+0x2cc>
 80012b8:	1a84      	subs	r4, r0, r2
 80012ba:	eb65 0303 	sbc.w	r3, r5, r3
 80012be:	2001      	movs	r0, #1
 80012c0:	4698      	mov	r8, r3
 80012c2:	2e00      	cmp	r6, #0
 80012c4:	d0e2      	beq.n	800128c <__udivmoddi4+0xa8>
 80012c6:	e9c6 4800 	strd	r4, r8, [r6]
 80012ca:	e7df      	b.n	800128c <__udivmoddi4+0xa8>
 80012cc:	b902      	cbnz	r2, 80012d0 <__udivmoddi4+0xec>
 80012ce:	deff      	udf	#255	; 0xff
 80012d0:	fab2 f282 	clz	r2, r2
 80012d4:	2a00      	cmp	r2, #0
 80012d6:	f040 8091 	bne.w	80013fc <__udivmoddi4+0x218>
 80012da:	eba1 000c 	sub.w	r0, r1, ip
 80012de:	2101      	movs	r1, #1
 80012e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012e4:	fa1f fe8c 	uxth.w	lr, ip
 80012e8:	fbb0 f3f7 	udiv	r3, r0, r7
 80012ec:	fb07 0013 	mls	r0, r7, r3, r0
 80012f0:	0c25      	lsrs	r5, r4, #16
 80012f2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012f6:	fb0e f003 	mul.w	r0, lr, r3
 80012fa:	42a8      	cmp	r0, r5
 80012fc:	d908      	bls.n	8001310 <__udivmoddi4+0x12c>
 80012fe:	eb1c 0505 	adds.w	r5, ip, r5
 8001302:	f103 38ff 	add.w	r8, r3, #4294967295
 8001306:	d202      	bcs.n	800130e <__udivmoddi4+0x12a>
 8001308:	42a8      	cmp	r0, r5
 800130a:	f200 80ce 	bhi.w	80014aa <__udivmoddi4+0x2c6>
 800130e:	4643      	mov	r3, r8
 8001310:	1a2d      	subs	r5, r5, r0
 8001312:	fbb5 f0f7 	udiv	r0, r5, r7
 8001316:	fb07 5510 	mls	r5, r7, r0, r5
 800131a:	fb0e fe00 	mul.w	lr, lr, r0
 800131e:	b2a4      	uxth	r4, r4
 8001320:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001324:	45a6      	cmp	lr, r4
 8001326:	d908      	bls.n	800133a <__udivmoddi4+0x156>
 8001328:	eb1c 0404 	adds.w	r4, ip, r4
 800132c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001330:	d202      	bcs.n	8001338 <__udivmoddi4+0x154>
 8001332:	45a6      	cmp	lr, r4
 8001334:	f200 80b6 	bhi.w	80014a4 <__udivmoddi4+0x2c0>
 8001338:	4628      	mov	r0, r5
 800133a:	eba4 040e 	sub.w	r4, r4, lr
 800133e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001342:	e79e      	b.n	8001282 <__udivmoddi4+0x9e>
 8001344:	f1c1 0720 	rsb	r7, r1, #32
 8001348:	408b      	lsls	r3, r1
 800134a:	fa22 fc07 	lsr.w	ip, r2, r7
 800134e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001352:	fa25 fa07 	lsr.w	sl, r5, r7
 8001356:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800135a:	fbba f8f9 	udiv	r8, sl, r9
 800135e:	fa20 f307 	lsr.w	r3, r0, r7
 8001362:	fb09 aa18 	mls	sl, r9, r8, sl
 8001366:	408d      	lsls	r5, r1
 8001368:	fa1f fe8c 	uxth.w	lr, ip
 800136c:	431d      	orrs	r5, r3
 800136e:	fa00 f301 	lsl.w	r3, r0, r1
 8001372:	fb08 f00e 	mul.w	r0, r8, lr
 8001376:	0c2c      	lsrs	r4, r5, #16
 8001378:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800137c:	42a0      	cmp	r0, r4
 800137e:	fa02 f201 	lsl.w	r2, r2, r1
 8001382:	d90b      	bls.n	800139c <__udivmoddi4+0x1b8>
 8001384:	eb1c 0404 	adds.w	r4, ip, r4
 8001388:	f108 3aff 	add.w	sl, r8, #4294967295
 800138c:	f080 8088 	bcs.w	80014a0 <__udivmoddi4+0x2bc>
 8001390:	42a0      	cmp	r0, r4
 8001392:	f240 8085 	bls.w	80014a0 <__udivmoddi4+0x2bc>
 8001396:	f1a8 0802 	sub.w	r8, r8, #2
 800139a:	4464      	add	r4, ip
 800139c:	1a24      	subs	r4, r4, r0
 800139e:	fbb4 f0f9 	udiv	r0, r4, r9
 80013a2:	fb09 4410 	mls	r4, r9, r0, r4
 80013a6:	fb00 fe0e 	mul.w	lr, r0, lr
 80013aa:	b2ad      	uxth	r5, r5
 80013ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013b0:	45a6      	cmp	lr, r4
 80013b2:	d908      	bls.n	80013c6 <__udivmoddi4+0x1e2>
 80013b4:	eb1c 0404 	adds.w	r4, ip, r4
 80013b8:	f100 35ff 	add.w	r5, r0, #4294967295
 80013bc:	d26c      	bcs.n	8001498 <__udivmoddi4+0x2b4>
 80013be:	45a6      	cmp	lr, r4
 80013c0:	d96a      	bls.n	8001498 <__udivmoddi4+0x2b4>
 80013c2:	3802      	subs	r0, #2
 80013c4:	4464      	add	r4, ip
 80013c6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80013ca:	fba0 9502 	umull	r9, r5, r0, r2
 80013ce:	eba4 040e 	sub.w	r4, r4, lr
 80013d2:	42ac      	cmp	r4, r5
 80013d4:	46c8      	mov	r8, r9
 80013d6:	46ae      	mov	lr, r5
 80013d8:	d356      	bcc.n	8001488 <__udivmoddi4+0x2a4>
 80013da:	d053      	beq.n	8001484 <__udivmoddi4+0x2a0>
 80013dc:	2e00      	cmp	r6, #0
 80013de:	d069      	beq.n	80014b4 <__udivmoddi4+0x2d0>
 80013e0:	ebb3 0208 	subs.w	r2, r3, r8
 80013e4:	eb64 040e 	sbc.w	r4, r4, lr
 80013e8:	fa22 f301 	lsr.w	r3, r2, r1
 80013ec:	fa04 f707 	lsl.w	r7, r4, r7
 80013f0:	431f      	orrs	r7, r3
 80013f2:	40cc      	lsrs	r4, r1
 80013f4:	e9c6 7400 	strd	r7, r4, [r6]
 80013f8:	2100      	movs	r1, #0
 80013fa:	e747      	b.n	800128c <__udivmoddi4+0xa8>
 80013fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8001400:	f1c2 0120 	rsb	r1, r2, #32
 8001404:	fa25 f301 	lsr.w	r3, r5, r1
 8001408:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800140c:	fa20 f101 	lsr.w	r1, r0, r1
 8001410:	4095      	lsls	r5, r2
 8001412:	430d      	orrs	r5, r1
 8001414:	fbb3 f1f7 	udiv	r1, r3, r7
 8001418:	fb07 3311 	mls	r3, r7, r1, r3
 800141c:	fa1f fe8c 	uxth.w	lr, ip
 8001420:	0c28      	lsrs	r0, r5, #16
 8001422:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001426:	fb01 f30e 	mul.w	r3, r1, lr
 800142a:	4283      	cmp	r3, r0
 800142c:	fa04 f402 	lsl.w	r4, r4, r2
 8001430:	d908      	bls.n	8001444 <__udivmoddi4+0x260>
 8001432:	eb1c 0000 	adds.w	r0, ip, r0
 8001436:	f101 38ff 	add.w	r8, r1, #4294967295
 800143a:	d22f      	bcs.n	800149c <__udivmoddi4+0x2b8>
 800143c:	4283      	cmp	r3, r0
 800143e:	d92d      	bls.n	800149c <__udivmoddi4+0x2b8>
 8001440:	3902      	subs	r1, #2
 8001442:	4460      	add	r0, ip
 8001444:	1ac0      	subs	r0, r0, r3
 8001446:	fbb0 f3f7 	udiv	r3, r0, r7
 800144a:	fb07 0013 	mls	r0, r7, r3, r0
 800144e:	b2ad      	uxth	r5, r5
 8001450:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001454:	fb03 f00e 	mul.w	r0, r3, lr
 8001458:	42a8      	cmp	r0, r5
 800145a:	d908      	bls.n	800146e <__udivmoddi4+0x28a>
 800145c:	eb1c 0505 	adds.w	r5, ip, r5
 8001460:	f103 38ff 	add.w	r8, r3, #4294967295
 8001464:	d216      	bcs.n	8001494 <__udivmoddi4+0x2b0>
 8001466:	42a8      	cmp	r0, r5
 8001468:	d914      	bls.n	8001494 <__udivmoddi4+0x2b0>
 800146a:	3b02      	subs	r3, #2
 800146c:	4465      	add	r5, ip
 800146e:	1a28      	subs	r0, r5, r0
 8001470:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001474:	e738      	b.n	80012e8 <__udivmoddi4+0x104>
 8001476:	4631      	mov	r1, r6
 8001478:	4630      	mov	r0, r6
 800147a:	e707      	b.n	800128c <__udivmoddi4+0xa8>
 800147c:	462f      	mov	r7, r5
 800147e:	e6e4      	b.n	800124a <__udivmoddi4+0x66>
 8001480:	4618      	mov	r0, r3
 8001482:	e6f9      	b.n	8001278 <__udivmoddi4+0x94>
 8001484:	454b      	cmp	r3, r9
 8001486:	d2a9      	bcs.n	80013dc <__udivmoddi4+0x1f8>
 8001488:	ebb9 0802 	subs.w	r8, r9, r2
 800148c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001490:	3801      	subs	r0, #1
 8001492:	e7a3      	b.n	80013dc <__udivmoddi4+0x1f8>
 8001494:	4643      	mov	r3, r8
 8001496:	e7ea      	b.n	800146e <__udivmoddi4+0x28a>
 8001498:	4628      	mov	r0, r5
 800149a:	e794      	b.n	80013c6 <__udivmoddi4+0x1e2>
 800149c:	4641      	mov	r1, r8
 800149e:	e7d1      	b.n	8001444 <__udivmoddi4+0x260>
 80014a0:	46d0      	mov	r8, sl
 80014a2:	e77b      	b.n	800139c <__udivmoddi4+0x1b8>
 80014a4:	4464      	add	r4, ip
 80014a6:	3802      	subs	r0, #2
 80014a8:	e747      	b.n	800133a <__udivmoddi4+0x156>
 80014aa:	3b02      	subs	r3, #2
 80014ac:	4465      	add	r5, ip
 80014ae:	e72f      	b.n	8001310 <__udivmoddi4+0x12c>
 80014b0:	4608      	mov	r0, r1
 80014b2:	e706      	b.n	80012c2 <__udivmoddi4+0xde>
 80014b4:	4631      	mov	r1, r6
 80014b6:	e6e9      	b.n	800128c <__udivmoddi4+0xa8>

080014b8 <__aeabi_idiv0>:
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop

080014bc <MAX31865_Init>:
//P.S. Максимальная скорость spi 5 МГц.
//Также обратите внимание, что Clock Polarity(CLPOL) = Low. Clock Phase(CPHA) = 2 Edge.
/*-------------------------------------------Для работы по spi-----------------------------------------------*/

/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/
void MAX31865_Init(uint8_t num_wires) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
	///Не вижу особого смысла выводить полную настройку модуля, поэтому сделаем
	///небольшое упрощение для конечного пользователя
	///все, что может настроить пользователь - это выбрать тип подключения
	///2,3 или 4 проводное
	/// \param num_wires - тип подключения датчика 2,3 или 4 проводное
	uint8_t MAX31865_Reinitialization_cnt = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
	MAX31865_Sensor_Error = 0;
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <MAX31865_Init+0xa0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
	uint8_t MAX31865_Configuration_register_write[] = { 0x80, 0x00 };
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	81bb      	strh	r3, [r7, #12]
	if (num_wires == 2 || num_wires == 4) {
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d002      	beq.n	80014e0 <MAX31865_Init+0x24>
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d102      	bne.n	80014e6 <MAX31865_Init+0x2a>
		MAX31865_Configuration_register_write[1] = 0xC3; //0xC3
 80014e0:	23c3      	movs	r3, #195	; 0xc3
 80014e2:	737b      	strb	r3, [r7, #13]
 80014e4:	e004      	b.n	80014f0 <MAX31865_Init+0x34>
	} else if (num_wires == 3) {
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d101      	bne.n	80014f0 <MAX31865_Init+0x34>
		MAX31865_Configuration_register_write[1] = 0xD3; //0xD3
 80014ec:	23d3      	movs	r3, #211	; 0xd3
 80014ee:	737b      	strb	r3, [r7, #13]
	}
	cs_set();
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <MAX31865_Init+0xa4>)
 80014f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014f6:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 80014f8:	f107 010c 	add.w	r1, r7, #12
 80014fc:	2364      	movs	r3, #100	; 0x64
 80014fe:	2202      	movs	r2, #2
 8001500:	4818      	ldr	r0, [pc, #96]	; (8001564 <MAX31865_Init+0xa8>)
 8001502:	f004 fa17 	bl	8005934 <HAL_SPI_Transmit>
	cs_reset();
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <MAX31865_Init+0xa4>)
 8001508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800150c:	611a      	str	r2, [r3, #16]
	//Дабы достучаться до датчика после подачи питания, т.к. с первого раза инициализация может и не пройти, заведем цикл.
	while (MAX31865_Configuration_info() != 0xD1 && MAX31865_Configuration_info() != 0xC1) {
 800150e:	e014      	b.n	800153a <MAX31865_Init+0x7e>
		MAX31865_Reinitialization_cnt++;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	3301      	adds	r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]

		cs_set();
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MAX31865_Init+0xa4>)
 8001518:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800151c:	611a      	str	r2, [r3, #16]
		HAL_SPI_Transmit(&hspi1, MAX31865_Configuration_register_write, 2, 100);
 800151e:	f107 010c 	add.w	r1, r7, #12
 8001522:	2364      	movs	r3, #100	; 0x64
 8001524:	2202      	movs	r2, #2
 8001526:	480f      	ldr	r0, [pc, #60]	; (8001564 <MAX31865_Init+0xa8>)
 8001528:	f004 fa04 	bl	8005934 <HAL_SPI_Transmit>
		cs_reset();
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MAX31865_Init+0xa4>)
 800152e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001532:	611a      	str	r2, [r3, #16]

		if (MAX31865_Reinitialization_cnt == 100) {
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	2b64      	cmp	r3, #100	; 0x64
 8001538:	d00a      	beq.n	8001550 <MAX31865_Init+0x94>
	while (MAX31865_Configuration_info() != 0xD1 && MAX31865_Configuration_info() != 0xC1) {
 800153a:	f000 f815 	bl	8001568 <MAX31865_Configuration_info>
 800153e:	4603      	mov	r3, r0
 8001540:	2bd1      	cmp	r3, #209	; 0xd1
 8001542:	d006      	beq.n	8001552 <MAX31865_Init+0x96>
 8001544:	f000 f810 	bl	8001568 <MAX31865_Configuration_info>
 8001548:	4603      	mov	r3, r0
 800154a:	2bc1      	cmp	r3, #193	; 0xc1
 800154c:	d1e0      	bne.n	8001510 <MAX31865_Init+0x54>
			break;
		}

	}

}
 800154e:	e000      	b.n	8001552 <MAX31865_Init+0x96>
			break;
 8001550:	bf00      	nop
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000210 	.word	0x20000210
 8001560:	40010800 	.word	0x40010800
 8001564:	200005e0 	.word	0x200005e0

08001568 <MAX31865_Configuration_info>:
/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/

/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/
uint8_t MAX31865_Configuration_info(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
	///Функция получения информации о конфигурации модуля MAX31865
	///Возвращает значение конфигурации.
	///Не удивляйтесь, если отправите при инициализации 0xC3, а получите 0xC1
	///(см. datasheet MAX31865 стр.14 "The fault status clear bit D1, self-clears to 0.")
	uint8_t read_data = 0x00;
 800156e:	2300      	movs	r3, #0
 8001570:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_Configuration = 0x00;
 8001572:	2300      	movs	r3, #0
 8001574:	71bb      	strb	r3, [r7, #6]
	cs_set();
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MAX31865_Configuration_info+0x40>)
 8001578:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800157c:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &read_data, 1, 100);
 800157e:	1df9      	adds	r1, r7, #7
 8001580:	2364      	movs	r3, #100	; 0x64
 8001582:	2201      	movs	r2, #1
 8001584:	4809      	ldr	r0, [pc, #36]	; (80015ac <MAX31865_Configuration_info+0x44>)
 8001586:	f004 f9d5 	bl	8005934 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &MAX31865_Configuration, 1, 100);
 800158a:	1db9      	adds	r1, r7, #6
 800158c:	2364      	movs	r3, #100	; 0x64
 800158e:	2201      	movs	r2, #1
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <MAX31865_Configuration_info+0x44>)
 8001592:	f004 fb0b 	bl	8005bac <HAL_SPI_Receive>
	cs_reset();
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <MAX31865_Configuration_info+0x40>)
 8001598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159c:	611a      	str	r2, [r3, #16]
	return MAX31865_Configuration;
 800159e:	79bb      	ldrb	r3, [r7, #6]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40010800 	.word	0x40010800
 80015ac:	200005e0 	.word	0x200005e0

080015b0 <MAX31865_Get_Temperature>:
/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/

/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/
double MAX31865_Get_Temperature(void) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
		uint8_t Fault_Status; //Статус неисправности
	};

	struct rx_data_MAX31865 MAX31865_receieve_data;

	uint8_t MAX31865_start_address_of_the_poll = 0x01; //Адрес регистра, с которого начнем чтение данных
 80015b6:	2301      	movs	r3, #1
 80015b8:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_rx_buffer[7]; //буфер, куда будем складывать приходящие данные
	cs_set();
 80015ba:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <MAX31865_Get_Temperature+0xc8>)
 80015bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015c0:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &MAX31865_start_address_of_the_poll, 1, 100);
 80015c2:	1df9      	adds	r1, r7, #7
 80015c4:	2364      	movs	r3, #100	; 0x64
 80015c6:	2201      	movs	r2, #1
 80015c8:	482c      	ldr	r0, [pc, #176]	; (800167c <MAX31865_Get_Temperature+0xcc>)
 80015ca:	f004 f9b3 	bl	8005934 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, MAX31865_rx_buffer, 7, 100);
 80015ce:	4639      	mov	r1, r7
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	2207      	movs	r2, #7
 80015d4:	4829      	ldr	r0, [pc, #164]	; (800167c <MAX31865_Get_Temperature+0xcc>)
 80015d6:	f004 fae9 	bl	8005bac <HAL_SPI_Receive>
	cs_reset();
 80015da:	4b27      	ldr	r3, [pc, #156]	; (8001678 <MAX31865_Get_Temperature+0xc8>)
 80015dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e0:	611a      	str	r2, [r3, #16]
	MAX31865_receieve_data.RTD_Resistance_Registers = ((MAX31865_rx_buffer[0] << 8) | MAX31865_rx_buffer[1]) >> 1; //Данные регистров сопротивления
 80015e2:	783b      	ldrb	r3, [r7, #0]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	787a      	ldrb	r2, [r7, #1]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	105b      	asrs	r3, r3, #1
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	813b      	strh	r3, [r7, #8]
	MAX31865_receieve_data.High_Fault_Threshold = ((MAX31865_rx_buffer[2] << 8) | MAX31865_rx_buffer[3]) >> 1; //Данные верхнего порого неисправности
 80015f0:	78bb      	ldrb	r3, [r7, #2]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	78fa      	ldrb	r2, [r7, #3]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	105b      	asrs	r3, r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	817b      	strh	r3, [r7, #10]
	MAX31865_receieve_data.Low_Fault_Threshold = (MAX31865_rx_buffer[4] << 8) | MAX31865_rx_buffer[5]; //Данные нижнего порога неисправности
 80015fe:	793b      	ldrb	r3, [r7, #4]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21a      	sxth	r2, r3
 8001604:	797b      	ldrb	r3, [r7, #5]
 8001606:	b21b      	sxth	r3, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	b21b      	sxth	r3, r3
 800160c:	b29b      	uxth	r3, r3
 800160e:	81bb      	strh	r3, [r7, #12]
	MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]; //Статус неисправности
 8001610:	79bb      	ldrb	r3, [r7, #6]
 8001612:	73bb      	strb	r3, [r7, #14]
	if (MAX31865_receieve_data.Fault_Status > 0x00) {
 8001614:	7bbb      	ldrb	r3, [r7, #14]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <MAX31865_Get_Temperature+0x7c>

		/*--------------Здесь Ваши действия по реагированию на ошибку датчика---------------*/
		MAX31865_Sensor_Error = 1;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <MAX31865_Get_Temperature+0xd0>)
 800161c:	2201      	movs	r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
		//printf("Sensor Error!\r\n");

		/*----Автоматический сброс ошибки----*/
		MAX31865_Init(3);
 8001620:	2003      	movs	r0, #3
 8001622:	f7ff ff4b 	bl	80014bc <MAX31865_Init>
		MAX31865_Sensor_Error = 0;
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <MAX31865_Get_Temperature+0xd0>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]

	//printf("RTD Resistance Registers = %X\r\n", MAX31865_receieve_data.RTD_Resistance_Registers);
	//printf("Hight Fault Treshold = %X\r\n", MAX31865_receieve_data.High_Fault_Threshold);
	//printf("Low Fault Treshold = %X\r\n", MAX31865_receieve_data.Low_Fault_Threshold);
	//printf("Fault status = %X\r\n", MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]);
	data = ((double) MAX31865_receieve_data.RTD_Resistance_Registers * MAX31865_Rref ) / (double) 32768.0; // Replace 4000 by 400 for PT100
 800162c:	893b      	ldrh	r3, [r7, #8]
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fffc 	bl	800062c <__aeabi_ui2d>
 8001634:	a30e      	add	r3, pc, #56	; (adr r3, 8001670 <MAX31865_Get_Temperature+0xc0>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7ff f871 	bl	8000720 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MAX31865_Get_Temperature+0xd4>)
 800164c:	f7ff f992 	bl	8000974 <__aeabi_ddiv>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//printf("Rrtd = %lf\n", data);
	return MAX31865_Get_Temperature_math(data);
 8001658:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800165c:	f000 f814 	bl	8001688 <MAX31865_Get_Temperature_math>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
}
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	00000000 	.word	0x00000000
 8001674:	407ac800 	.word	0x407ac800
 8001678:	40010800 	.word	0x40010800
 800167c:	200005e0 	.word	0x200005e0
 8001680:	20000210 	.word	0x20000210
 8001684:	40e00000 	.word	0x40e00000

08001688 <MAX31865_Get_Temperature_math>:
/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/

/*===============================================ПРЕОБРАЗОВАНИЕ СОПРОТИВЛЕНИЯ В ТЕМПЕРАТУРУ, СОГЛАСНО ГОСТ 6651-2009===============================================*/
double MAX31865_Get_Temperature_math(double PT100_Resistance) {
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	e9c7 0100 	strd	r0, r1, [r7]
	if (PT100_Resistance >= (double) 100.0) {
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b72      	ldr	r3, [pc, #456]	; (8001860 <MAX31865_Get_Temperature_math+0x1d8>)
 8001698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800169c:	f7ff fac6 	bl	8000c2c <__aeabi_dcmpge>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d03b      	beq.n	800171e <MAX31865_Get_Temperature_math+0x96>
		double MAX31865_math_Discriminant = (double) 0.00001527480889 - ((double) -0.00000231 * (1 - (PT100_Resistance / MAX31865_PT100_R0 )));
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b6d      	ldr	r3, [pc, #436]	; (8001860 <MAX31865_Get_Temperature_math+0x1d8>)
 80016ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016b0:	f7ff f960 	bl	8000974 <__aeabi_ddiv>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	f04f 0000 	mov.w	r0, #0
 80016bc:	4969      	ldr	r1, [pc, #420]	; (8001864 <MAX31865_Get_Temperature_math+0x1dc>)
 80016be:	f7fe fe77 	bl	80003b0 <__aeabi_dsub>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	a351      	add	r3, pc, #324	; (adr r3, 8001810 <MAX31865_Get_Temperature_math+0x188>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7ff f826 	bl	8000720 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	a34e      	add	r3, pc, #312	; (adr r3, 8001818 <MAX31865_Get_Temperature_math+0x190>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7fe fe67 	bl	80003b4 <__adddf3>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
		MAX31865_PT100_T = ((double) -0.0039083 + sqrt(MAX31865_math_Discriminant)) / (double) -0.000001155;
 80016ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016f2:	f00b f99d 	bl	800ca30 <sqrt>
 80016f6:	a34a      	add	r3, pc, #296	; (adr r3, 8001820 <MAX31865_Get_Temperature_math+0x198>)
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	f7fe fe58 	bl	80003b0 <__aeabi_dsub>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	a347      	add	r3, pc, #284	; (adr r3, 8001828 <MAX31865_Get_Temperature_math+0x1a0>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7ff f931 	bl	8000974 <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4954      	ldr	r1, [pc, #336]	; (8001868 <MAX31865_Get_Temperature_math+0x1e0>)
 8001718:	e9c1 2300 	strd	r2, r3, [r1]
 800171c:	e06d      	b.n	80017fa <MAX31865_Get_Temperature_math+0x172>
	} else {
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b52      	ldr	r3, [pc, #328]	; (800186c <MAX31865_Get_Temperature_math+0x1e4>)
 8001724:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001728:	f00b f91a 	bl	800c960 <pow>
 800172c:	a340      	add	r3, pc, #256	; (adr r3, 8001830 <MAX31865_Get_Temperature_math+0x1a8>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe fff5 	bl	8000720 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4614      	mov	r4, r2
 800173c:	461d      	mov	r5, r3
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <MAX31865_Get_Temperature_math+0x1e8>)
 8001744:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001748:	f00b f90a 	bl	800c960 <pow>
 800174c:	a33a      	add	r3, pc, #232	; (adr r3, 8001838 <MAX31865_Get_Temperature_math+0x1b0>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7fe ffe5 	bl	8000720 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7fe fe27 	bl	80003b0 <__aeabi_dsub>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4614      	mov	r4, r2
 8001768:	461d      	mov	r5, r3
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b41      	ldr	r3, [pc, #260]	; (8001874 <MAX31865_Get_Temperature_math+0x1ec>)
 8001770:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001774:	f00b f8f4 	bl	800c960 <pow>
 8001778:	a331      	add	r3, pc, #196	; (adr r3, 8001840 <MAX31865_Get_Temperature_math+0x1b8>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7fe ffcf 	bl	8000720 <__aeabi_dmul>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4620      	mov	r0, r4
 8001788:	4629      	mov	r1, r5
 800178a:	f7fe fe11 	bl	80003b0 <__aeabi_dsub>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4614      	mov	r4, r2
 8001794:	461d      	mov	r5, r3
				+ (double) 0.002320232987 * pow(PT100_Resistance, 2) + (double) 2.229927824035 * PT100_Resistance - (double) 242.090854986215;
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800179e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017a2:	f00b f8dd 	bl	800c960 <pow>
 80017a6:	a328      	add	r3, pc, #160	; (adr r3, 8001848 <MAX31865_Get_Temperature_math+0x1c0>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe ffb8 	bl	8000720 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4620      	mov	r0, r4
 80017b6:	4629      	mov	r1, r5
 80017b8:	f7fe fdfc 	bl	80003b4 <__adddf3>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4614      	mov	r4, r2
 80017c2:	461d      	mov	r5, r3
 80017c4:	a322      	add	r3, pc, #136	; (adr r3, 8001850 <MAX31865_Get_Temperature_math+0x1c8>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ce:	f7fe ffa7 	bl	8000720 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7fe fdeb 	bl	80003b4 <__adddf3>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	a31c      	add	r3, pc, #112	; (adr r3, 8001858 <MAX31865_Get_Temperature_math+0x1d0>)
 80017e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ec:	f7fe fde0 	bl	80003b0 <__aeabi_dsub>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
		MAX31865_PT100_T = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 80017f4:	491c      	ldr	r1, [pc, #112]	; (8001868 <MAX31865_Get_Temperature_math+0x1e0>)
 80017f6:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return MAX31865_PT100_T;
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <MAX31865_Get_Temperature_math+0x1e0>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bdb0      	pop	{r4, r5, r7, pc}
 800180a:	bf00      	nop
 800180c:	f3af 8000 	nop.w
 8001810:	ee19ce88 	.word	0xee19ce88
 8001814:	3ec360af 	.word	0x3ec360af
 8001818:	dfc928d8 	.word	0xdfc928d8
 800181c:	3ef0044c 	.word	0x3ef0044c
 8001820:	4aed641c 	.word	0x4aed641c
 8001824:	3f700226 	.word	0x3f700226
 8001828:	ee19ce88 	.word	0xee19ce88
 800182c:	beb360af 	.word	0xbeb360af
 8001830:	e63e6cde 	.word	0xe63e6cde
 8001834:	3df28de3 	.word	0x3df28de3
 8001838:	5d50ae3a 	.word	0x5d50ae3a
 800183c:	3e71c852 	.word	0x3e71c852
 8001840:	6e664b7f 	.word	0x6e664b7f
 8001844:	3e88c80b 	.word	0x3e88c80b
 8001848:	998b63de 	.word	0x998b63de
 800184c:	3f6301e1 	.word	0x3f6301e1
 8001850:	66255dbb 	.word	0x66255dbb
 8001854:	4001d6e4 	.word	0x4001d6e4
 8001858:	48b74f1a 	.word	0x48b74f1a
 800185c:	406e42e8 	.word	0x406e42e8
 8001860:	40590000 	.word	0x40590000
 8001864:	3ff00000 	.word	0x3ff00000
 8001868:	20000208 	.word	0x20000208
 800186c:	40140000 	.word	0x40140000
 8001870:	40100000 	.word	0x40100000
 8001874:	40080000 	.word	0x40080000

08001878 <MAX31865_2_Init>:
//Также обратите внимание, что Clock Polarity(CLPOL) = Low. Clock Phase(CPHA) = 2 Edge.
/*-------------------------------------------Для работы по spi-----------------------------------------------*/


/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/
void MAX31865_2_Init(uint8_t num_wires) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	///Не вижу особого смысла выводить полную настройку модуля, поэтому сделаем
	///небольшое упрощение для конечного пользователя
	///все, что может настроить пользователь - это выбрать тип подключения
	///2,3 или 4 проводное
	/// \param num_wires - тип подключения датчика 2,3 или 4 проводное
	uint8_t MAX31865_Reinitialization_cnt2 = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	73fb      	strb	r3, [r7, #15]
	MAX31865_Sensor_Error2 = 0;
 8001886:	4b24      	ldr	r3, [pc, #144]	; (8001918 <MAX31865_2_Init+0xa0>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
	uint8_t MAX31865_Configuration_register_write2[] = { 0x80, 0x00 };
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	81bb      	strh	r3, [r7, #12]
	if (num_wires == 2 || num_wires == 4) {
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d002      	beq.n	800189c <MAX31865_2_Init+0x24>
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2b04      	cmp	r3, #4
 800189a:	d102      	bne.n	80018a2 <MAX31865_2_Init+0x2a>
		MAX31865_Configuration_register_write2[1] = 0xC3; //0xC3
 800189c:	23c3      	movs	r3, #195	; 0xc3
 800189e:	737b      	strb	r3, [r7, #13]
 80018a0:	e004      	b.n	80018ac <MAX31865_2_Init+0x34>
	} else if (num_wires == 3) {
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d101      	bne.n	80018ac <MAX31865_2_Init+0x34>
		MAX31865_Configuration_register_write2[1] = 0xD3; //0xD3
 80018a8:	23d3      	movs	r3, #211	; 0xd3
 80018aa:	737b      	strb	r3, [r7, #13]
	}
	cs_set2();
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <MAX31865_2_Init+0xa4>)
 80018ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018b2:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi3, MAX31865_Configuration_register_write2, 2, 100);
 80018b4:	f107 010c 	add.w	r1, r7, #12
 80018b8:	2364      	movs	r3, #100	; 0x64
 80018ba:	2202      	movs	r2, #2
 80018bc:	4818      	ldr	r0, [pc, #96]	; (8001920 <MAX31865_2_Init+0xa8>)
 80018be:	f004 f839 	bl	8005934 <HAL_SPI_Transmit>
	cs_reset2();
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <MAX31865_2_Init+0xa4>)
 80018c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018c8:	611a      	str	r2, [r3, #16]
	//Дабы достучаться до датчика после подачи питания, т.к. с первого раза инициализация может и не пройти, заведем цикл.
	while (MAX31865_Configuration_info2() != 0xD1 && MAX31865_Configuration_info2() != 0xC1) {
 80018ca:	e014      	b.n	80018f6 <MAX31865_2_Init+0x7e>
		MAX31865_Reinitialization_cnt2++;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	3301      	adds	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]

		cs_set2();
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <MAX31865_2_Init+0xa4>)
 80018d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018d8:	611a      	str	r2, [r3, #16]
		HAL_SPI_Transmit(&hspi3, MAX31865_Configuration_register_write2, 2, 100);
 80018da:	f107 010c 	add.w	r1, r7, #12
 80018de:	2364      	movs	r3, #100	; 0x64
 80018e0:	2202      	movs	r2, #2
 80018e2:	480f      	ldr	r0, [pc, #60]	; (8001920 <MAX31865_2_Init+0xa8>)
 80018e4:	f004 f826 	bl	8005934 <HAL_SPI_Transmit>
		cs_reset2();
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MAX31865_2_Init+0xa4>)
 80018ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018ee:	611a      	str	r2, [r3, #16]

		if (MAX31865_Reinitialization_cnt2 == 100) {
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d00a      	beq.n	800190c <MAX31865_2_Init+0x94>
	while (MAX31865_Configuration_info2() != 0xD1 && MAX31865_Configuration_info2() != 0xC1) {
 80018f6:	f000 f815 	bl	8001924 <MAX31865_Configuration_info2>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2bd1      	cmp	r3, #209	; 0xd1
 80018fe:	d006      	beq.n	800190e <MAX31865_2_Init+0x96>
 8001900:	f000 f810 	bl	8001924 <MAX31865_Configuration_info2>
 8001904:	4603      	mov	r3, r0
 8001906:	2bc1      	cmp	r3, #193	; 0xc1
 8001908:	d1e0      	bne.n	80018cc <MAX31865_2_Init+0x54>
			break;
		}

	}

}
 800190a:	e000      	b.n	800190e <MAX31865_2_Init+0x96>
			break;
 800190c:	bf00      	nop
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000220 	.word	0x20000220
 800191c:	40010800 	.word	0x40010800
 8001920:	20000638 	.word	0x20000638

08001924 <MAX31865_Configuration_info2>:
/*=======================ИНИЦИАЛИЗАЦИЯ МОДУЛЯ MAX31865=========================*/

/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/
uint8_t MAX31865_Configuration_info2(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
	///Функция получения информации о конфигурации модуля MAX31865
	///Возвращает значение конфигурации.
	///Не удивляйтесь, если отправите при инициализации 0xC3, а получите 0xC1
	///(см. datasheet MAX31865 стр.14 "The fault status clear bit D1, self-clears to 0.")
	uint8_t read_data2 = 0x00;
 800192a:	2300      	movs	r3, #0
 800192c:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_Configuration2 = 0x00;
 800192e:	2300      	movs	r3, #0
 8001930:	71bb      	strb	r3, [r7, #6]
	cs_set2();
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MAX31865_Configuration_info2+0x40>)
 8001934:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001938:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi3, &read_data2, 1, 100);
 800193a:	1df9      	adds	r1, r7, #7
 800193c:	2364      	movs	r3, #100	; 0x64
 800193e:	2201      	movs	r2, #1
 8001940:	4809      	ldr	r0, [pc, #36]	; (8001968 <MAX31865_Configuration_info2+0x44>)
 8001942:	f003 fff7 	bl	8005934 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &MAX31865_Configuration2, 1, 100);
 8001946:	1db9      	adds	r1, r7, #6
 8001948:	2364      	movs	r3, #100	; 0x64
 800194a:	2201      	movs	r2, #1
 800194c:	4806      	ldr	r0, [pc, #24]	; (8001968 <MAX31865_Configuration_info2+0x44>)
 800194e:	f004 f92d 	bl	8005bac <HAL_SPI_Receive>
	cs_reset2();
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <MAX31865_Configuration_info2+0x40>)
 8001954:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001958:	611a      	str	r2, [r3, #16]
	return MAX31865_Configuration2;
 800195a:	79bb      	ldrb	r3, [r7, #6]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40010800 	.word	0x40010800
 8001968:	20000638 	.word	0x20000638
 800196c:	00000000 	.word	0x00000000

08001970 <MAX31865_Get_Temperature2>:
/*====================ИНФОРМАЦИЯ О НАСТРОЙКЕ МОДУЛЯ MAX31865===================*/

/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/
double MAX31865_Get_Temperature2(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
		uint8_t Fault_Status2; //Статус неисправности
	};

	struct rx_data_MAX31865_2 MAX31865_receieve_data2;

	uint8_t MAX31865_start_address_of_the_poll2 = 0x01; //Адрес регистра, с которого начнем чтение данных
 8001976:	2301      	movs	r3, #1
 8001978:	71fb      	strb	r3, [r7, #7]
	uint8_t MAX31865_rx_buffer2[7]; //буфер, куда будем складывать приходящие данные
	cs_set2();
 800197a:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <MAX31865_Get_Temperature2+0xc8>)
 800197c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001980:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi3, &MAX31865_start_address_of_the_poll2, 1, 100);
 8001982:	1df9      	adds	r1, r7, #7
 8001984:	2364      	movs	r3, #100	; 0x64
 8001986:	2201      	movs	r2, #1
 8001988:	482c      	ldr	r0, [pc, #176]	; (8001a3c <MAX31865_Get_Temperature2+0xcc>)
 800198a:	f003 ffd3 	bl	8005934 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, MAX31865_rx_buffer2, 7, 100);
 800198e:	4639      	mov	r1, r7
 8001990:	2364      	movs	r3, #100	; 0x64
 8001992:	2207      	movs	r2, #7
 8001994:	4829      	ldr	r0, [pc, #164]	; (8001a3c <MAX31865_Get_Temperature2+0xcc>)
 8001996:	f004 f909 	bl	8005bac <HAL_SPI_Receive>
	cs_reset2();
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <MAX31865_Get_Temperature2+0xc8>)
 800199c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019a0:	611a      	str	r2, [r3, #16]
	MAX31865_receieve_data2.RTD_Resistance_Registers2 = ((MAX31865_rx_buffer2[0] << 8) | MAX31865_rx_buffer2[1]) >> 1; //Данные регистров сопротивления
 80019a2:	783b      	ldrb	r3, [r7, #0]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	787a      	ldrb	r2, [r7, #1]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	105b      	asrs	r3, r3, #1
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	813b      	strh	r3, [r7, #8]
	MAX31865_receieve_data2.High_Fault_Threshold2 = ((MAX31865_rx_buffer2[2] << 8) | MAX31865_rx_buffer2[3]) >> 1; //Данные верхнего порого неисправности
 80019b0:	78bb      	ldrb	r3, [r7, #2]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	105b      	asrs	r3, r3, #1
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	817b      	strh	r3, [r7, #10]
	MAX31865_receieve_data2.Low_Fault_Threshold2 = (MAX31865_rx_buffer2[4] << 8) | MAX31865_rx_buffer2[5]; //Данные нижнего порога неисправности
 80019be:	793b      	ldrb	r3, [r7, #4]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	797b      	ldrb	r3, [r7, #5]
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	81bb      	strh	r3, [r7, #12]
	MAX31865_receieve_data2.Fault_Status2 = MAX31865_rx_buffer2[6]; //Статус неисправности
 80019d0:	79bb      	ldrb	r3, [r7, #6]
 80019d2:	73bb      	strb	r3, [r7, #14]
	if (MAX31865_receieve_data2.Fault_Status2 > 0x00) {
 80019d4:	7bbb      	ldrb	r3, [r7, #14]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d008      	beq.n	80019ec <MAX31865_Get_Temperature2+0x7c>

		/*--------------Здесь Ваши действия по реагированию на ошибку датчика---------------*/
		MAX31865_Sensor_Error2 = 1;
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <MAX31865_Get_Temperature2+0xd0>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
		//printf("Sensor Error!\r\n");

		/*----Автоматический сброс ошибки----*/
		MAX31865_2_Init(3);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f7ff ff49 	bl	8001878 <MAX31865_2_Init>
		MAX31865_Sensor_Error2 = 0;
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <MAX31865_Get_Temperature2+0xd0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]

	//printf("RTD Resistance Registers = %X\r\n", MAX31865_receieve_data.RTD_Resistance_Registers);
	//printf("Hight Fault Treshold = %X\r\n", MAX31865_receieve_data.High_Fault_Threshold);
	//printf("Low Fault Treshold = %X\r\n", MAX31865_receieve_data.Low_Fault_Threshold);
	//printf("Fault status = %X\r\n", MAX31865_receieve_data.Fault_Status = MAX31865_rx_buffer[6]);
	data2 = ((double) MAX31865_receieve_data2.RTD_Resistance_Registers2 * MAX31865_Rref ) / (double) 32768.0; // Replace 4000 by 400 for PT100
 80019ec:	893b      	ldrh	r3, [r7, #8]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fe1c 	bl	800062c <__aeabi_ui2d>
 80019f4:	a30e      	add	r3, pc, #56	; (adr r3, 8001a30 <MAX31865_Get_Temperature2+0xc0>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fe91 	bl	8000720 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MAX31865_Get_Temperature2+0xd4>)
 8001a0c:	f7fe ffb2 	bl	8000974 <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//printf("Rrtd = %lf\n", data);
	return MAX31865_Get_Temperature_math2(data2);
 8001a18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a1c:	f000 f814 	bl	8001a48 <MAX31865_Get_Temperature_math2>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
}
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	00000000 	.word	0x00000000
 8001a34:	407ac800 	.word	0x407ac800
 8001a38:	40010800 	.word	0x40010800
 8001a3c:	20000638 	.word	0x20000638
 8001a40:	20000220 	.word	0x20000220
 8001a44:	40e00000 	.word	0x40e00000

08001a48 <MAX31865_Get_Temperature_math2>:
/*===================ОСНОВНАЯ ФУНКЦИЯ РАБОТЫ С МОДУЛЕМ MAX31865==================*/

/*===============================================ПРЕОБРАЗОВАНИЕ СОПРОТИВЛЕНИЯ В ТЕМПЕРАТУРУ, СОГЛАСНО ГОСТ 6651-2009===============================================*/
double MAX31865_Get_Temperature_math2(double PT100_Resistance) {
 8001a48:	b5b0      	push	{r4, r5, r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	e9c7 0100 	strd	r0, r1, [r7]
	if (PT100_Resistance >= (double) 100.0) {
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	4b72      	ldr	r3, [pc, #456]	; (8001c20 <MAX31865_Get_Temperature_math2+0x1d8>)
 8001a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a5c:	f7ff f8e6 	bl	8000c2c <__aeabi_dcmpge>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d03b      	beq.n	8001ade <MAX31865_Get_Temperature_math2+0x96>
		double MAX31865_math_Discriminant = (double) 0.00001527480889 - ((double) -0.00000231 * (1 - (PT100_Resistance / MAX31865_PT100_R0 )));
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	4b6d      	ldr	r3, [pc, #436]	; (8001c20 <MAX31865_Get_Temperature_math2+0x1d8>)
 8001a6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a70:	f7fe ff80 	bl	8000974 <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	f04f 0000 	mov.w	r0, #0
 8001a7c:	4969      	ldr	r1, [pc, #420]	; (8001c24 <MAX31865_Get_Temperature_math2+0x1dc>)
 8001a7e:	f7fe fc97 	bl	80003b0 <__aeabi_dsub>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	a351      	add	r3, pc, #324	; (adr r3, 8001bd0 <MAX31865_Get_Temperature_math2+0x188>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7fe fe46 	bl	8000720 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	a34e      	add	r3, pc, #312	; (adr r3, 8001bd8 <MAX31865_Get_Temperature_math2+0x190>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fc87 	bl	80003b4 <__adddf3>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	e9c7 2302 	strd	r2, r3, [r7, #8]
		MAX31865_PT100_T2 = ((double) -0.0039083 + sqrt(MAX31865_math_Discriminant)) / (double) -0.000001155;
 8001aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ab2:	f00a ffbd 	bl	800ca30 <sqrt>
 8001ab6:	a34a      	add	r3, pc, #296	; (adr r3, 8001be0 <MAX31865_Get_Temperature_math2+0x198>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fc78 	bl	80003b0 <__aeabi_dsub>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	a347      	add	r3, pc, #284	; (adr r3, 8001be8 <MAX31865_Get_Temperature_math2+0x1a0>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	f7fe ff51 	bl	8000974 <__aeabi_ddiv>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4954      	ldr	r1, [pc, #336]	; (8001c28 <MAX31865_Get_Temperature_math2+0x1e0>)
 8001ad8:	e9c1 2300 	strd	r2, r3, [r1]
 8001adc:	e06d      	b.n	8001bba <MAX31865_Get_Temperature_math2+0x172>
	} else {
		MAX31865_PT100_T2 = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	4b52      	ldr	r3, [pc, #328]	; (8001c2c <MAX31865_Get_Temperature_math2+0x1e4>)
 8001ae4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ae8:	f00a ff3a 	bl	800c960 <pow>
 8001aec:	a340      	add	r3, pc, #256	; (adr r3, 8001bf0 <MAX31865_Get_Temperature_math2+0x1a8>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fe15 	bl	8000720 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4614      	mov	r4, r2
 8001afc:	461d      	mov	r5, r3
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <MAX31865_Get_Temperature_math2+0x1e8>)
 8001b04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b08:	f00a ff2a 	bl	800c960 <pow>
 8001b0c:	a33a      	add	r3, pc, #232	; (adr r3, 8001bf8 <MAX31865_Get_Temperature_math2+0x1b0>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fe05 	bl	8000720 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fc47 	bl	80003b0 <__aeabi_dsub>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4614      	mov	r4, r2
 8001b28:	461d      	mov	r5, r3
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <MAX31865_Get_Temperature_math2+0x1ec>)
 8001b30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b34:	f00a ff14 	bl	800c960 <pow>
 8001b38:	a331      	add	r3, pc, #196	; (adr r3, 8001c00 <MAX31865_Get_Temperature_math2+0x1b8>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fdef 	bl	8000720 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4620      	mov	r0, r4
 8001b48:	4629      	mov	r1, r5
 8001b4a:	f7fe fc31 	bl	80003b0 <__aeabi_dsub>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4614      	mov	r4, r2
 8001b54:	461d      	mov	r5, r3
		+ (double) 0.002320232987 * pow(PT100_Resistance, 2) + (double) 2.229927824035 * PT100_Resistance - (double) 242.090854986215;
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b62:	f00a fefd 	bl	800c960 <pow>
 8001b66:	a328      	add	r3, pc, #160	; (adr r3, 8001c08 <MAX31865_Get_Temperature_math2+0x1c0>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fdd8 	bl	8000720 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4620      	mov	r0, r4
 8001b76:	4629      	mov	r1, r5
 8001b78:	f7fe fc1c 	bl	80003b4 <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4614      	mov	r4, r2
 8001b82:	461d      	mov	r5, r3
 8001b84:	a322      	add	r3, pc, #136	; (adr r3, 8001c10 <MAX31865_Get_Temperature_math2+0x1c8>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b8e:	f7fe fdc7 	bl	8000720 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4620      	mov	r0, r4
 8001b98:	4629      	mov	r1, r5
 8001b9a:	f7fe fc0b 	bl	80003b4 <__adddf3>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	a31c      	add	r3, pc, #112	; (adr r3, 8001c18 <MAX31865_Get_Temperature_math2+0x1d0>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f7fe fc00 	bl	80003b0 <__aeabi_dsub>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
		MAX31865_PT100_T2 = (double) 0.000000000270 * pow(PT100_Resistance, 5) - (double) 0.000000066245 * pow(PT100_Resistance, 4) - (double) 0.000000184636 * pow(PT100_Resistance, 3)
 8001bb4:	491c      	ldr	r1, [pc, #112]	; (8001c28 <MAX31865_Get_Temperature_math2+0x1e0>)
 8001bb6:	e9c1 2300 	strd	r2, r3, [r1]
	}
	return MAX31865_PT100_T2;
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <MAX31865_Get_Temperature_math2+0x1e0>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	f3af 8000 	nop.w
 8001bd0:	ee19ce88 	.word	0xee19ce88
 8001bd4:	3ec360af 	.word	0x3ec360af
 8001bd8:	dfc928d8 	.word	0xdfc928d8
 8001bdc:	3ef0044c 	.word	0x3ef0044c
 8001be0:	4aed641c 	.word	0x4aed641c
 8001be4:	3f700226 	.word	0x3f700226
 8001be8:	ee19ce88 	.word	0xee19ce88
 8001bec:	beb360af 	.word	0xbeb360af
 8001bf0:	e63e6cde 	.word	0xe63e6cde
 8001bf4:	3df28de3 	.word	0x3df28de3
 8001bf8:	5d50ae3a 	.word	0x5d50ae3a
 8001bfc:	3e71c852 	.word	0x3e71c852
 8001c00:	6e664b7f 	.word	0x6e664b7f
 8001c04:	3e88c80b 	.word	0x3e88c80b
 8001c08:	998b63de 	.word	0x998b63de
 8001c0c:	3f6301e1 	.word	0x3f6301e1
 8001c10:	66255dbb 	.word	0x66255dbb
 8001c14:	4001d6e4 	.word	0x4001d6e4
 8001c18:	48b74f1a 	.word	0x48b74f1a
 8001c1c:	406e42e8 	.word	0x406e42e8
 8001c20:	40590000 	.word	0x40590000
 8001c24:	3ff00000 	.word	0x3ff00000
 8001c28:	20000218 	.word	0x20000218
 8001c2c:	40140000 	.word	0x40140000
 8001c30:	40100000 	.word	0x40100000
 8001c34:	40080000 	.word	0x40080000

08001c38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <vApplicationGetIdleTaskMemory+0x28>)
 8001c48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <vApplicationGetIdleTaskMemory+0x2c>)
 8001c4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2280      	movs	r2, #128	; 0x80
 8001c54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	20000224 	.word	0x20000224
 8001c64:	200002d8 	.word	0x200002d8

08001c68 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	0000      	movs	r0, r0
 8001c7c:	0000      	movs	r0, r0
	...

08001c80 <Get_Temperature_Cylinder>:
float Get_Temperature_Cylinder(){
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	PT100_Temperature = MAX31865_Get_Temperature();
 8001c84:	f7ff fc94 	bl	80015b0 <MAX31865_Get_Temperature>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7ff f83e 	bl	8000d10 <__aeabi_d2f>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4a58      	ldr	r2, [pc, #352]	; (8001df8 <Get_Temperature_Cylinder+0x178>)
 8001c98:	6013      	str	r3, [r2, #0]
	if (PT100_Temperature >= 0) {
 8001c9a:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <Get_Temperature_Cylinder+0x178>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f04f 0100 	mov.w	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f9f4 	bl	8001090 <__aeabi_fcmpge>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d04c      	beq.n	8001d48 <Get_Temperature_Cylinder+0xc8>
		PT100_Temperature = PT100_Temperature + 0.05;
 8001cae:	4b52      	ldr	r3, [pc, #328]	; (8001df8 <Get_Temperature_Cylinder+0x178>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fcdc 	bl	8000670 <__aeabi_f2d>
 8001cb8:	a34d      	add	r3, pc, #308	; (adr r3, 8001df0 <Get_Temperature_Cylinder+0x170>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	f7fe fb79 	bl	80003b4 <__adddf3>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7ff f821 	bl	8000d10 <__aeabi_d2f>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a49      	ldr	r2, [pc, #292]	; (8001df8 <Get_Temperature_Cylinder+0x178>)
 8001cd2:	6013      	str	r3, [r2, #0]
		sprintf(temperature, "+%d.%d", (uint16_t) (PT100_Temperature),((uint16_t) (PT100_Temperature * 100)- ((uint16_t) PT100_Temperature) * 100) / 10);
 8001cd4:	4b48      	ldr	r3, [pc, #288]	; (8001df8 <Get_Temperature_Cylinder+0x178>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fa13 	bl	8001104 <__aeabi_f2uiz>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	461d      	mov	r5, r3
 8001ce4:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <Get_Temperature_Cylinder+0x178>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4944      	ldr	r1, [pc, #272]	; (8001dfc <Get_Temperature_Cylinder+0x17c>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe faa8 	bl	8000240 <__aeabi_fmul>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fa06 	bl	8001104 <__aeabi_f2uiz>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461c      	mov	r4, r3
 8001cfe:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <Get_Temperature_Cylinder+0x178>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f9fe 	bl	8001104 <__aeabi_f2uiz>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	4423      	add	r3, r4
 8001d18:	4a39      	ldr	r2, [pc, #228]	; (8001e00 <Get_Temperature_Cylinder+0x180>)
 8001d1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d1e:	1092      	asrs	r2, r2, #2
 8001d20:	17db      	asrs	r3, r3, #31
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	462a      	mov	r2, r5
 8001d26:	4937      	ldr	r1, [pc, #220]	; (8001e04 <Get_Temperature_Cylinder+0x184>)
 8001d28:	4837      	ldr	r0, [pc, #220]	; (8001e08 <Get_Temperature_Cylinder+0x188>)
 8001d2a:	f007 fad1 	bl	80092d0 <siprintf>
		temp = (float)atof(temperature);
 8001d2e:	4836      	ldr	r0, [pc, #216]	; (8001e08 <Get_Temperature_Cylinder+0x188>)
 8001d30:	f006 fbca 	bl	80084c8 <atof>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f7fe ffe8 	bl	8000d10 <__aeabi_d2f>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4a32      	ldr	r2, [pc, #200]	; (8001e0c <Get_Temperature_Cylinder+0x18c>)
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e04d      	b.n	8001de4 <Get_Temperature_Cylinder+0x164>
	}
	else {
		PT100_Temperature = -PT100_Temperature + 0.05;
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <Get_Temperature_Cylinder+0x178>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fc8d 	bl	8000670 <__aeabi_f2d>
 8001d56:	a326      	add	r3, pc, #152	; (adr r3, 8001df0 <Get_Temperature_Cylinder+0x170>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fb2a 	bl	80003b4 <__adddf3>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe ffd2 	bl	8000d10 <__aeabi_d2f>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <Get_Temperature_Cylinder+0x178>)
 8001d70:	6013      	str	r3, [r2, #0]
		sprintf(temperature, "-%d.%d", (uint16_t) (PT100_Temperature),((uint16_t) (PT100_Temperature * 100)- ((uint16_t) PT100_Temperature) * 100) / 10);
 8001d72:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <Get_Temperature_Cylinder+0x178>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f9c4 	bl	8001104 <__aeabi_f2uiz>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461d      	mov	r5, r3
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <Get_Temperature_Cylinder+0x178>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	491d      	ldr	r1, [pc, #116]	; (8001dfc <Get_Temperature_Cylinder+0x17c>)
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fa59 	bl	8000240 <__aeabi_fmul>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f9b7 	bl	8001104 <__aeabi_f2uiz>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461c      	mov	r4, r3
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <Get_Temperature_Cylinder+0x178>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff f9af 	bl	8001104 <__aeabi_f2uiz>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001db0:	fb02 f303 	mul.w	r3, r2, r3
 8001db4:	4423      	add	r3, r4
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <Get_Temperature_Cylinder+0x180>)
 8001db8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dbc:	1092      	asrs	r2, r2, #2
 8001dbe:	17db      	asrs	r3, r3, #31
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	462a      	mov	r2, r5
 8001dc4:	4912      	ldr	r1, [pc, #72]	; (8001e10 <Get_Temperature_Cylinder+0x190>)
 8001dc6:	4810      	ldr	r0, [pc, #64]	; (8001e08 <Get_Temperature_Cylinder+0x188>)
 8001dc8:	f007 fa82 	bl	80092d0 <siprintf>
		temp = (float)atof(temperature);
 8001dcc:	480e      	ldr	r0, [pc, #56]	; (8001e08 <Get_Temperature_Cylinder+0x188>)
 8001dce:	f006 fb7b 	bl	80084c8 <atof>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7fe ff99 	bl	8000d10 <__aeabi_d2f>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <Get_Temperature_Cylinder+0x18c>)
 8001de2:	6013      	str	r3, [r2, #0]
	}
	return temp;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <Get_Temperature_Cylinder+0x18c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bdb0      	pop	{r4, r5, r7, pc}
 8001dec:	f3af 8000 	nop.w
 8001df0:	9999999a 	.word	0x9999999a
 8001df4:	3fa99999 	.word	0x3fa99999
 8001df8:	2000055c 	.word	0x2000055c
 8001dfc:	42c80000 	.word	0x42c80000
 8001e00:	66666667 	.word	0x66666667
 8001e04:	0800d7d4 	.word	0x0800d7d4
 8001e08:	20000544 	.word	0x20000544
 8001e0c:	20000564 	.word	0x20000564
 8001e10:	0800d7dc 	.word	0x0800d7dc
 8001e14:	00000000 	.word	0x00000000

08001e18 <Get_Temperature_Hopper>:

float Get_Temperature_Hopper(){
 8001e18:	b5b0      	push	{r4, r5, r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	PT100_TemperatureHopper = MAX31865_Get_Temperature2();
 8001e1c:	f7ff fda8 	bl	8001970 <MAX31865_Get_Temperature2>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7fe ff72 	bl	8000d10 <__aeabi_d2f>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a58      	ldr	r2, [pc, #352]	; (8001f90 <Get_Temperature_Hopper+0x178>)
 8001e30:	6013      	str	r3, [r2, #0]
	if (PT100_TemperatureHopper >= 0) {
 8001e32:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <Get_Temperature_Hopper+0x178>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f04f 0100 	mov.w	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff f928 	bl	8001090 <__aeabi_fcmpge>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d04c      	beq.n	8001ee0 <Get_Temperature_Hopper+0xc8>
		PT100_TemperatureHopper = PT100_TemperatureHopper + 0.05;
 8001e46:	4b52      	ldr	r3, [pc, #328]	; (8001f90 <Get_Temperature_Hopper+0x178>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fc10 	bl	8000670 <__aeabi_f2d>
 8001e50:	a34d      	add	r3, pc, #308	; (adr r3, 8001f88 <Get_Temperature_Hopper+0x170>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe faad 	bl	80003b4 <__adddf3>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe ff55 	bl	8000d10 <__aeabi_d2f>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a49      	ldr	r2, [pc, #292]	; (8001f90 <Get_Temperature_Hopper+0x178>)
 8001e6a:	6013      	str	r3, [r2, #0]
		sprintf(temperatureHopper, "+%d.%d", (uint16_t) (PT100_TemperatureHopper),((uint16_t) (PT100_TemperatureHopper * 100)- ((uint16_t) PT100_TemperatureHopper) * 100) / 10);
 8001e6c:	4b48      	ldr	r3, [pc, #288]	; (8001f90 <Get_Temperature_Hopper+0x178>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f947 	bl	8001104 <__aeabi_f2uiz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	461d      	mov	r5, r3
 8001e7c:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <Get_Temperature_Hopper+0x178>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4944      	ldr	r1, [pc, #272]	; (8001f94 <Get_Temperature_Hopper+0x17c>)
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe f9dc 	bl	8000240 <__aeabi_fmul>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff f93a 	bl	8001104 <__aeabi_f2uiz>
 8001e90:	4603      	mov	r3, r0
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461c      	mov	r4, r3
 8001e96:	4b3e      	ldr	r3, [pc, #248]	; (8001f90 <Get_Temperature_Hopper+0x178>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff f932 	bl	8001104 <__aeabi_f2uiz>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001eaa:	fb02 f303 	mul.w	r3, r2, r3
 8001eae:	4423      	add	r3, r4
 8001eb0:	4a39      	ldr	r2, [pc, #228]	; (8001f98 <Get_Temperature_Hopper+0x180>)
 8001eb2:	fb82 1203 	smull	r1, r2, r2, r3
 8001eb6:	1092      	asrs	r2, r2, #2
 8001eb8:	17db      	asrs	r3, r3, #31
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	462a      	mov	r2, r5
 8001ebe:	4937      	ldr	r1, [pc, #220]	; (8001f9c <Get_Temperature_Hopper+0x184>)
 8001ec0:	4837      	ldr	r0, [pc, #220]	; (8001fa0 <Get_Temperature_Hopper+0x188>)
 8001ec2:	f007 fa05 	bl	80092d0 <siprintf>
		temp1 = (float)atof(temperatureHopper);
 8001ec6:	4836      	ldr	r0, [pc, #216]	; (8001fa0 <Get_Temperature_Hopper+0x188>)
 8001ec8:	f006 fafe 	bl	80084c8 <atof>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7fe ff1c 	bl	8000d10 <__aeabi_d2f>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4a32      	ldr	r2, [pc, #200]	; (8001fa4 <Get_Temperature_Hopper+0x18c>)
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e04d      	b.n	8001f7c <Get_Temperature_Hopper+0x164>
	}
	else {
		PT100_TemperatureHopper = -PT100_TemperatureHopper + 0.05;
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <Get_Temperature_Hopper+0x178>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fbc1 	bl	8000670 <__aeabi_f2d>
 8001eee:	a326      	add	r3, pc, #152	; (adr r3, 8001f88 <Get_Temperature_Hopper+0x170>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	f7fe fa5e 	bl	80003b4 <__adddf3>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f7fe ff06 	bl	8000d10 <__aeabi_d2f>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <Get_Temperature_Hopper+0x178>)
 8001f08:	6013      	str	r3, [r2, #0]
		sprintf(temperatureHopper, "-%d.%d", (uint16_t) (PT100_TemperatureHopper),((uint16_t) (PT100_TemperatureHopper * 100)- ((uint16_t) PT100_TemperatureHopper) * 100) / 10);
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <Get_Temperature_Hopper+0x178>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f8f8 	bl	8001104 <__aeabi_f2uiz>
 8001f14:	4603      	mov	r3, r0
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461d      	mov	r5, r3
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <Get_Temperature_Hopper+0x178>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	491d      	ldr	r1, [pc, #116]	; (8001f94 <Get_Temperature_Hopper+0x17c>)
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe f98d 	bl	8000240 <__aeabi_fmul>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff f8eb 	bl	8001104 <__aeabi_f2uiz>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461c      	mov	r4, r3
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <Get_Temperature_Hopper+0x178>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff f8e3 	bl	8001104 <__aeabi_f2uiz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	4423      	add	r3, r4
 8001f4e:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <Get_Temperature_Hopper+0x180>)
 8001f50:	fb82 1203 	smull	r1, r2, r2, r3
 8001f54:	1092      	asrs	r2, r2, #2
 8001f56:	17db      	asrs	r3, r3, #31
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	462a      	mov	r2, r5
 8001f5c:	4912      	ldr	r1, [pc, #72]	; (8001fa8 <Get_Temperature_Hopper+0x190>)
 8001f5e:	4810      	ldr	r0, [pc, #64]	; (8001fa0 <Get_Temperature_Hopper+0x188>)
 8001f60:	f007 f9b6 	bl	80092d0 <siprintf>
		temp1 = (float)atof(temperatureHopper);
 8001f64:	480e      	ldr	r0, [pc, #56]	; (8001fa0 <Get_Temperature_Hopper+0x188>)
 8001f66:	f006 faaf 	bl	80084c8 <atof>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f7fe fecd 	bl	8000d10 <__aeabi_d2f>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <Get_Temperature_Hopper+0x18c>)
 8001f7a:	6013      	str	r3, [r2, #0]
	}
	return temp1;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <Get_Temperature_Hopper+0x18c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bdb0      	pop	{r4, r5, r7, pc}
 8001f84:	f3af 8000 	nop.w
 8001f88:	9999999a 	.word	0x9999999a
 8001f8c:	3fa99999 	.word	0x3fa99999
 8001f90:	20000560 	.word	0x20000560
 8001f94:	42c80000 	.word	0x42c80000
 8001f98:	66666667 	.word	0x66666667
 8001f9c:	0800d7d4 	.word	0x0800d7d4
 8001fa0:	20000550 	.word	0x20000550
 8001fa4:	20000568 	.word	0x20000568
 8001fa8:	0800d7dc 	.word	0x0800d7dc

08001fac <sendData>:
void sendData(char *data) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	len = sizeof(txdata) / sizeof(txdata[0]);
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <sendData+0x58>)
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e00b      	b.n	8001fd8 <sendData+0x2c>
		txdata[i] = data[i];
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	7819      	ldrb	r1, [r3, #0]
 8001fc8:	4a0f      	ldr	r2, [pc, #60]	; (8002008 <sendData+0x5c>)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4413      	add	r3, r2
 8001fce:	460a      	mov	r2, r1
 8001fd0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <sendData+0x58>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	dbed      	blt.n	8001fc0 <sendData+0x14>
	}
	sprintf(txdatanew, "%s",txdata);
 8001fe4:	4a08      	ldr	r2, [pc, #32]	; (8002008 <sendData+0x5c>)
 8001fe6:	4909      	ldr	r1, [pc, #36]	; (800200c <sendData+0x60>)
 8001fe8:	4809      	ldr	r0, [pc, #36]	; (8002010 <sendData+0x64>)
 8001fea:	f007 f971 	bl	80092d0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)&txdatanew, 8, 500);
 8001fee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	4906      	ldr	r1, [pc, #24]	; (8002010 <sendData+0x64>)
 8001ff6:	4807      	ldr	r0, [pc, #28]	; (8002014 <sendData+0x68>)
 8001ff8:	f004 fc2d 	bl	8006856 <HAL_UART_Transmit>
}
 8001ffc:	bf00      	nop
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000541 	.word	0x20000541
 8002008:	20000528 	.word	0x20000528
 800200c:	0800d7e4 	.word	0x0800d7e4
 8002010:	20000530 	.word	0x20000530
 8002014:	20000690 	.word	0x20000690

08002018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	b0c0      	sub	sp, #256	; 0x100
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800201e:	f001 f81b 	bl	8003058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002022:	f000 f8f5 	bl	8002210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002026:	f000 fa51 	bl	80024cc <MX_GPIO_Init>
  MX_DMA_Init();
 800202a:	f000 fa29 	bl	8002480 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800202e:	f000 f9fd 	bl	800242c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002032:	f000 f98f 	bl	8002354 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002036:	f000 f9c3 	bl	80023c0 <MX_SPI3_Init>
  MX_ADC1_Init();
 800203a:	f000 f94d 	bl	80022d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	MAX31865_Init(3); // num of wires
 800203e:	2003      	movs	r0, #3
 8002040:	f7ff fa3c 	bl	80014bc <MAX31865_Init>
	MAX31865_2_Init(3); // num of wires
 8002044:	2003      	movs	r0, #3
 8002046:	f7ff fc17 	bl	8001878 <MAX31865_2_Init>

	HAL_UART_Receive_DMA(&huart2, Buf_1ch, 8); // dmayı tekrar kurduk yine alabilsin diye
 800204a:	2208      	movs	r2, #8
 800204c:	495b      	ldr	r1, [pc, #364]	; (80021bc <main+0x1a4>)
 800204e:	485c      	ldr	r0, [pc, #368]	; (80021c0 <main+0x1a8>)
 8002050:	f004 fc93 	bl	800697a <HAL_UART_Receive_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002054:	4b5b      	ldr	r3, [pc, #364]	; (80021c4 <main+0x1ac>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <main+0x1ac>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0204 	bic.w	r2, r2, #4
 8002062:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002064:	4b58      	ldr	r3, [pc, #352]	; (80021c8 <main+0x1b0>)
 8002066:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 800206a:	461d      	mov	r5, r3
 800206c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800206e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002070:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002074:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002078:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f005 f9ec 	bl	800745c <osThreadCreate>
 8002084:	4603      	mov	r3, r0
 8002086:	4a51      	ldr	r2, [pc, #324]	; (80021cc <main+0x1b4>)
 8002088:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_Init, osPriorityNormal, 0, 128);
 800208a:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <main+0x1b8>)
 800208c:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8002090:	461d      	mov	r5, r3
 8002092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002096:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800209a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 800209e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f005 f9d9 	bl	800745c <osThreadCreate>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a49      	ldr	r2, [pc, #292]	; (80021d4 <main+0x1bc>)
 80020ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, Task3_Init, osPriorityNormal, 0, 128);
 80020b0:	4b49      	ldr	r3, [pc, #292]	; (80021d8 <main+0x1c0>)
 80020b2:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80020b6:	461d      	mov	r5, r3
 80020b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 80020c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f005 f9c6 	bl	800745c <osThreadCreate>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4a42      	ldr	r2, [pc, #264]	; (80021dc <main+0x1c4>)
 80020d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task4 */
  osThreadDef(Task4, Task4_Init, osPriorityNormal, 0, 128);
 80020d6:	4b42      	ldr	r3, [pc, #264]	; (80021e0 <main+0x1c8>)
 80020d8:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80020dc:	461d      	mov	r5, r3
 80020de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task4Handle = osThreadCreate(osThread(Task4), NULL);
 80020ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f005 f9b3 	bl	800745c <osThreadCreate>
 80020f6:	4603      	mov	r3, r0
 80020f8:	4a3a      	ldr	r2, [pc, #232]	; (80021e4 <main+0x1cc>)
 80020fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task5 */
  osThreadDef(Task5, Task5_Init, osPriorityNormal, 0, 128);
 80020fc:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <main+0x1d0>)
 80020fe:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002102:	461d      	mov	r5, r3
 8002104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002108:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800210c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task5Handle = osThreadCreate(osThread(Task5), NULL);
 8002110:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f005 f9a0 	bl	800745c <osThreadCreate>
 800211c:	4603      	mov	r3, r0
 800211e:	4a33      	ldr	r2, [pc, #204]	; (80021ec <main+0x1d4>)
 8002120:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task6 */
  osThreadDef(Task6, Task6_Init, osPriorityNormal, 0, 128);
 8002122:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <main+0x1d8>)
 8002124:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002128:	461d      	mov	r5, r3
 800212a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800212c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800212e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002132:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task6Handle = osThreadCreate(osThread(Task6), NULL);
 8002136:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f005 f98d 	bl	800745c <osThreadCreate>
 8002142:	4603      	mov	r3, r0
 8002144:	4a2b      	ldr	r2, [pc, #172]	; (80021f4 <main+0x1dc>)
 8002146:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task7 */
  osThreadDef(Task7, Task7_Init, osPriorityNormal, 0, 128);
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <main+0x1e0>)
 800214a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800214e:	461d      	mov	r5, r3
 8002150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002154:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002158:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task7Handle = osThreadCreate(osThread(Task7), NULL);
 800215c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002160:	2100      	movs	r1, #0
 8002162:	4618      	mov	r0, r3
 8002164:	f005 f97a 	bl	800745c <osThreadCreate>
 8002168:	4603      	mov	r3, r0
 800216a:	4a24      	ldr	r2, [pc, #144]	; (80021fc <main+0x1e4>)
 800216c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task8 */
  osThreadDef(Task8, Task8_Init, osPriorityNormal, 0, 128);
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <main+0x1e8>)
 8002170:	f107 0420 	add.w	r4, r7, #32
 8002174:	461d      	mov	r5, r3
 8002176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800217a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800217e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task8Handle = osThreadCreate(osThread(Task8), NULL);
 8002182:	f107 0320 	add.w	r3, r7, #32
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f005 f967 	bl	800745c <osThreadCreate>
 800218e:	4603      	mov	r3, r0
 8002190:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <main+0x1ec>)
 8002192:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task9 */
  osThreadDef(Task9, Task9_Init, osPriorityIdle, 0, 128);
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <main+0x1f0>)
 8002196:	1d3c      	adds	r4, r7, #4
 8002198:	461d      	mov	r5, r3
 800219a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800219c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800219e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task9Handle = osThreadCreate(osThread(Task9), NULL);
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f005 f956 	bl	800745c <osThreadCreate>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4a16      	ldr	r2, [pc, #88]	; (800220c <main+0x1f4>)
 80021b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80021b6:	f005 f94a 	bl	800744e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80021ba:	e7fe      	b.n	80021ba <main+0x1a2>
 80021bc:	20000540 	.word	0x20000540
 80021c0:	20000690 	.word	0x20000690
 80021c4:	200006d4 	.word	0x200006d4
 80021c8:	0800d7e8 	.word	0x0800d7e8
 80021cc:	20000718 	.word	0x20000718
 80021d0:	0800d804 	.word	0x0800d804
 80021d4:	2000071c 	.word	0x2000071c
 80021d8:	0800d820 	.word	0x0800d820
 80021dc:	20000720 	.word	0x20000720
 80021e0:	0800d83c 	.word	0x0800d83c
 80021e4:	20000724 	.word	0x20000724
 80021e8:	0800d858 	.word	0x0800d858
 80021ec:	20000728 	.word	0x20000728
 80021f0:	0800d874 	.word	0x0800d874
 80021f4:	2000072c 	.word	0x2000072c
 80021f8:	0800d890 	.word	0x0800d890
 80021fc:	20000730 	.word	0x20000730
 8002200:	0800d8ac 	.word	0x0800d8ac
 8002204:	20000734 	.word	0x20000734
 8002208:	0800d8c8 	.word	0x0800d8c8
 800220c:	20000738 	.word	0x20000738

08002210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b09c      	sub	sp, #112	; 0x70
 8002214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002216:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800221a:	2238      	movs	r2, #56	; 0x38
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f006 fa98 	bl	8008754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	2220      	movs	r2, #32
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f006 fa8a 	bl	8008754 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002240:	2301      	movs	r3, #1
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002248:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800224e:	2301      	movs	r3, #1
 8002250:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8002252:	2300      	movs	r3, #0
 8002254:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002256:	2302      	movs	r3, #2
 8002258:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800225a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800225e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002260:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002264:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8002266:	2300      	movs	r3, #0
 8002268:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800226a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800226e:	4618      	mov	r0, r3
 8002270:	f002 fab6 	bl	80047e0 <HAL_RCC_OscConfig>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800227a:	f000 fba9 	bl	80029d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800227e:	230f      	movs	r3, #15
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002282:	2302      	movs	r3, #2
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002286:	2300      	movs	r3, #0
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800228a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800228e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002290:	2300      	movs	r3, #0
 8002292:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002298:	2102      	movs	r1, #2
 800229a:	4618      	mov	r0, r3
 800229c:	f002 fdb6 	bl	8004e0c <HAL_RCC_ClockConfig>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80022a6:	f000 fb93 	bl	80029d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022aa:	2302      	movs	r3, #2
 80022ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80022ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 f824 	bl	8005304 <HAL_RCCEx_PeriphCLKConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80022c2:	f000 fb85 	bl	80029d0 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80022c6:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <SystemClock_Config+0xc4>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
}
 80022cc:	bf00      	nop
 80022ce:	3770      	adds	r7, #112	; 0x70
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	42420070 	.word	0x42420070

080022d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <MX_ADC1_Init+0x74>)
 80022ea:	4a19      	ldr	r2, [pc, #100]	; (8002350 <MX_ADC1_Init+0x78>)
 80022ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <MX_ADC1_Init+0x74>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <MX_ADC1_Init+0x74>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <MX_ADC1_Init+0x74>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <MX_ADC1_Init+0x74>)
 8002302:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002306:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <MX_ADC1_Init+0x74>)
 800230a:	2200      	movs	r2, #0
 800230c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800230e:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_ADC1_Init+0x74>)
 8002310:	2201      	movs	r2, #1
 8002312:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002314:	480d      	ldr	r0, [pc, #52]	; (800234c <MX_ADC1_Init+0x74>)
 8002316:	f000 fef5 	bl	8003104 <HAL_ADC_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002320:	f000 fb56 	bl	80029d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002324:	230a      	movs	r3, #10
 8002326:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002328:	2301      	movs	r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800232c:	2305      	movs	r3, #5
 800232e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	4619      	mov	r1, r3
 8002334:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_ADC1_Init+0x74>)
 8002336:	f001 f9a9 	bl	800368c <HAL_ADC_ConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002340:	f000 fb46 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	2000056c 	.word	0x2000056c
 8002350:	40012400 	.word	0x40012400

08002354 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <MX_SPI1_Init+0x64>)
 800235a:	4a18      	ldr	r2, [pc, #96]	; (80023bc <MX_SPI1_Init+0x68>)
 800235c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800235e:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <MX_SPI1_Init+0x64>)
 8002360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002364:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002366:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <MX_SPI1_Init+0x64>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <MX_SPI1_Init+0x64>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_SPI1_Init+0x64>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <MX_SPI1_Init+0x64>)
 800237a:	2201      	movs	r2, #1
 800237c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_SPI1_Init+0x64>)
 8002380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002384:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_SPI1_Init+0x64>)
 8002388:	2218      	movs	r2, #24
 800238a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <MX_SPI1_Init+0x64>)
 800238e:	2200      	movs	r2, #0
 8002390:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_SPI1_Init+0x64>)
 8002394:	2200      	movs	r2, #0
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <MX_SPI1_Init+0x64>)
 800239a:	2200      	movs	r2, #0
 800239c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_SPI1_Init+0x64>)
 80023a0:	220a      	movs	r2, #10
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <MX_SPI1_Init+0x64>)
 80023a6:	f003 fa41 	bl	800582c <HAL_SPI_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023b0:	f000 fb0e 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200005e0 	.word	0x200005e0
 80023bc:	40013000 	.word	0x40013000

080023c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80023c4:	4b17      	ldr	r3, [pc, #92]	; (8002424 <MX_SPI3_Init+0x64>)
 80023c6:	4a18      	ldr	r2, [pc, #96]	; (8002428 <MX_SPI3_Init+0x68>)
 80023c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <MX_SPI3_Init+0x64>)
 80023cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023d2:	4b14      	ldr	r3, [pc, #80]	; (8002424 <MX_SPI3_Init+0x64>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <MX_SPI3_Init+0x64>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <MX_SPI3_Init+0x64>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <MX_SPI3_Init+0x64>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MX_SPI3_Init+0x64>)
 80023ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <MX_SPI3_Init+0x64>)
 80023f4:	2218      	movs	r2, #24
 80023f6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <MX_SPI3_Init+0x64>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <MX_SPI3_Init+0x64>)
 8002400:	2200      	movs	r2, #0
 8002402:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002404:	4b07      	ldr	r3, [pc, #28]	; (8002424 <MX_SPI3_Init+0x64>)
 8002406:	2200      	movs	r2, #0
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <MX_SPI3_Init+0x64>)
 800240c:	220a      	movs	r2, #10
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002410:	4804      	ldr	r0, [pc, #16]	; (8002424 <MX_SPI3_Init+0x64>)
 8002412:	f003 fa0b 	bl	800582c <HAL_SPI_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800241c:	f000 fad8 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000638 	.word	0x20000638
 8002428:	40003c00 	.word	0x40003c00

0800242c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002432:	4a12      	ldr	r2, [pc, #72]	; (800247c <MX_USART2_UART_Init+0x50>)
 8002434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800243c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002452:	220c      	movs	r2, #12
 8002454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002462:	4805      	ldr	r0, [pc, #20]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002464:	f004 f9aa 	bl	80067bc <HAL_UART_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800246e:	f000 faaf 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000690 	.word	0x20000690
 800247c:	40004400 	.word	0x40004400

08002480 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <MX_DMA_Init+0x48>)
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <MX_DMA_Init+0x48>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6153      	str	r3, [r2, #20]
 8002492:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <MX_DMA_Init+0x48>)
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2105      	movs	r1, #5
 80024a2:	200b      	movs	r0, #11
 80024a4:	f001 fb3b 	bl	8003b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024a8:	200b      	movs	r0, #11
 80024aa:	f001 fb54 	bl	8003b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2105      	movs	r1, #5
 80024b2:	2010      	movs	r0, #16
 80024b4:	f001 fb33 	bl	8003b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80024b8:	2010      	movs	r0, #16
 80024ba:	f001 fb4c 	bl	8003b56 <HAL_NVIC_EnableIRQ>

}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000

080024cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024e0:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <MX_GPIO_Init+0xf4>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	4a36      	ldr	r2, [pc, #216]	; (80025c0 <MX_GPIO_Init+0xf4>)
 80024e6:	f043 0320 	orr.w	r3, r3, #32
 80024ea:	6193      	str	r3, [r2, #24]
 80024ec:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <MX_GPIO_Init+0xf4>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f8:	4b31      	ldr	r3, [pc, #196]	; (80025c0 <MX_GPIO_Init+0xf4>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4a30      	ldr	r2, [pc, #192]	; (80025c0 <MX_GPIO_Init+0xf4>)
 80024fe:	f043 0310 	orr.w	r3, r3, #16
 8002502:	6193      	str	r3, [r2, #24]
 8002504:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <MX_GPIO_Init+0xf4>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002510:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <MX_GPIO_Init+0xf4>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4a2a      	ldr	r2, [pc, #168]	; (80025c0 <MX_GPIO_Init+0xf4>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6193      	str	r3, [r2, #24]
 800251c:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <MX_GPIO_Init+0xf4>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <MX_GPIO_Init+0xf4>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4a24      	ldr	r2, [pc, #144]	; (80025c0 <MX_GPIO_Init+0xf4>)
 800252e:	f043 0308 	orr.w	r3, r3, #8
 8002532:	6193      	str	r3, [r2, #24]
 8002534:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <MX_GPIO_Init+0xf4>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	603b      	str	r3, [r7, #0]
 800253e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|m1_Pin|m2_Pin|m3_Pin
 8002540:	2200      	movs	r2, #0
 8002542:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8002546:	481f      	ldr	r0, [pc, #124]	; (80025c4 <MX_GPIO_Init+0xf8>)
 8002548:	f002 f931 	bl	80047ae <HAL_GPIO_WritePin>
                          |m4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Sensor1_Pin Sensor7_Pin Sensor6_Pin Sensor5_Pin */
  GPIO_InitStruct.Pin = Sensor1_Pin|Sensor7_Pin|Sensor6_Pin|Sensor5_Pin;
 800254c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255a:	f107 0310 	add.w	r3, r7, #16
 800255e:	4619      	mov	r1, r3
 8002560:	4819      	ldr	r0, [pc, #100]	; (80025c8 <MX_GPIO_Init+0xfc>)
 8002562:	f001 ff89 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor4_Pin Sensor3_Pin Sensor2_Pin */
  GPIO_InitStruct.Pin = Sensor4_Pin|Sensor3_Pin|Sensor2_Pin;
 8002566:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800256a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	4619      	mov	r1, r3
 800257a:	4814      	ldr	r0, [pc, #80]	; (80025cc <MX_GPIO_Init+0x100>)
 800257c:	f001 ff7c 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin m1_Pin m2_Pin m3_Pin
                           m4_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|m1_Pin|m2_Pin|m3_Pin
 8002580:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002584:	613b      	str	r3, [r7, #16]
                          |m4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002586:	2301      	movs	r3, #1
 8002588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2302      	movs	r3, #2
 8002590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 0310 	add.w	r3, r7, #16
 8002596:	4619      	mov	r1, r3
 8002598:	480a      	ldr	r0, [pc, #40]	; (80025c4 <MX_GPIO_Init+0xf8>)
 800259a:	f001 ff6d 	bl	8004478 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS1_Pin */
  GPIO_InitStruct.Pin = SPI3_CS1_Pin;
 800259e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <MX_GPIO_Init+0x104>)
 80025a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI3_CS1_GPIO_Port, &GPIO_InitStruct);
 80025ac:	f107 0310 	add.w	r3, r7, #16
 80025b0:	4619      	mov	r1, r3
 80025b2:	4804      	ldr	r0, [pc, #16]	; (80025c4 <MX_GPIO_Init+0xf8>)
 80025b4:	f001 ff60 	bl	8004478 <HAL_GPIO_Init>

}
 80025b8:	bf00      	nop
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40010800 	.word	0x40010800
 80025c8:	40010c00 	.word	0x40010c00
 80025cc:	40011000 	.word	0x40011000
 80025d0:	10110000 	.word	0x10110000

080025d4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		i++;
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <StartDefaultTask+0x30>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3301      	adds	r3, #1
 80025e2:	4a08      	ldr	r2, [pc, #32]	; (8002604 <StartDefaultTask+0x30>)
 80025e4:	6013      	str	r3, [r2, #0]
		HAL_Delay(1000);
 80025e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ea:	f000 fd67 	bl	80030bc <HAL_Delay>
		if(i==3){
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <StartDefaultTask+0x30>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d102      	bne.n	80025fc <StartDefaultTask+0x28>
			task2=1;
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <StartDefaultTask+0x34>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
		}
		osDelay(50);
 80025fc:	2032      	movs	r0, #50	; 0x32
 80025fe:	f004 ff79 	bl	80074f4 <osDelay>
		i++;
 8002602:	e7eb      	b.n	80025dc <StartDefaultTask+0x8>
 8002604:	200004dc 	.word	0x200004dc
 8002608:	200004d8 	.word	0x200004d8

0800260c <Task2_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task2_Init */
void Task2_Init(void const * argument)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_Init */
	/* Infinite loop */
	for(;;)
	{
		if(task2==1){
 8002614:	4b0d      	ldr	r3, [pc, #52]	; (800264c <Task2_Init+0x40>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <Task2_Init+0x38>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800261c:	2201      	movs	r2, #1
 800261e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002622:	480b      	ldr	r0, [pc, #44]	; (8002650 <Task2_Init+0x44>)
 8002624:	f002 f8c3 	bl	80047ae <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8002628:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800262c:	f000 fd46 	bl	80030bc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002630:	2200      	movs	r2, #0
 8002632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002636:	4806      	ldr	r0, [pc, #24]	; (8002650 <Task2_Init+0x44>)
 8002638:	f002 f8b9 	bl	80047ae <HAL_GPIO_WritePin>
			HAL_Delay(1000);}
 800263c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002640:	f000 fd3c 	bl	80030bc <HAL_Delay>
		osDelay(25);
 8002644:	2019      	movs	r0, #25
 8002646:	f004 ff55 	bl	80074f4 <osDelay>
		if(task2==1){
 800264a:	e7e3      	b.n	8002614 <Task2_Init+0x8>
 800264c:	200004d8 	.word	0x200004d8
 8002650:	40010800 	.word	0x40010800

08002654 <Task3_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task3_Init */
void Task3_Init(void const * argument)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_Init */
	/* Infinite loop */
	for(;;)
	{
		ADC_ChannelConfTypeDef sConfig = {3};
 800265c:	f107 030c 	add.w	r3, r7, #12
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	2303      	movs	r3, #3
 800266a:	60fb      	str	r3, [r7, #12]

		sConfig.Channel = ADC_CHANNEL_10;
 800266c:	230a      	movs	r3, #10
 800266e:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8002670:	2301      	movs	r3, #1
 8002672:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002674:	2305      	movs	r3, #5
 8002676:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002678:	f107 030c 	add.w	r3, r7, #12
 800267c:	4619      	mov	r1, r3
 800267e:	486b      	ldr	r0, [pc, #428]	; (800282c <Task3_Init+0x1d8>)
 8002680:	f001 f804 	bl	800368c <HAL_ADC_ConfigChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <Task3_Init+0x3a>
		{
			Error_Handler();
 800268a:	f000 f9a1 	bl	80029d0 <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 800268e:	4867      	ldr	r0, [pc, #412]	; (800282c <Task3_Init+0x1d8>)
 8002690:	f000 fe10 	bl	80032b4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100);
 8002694:	2164      	movs	r1, #100	; 0x64
 8002696:	4865      	ldr	r0, [pc, #404]	; (800282c <Task3_Init+0x1d8>)
 8002698:	f000 fee6 	bl	8003468 <HAL_ADC_PollForConversion>
		adc_val1=(float)HAL_ADC_GetValue(&hadc1);
 800269c:	4863      	ldr	r0, [pc, #396]	; (800282c <Task3_Init+0x1d8>)
 800269e:	f000 ffe9 	bl	8003674 <HAL_ADC_GetValue>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fc39 	bl	8000f1c <__aeabi_ui2f>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fd03 	bl	80010b8 <__aeabi_f2iz>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4a5e      	ldr	r2, [pc, #376]	; (8002830 <Task3_Init+0x1dc>)
 80026b6:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 80026b8:	485c      	ldr	r0, [pc, #368]	; (800282c <Task3_Init+0x1d8>)
 80026ba:	f000 fea9 	bl	8003410 <HAL_ADC_Stop>
		sprintf(str,"%d",adc_val1);
 80026be:	4b5c      	ldr	r3, [pc, #368]	; (8002830 <Task3_Init+0x1dc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	495b      	ldr	r1, [pc, #364]	; (8002834 <Task3_Init+0x1e0>)
 80026c6:	485c      	ldr	r0, [pc, #368]	; (8002838 <Task3_Init+0x1e4>)
 80026c8:	f006 fe02 	bl	80092d0 <siprintf>
		HAL_UART_Transmit(&huart2,str,sizeof(str),500);
 80026cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026d0:	220a      	movs	r2, #10
 80026d2:	4959      	ldr	r1, [pc, #356]	; (8002838 <Task3_Init+0x1e4>)
 80026d4:	4859      	ldr	r0, [pc, #356]	; (800283c <Task3_Init+0x1e8>)
 80026d6:	f004 f8be 	bl	8006856 <HAL_UART_Transmit>
		//		  ADC_ChannelConfTypeDef sConfig = {1};

		sConfig.Channel = ADC_CHANNEL_11;
 80026da:	230b      	movs	r3, #11
 80026dc:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 80026de:	2301      	movs	r3, #1
 80026e0:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80026e2:	2305      	movs	r3, #5
 80026e4:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026e6:	f107 030c 	add.w	r3, r7, #12
 80026ea:	4619      	mov	r1, r3
 80026ec:	484f      	ldr	r0, [pc, #316]	; (800282c <Task3_Init+0x1d8>)
 80026ee:	f000 ffcd 	bl	800368c <HAL_ADC_ConfigChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <Task3_Init+0xa8>
		{
			Error_Handler();
 80026f8:	f000 f96a 	bl	80029d0 <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 80026fc:	484b      	ldr	r0, [pc, #300]	; (800282c <Task3_Init+0x1d8>)
 80026fe:	f000 fdd9 	bl	80032b4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100);
 8002702:	2164      	movs	r1, #100	; 0x64
 8002704:	4849      	ldr	r0, [pc, #292]	; (800282c <Task3_Init+0x1d8>)
 8002706:	f000 feaf 	bl	8003468 <HAL_ADC_PollForConversion>
		adc_val2=(float)HAL_ADC_GetValue(&hadc1);
 800270a:	4848      	ldr	r0, [pc, #288]	; (800282c <Task3_Init+0x1d8>)
 800270c:	f000 ffb2 	bl	8003674 <HAL_ADC_GetValue>
 8002710:	4603      	mov	r3, r0
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fc02 	bl	8000f1c <__aeabi_ui2f>
 8002718:	4603      	mov	r3, r0
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fccc 	bl	80010b8 <__aeabi_f2iz>
 8002720:	4603      	mov	r3, r0
 8002722:	4a47      	ldr	r2, [pc, #284]	; (8002840 <Task3_Init+0x1ec>)
 8002724:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8002726:	4841      	ldr	r0, [pc, #260]	; (800282c <Task3_Init+0x1d8>)
 8002728:	f000 fe72 	bl	8003410 <HAL_ADC_Stop>
		sprintf(str2,"%d",adc_val2);
 800272c:	4b44      	ldr	r3, [pc, #272]	; (8002840 <Task3_Init+0x1ec>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	4940      	ldr	r1, [pc, #256]	; (8002834 <Task3_Init+0x1e0>)
 8002734:	4843      	ldr	r0, [pc, #268]	; (8002844 <Task3_Init+0x1f0>)
 8002736:	f006 fdcb 	bl	80092d0 <siprintf>
		HAL_UART_Transmit(&huart2,str2,sizeof(str2),500);
 800273a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800273e:	220a      	movs	r2, #10
 8002740:	4940      	ldr	r1, [pc, #256]	; (8002844 <Task3_Init+0x1f0>)
 8002742:	483e      	ldr	r0, [pc, #248]	; (800283c <Task3_Init+0x1e8>)
 8002744:	f004 f887 	bl	8006856 <HAL_UART_Transmit>

		sConfig.Channel = ADC_CHANNEL_12;
 8002748:	230c      	movs	r3, #12
 800274a:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 800274c:	2301      	movs	r3, #1
 800274e:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8002750:	2305      	movs	r3, #5
 8002752:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002754:	f107 030c 	add.w	r3, r7, #12
 8002758:	4619      	mov	r1, r3
 800275a:	4834      	ldr	r0, [pc, #208]	; (800282c <Task3_Init+0x1d8>)
 800275c:	f000 ff96 	bl	800368c <HAL_ADC_ConfigChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <Task3_Init+0x116>
		{
			Error_Handler();
 8002766:	f000 f933 	bl	80029d0 <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 800276a:	4830      	ldr	r0, [pc, #192]	; (800282c <Task3_Init+0x1d8>)
 800276c:	f000 fda2 	bl	80032b4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100);
 8002770:	2164      	movs	r1, #100	; 0x64
 8002772:	482e      	ldr	r0, [pc, #184]	; (800282c <Task3_Init+0x1d8>)
 8002774:	f000 fe78 	bl	8003468 <HAL_ADC_PollForConversion>
		adc_val3=(float)HAL_ADC_GetValue(&hadc1);
 8002778:	482c      	ldr	r0, [pc, #176]	; (800282c <Task3_Init+0x1d8>)
 800277a:	f000 ff7b 	bl	8003674 <HAL_ADC_GetValue>
 800277e:	4603      	mov	r3, r0
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fbcb 	bl	8000f1c <__aeabi_ui2f>
 8002786:	4603      	mov	r3, r0
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fc95 	bl	80010b8 <__aeabi_f2iz>
 800278e:	4603      	mov	r3, r0
 8002790:	4a2d      	ldr	r2, [pc, #180]	; (8002848 <Task3_Init+0x1f4>)
 8002792:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8002794:	4825      	ldr	r0, [pc, #148]	; (800282c <Task3_Init+0x1d8>)
 8002796:	f000 fe3b 	bl	8003410 <HAL_ADC_Stop>
		sprintf(str3,"%d",adc_val2);
 800279a:	4b29      	ldr	r3, [pc, #164]	; (8002840 <Task3_Init+0x1ec>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	4924      	ldr	r1, [pc, #144]	; (8002834 <Task3_Init+0x1e0>)
 80027a2:	482a      	ldr	r0, [pc, #168]	; (800284c <Task3_Init+0x1f8>)
 80027a4:	f006 fd94 	bl	80092d0 <siprintf>
		HAL_UART_Transmit(&huart2,str3,sizeof(str3),500);
 80027a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80027ac:	220a      	movs	r2, #10
 80027ae:	4927      	ldr	r1, [pc, #156]	; (800284c <Task3_Init+0x1f8>)
 80027b0:	4822      	ldr	r0, [pc, #136]	; (800283c <Task3_Init+0x1e8>)
 80027b2:	f004 f850 	bl	8006856 <HAL_UART_Transmit>

		sConfig.Channel = ADC_CHANNEL_13;
 80027b6:	230d      	movs	r3, #13
 80027b8:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 80027ba:	2301      	movs	r3, #1
 80027bc:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80027be:	2305      	movs	r3, #5
 80027c0:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	4619      	mov	r1, r3
 80027c8:	4818      	ldr	r0, [pc, #96]	; (800282c <Task3_Init+0x1d8>)
 80027ca:	f000 ff5f 	bl	800368c <HAL_ADC_ConfigChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <Task3_Init+0x184>
		{
			Error_Handler();
 80027d4:	f000 f8fc 	bl	80029d0 <Error_Handler>
		}
		HAL_ADC_Start(&hadc1);
 80027d8:	4814      	ldr	r0, [pc, #80]	; (800282c <Task3_Init+0x1d8>)
 80027da:	f000 fd6b 	bl	80032b4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,100);
 80027de:	2164      	movs	r1, #100	; 0x64
 80027e0:	4812      	ldr	r0, [pc, #72]	; (800282c <Task3_Init+0x1d8>)
 80027e2:	f000 fe41 	bl	8003468 <HAL_ADC_PollForConversion>
		adc_val4=(float)HAL_ADC_GetValue(&hadc1);
 80027e6:	4811      	ldr	r0, [pc, #68]	; (800282c <Task3_Init+0x1d8>)
 80027e8:	f000 ff44 	bl	8003674 <HAL_ADC_GetValue>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fb94 	bl	8000f1c <__aeabi_ui2f>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fc5e 	bl	80010b8 <__aeabi_f2iz>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4a14      	ldr	r2, [pc, #80]	; (8002850 <Task3_Init+0x1fc>)
 8002800:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8002802:	480a      	ldr	r0, [pc, #40]	; (800282c <Task3_Init+0x1d8>)
 8002804:	f000 fe04 	bl	8003410 <HAL_ADC_Stop>
		sprintf(str4,"%d",adc_val4);
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <Task3_Init+0x1fc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	4909      	ldr	r1, [pc, #36]	; (8002834 <Task3_Init+0x1e0>)
 8002810:	4810      	ldr	r0, [pc, #64]	; (8002854 <Task3_Init+0x200>)
 8002812:	f006 fd5d 	bl	80092d0 <siprintf>
		HAL_UART_Transmit(&huart2,str4,sizeof(str4),500);
 8002816:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800281a:	220a      	movs	r2, #10
 800281c:	490d      	ldr	r1, [pc, #52]	; (8002854 <Task3_Init+0x200>)
 800281e:	4807      	ldr	r0, [pc, #28]	; (800283c <Task3_Init+0x1e8>)
 8002820:	f004 f819 	bl	8006856 <HAL_UART_Transmit>

		osDelay(200);
 8002824:	20c8      	movs	r0, #200	; 0xc8
 8002826:	f004 fe65 	bl	80074f4 <osDelay>
	{
 800282a:	e717      	b.n	800265c <Task3_Init+0x8>
 800282c:	2000056c 	.word	0x2000056c
 8002830:	200004e0 	.word	0x200004e0
 8002834:	0800d8e4 	.word	0x0800d8e4
 8002838:	200004e4 	.word	0x200004e4
 800283c:	20000690 	.word	0x20000690
 8002840:	200004f0 	.word	0x200004f0
 8002844:	200004f4 	.word	0x200004f4
 8002848:	20000500 	.word	0x20000500
 800284c:	20000504 	.word	0x20000504
 8002850:	20000510 	.word	0x20000510
 8002854:	20000514 	.word	0x20000514

08002858 <Task4_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task4_Init */
void Task4_Init(void const * argument)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task4_Init */
	/* Infinite loop */
	for(;;)
	{
		Sensor1 = HAL_GPIO_ReadPin(GPIOB,Sensor1_Pin);
 8002860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002864:	481f      	ldr	r0, [pc, #124]	; (80028e4 <Task4_Init+0x8c>)
 8002866:	f001 ff8b 	bl	8004780 <HAL_GPIO_ReadPin>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <Task4_Init+0x90>)
 8002870:	701a      	strb	r2, [r3, #0]
		Sensor2 = HAL_GPIO_ReadPin(GPIOC,Sensor2_Pin);
 8002872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002876:	481d      	ldr	r0, [pc, #116]	; (80028ec <Task4_Init+0x94>)
 8002878:	f001 ff82 	bl	8004780 <HAL_GPIO_ReadPin>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <Task4_Init+0x98>)
 8002882:	701a      	strb	r2, [r3, #0]
		Sensor3 = HAL_GPIO_ReadPin(GPIOC,Sensor3_Pin);
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	4819      	ldr	r0, [pc, #100]	; (80028ec <Task4_Init+0x94>)
 8002888:	f001 ff7a 	bl	8004780 <HAL_GPIO_ReadPin>
 800288c:	4603      	mov	r3, r0
 800288e:	461a      	mov	r2, r3
 8002890:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <Task4_Init+0x9c>)
 8002892:	701a      	strb	r2, [r3, #0]
		Sensor4 = HAL_GPIO_ReadPin(GPIOC,Sensor4_Pin);
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	4815      	ldr	r0, [pc, #84]	; (80028ec <Task4_Init+0x94>)
 8002898:	f001 ff72 	bl	8004780 <HAL_GPIO_ReadPin>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <Task4_Init+0xa0>)
 80028a2:	701a      	strb	r2, [r3, #0]
		Sensor5 = HAL_GPIO_ReadPin(GPIOB,Sensor5_Pin);
 80028a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a8:	480e      	ldr	r0, [pc, #56]	; (80028e4 <Task4_Init+0x8c>)
 80028aa:	f001 ff69 	bl	8004780 <HAL_GPIO_ReadPin>
 80028ae:	4603      	mov	r3, r0
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <Task4_Init+0xa4>)
 80028b4:	701a      	strb	r2, [r3, #0]
		Sensor6 = HAL_GPIO_ReadPin(GPIOB,Sensor6_Pin);
 80028b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ba:	480a      	ldr	r0, [pc, #40]	; (80028e4 <Task4_Init+0x8c>)
 80028bc:	f001 ff60 	bl	8004780 <HAL_GPIO_ReadPin>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <Task4_Init+0xa8>)
 80028c6:	701a      	strb	r2, [r3, #0]
		Sensor7 = HAL_GPIO_ReadPin(GPIOB,Sensor7_Pin);
 80028c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028cc:	4805      	ldr	r0, [pc, #20]	; (80028e4 <Task4_Init+0x8c>)
 80028ce:	f001 ff57 	bl	8004780 <HAL_GPIO_ReadPin>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <Task4_Init+0xac>)
 80028d8:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80028da:	2064      	movs	r0, #100	; 0x64
 80028dc:	f004 fe0a 	bl	80074f4 <osDelay>
		Sensor1 = HAL_GPIO_ReadPin(GPIOB,Sensor1_Pin);
 80028e0:	e7be      	b.n	8002860 <Task4_Init+0x8>
 80028e2:	bf00      	nop
 80028e4:	40010c00 	.word	0x40010c00
 80028e8:	2000051f 	.word	0x2000051f
 80028ec:	40011000 	.word	0x40011000
 80028f0:	20000520 	.word	0x20000520
 80028f4:	20000521 	.word	0x20000521
 80028f8:	20000522 	.word	0x20000522
 80028fc:	20000523 	.word	0x20000523
 8002900:	20000524 	.word	0x20000524
 8002904:	20000525 	.word	0x20000525

08002908 <Task5_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task5_Init */
void Task5_Init(void const * argument)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task5_Init */
	/* Infinite loop */
	for(;;)
	{

		HAL_UART_Receive_DMA(&huart2, final_data, 8);
 8002910:	2208      	movs	r2, #8
 8002912:	4904      	ldr	r1, [pc, #16]	; (8002924 <Task5_Init+0x1c>)
 8002914:	4804      	ldr	r0, [pc, #16]	; (8002928 <Task5_Init+0x20>)
 8002916:	f004 f830 	bl	800697a <HAL_UART_Receive_DMA>
		osDelay(100);
 800291a:	2064      	movs	r0, #100	; 0x64
 800291c:	f004 fdea 	bl	80074f4 <osDelay>
		HAL_UART_Receive_DMA(&huart2, final_data, 8);
 8002920:	e7f6      	b.n	8002910 <Task5_Init+0x8>
 8002922:	bf00      	nop
 8002924:	20000538 	.word	0x20000538
 8002928:	20000690 	.word	0x20000690

0800292c <Task6_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task6_Init */
void Task6_Init(void const * argument)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task6_Init */
	/* Infinite loop */
	for(;;)
	{
		Get_Temperature_Cylinder();
 8002934:	f7ff f9a4 	bl	8001c80 <Get_Temperature_Cylinder>
				Get_Temperature_Hopper();
 8002938:	f7ff fa6e 	bl	8001e18 <Get_Temperature_Hopper>
		osDelay(300);
 800293c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002940:	f004 fdd8 	bl	80074f4 <osDelay>
		Get_Temperature_Cylinder();
 8002944:	e7f6      	b.n	8002934 <Task6_Init+0x8>

08002946 <Task7_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task7_Init */
void Task7_Init(void const * argument)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task7_Init */
	/* Infinite loop */
	for(;;)
	{

		osDelay(1);
 800294e:	2001      	movs	r0, #1
 8002950:	f004 fdd0 	bl	80074f4 <osDelay>
 8002954:	e7fb      	b.n	800294e <Task7_Init+0x8>
	...

08002958 <Task8_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task8_Init */
void Task8_Init(void const * argument)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task8_Init */
	/* Infinite loop */
	for(;;)
	{
		sendData("0000000");
 8002960:	480b      	ldr	r0, [pc, #44]	; (8002990 <Task8_Init+0x38>)
 8002962:	f7ff fb23 	bl	8001fac <sendData>

		if(durum==1){
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <Task8_Init+0x3c>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d006      	beq.n	800297c <Task8_Init+0x24>
			HAL_GPIO_WritePin(GPIOA, m1_Pin|m2_Pin|m3_Pin
 800296e:	2201      	movs	r2, #1
 8002970:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8002974:	4808      	ldr	r0, [pc, #32]	; (8002998 <Task8_Init+0x40>)
 8002976:	f001 ff1a 	bl	80047ae <HAL_GPIO_WritePin>
 800297a:	e005      	b.n	8002988 <Task8_Init+0x30>
					|m4_Pin, GPIO_PIN_SET);

		}
		else{
			HAL_GPIO_WritePin(GPIOA, m1_Pin|m2_Pin|m3_Pin
 800297c:	2200      	movs	r2, #0
 800297e:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8002982:	4805      	ldr	r0, [pc, #20]	; (8002998 <Task8_Init+0x40>)
 8002984:	f001 ff13 	bl	80047ae <HAL_GPIO_WritePin>
					|m4_Pin, GPIO_PIN_RESET);
		}
		osDelay(75);
 8002988:	204b      	movs	r0, #75	; 0x4b
 800298a:	f004 fdb3 	bl	80074f4 <osDelay>
		sendData("0000000");
 800298e:	e7e7      	b.n	8002960 <Task8_Init+0x8>
 8002990:	0800d8e8 	.word	0x0800d8e8
 8002994:	2000051e 	.word	0x2000051e
 8002998:	40010800 	.word	0x40010800

0800299c <Task9_Init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task9_Init */
void Task9_Init(void const * argument)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task9_Init */
	/* Infinite loop */
	for(;;)
	{

		osDelay(20);
 80029a4:	2014      	movs	r0, #20
 80029a6:	f004 fda5 	bl	80074f4 <osDelay>
 80029aa:	e7fb      	b.n	80029a4 <Task9_Init+0x8>

080029ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029be:	f000 fb61 	bl	8003084 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40012c00 	.word	0x40012c00

080029d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029d4:	b672      	cpsid	i
}
 80029d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80029d8:	e7fe      	b.n	80029d8 <Error_Handler+0x8>
	...

080029dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_MspInit+0x4c>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <HAL_MspInit+0x4c>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6193      	str	r3, [r2, #24]
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <HAL_MspInit+0x4c>)
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_MspInit+0x4c>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <HAL_MspInit+0x4c>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a04:	61d3      	str	r3, [r2, #28]
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_MspInit+0x4c>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	210f      	movs	r1, #15
 8002a16:	f06f 0001 	mvn.w	r0, #1
 8002a1a:	f001 f880 	bl	8003b1e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000

08002a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	f107 0310 	add.w	r3, r7, #16
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <HAL_ADC_MspInit+0xbc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d149      	bne.n	8002ae0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a4c:	4b27      	ldr	r3, [pc, #156]	; (8002aec <HAL_ADC_MspInit+0xc0>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	4a26      	ldr	r2, [pc, #152]	; (8002aec <HAL_ADC_MspInit+0xc0>)
 8002a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a56:	6193      	str	r3, [r2, #24]
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_ADC_MspInit+0xc0>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <HAL_ADC_MspInit+0xc0>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	4a20      	ldr	r2, [pc, #128]	; (8002aec <HAL_ADC_MspInit+0xc0>)
 8002a6a:	f043 0310 	orr.w	r3, r3, #16
 8002a6e:	6193      	str	r3, [r2, #24]
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_ADC_MspInit+0xc0>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002a7c:	230f      	movs	r3, #15
 8002a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a80:	2303      	movs	r3, #3
 8002a82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4819      	ldr	r0, [pc, #100]	; (8002af0 <HAL_ADC_MspInit+0xc4>)
 8002a8c:	f001 fcf4 	bl	8004478 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a90:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002a92:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <HAL_ADC_MspInit+0xcc>)
 8002a94:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a96:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002aa2:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002aba:	2220      	movs	r2, #32
 8002abc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ac4:	480b      	ldr	r0, [pc, #44]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002ac6:	f001 f855 	bl	8003b74 <HAL_DMA_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002ad0:	f7ff ff7e 	bl	80029d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002ad8:	621a      	str	r2, [r3, #32]
 8002ada:	4a06      	ldr	r2, [pc, #24]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ae0:	bf00      	nop
 8002ae2:	3720      	adds	r7, #32
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40012400 	.word	0x40012400
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40011000 	.word	0x40011000
 8002af4:	2000059c 	.word	0x2000059c
 8002af8:	40020008 	.word	0x40020008

08002afc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	; 0x30
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 031c 	add.w	r3, r7, #28
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a3e      	ldr	r2, [pc, #248]	; (8002c10 <HAL_SPI_MspInit+0x114>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d130      	bne.n	8002b7e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b1c:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <HAL_SPI_MspInit+0x118>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	4a3c      	ldr	r2, [pc, #240]	; (8002c14 <HAL_SPI_MspInit+0x118>)
 8002b22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b26:	6193      	str	r3, [r2, #24]
 8002b28:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <HAL_SPI_MspInit+0x118>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_SPI_MspInit+0x118>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	4a36      	ldr	r2, [pc, #216]	; (8002c14 <HAL_SPI_MspInit+0x118>)
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	6193      	str	r3, [r2, #24]
 8002b40:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <HAL_SPI_MspInit+0x118>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b4c:	23a0      	movs	r3, #160	; 0xa0
 8002b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	f107 031c 	add.w	r3, r7, #28
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	482e      	ldr	r0, [pc, #184]	; (8002c18 <HAL_SPI_MspInit+0x11c>)
 8002b60:	f001 fc8a 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b64:	2340      	movs	r3, #64	; 0x40
 8002b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	f107 031c 	add.w	r3, r7, #28
 8002b74:	4619      	mov	r1, r3
 8002b76:	4828      	ldr	r0, [pc, #160]	; (8002c18 <HAL_SPI_MspInit+0x11c>)
 8002b78:	f001 fc7e 	bl	8004478 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002b7c:	e044      	b.n	8002c08 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI3)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <HAL_SPI_MspInit+0x120>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d13f      	bne.n	8002c08 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b88:	4b22      	ldr	r3, [pc, #136]	; (8002c14 <HAL_SPI_MspInit+0x118>)
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <HAL_SPI_MspInit+0x118>)
 8002b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b92:	61d3      	str	r3, [r2, #28]
 8002b94:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <HAL_SPI_MspInit+0x118>)
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <HAL_SPI_MspInit+0x118>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <HAL_SPI_MspInit+0x118>)
 8002ba6:	f043 0310 	orr.w	r3, r3, #16
 8002baa:	6193      	str	r3, [r2, #24]
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_SPI_MspInit+0x118>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002bb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc6:	f107 031c 	add.w	r3, r7, #28
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4814      	ldr	r0, [pc, #80]	; (8002c20 <HAL_SPI_MspInit+0x124>)
 8002bce:	f001 fc53 	bl	8004478 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	4619      	mov	r1, r3
 8002be6:	480e      	ldr	r0, [pc, #56]	; (8002c20 <HAL_SPI_MspInit+0x124>)
 8002be8:	f001 fc46 	bl	8004478 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI3_ENABLE();
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_SPI_MspInit+0x128>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c02:	4a08      	ldr	r2, [pc, #32]	; (8002c24 <HAL_SPI_MspInit+0x128>)
 8002c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c06:	6053      	str	r3, [r2, #4]
}
 8002c08:	bf00      	nop
 8002c0a:	3730      	adds	r7, #48	; 0x30
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40013000 	.word	0x40013000
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40010800 	.word	0x40010800
 8002c1c:	40003c00 	.word	0x40003c00
 8002c20:	40011000 	.word	0x40011000
 8002c24:	40010000 	.word	0x40010000

08002c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 0310 	add.w	r3, r7, #16
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a32      	ldr	r2, [pc, #200]	; (8002d0c <HAL_UART_MspInit+0xe4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d15d      	bne.n	8002d04 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c48:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_UART_MspInit+0xe8>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4a30      	ldr	r2, [pc, #192]	; (8002d10 <HAL_UART_MspInit+0xe8>)
 8002c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c52:	61d3      	str	r3, [r2, #28]
 8002c54:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <HAL_UART_MspInit+0xe8>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c60:	4b2b      	ldr	r3, [pc, #172]	; (8002d10 <HAL_UART_MspInit+0xe8>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	4a2a      	ldr	r2, [pc, #168]	; (8002d10 <HAL_UART_MspInit+0xe8>)
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	6193      	str	r3, [r2, #24]
 8002c6c:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <HAL_UART_MspInit+0xe8>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c78:	2304      	movs	r3, #4
 8002c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c84:	f107 0310 	add.w	r3, r7, #16
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4822      	ldr	r0, [pc, #136]	; (8002d14 <HAL_UART_MspInit+0xec>)
 8002c8c:	f001 fbf4 	bl	8004478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c90:	2308      	movs	r3, #8
 8002c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9c:	f107 0310 	add.w	r3, r7, #16
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	481c      	ldr	r0, [pc, #112]	; (8002d14 <HAL_UART_MspInit+0xec>)
 8002ca4:	f001 fbe8 	bl	8004478 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_UART_MspInit+0xf0>)
 8002caa:	4a1c      	ldr	r2, [pc, #112]	; (8002d1c <HAL_UART_MspInit+0xf4>)
 8002cac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cae:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <HAL_UART_MspInit+0xf0>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <HAL_UART_MspInit+0xf0>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cba:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <HAL_UART_MspInit+0xf0>)
 8002cbc:	2280      	movs	r2, #128	; 0x80
 8002cbe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cc0:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <HAL_UART_MspInit+0xf0>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <HAL_UART_MspInit+0xf0>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_UART_MspInit+0xf0>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_UART_MspInit+0xf0>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002cd8:	480f      	ldr	r0, [pc, #60]	; (8002d18 <HAL_UART_MspInit+0xf0>)
 8002cda:	f000 ff4b 	bl	8003b74 <HAL_DMA_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002ce4:	f7ff fe74 	bl	80029d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <HAL_UART_MspInit+0xf0>)
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <HAL_UART_MspInit+0xf0>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2105      	movs	r1, #5
 8002cf8:	2026      	movs	r0, #38	; 0x26
 8002cfa:	f000 ff10 	bl	8003b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cfe:	2026      	movs	r0, #38	; 0x26
 8002d00:	f000 ff29 	bl	8003b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d04:	bf00      	nop
 8002d06:	3720      	adds	r7, #32
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40004400 	.word	0x40004400
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40010800 	.word	0x40010800
 8002d18:	200006d4 	.word	0x200006d4
 8002d1c:	4002006c 	.word	0x4002006c

08002d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08c      	sub	sp, #48	; 0x30
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d36:	4b2e      	ldr	r3, [pc, #184]	; (8002df0 <HAL_InitTick+0xd0>)
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	4a2d      	ldr	r2, [pc, #180]	; (8002df0 <HAL_InitTick+0xd0>)
 8002d3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d40:	6193      	str	r3, [r2, #24]
 8002d42:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <HAL_InitTick+0xd0>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d4e:	f107 020c 	add.w	r2, r7, #12
 8002d52:	f107 0310 	add.w	r3, r7, #16
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f002 fa85 	bl	8005268 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002d5e:	f002 fa6f 	bl	8005240 <HAL_RCC_GetPCLK2Freq>
 8002d62:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	4a23      	ldr	r2, [pc, #140]	; (8002df4 <HAL_InitTick+0xd4>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	0c9b      	lsrs	r3, r3, #18
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002d72:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <HAL_InitTick+0xd8>)
 8002d74:	4a21      	ldr	r2, [pc, #132]	; (8002dfc <HAL_InitTick+0xdc>)
 8002d76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002d78:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <HAL_InitTick+0xd8>)
 8002d7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d7e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002d80:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <HAL_InitTick+0xd8>)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002d86:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <HAL_InitTick+0xd8>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <HAL_InitTick+0xd8>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d92:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_InitTick+0xd8>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002d98:	4817      	ldr	r0, [pc, #92]	; (8002df8 <HAL_InitTick+0xd8>)
 8002d9a:	f003 fab3 	bl	8006304 <HAL_TIM_Base_Init>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002da4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11b      	bne.n	8002de4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002dac:	4812      	ldr	r0, [pc, #72]	; (8002df8 <HAL_InitTick+0xd8>)
 8002dae:	f003 fb01 	bl	80063b4 <HAL_TIM_Base_Start_IT>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002db8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d111      	bne.n	8002de4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002dc0:	2019      	movs	r0, #25
 8002dc2:	f000 fec8 	bl	8003b56 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b0f      	cmp	r3, #15
 8002dca:	d808      	bhi.n	8002dde <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	2019      	movs	r0, #25
 8002dd2:	f000 fea4 	bl	8003b1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <HAL_InitTick+0xe0>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	e002      	b.n	8002de4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002de4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3730      	adds	r7, #48	; 0x30
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	431bde83 	.word	0x431bde83
 8002df8:	2000073c 	.word	0x2000073c
 8002dfc:	40012c00 	.word	0x40012c00
 8002e00:	20000004 	.word	0x20000004

08002e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e08:	e7fe      	b.n	8002e08 <NMI_Handler+0x4>

08002e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e0e:	e7fe      	b.n	8002e0e <HardFault_Handler+0x4>

08002e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e14:	e7fe      	b.n	8002e14 <MemManage_Handler+0x4>

08002e16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e1a:	e7fe      	b.n	8002e1a <BusFault_Handler+0x4>

08002e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e20:	e7fe      	b.n	8002e20 <UsageFault_Handler+0x4>

08002e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
	...

08002e30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <DMA1_Channel1_IRQHandler+0x10>)
 8002e36:	f001 f8b5 	bl	8003fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	2000059c 	.word	0x2000059c

08002e44 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002e48:	4802      	ldr	r0, [pc, #8]	; (8002e54 <DMA1_Channel6_IRQHandler+0x10>)
 8002e4a:	f001 f8ab 	bl	8003fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200006d4 	.word	0x200006d4

08002e58 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e5c:	4802      	ldr	r0, [pc, #8]	; (8002e68 <TIM1_UP_IRQHandler+0x10>)
 8002e5e:	f003 fb03 	bl	8006468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	2000073c 	.word	0x2000073c

08002e6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e70:	4802      	ldr	r0, [pc, #8]	; (8002e7c <USART2_IRQHandler+0x10>)
 8002e72:	f003 fdb3 	bl	80069dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000690 	.word	0x20000690

08002e80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return 1;
 8002e84:	2301      	movs	r3, #1
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <_kill>:

int _kill(int pid, int sig)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e98:	f005 fb1a 	bl	80084d0 <__errno>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2216      	movs	r2, #22
 8002ea0:	601a      	str	r2, [r3, #0]
  return -1;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <_exit>:

void _exit (int status)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ffe7 	bl	8002e8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ec0:	e7fe      	b.n	8002ec0 <_exit+0x12>

08002ec2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e00a      	b.n	8002eea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	4601      	mov	r1, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	60ba      	str	r2, [r7, #8]
 8002ee0:	b2ca      	uxtb	r2, r1
 8002ee2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	dbf0      	blt.n	8002ed4 <_read+0x12>
  }

  return len;
 8002ef2:	687b      	ldr	r3, [r7, #4]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	e009      	b.n	8002f22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	60ba      	str	r2, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	dbf1      	blt.n	8002f0e <_write+0x12>
  }
  return len;
 8002f2a:	687b      	ldr	r3, [r7, #4]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <_close>:

int _close(int file)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f5a:	605a      	str	r2, [r3, #4]
  return 0;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <_isatty>:

int _isatty(int file)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f70:	2301      	movs	r3, #1
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f9c:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <_sbrk+0x5c>)
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <_sbrk+0x60>)
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fa8:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <_sbrk+0x64>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <_sbrk+0x64>)
 8002fb2:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <_sbrk+0x68>)
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <_sbrk+0x64>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d207      	bcs.n	8002fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc4:	f005 fa84 	bl	80084d0 <__errno>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	220c      	movs	r2, #12
 8002fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	e009      	b.n	8002fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <_sbrk+0x64>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <_sbrk+0x64>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <_sbrk+0x64>)
 8002fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20010000 	.word	0x20010000
 8002ff4:	00000400 	.word	0x00000400
 8002ff8:	20000784 	.word	0x20000784
 8002ffc:	200008d0 	.word	0x200008d0

08003000 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <Reset_Handler>:
 800300c:	480c      	ldr	r0, [pc, #48]	; (8003040 <LoopFillZerobss+0x12>)
 800300e:	490d      	ldr	r1, [pc, #52]	; (8003044 <LoopFillZerobss+0x16>)
 8003010:	4a0d      	ldr	r2, [pc, #52]	; (8003048 <LoopFillZerobss+0x1a>)
 8003012:	2300      	movs	r3, #0
 8003014:	e002      	b.n	800301c <LoopCopyDataInit>

08003016 <CopyDataInit>:
 8003016:	58d4      	ldr	r4, [r2, r3]
 8003018:	50c4      	str	r4, [r0, r3]
 800301a:	3304      	adds	r3, #4

0800301c <LoopCopyDataInit>:
 800301c:	18c4      	adds	r4, r0, r3
 800301e:	428c      	cmp	r4, r1
 8003020:	d3f9      	bcc.n	8003016 <CopyDataInit>
 8003022:	4a0a      	ldr	r2, [pc, #40]	; (800304c <LoopFillZerobss+0x1e>)
 8003024:	4c0a      	ldr	r4, [pc, #40]	; (8003050 <LoopFillZerobss+0x22>)
 8003026:	2300      	movs	r3, #0
 8003028:	e001      	b.n	800302e <LoopFillZerobss>

0800302a <FillZerobss>:
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	3204      	adds	r2, #4

0800302e <LoopFillZerobss>:
 800302e:	42a2      	cmp	r2, r4
 8003030:	d3fb      	bcc.n	800302a <FillZerobss>
 8003032:	f7ff ffe5 	bl	8003000 <SystemInit>
 8003036:	f005 fb47 	bl	80086c8 <__libc_init_array>
 800303a:	f7fe ffed 	bl	8002018 <main>
 800303e:	4770      	bx	lr
 8003040:	20000000 	.word	0x20000000
 8003044:	200001e4 	.word	0x200001e4
 8003048:	0800de30 	.word	0x0800de30
 800304c:	200001e8 	.word	0x200001e8
 8003050:	200008d0 	.word	0x200008d0

08003054 <ADC1_2_IRQHandler>:
 8003054:	e7fe      	b.n	8003054 <ADC1_2_IRQHandler>
	...

08003058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_Init+0x28>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a07      	ldr	r2, [pc, #28]	; (8003080 <HAL_Init+0x28>)
 8003062:	f043 0310 	orr.w	r3, r3, #16
 8003066:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003068:	2003      	movs	r0, #3
 800306a:	f000 fd4d 	bl	8003b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800306e:	200f      	movs	r0, #15
 8003070:	f7ff fe56 	bl	8002d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003074:	f7ff fcb2 	bl	80029dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40022000 	.word	0x40022000

08003084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_IncTick+0x1c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_IncTick+0x20>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4413      	add	r3, r2
 8003094:	4a03      	ldr	r2, [pc, #12]	; (80030a4 <HAL_IncTick+0x20>)
 8003096:	6013      	str	r3, [r2, #0]
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	20000008 	.word	0x20000008
 80030a4:	20000788 	.word	0x20000788

080030a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return uwTick;
 80030ac:	4b02      	ldr	r3, [pc, #8]	; (80030b8 <HAL_GetTick+0x10>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	20000788 	.word	0x20000788

080030bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7ff fff0 	bl	80030a8 <HAL_GetTick>
 80030c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d005      	beq.n	80030e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <HAL_Delay+0x44>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030e2:	bf00      	nop
 80030e4:	f7ff ffe0 	bl	80030a8 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d8f7      	bhi.n	80030e4 <HAL_Delay+0x28>
  {
  }
}
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000008 	.word	0x20000008

08003104 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0be      	b.n	80032a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	d109      	bne.n	8003148 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff fc72 	bl	8002a2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fbf1 	bl	8003930 <ADC_ConversionStop_Disable>
 800314e:	4603      	mov	r3, r0
 8003150:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 8099 	bne.w	8003292 <HAL_ADC_Init+0x18e>
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 8095 	bne.w	8003292 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003170:	f023 0302 	bic.w	r3, r3, #2
 8003174:	f043 0202 	orr.w	r2, r3, #2
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003184:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	7b1b      	ldrb	r3, [r3, #12]
 800318a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800318c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	4313      	orrs	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319c:	d003      	beq.n	80031a6 <HAL_ADC_Init+0xa2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d102      	bne.n	80031ac <HAL_ADC_Init+0xa8>
 80031a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031aa:	e000      	b.n	80031ae <HAL_ADC_Init+0xaa>
 80031ac:	2300      	movs	r3, #0
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	7d1b      	ldrb	r3, [r3, #20]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d119      	bne.n	80031f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7b1b      	ldrb	r3, [r3, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	035a      	lsls	r2, r3, #13
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	e00b      	b.n	80031f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	f043 0201 	orr.w	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	430a      	orrs	r2, r1
 8003202:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_ADC_Init+0x1a8>)
 800320c:	4013      	ands	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	430b      	orrs	r3, r1
 8003216:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003220:	d003      	beq.n	800322a <HAL_ADC_Init+0x126>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d104      	bne.n	8003234 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	3b01      	subs	r3, #1
 8003230:	051b      	lsls	r3, r3, #20
 8003232:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	430a      	orrs	r2, r1
 8003246:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <HAL_ADC_Init+0x1ac>)
 8003250:	4013      	ands	r3, r2
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	429a      	cmp	r2, r3
 8003256:	d10b      	bne.n	8003270 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800326e:	e018      	b.n	80032a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	f023 0312 	bic.w	r3, r3, #18
 8003278:	f043 0210 	orr.w	r2, r3, #16
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	f043 0201 	orr.w	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003290:	e007      	b.n	80032a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	f043 0210 	orr.w	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	ffe1f7fd 	.word	0xffe1f7fd
 80032b0:	ff1f0efe 	.word	0xff1f0efe

080032b4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_Start+0x1a>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e098      	b.n	8003400 <HAL_ADC_Start+0x14c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fad0 	bl	800387c <ADC_Enable>
 80032dc:	4603      	mov	r3, r0
 80032de:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f040 8087 	bne.w	80033f6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a41      	ldr	r2, [pc, #260]	; (8003408 <HAL_ADC_Start+0x154>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d105      	bne.n	8003312 <HAL_ADC_Start+0x5e>
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <HAL_ADC_Start+0x158>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d115      	bne.n	800333e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003328:	2b00      	cmp	r3, #0
 800332a:	d026      	beq.n	800337a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003334:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800333c:	e01d      	b.n	800337a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2f      	ldr	r2, [pc, #188]	; (800340c <HAL_ADC_Start+0x158>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d004      	beq.n	800335e <HAL_ADC_Start+0xaa>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2b      	ldr	r2, [pc, #172]	; (8003408 <HAL_ADC_Start+0x154>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10d      	bne.n	800337a <HAL_ADC_Start+0xc6>
 800335e:	4b2b      	ldr	r3, [pc, #172]	; (800340c <HAL_ADC_Start+0x158>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003372:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d006      	beq.n	8003394 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	f023 0206 	bic.w	r2, r3, #6
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c
 8003392:	e002      	b.n	800339a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f06f 0202 	mvn.w	r2, #2
 80033aa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033ba:	d113      	bne.n	80033e4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033c0:	4a11      	ldr	r2, [pc, #68]	; (8003408 <HAL_ADC_Start+0x154>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d105      	bne.n	80033d2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033c6:	4b11      	ldr	r3, [pc, #68]	; (800340c <HAL_ADC_Start+0x158>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	e00c      	b.n	80033fe <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	e003      	b.n	80033fe <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40012800 	.word	0x40012800
 800340c:	40012400 	.word	0x40012400

08003410 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_ADC_Stop+0x1a>
 8003426:	2302      	movs	r3, #2
 8003428:	e01a      	b.n	8003460 <HAL_ADC_Stop+0x50>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fa7c 	bl	8003930 <ADC_ConversionStop_Disable>
 8003438:	4603      	mov	r3, r0
 800343a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	f043 0201 	orr.w	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800347e:	f7ff fe13 	bl	80030a8 <HAL_GetTick>
 8003482:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	f043 0220 	orr.w	r2, r3, #32
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0d3      	b.n	8003652 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d131      	bne.n	800351c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d12a      	bne.n	800351c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80034c6:	e021      	b.n	800350c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	d01d      	beq.n	800350c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <HAL_ADC_PollForConversion+0x7e>
 80034d6:	f7ff fde7 	bl	80030a8 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d212      	bcs.n	800350c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e0a2      	b.n	8003652 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0d6      	beq.n	80034c8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800351a:	e070      	b.n	80035fe <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800351c:	4b4f      	ldr	r3, [pc, #316]	; (800365c <HAL_ADC_PollForConversion+0x1f4>)
 800351e:	681c      	ldr	r4, [r3, #0]
 8003520:	2002      	movs	r0, #2
 8003522:	f002 f821 	bl	8005568 <HAL_RCCEx_GetPeriphCLKFreq>
 8003526:	4603      	mov	r3, r0
 8003528:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6919      	ldr	r1, [r3, #16]
 8003532:	4b4b      	ldr	r3, [pc, #300]	; (8003660 <HAL_ADC_PollForConversion+0x1f8>)
 8003534:	400b      	ands	r3, r1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d118      	bne.n	800356c <HAL_ADC_PollForConversion+0x104>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68d9      	ldr	r1, [r3, #12]
 8003540:	4b48      	ldr	r3, [pc, #288]	; (8003664 <HAL_ADC_PollForConversion+0x1fc>)
 8003542:	400b      	ands	r3, r1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d111      	bne.n	800356c <HAL_ADC_PollForConversion+0x104>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6919      	ldr	r1, [r3, #16]
 800354e:	4b46      	ldr	r3, [pc, #280]	; (8003668 <HAL_ADC_PollForConversion+0x200>)
 8003550:	400b      	ands	r3, r1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d108      	bne.n	8003568 <HAL_ADC_PollForConversion+0x100>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68d9      	ldr	r1, [r3, #12]
 800355c:	4b43      	ldr	r3, [pc, #268]	; (800366c <HAL_ADC_PollForConversion+0x204>)
 800355e:	400b      	ands	r3, r1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_ADC_PollForConversion+0x100>
 8003564:	2314      	movs	r3, #20
 8003566:	e020      	b.n	80035aa <HAL_ADC_PollForConversion+0x142>
 8003568:	2329      	movs	r3, #41	; 0x29
 800356a:	e01e      	b.n	80035aa <HAL_ADC_PollForConversion+0x142>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6919      	ldr	r1, [r3, #16]
 8003572:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <HAL_ADC_PollForConversion+0x200>)
 8003574:	400b      	ands	r3, r1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_ADC_PollForConversion+0x120>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68d9      	ldr	r1, [r3, #12]
 8003580:	4b3a      	ldr	r3, [pc, #232]	; (800366c <HAL_ADC_PollForConversion+0x204>)
 8003582:	400b      	ands	r3, r1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00d      	beq.n	80035a4 <HAL_ADC_PollForConversion+0x13c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6919      	ldr	r1, [r3, #16]
 800358e:	4b38      	ldr	r3, [pc, #224]	; (8003670 <HAL_ADC_PollForConversion+0x208>)
 8003590:	400b      	ands	r3, r1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d108      	bne.n	80035a8 <HAL_ADC_PollForConversion+0x140>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68d9      	ldr	r1, [r3, #12]
 800359c:	4b34      	ldr	r3, [pc, #208]	; (8003670 <HAL_ADC_PollForConversion+0x208>)
 800359e:	400b      	ands	r3, r1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_ADC_PollForConversion+0x140>
 80035a4:	2354      	movs	r3, #84	; 0x54
 80035a6:	e000      	b.n	80035aa <HAL_ADC_PollForConversion+0x142>
 80035a8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035b0:	e021      	b.n	80035f6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d01a      	beq.n	80035f0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <HAL_ADC_PollForConversion+0x168>
 80035c0:	f7ff fd72 	bl	80030a8 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d20f      	bcs.n	80035f0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d90b      	bls.n	80035f0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	f043 0204 	orr.w	r2, r3, #4
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e030      	b.n	8003652 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3301      	adds	r3, #1
 80035f4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d8d9      	bhi.n	80035b2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f06f 0212 	mvn.w	r2, #18
 8003606:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800361e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003622:	d115      	bne.n	8003650 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003628:	2b00      	cmp	r3, #0
 800362a:	d111      	bne.n	8003650 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d105      	bne.n	8003650 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	f043 0201 	orr.w	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	bd90      	pop	{r4, r7, pc}
 800365a:	bf00      	nop
 800365c:	20000000 	.word	0x20000000
 8003660:	24924924 	.word	0x24924924
 8003664:	00924924 	.word	0x00924924
 8003668:	12492492 	.word	0x12492492
 800366c:	00492492 	.word	0x00492492
 8003670:	00249249 	.word	0x00249249

08003674 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x20>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e0dc      	b.n	8003866 <HAL_ADC_ConfigChannel+0x1da>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b06      	cmp	r3, #6
 80036ba:	d81c      	bhi.n	80036f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	3b05      	subs	r3, #5
 80036ce:	221f      	movs	r2, #31
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	4019      	ands	r1, r3
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	3b05      	subs	r3, #5
 80036e8:	fa00 f203 	lsl.w	r2, r0, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	635a      	str	r2, [r3, #52]	; 0x34
 80036f4:	e03c      	b.n	8003770 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d81c      	bhi.n	8003738 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	3b23      	subs	r3, #35	; 0x23
 8003710:	221f      	movs	r2, #31
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	4019      	ands	r1, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	3b23      	subs	r3, #35	; 0x23
 800372a:	fa00 f203 	lsl.w	r2, r0, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
 8003736:	e01b      	b.n	8003770 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	3b41      	subs	r3, #65	; 0x41
 800374a:	221f      	movs	r2, #31
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	4019      	ands	r1, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	3b41      	subs	r3, #65	; 0x41
 8003764:	fa00 f203 	lsl.w	r2, r0, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b09      	cmp	r3, #9
 8003776:	d91c      	bls.n	80037b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68d9      	ldr	r1, [r3, #12]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	3b1e      	subs	r3, #30
 800378a:	2207      	movs	r2, #7
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	4019      	ands	r1, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6898      	ldr	r0, [r3, #8]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	3b1e      	subs	r3, #30
 80037a4:	fa00 f203 	lsl.w	r2, r0, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	60da      	str	r2, [r3, #12]
 80037b0:	e019      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6919      	ldr	r1, [r3, #16]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4613      	mov	r3, r2
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	4413      	add	r3, r2
 80037c2:	2207      	movs	r2, #7
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	4019      	ands	r1, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	6898      	ldr	r0, [r3, #8]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	fa00 f203 	lsl.w	r2, r0, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b10      	cmp	r3, #16
 80037ec:	d003      	beq.n	80037f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037f2:	2b11      	cmp	r3, #17
 80037f4:	d132      	bne.n	800385c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <HAL_ADC_ConfigChannel+0x1e4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d125      	bne.n	800384c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d126      	bne.n	800385c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800381c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b10      	cmp	r3, #16
 8003824:	d11a      	bne.n	800385c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003826:	4b13      	ldr	r3, [pc, #76]	; (8003874 <HAL_ADC_ConfigChannel+0x1e8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a13      	ldr	r2, [pc, #76]	; (8003878 <HAL_ADC_ConfigChannel+0x1ec>)
 800382c:	fba2 2303 	umull	r2, r3, r2, r3
 8003830:	0c9a      	lsrs	r2, r3, #18
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800383c:	e002      	b.n	8003844 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3b01      	subs	r3, #1
 8003842:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f9      	bne.n	800383e <HAL_ADC_ConfigChannel+0x1b2>
 800384a:	e007      	b.n	800385c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	f043 0220 	orr.w	r2, r3, #32
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr
 8003870:	40012400 	.word	0x40012400
 8003874:	20000000 	.word	0x20000000
 8003878:	431bde83 	.word	0x431bde83

0800387c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b01      	cmp	r3, #1
 8003898:	d040      	beq.n	800391c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0201 	orr.w	r2, r2, #1
 80038a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038aa:	4b1f      	ldr	r3, [pc, #124]	; (8003928 <ADC_Enable+0xac>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1f      	ldr	r2, [pc, #124]	; (800392c <ADC_Enable+0xb0>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	0c9b      	lsrs	r3, r3, #18
 80038b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038b8:	e002      	b.n	80038c0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	3b01      	subs	r3, #1
 80038be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f9      	bne.n	80038ba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038c6:	f7ff fbef 	bl	80030a8 <HAL_GetTick>
 80038ca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80038cc:	e01f      	b.n	800390e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038ce:	f7ff fbeb 	bl	80030a8 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d918      	bls.n	800390e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d011      	beq.n	800390e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e007      	b.n	800391e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d1d8      	bne.n	80038ce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000000 	.word	0x20000000
 800392c:	431bde83 	.word	0x431bde83

08003930 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b01      	cmp	r3, #1
 8003948:	d12e      	bne.n	80039a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800395a:	f7ff fba5 	bl	80030a8 <HAL_GetTick>
 800395e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003960:	e01b      	b.n	800399a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003962:	f7ff fba1 	bl	80030a8 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d914      	bls.n	800399a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b01      	cmp	r3, #1
 800397c:	d10d      	bne.n	800399a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	f043 0210 	orr.w	r2, r3, #16
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	f043 0201 	orr.w	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e007      	b.n	80039aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d0dc      	beq.n	8003962 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <__NVIC_SetPriorityGrouping+0x44>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039d0:	4013      	ands	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e6:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <__NVIC_SetPriorityGrouping+0x44>)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	60d3      	str	r3, [r2, #12]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <__NVIC_GetPriorityGrouping+0x18>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	f003 0307 	and.w	r3, r3, #7
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	db0b      	blt.n	8003a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	f003 021f 	and.w	r2, r3, #31
 8003a30:	4906      	ldr	r1, [pc, #24]	; (8003a4c <__NVIC_EnableIRQ+0x34>)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	2001      	movs	r0, #1
 8003a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	e000e100 	.word	0xe000e100

08003a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	db0a      	blt.n	8003a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	490c      	ldr	r1, [pc, #48]	; (8003a9c <__NVIC_SetPriority+0x4c>)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	440b      	add	r3, r1
 8003a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a78:	e00a      	b.n	8003a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4908      	ldr	r1, [pc, #32]	; (8003aa0 <__NVIC_SetPriority+0x50>)
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	3b04      	subs	r3, #4
 8003a88:	0112      	lsls	r2, r2, #4
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	761a      	strb	r2, [r3, #24]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	e000e100 	.word	0xe000e100
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	; 0x24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f1c3 0307 	rsb	r3, r3, #7
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	bf28      	it	cs
 8003ac2:	2304      	movcs	r3, #4
 8003ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d902      	bls.n	8003ad4 <NVIC_EncodePriority+0x30>
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	3b03      	subs	r3, #3
 8003ad2:	e000      	b.n	8003ad6 <NVIC_EncodePriority+0x32>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aec:	f04f 31ff 	mov.w	r1, #4294967295
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa01 f303 	lsl.w	r3, r1, r3
 8003af6:	43d9      	mvns	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003afc:	4313      	orrs	r3, r2
         );
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3724      	adds	r7, #36	; 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff ff4f 	bl	80039b4 <__NVIC_SetPriorityGrouping>
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b086      	sub	sp, #24
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	4603      	mov	r3, r0
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b30:	f7ff ff64 	bl	80039fc <__NVIC_GetPriorityGrouping>
 8003b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	6978      	ldr	r0, [r7, #20]
 8003b3c:	f7ff ffb2 	bl	8003aa4 <NVIC_EncodePriority>
 8003b40:	4602      	mov	r2, r0
 8003b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff ff81 	bl	8003a50 <__NVIC_SetPriority>
}
 8003b4e:	bf00      	nop
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff ff57 	bl	8003a18 <__NVIC_EnableIRQ>
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e059      	b.n	8003c3e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4b2d      	ldr	r3, [pc, #180]	; (8003c48 <HAL_DMA_Init+0xd4>)
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d80f      	bhi.n	8003bb6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b2b      	ldr	r3, [pc, #172]	; (8003c4c <HAL_DMA_Init+0xd8>)
 8003b9e:	4413      	add	r3, r2
 8003ba0:	4a2b      	ldr	r2, [pc, #172]	; (8003c50 <HAL_DMA_Init+0xdc>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	009a      	lsls	r2, r3, #2
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a28      	ldr	r2, [pc, #160]	; (8003c54 <HAL_DMA_Init+0xe0>)
 8003bb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bb4:	e00e      	b.n	8003bd4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <HAL_DMA_Init+0xe4>)
 8003bbe:	4413      	add	r3, r2
 8003bc0:	4a23      	ldr	r2, [pc, #140]	; (8003c50 <HAL_DMA_Init+0xdc>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	009a      	lsls	r2, r3, #2
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a22      	ldr	r2, [pc, #136]	; (8003c5c <HAL_DMA_Init+0xe8>)
 8003bd2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003bea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003bee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	40020407 	.word	0x40020407
 8003c4c:	bffdfff8 	.word	0xbffdfff8
 8003c50:	cccccccd 	.word	0xcccccccd
 8003c54:	40020000 	.word	0x40020000
 8003c58:	bffdfbf8 	.word	0xbffdfbf8
 8003c5c:	40020400 	.word	0x40020400

08003c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_DMA_Start_IT+0x20>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e04a      	b.n	8003d16 <HAL_DMA_Start_IT+0xb6>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d13a      	bne.n	8003d08 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fbb0 	bl	800441c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 020e 	orr.w	r2, r2, #14
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e00f      	b.n	8003cf6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0204 	bic.w	r2, r2, #4
 8003ce4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 020a 	orr.w	r2, r2, #10
 8003cf4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0201 	orr.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e005      	b.n	8003d14 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
 8003d12:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d008      	beq.n	8003d46 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2204      	movs	r2, #4
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e020      	b.n	8003d88 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 020e 	bic.w	r2, r2, #14
 8003d54:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0201 	bic.w	r2, r2, #1
 8003d64:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	2101      	movs	r1, #1
 8003d70:	fa01 f202 	lsl.w	r2, r1, r2
 8003d74:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d005      	beq.n	8003db6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2204      	movs	r2, #4
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
 8003db4:	e0d6      	b.n	8003f64 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 020e 	bic.w	r2, r2, #14
 8003dc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0201 	bic.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b64      	ldr	r3, [pc, #400]	; (8003f70 <HAL_DMA_Abort_IT+0x1dc>)
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d958      	bls.n	8003e94 <HAL_DMA_Abort_IT+0x100>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a63      	ldr	r2, [pc, #396]	; (8003f74 <HAL_DMA_Abort_IT+0x1e0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d04f      	beq.n	8003e8c <HAL_DMA_Abort_IT+0xf8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a61      	ldr	r2, [pc, #388]	; (8003f78 <HAL_DMA_Abort_IT+0x1e4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d048      	beq.n	8003e88 <HAL_DMA_Abort_IT+0xf4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a60      	ldr	r2, [pc, #384]	; (8003f7c <HAL_DMA_Abort_IT+0x1e8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d040      	beq.n	8003e82 <HAL_DMA_Abort_IT+0xee>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a5e      	ldr	r2, [pc, #376]	; (8003f80 <HAL_DMA_Abort_IT+0x1ec>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d038      	beq.n	8003e7c <HAL_DMA_Abort_IT+0xe8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a5d      	ldr	r2, [pc, #372]	; (8003f84 <HAL_DMA_Abort_IT+0x1f0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d030      	beq.n	8003e76 <HAL_DMA_Abort_IT+0xe2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a5b      	ldr	r2, [pc, #364]	; (8003f88 <HAL_DMA_Abort_IT+0x1f4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d028      	beq.n	8003e70 <HAL_DMA_Abort_IT+0xdc>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a53      	ldr	r2, [pc, #332]	; (8003f70 <HAL_DMA_Abort_IT+0x1dc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d020      	beq.n	8003e6a <HAL_DMA_Abort_IT+0xd6>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a57      	ldr	r2, [pc, #348]	; (8003f8c <HAL_DMA_Abort_IT+0x1f8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d019      	beq.n	8003e66 <HAL_DMA_Abort_IT+0xd2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a56      	ldr	r2, [pc, #344]	; (8003f90 <HAL_DMA_Abort_IT+0x1fc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d012      	beq.n	8003e62 <HAL_DMA_Abort_IT+0xce>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a54      	ldr	r2, [pc, #336]	; (8003f94 <HAL_DMA_Abort_IT+0x200>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00a      	beq.n	8003e5c <HAL_DMA_Abort_IT+0xc8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a53      	ldr	r2, [pc, #332]	; (8003f98 <HAL_DMA_Abort_IT+0x204>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d102      	bne.n	8003e56 <HAL_DMA_Abort_IT+0xc2>
 8003e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e54:	e01b      	b.n	8003e8e <HAL_DMA_Abort_IT+0xfa>
 8003e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e5a:	e018      	b.n	8003e8e <HAL_DMA_Abort_IT+0xfa>
 8003e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e60:	e015      	b.n	8003e8e <HAL_DMA_Abort_IT+0xfa>
 8003e62:	2310      	movs	r3, #16
 8003e64:	e013      	b.n	8003e8e <HAL_DMA_Abort_IT+0xfa>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e011      	b.n	8003e8e <HAL_DMA_Abort_IT+0xfa>
 8003e6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e6e:	e00e      	b.n	8003e8e <HAL_DMA_Abort_IT+0xfa>
 8003e70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e74:	e00b      	b.n	8003e8e <HAL_DMA_Abort_IT+0xfa>
 8003e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e7a:	e008      	b.n	8003e8e <HAL_DMA_Abort_IT+0xfa>
 8003e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e80:	e005      	b.n	8003e8e <HAL_DMA_Abort_IT+0xfa>
 8003e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e86:	e002      	b.n	8003e8e <HAL_DMA_Abort_IT+0xfa>
 8003e88:	2310      	movs	r3, #16
 8003e8a:	e000      	b.n	8003e8e <HAL_DMA_Abort_IT+0xfa>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	4a43      	ldr	r2, [pc, #268]	; (8003f9c <HAL_DMA_Abort_IT+0x208>)
 8003e90:	6053      	str	r3, [r2, #4]
 8003e92:	e057      	b.n	8003f44 <HAL_DMA_Abort_IT+0x1b0>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a36      	ldr	r2, [pc, #216]	; (8003f74 <HAL_DMA_Abort_IT+0x1e0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d04f      	beq.n	8003f3e <HAL_DMA_Abort_IT+0x1aa>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a35      	ldr	r2, [pc, #212]	; (8003f78 <HAL_DMA_Abort_IT+0x1e4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d048      	beq.n	8003f3a <HAL_DMA_Abort_IT+0x1a6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a33      	ldr	r2, [pc, #204]	; (8003f7c <HAL_DMA_Abort_IT+0x1e8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d040      	beq.n	8003f34 <HAL_DMA_Abort_IT+0x1a0>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a32      	ldr	r2, [pc, #200]	; (8003f80 <HAL_DMA_Abort_IT+0x1ec>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d038      	beq.n	8003f2e <HAL_DMA_Abort_IT+0x19a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a30      	ldr	r2, [pc, #192]	; (8003f84 <HAL_DMA_Abort_IT+0x1f0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d030      	beq.n	8003f28 <HAL_DMA_Abort_IT+0x194>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a2f      	ldr	r2, [pc, #188]	; (8003f88 <HAL_DMA_Abort_IT+0x1f4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d028      	beq.n	8003f22 <HAL_DMA_Abort_IT+0x18e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <HAL_DMA_Abort_IT+0x1dc>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d020      	beq.n	8003f1c <HAL_DMA_Abort_IT+0x188>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a2b      	ldr	r2, [pc, #172]	; (8003f8c <HAL_DMA_Abort_IT+0x1f8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d019      	beq.n	8003f18 <HAL_DMA_Abort_IT+0x184>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a29      	ldr	r2, [pc, #164]	; (8003f90 <HAL_DMA_Abort_IT+0x1fc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d012      	beq.n	8003f14 <HAL_DMA_Abort_IT+0x180>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a28      	ldr	r2, [pc, #160]	; (8003f94 <HAL_DMA_Abort_IT+0x200>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00a      	beq.n	8003f0e <HAL_DMA_Abort_IT+0x17a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a26      	ldr	r2, [pc, #152]	; (8003f98 <HAL_DMA_Abort_IT+0x204>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d102      	bne.n	8003f08 <HAL_DMA_Abort_IT+0x174>
 8003f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f06:	e01b      	b.n	8003f40 <HAL_DMA_Abort_IT+0x1ac>
 8003f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f0c:	e018      	b.n	8003f40 <HAL_DMA_Abort_IT+0x1ac>
 8003f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f12:	e015      	b.n	8003f40 <HAL_DMA_Abort_IT+0x1ac>
 8003f14:	2310      	movs	r3, #16
 8003f16:	e013      	b.n	8003f40 <HAL_DMA_Abort_IT+0x1ac>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e011      	b.n	8003f40 <HAL_DMA_Abort_IT+0x1ac>
 8003f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f20:	e00e      	b.n	8003f40 <HAL_DMA_Abort_IT+0x1ac>
 8003f22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f26:	e00b      	b.n	8003f40 <HAL_DMA_Abort_IT+0x1ac>
 8003f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f2c:	e008      	b.n	8003f40 <HAL_DMA_Abort_IT+0x1ac>
 8003f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f32:	e005      	b.n	8003f40 <HAL_DMA_Abort_IT+0x1ac>
 8003f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f38:	e002      	b.n	8003f40 <HAL_DMA_Abort_IT+0x1ac>
 8003f3a:	2310      	movs	r3, #16
 8003f3c:	e000      	b.n	8003f40 <HAL_DMA_Abort_IT+0x1ac>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <HAL_DMA_Abort_IT+0x20c>)
 8003f42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
    } 
  }
  return status;
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40020080 	.word	0x40020080
 8003f74:	40020008 	.word	0x40020008
 8003f78:	4002001c 	.word	0x4002001c
 8003f7c:	40020030 	.word	0x40020030
 8003f80:	40020044 	.word	0x40020044
 8003f84:	40020058 	.word	0x40020058
 8003f88:	4002006c 	.word	0x4002006c
 8003f8c:	40020408 	.word	0x40020408
 8003f90:	4002041c 	.word	0x4002041c
 8003f94:	40020430 	.word	0x40020430
 8003f98:	40020444 	.word	0x40020444
 8003f9c:	40020400 	.word	0x40020400
 8003fa0:	40020000 	.word	0x40020000

08003fa4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80f1 	beq.w	80041b0 <HAL_DMA_IRQHandler+0x20c>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80eb 	beq.w	80041b0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d107      	bne.n	8003ff8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0204 	bic.w	r2, r2, #4
 8003ff6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b5f      	ldr	r3, [pc, #380]	; (800417c <HAL_DMA_IRQHandler+0x1d8>)
 8004000:	429a      	cmp	r2, r3
 8004002:	d958      	bls.n	80040b6 <HAL_DMA_IRQHandler+0x112>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a5d      	ldr	r2, [pc, #372]	; (8004180 <HAL_DMA_IRQHandler+0x1dc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d04f      	beq.n	80040ae <HAL_DMA_IRQHandler+0x10a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a5c      	ldr	r2, [pc, #368]	; (8004184 <HAL_DMA_IRQHandler+0x1e0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d048      	beq.n	80040aa <HAL_DMA_IRQHandler+0x106>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a5a      	ldr	r2, [pc, #360]	; (8004188 <HAL_DMA_IRQHandler+0x1e4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d040      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x100>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a59      	ldr	r2, [pc, #356]	; (800418c <HAL_DMA_IRQHandler+0x1e8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d038      	beq.n	800409e <HAL_DMA_IRQHandler+0xfa>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a57      	ldr	r2, [pc, #348]	; (8004190 <HAL_DMA_IRQHandler+0x1ec>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d030      	beq.n	8004098 <HAL_DMA_IRQHandler+0xf4>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a56      	ldr	r2, [pc, #344]	; (8004194 <HAL_DMA_IRQHandler+0x1f0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d028      	beq.n	8004092 <HAL_DMA_IRQHandler+0xee>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a4d      	ldr	r2, [pc, #308]	; (800417c <HAL_DMA_IRQHandler+0x1d8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d020      	beq.n	800408c <HAL_DMA_IRQHandler+0xe8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a52      	ldr	r2, [pc, #328]	; (8004198 <HAL_DMA_IRQHandler+0x1f4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d019      	beq.n	8004088 <HAL_DMA_IRQHandler+0xe4>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a50      	ldr	r2, [pc, #320]	; (800419c <HAL_DMA_IRQHandler+0x1f8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d012      	beq.n	8004084 <HAL_DMA_IRQHandler+0xe0>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a4f      	ldr	r2, [pc, #316]	; (80041a0 <HAL_DMA_IRQHandler+0x1fc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00a      	beq.n	800407e <HAL_DMA_IRQHandler+0xda>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a4d      	ldr	r2, [pc, #308]	; (80041a4 <HAL_DMA_IRQHandler+0x200>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d102      	bne.n	8004078 <HAL_DMA_IRQHandler+0xd4>
 8004072:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004076:	e01b      	b.n	80040b0 <HAL_DMA_IRQHandler+0x10c>
 8004078:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800407c:	e018      	b.n	80040b0 <HAL_DMA_IRQHandler+0x10c>
 800407e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004082:	e015      	b.n	80040b0 <HAL_DMA_IRQHandler+0x10c>
 8004084:	2340      	movs	r3, #64	; 0x40
 8004086:	e013      	b.n	80040b0 <HAL_DMA_IRQHandler+0x10c>
 8004088:	2304      	movs	r3, #4
 800408a:	e011      	b.n	80040b0 <HAL_DMA_IRQHandler+0x10c>
 800408c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004090:	e00e      	b.n	80040b0 <HAL_DMA_IRQHandler+0x10c>
 8004092:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004096:	e00b      	b.n	80040b0 <HAL_DMA_IRQHandler+0x10c>
 8004098:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800409c:	e008      	b.n	80040b0 <HAL_DMA_IRQHandler+0x10c>
 800409e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040a2:	e005      	b.n	80040b0 <HAL_DMA_IRQHandler+0x10c>
 80040a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040a8:	e002      	b.n	80040b0 <HAL_DMA_IRQHandler+0x10c>
 80040aa:	2340      	movs	r3, #64	; 0x40
 80040ac:	e000      	b.n	80040b0 <HAL_DMA_IRQHandler+0x10c>
 80040ae:	2304      	movs	r3, #4
 80040b0:	4a3d      	ldr	r2, [pc, #244]	; (80041a8 <HAL_DMA_IRQHandler+0x204>)
 80040b2:	6053      	str	r3, [r2, #4]
 80040b4:	e057      	b.n	8004166 <HAL_DMA_IRQHandler+0x1c2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a31      	ldr	r2, [pc, #196]	; (8004180 <HAL_DMA_IRQHandler+0x1dc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d04f      	beq.n	8004160 <HAL_DMA_IRQHandler+0x1bc>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a2f      	ldr	r2, [pc, #188]	; (8004184 <HAL_DMA_IRQHandler+0x1e0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d048      	beq.n	800415c <HAL_DMA_IRQHandler+0x1b8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a2e      	ldr	r2, [pc, #184]	; (8004188 <HAL_DMA_IRQHandler+0x1e4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d040      	beq.n	8004156 <HAL_DMA_IRQHandler+0x1b2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2c      	ldr	r2, [pc, #176]	; (800418c <HAL_DMA_IRQHandler+0x1e8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d038      	beq.n	8004150 <HAL_DMA_IRQHandler+0x1ac>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2b      	ldr	r2, [pc, #172]	; (8004190 <HAL_DMA_IRQHandler+0x1ec>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d030      	beq.n	800414a <HAL_DMA_IRQHandler+0x1a6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a29      	ldr	r2, [pc, #164]	; (8004194 <HAL_DMA_IRQHandler+0x1f0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d028      	beq.n	8004144 <HAL_DMA_IRQHandler+0x1a0>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a21      	ldr	r2, [pc, #132]	; (800417c <HAL_DMA_IRQHandler+0x1d8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d020      	beq.n	800413e <HAL_DMA_IRQHandler+0x19a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a25      	ldr	r2, [pc, #148]	; (8004198 <HAL_DMA_IRQHandler+0x1f4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d019      	beq.n	800413a <HAL_DMA_IRQHandler+0x196>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a24      	ldr	r2, [pc, #144]	; (800419c <HAL_DMA_IRQHandler+0x1f8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d012      	beq.n	8004136 <HAL_DMA_IRQHandler+0x192>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a22      	ldr	r2, [pc, #136]	; (80041a0 <HAL_DMA_IRQHandler+0x1fc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00a      	beq.n	8004130 <HAL_DMA_IRQHandler+0x18c>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a21      	ldr	r2, [pc, #132]	; (80041a4 <HAL_DMA_IRQHandler+0x200>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d102      	bne.n	800412a <HAL_DMA_IRQHandler+0x186>
 8004124:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004128:	e01b      	b.n	8004162 <HAL_DMA_IRQHandler+0x1be>
 800412a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800412e:	e018      	b.n	8004162 <HAL_DMA_IRQHandler+0x1be>
 8004130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004134:	e015      	b.n	8004162 <HAL_DMA_IRQHandler+0x1be>
 8004136:	2340      	movs	r3, #64	; 0x40
 8004138:	e013      	b.n	8004162 <HAL_DMA_IRQHandler+0x1be>
 800413a:	2304      	movs	r3, #4
 800413c:	e011      	b.n	8004162 <HAL_DMA_IRQHandler+0x1be>
 800413e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004142:	e00e      	b.n	8004162 <HAL_DMA_IRQHandler+0x1be>
 8004144:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004148:	e00b      	b.n	8004162 <HAL_DMA_IRQHandler+0x1be>
 800414a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800414e:	e008      	b.n	8004162 <HAL_DMA_IRQHandler+0x1be>
 8004150:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004154:	e005      	b.n	8004162 <HAL_DMA_IRQHandler+0x1be>
 8004156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800415a:	e002      	b.n	8004162 <HAL_DMA_IRQHandler+0x1be>
 800415c:	2340      	movs	r3, #64	; 0x40
 800415e:	e000      	b.n	8004162 <HAL_DMA_IRQHandler+0x1be>
 8004160:	2304      	movs	r3, #4
 8004162:	4a12      	ldr	r2, [pc, #72]	; (80041ac <HAL_DMA_IRQHandler+0x208>)
 8004164:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8136 	beq.w	80043dc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004178:	e130      	b.n	80043dc <HAL_DMA_IRQHandler+0x438>
 800417a:	bf00      	nop
 800417c:	40020080 	.word	0x40020080
 8004180:	40020008 	.word	0x40020008
 8004184:	4002001c 	.word	0x4002001c
 8004188:	40020030 	.word	0x40020030
 800418c:	40020044 	.word	0x40020044
 8004190:	40020058 	.word	0x40020058
 8004194:	4002006c 	.word	0x4002006c
 8004198:	40020408 	.word	0x40020408
 800419c:	4002041c 	.word	0x4002041c
 80041a0:	40020430 	.word	0x40020430
 80041a4:	40020444 	.word	0x40020444
 80041a8:	40020400 	.word	0x40020400
 80041ac:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	2202      	movs	r2, #2
 80041b6:	409a      	lsls	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80dd 	beq.w	800437c <HAL_DMA_IRQHandler+0x3d8>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80d7 	beq.w	800437c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10b      	bne.n	80041f4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 020a 	bic.w	r2, r2, #10
 80041ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	4b7b      	ldr	r3, [pc, #492]	; (80043e8 <HAL_DMA_IRQHandler+0x444>)
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d958      	bls.n	80042b2 <HAL_DMA_IRQHandler+0x30e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a79      	ldr	r2, [pc, #484]	; (80043ec <HAL_DMA_IRQHandler+0x448>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d04f      	beq.n	80042aa <HAL_DMA_IRQHandler+0x306>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a78      	ldr	r2, [pc, #480]	; (80043f0 <HAL_DMA_IRQHandler+0x44c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d048      	beq.n	80042a6 <HAL_DMA_IRQHandler+0x302>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a76      	ldr	r2, [pc, #472]	; (80043f4 <HAL_DMA_IRQHandler+0x450>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d040      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x2fc>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a75      	ldr	r2, [pc, #468]	; (80043f8 <HAL_DMA_IRQHandler+0x454>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d038      	beq.n	800429a <HAL_DMA_IRQHandler+0x2f6>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a73      	ldr	r2, [pc, #460]	; (80043fc <HAL_DMA_IRQHandler+0x458>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d030      	beq.n	8004294 <HAL_DMA_IRQHandler+0x2f0>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a72      	ldr	r2, [pc, #456]	; (8004400 <HAL_DMA_IRQHandler+0x45c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d028      	beq.n	800428e <HAL_DMA_IRQHandler+0x2ea>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a69      	ldr	r2, [pc, #420]	; (80043e8 <HAL_DMA_IRQHandler+0x444>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d020      	beq.n	8004288 <HAL_DMA_IRQHandler+0x2e4>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a6e      	ldr	r2, [pc, #440]	; (8004404 <HAL_DMA_IRQHandler+0x460>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d019      	beq.n	8004284 <HAL_DMA_IRQHandler+0x2e0>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a6c      	ldr	r2, [pc, #432]	; (8004408 <HAL_DMA_IRQHandler+0x464>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d012      	beq.n	8004280 <HAL_DMA_IRQHandler+0x2dc>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a6b      	ldr	r2, [pc, #428]	; (800440c <HAL_DMA_IRQHandler+0x468>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00a      	beq.n	800427a <HAL_DMA_IRQHandler+0x2d6>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a69      	ldr	r2, [pc, #420]	; (8004410 <HAL_DMA_IRQHandler+0x46c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d102      	bne.n	8004274 <HAL_DMA_IRQHandler+0x2d0>
 800426e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004272:	e01b      	b.n	80042ac <HAL_DMA_IRQHandler+0x308>
 8004274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004278:	e018      	b.n	80042ac <HAL_DMA_IRQHandler+0x308>
 800427a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800427e:	e015      	b.n	80042ac <HAL_DMA_IRQHandler+0x308>
 8004280:	2320      	movs	r3, #32
 8004282:	e013      	b.n	80042ac <HAL_DMA_IRQHandler+0x308>
 8004284:	2302      	movs	r3, #2
 8004286:	e011      	b.n	80042ac <HAL_DMA_IRQHandler+0x308>
 8004288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800428c:	e00e      	b.n	80042ac <HAL_DMA_IRQHandler+0x308>
 800428e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004292:	e00b      	b.n	80042ac <HAL_DMA_IRQHandler+0x308>
 8004294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004298:	e008      	b.n	80042ac <HAL_DMA_IRQHandler+0x308>
 800429a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800429e:	e005      	b.n	80042ac <HAL_DMA_IRQHandler+0x308>
 80042a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042a4:	e002      	b.n	80042ac <HAL_DMA_IRQHandler+0x308>
 80042a6:	2320      	movs	r3, #32
 80042a8:	e000      	b.n	80042ac <HAL_DMA_IRQHandler+0x308>
 80042aa:	2302      	movs	r3, #2
 80042ac:	4a59      	ldr	r2, [pc, #356]	; (8004414 <HAL_DMA_IRQHandler+0x470>)
 80042ae:	6053      	str	r3, [r2, #4]
 80042b0:	e057      	b.n	8004362 <HAL_DMA_IRQHandler+0x3be>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a4d      	ldr	r2, [pc, #308]	; (80043ec <HAL_DMA_IRQHandler+0x448>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d04f      	beq.n	800435c <HAL_DMA_IRQHandler+0x3b8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a4b      	ldr	r2, [pc, #300]	; (80043f0 <HAL_DMA_IRQHandler+0x44c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d048      	beq.n	8004358 <HAL_DMA_IRQHandler+0x3b4>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a4a      	ldr	r2, [pc, #296]	; (80043f4 <HAL_DMA_IRQHandler+0x450>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d040      	beq.n	8004352 <HAL_DMA_IRQHandler+0x3ae>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a48      	ldr	r2, [pc, #288]	; (80043f8 <HAL_DMA_IRQHandler+0x454>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d038      	beq.n	800434c <HAL_DMA_IRQHandler+0x3a8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a47      	ldr	r2, [pc, #284]	; (80043fc <HAL_DMA_IRQHandler+0x458>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d030      	beq.n	8004346 <HAL_DMA_IRQHandler+0x3a2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a45      	ldr	r2, [pc, #276]	; (8004400 <HAL_DMA_IRQHandler+0x45c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d028      	beq.n	8004340 <HAL_DMA_IRQHandler+0x39c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a3d      	ldr	r2, [pc, #244]	; (80043e8 <HAL_DMA_IRQHandler+0x444>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d020      	beq.n	800433a <HAL_DMA_IRQHandler+0x396>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a41      	ldr	r2, [pc, #260]	; (8004404 <HAL_DMA_IRQHandler+0x460>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d019      	beq.n	8004336 <HAL_DMA_IRQHandler+0x392>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a40      	ldr	r2, [pc, #256]	; (8004408 <HAL_DMA_IRQHandler+0x464>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d012      	beq.n	8004332 <HAL_DMA_IRQHandler+0x38e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a3e      	ldr	r2, [pc, #248]	; (800440c <HAL_DMA_IRQHandler+0x468>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00a      	beq.n	800432c <HAL_DMA_IRQHandler+0x388>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a3d      	ldr	r2, [pc, #244]	; (8004410 <HAL_DMA_IRQHandler+0x46c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d102      	bne.n	8004326 <HAL_DMA_IRQHandler+0x382>
 8004320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004324:	e01b      	b.n	800435e <HAL_DMA_IRQHandler+0x3ba>
 8004326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800432a:	e018      	b.n	800435e <HAL_DMA_IRQHandler+0x3ba>
 800432c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004330:	e015      	b.n	800435e <HAL_DMA_IRQHandler+0x3ba>
 8004332:	2320      	movs	r3, #32
 8004334:	e013      	b.n	800435e <HAL_DMA_IRQHandler+0x3ba>
 8004336:	2302      	movs	r3, #2
 8004338:	e011      	b.n	800435e <HAL_DMA_IRQHandler+0x3ba>
 800433a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800433e:	e00e      	b.n	800435e <HAL_DMA_IRQHandler+0x3ba>
 8004340:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004344:	e00b      	b.n	800435e <HAL_DMA_IRQHandler+0x3ba>
 8004346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800434a:	e008      	b.n	800435e <HAL_DMA_IRQHandler+0x3ba>
 800434c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004350:	e005      	b.n	800435e <HAL_DMA_IRQHandler+0x3ba>
 8004352:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004356:	e002      	b.n	800435e <HAL_DMA_IRQHandler+0x3ba>
 8004358:	2320      	movs	r3, #32
 800435a:	e000      	b.n	800435e <HAL_DMA_IRQHandler+0x3ba>
 800435c:	2302      	movs	r3, #2
 800435e:	4a2e      	ldr	r2, [pc, #184]	; (8004418 <HAL_DMA_IRQHandler+0x474>)
 8004360:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	2b00      	cmp	r3, #0
 8004370:	d034      	beq.n	80043dc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800437a:	e02f      	b.n	80043dc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	2208      	movs	r2, #8
 8004382:	409a      	lsls	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d028      	beq.n	80043de <HAL_DMA_IRQHandler+0x43a>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d023      	beq.n	80043de <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 020e 	bic.w	r2, r2, #14
 80043a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ae:	2101      	movs	r1, #1
 80043b0:	fa01 f202 	lsl.w	r2, r1, r2
 80043b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d004      	beq.n	80043de <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
    }
  }
  return;
 80043dc:	bf00      	nop
 80043de:	bf00      	nop
}
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40020080 	.word	0x40020080
 80043ec:	40020008 	.word	0x40020008
 80043f0:	4002001c 	.word	0x4002001c
 80043f4:	40020030 	.word	0x40020030
 80043f8:	40020044 	.word	0x40020044
 80043fc:	40020058 	.word	0x40020058
 8004400:	4002006c 	.word	0x4002006c
 8004404:	40020408 	.word	0x40020408
 8004408:	4002041c 	.word	0x4002041c
 800440c:	40020430 	.word	0x40020430
 8004410:	40020444 	.word	0x40020444
 8004414:	40020400 	.word	0x40020400
 8004418:	40020000 	.word	0x40020000

0800441c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	2101      	movs	r1, #1
 8004434:	fa01 f202 	lsl.w	r2, r1, r2
 8004438:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b10      	cmp	r3, #16
 8004448:	d108      	bne.n	800445c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800445a:	e007      	b.n	800446c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	60da      	str	r2, [r3, #12]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
	...

08004478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004478:	b480      	push	{r7}
 800447a:	b08b      	sub	sp, #44	; 0x2c
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004482:	2300      	movs	r3, #0
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004486:	2300      	movs	r3, #0
 8004488:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800448a:	e169      	b.n	8004760 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800448c:	2201      	movs	r2, #1
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	f040 8158 	bne.w	800475a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4a9a      	ldr	r2, [pc, #616]	; (8004718 <HAL_GPIO_Init+0x2a0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d05e      	beq.n	8004572 <HAL_GPIO_Init+0xfa>
 80044b4:	4a98      	ldr	r2, [pc, #608]	; (8004718 <HAL_GPIO_Init+0x2a0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d875      	bhi.n	80045a6 <HAL_GPIO_Init+0x12e>
 80044ba:	4a98      	ldr	r2, [pc, #608]	; (800471c <HAL_GPIO_Init+0x2a4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d058      	beq.n	8004572 <HAL_GPIO_Init+0xfa>
 80044c0:	4a96      	ldr	r2, [pc, #600]	; (800471c <HAL_GPIO_Init+0x2a4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d86f      	bhi.n	80045a6 <HAL_GPIO_Init+0x12e>
 80044c6:	4a96      	ldr	r2, [pc, #600]	; (8004720 <HAL_GPIO_Init+0x2a8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d052      	beq.n	8004572 <HAL_GPIO_Init+0xfa>
 80044cc:	4a94      	ldr	r2, [pc, #592]	; (8004720 <HAL_GPIO_Init+0x2a8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d869      	bhi.n	80045a6 <HAL_GPIO_Init+0x12e>
 80044d2:	4a94      	ldr	r2, [pc, #592]	; (8004724 <HAL_GPIO_Init+0x2ac>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d04c      	beq.n	8004572 <HAL_GPIO_Init+0xfa>
 80044d8:	4a92      	ldr	r2, [pc, #584]	; (8004724 <HAL_GPIO_Init+0x2ac>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d863      	bhi.n	80045a6 <HAL_GPIO_Init+0x12e>
 80044de:	4a92      	ldr	r2, [pc, #584]	; (8004728 <HAL_GPIO_Init+0x2b0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d046      	beq.n	8004572 <HAL_GPIO_Init+0xfa>
 80044e4:	4a90      	ldr	r2, [pc, #576]	; (8004728 <HAL_GPIO_Init+0x2b0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d85d      	bhi.n	80045a6 <HAL_GPIO_Init+0x12e>
 80044ea:	2b12      	cmp	r3, #18
 80044ec:	d82a      	bhi.n	8004544 <HAL_GPIO_Init+0xcc>
 80044ee:	2b12      	cmp	r3, #18
 80044f0:	d859      	bhi.n	80045a6 <HAL_GPIO_Init+0x12e>
 80044f2:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <HAL_GPIO_Init+0x80>)
 80044f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f8:	08004573 	.word	0x08004573
 80044fc:	0800454d 	.word	0x0800454d
 8004500:	0800455f 	.word	0x0800455f
 8004504:	080045a1 	.word	0x080045a1
 8004508:	080045a7 	.word	0x080045a7
 800450c:	080045a7 	.word	0x080045a7
 8004510:	080045a7 	.word	0x080045a7
 8004514:	080045a7 	.word	0x080045a7
 8004518:	080045a7 	.word	0x080045a7
 800451c:	080045a7 	.word	0x080045a7
 8004520:	080045a7 	.word	0x080045a7
 8004524:	080045a7 	.word	0x080045a7
 8004528:	080045a7 	.word	0x080045a7
 800452c:	080045a7 	.word	0x080045a7
 8004530:	080045a7 	.word	0x080045a7
 8004534:	080045a7 	.word	0x080045a7
 8004538:	080045a7 	.word	0x080045a7
 800453c:	08004555 	.word	0x08004555
 8004540:	08004569 	.word	0x08004569
 8004544:	4a79      	ldr	r2, [pc, #484]	; (800472c <HAL_GPIO_Init+0x2b4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800454a:	e02c      	b.n	80045a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	623b      	str	r3, [r7, #32]
          break;
 8004552:	e029      	b.n	80045a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	3304      	adds	r3, #4
 800455a:	623b      	str	r3, [r7, #32]
          break;
 800455c:	e024      	b.n	80045a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	3308      	adds	r3, #8
 8004564:	623b      	str	r3, [r7, #32]
          break;
 8004566:	e01f      	b.n	80045a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	330c      	adds	r3, #12
 800456e:	623b      	str	r3, [r7, #32]
          break;
 8004570:	e01a      	b.n	80045a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d102      	bne.n	8004580 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800457a:	2304      	movs	r3, #4
 800457c:	623b      	str	r3, [r7, #32]
          break;
 800457e:	e013      	b.n	80045a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d105      	bne.n	8004594 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004588:	2308      	movs	r3, #8
 800458a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	611a      	str	r2, [r3, #16]
          break;
 8004592:	e009      	b.n	80045a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004594:	2308      	movs	r3, #8
 8004596:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	615a      	str	r2, [r3, #20]
          break;
 800459e:	e003      	b.n	80045a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045a0:	2300      	movs	r3, #0
 80045a2:	623b      	str	r3, [r7, #32]
          break;
 80045a4:	e000      	b.n	80045a8 <HAL_GPIO_Init+0x130>
          break;
 80045a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2bff      	cmp	r3, #255	; 0xff
 80045ac:	d801      	bhi.n	80045b2 <HAL_GPIO_Init+0x13a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	e001      	b.n	80045b6 <HAL_GPIO_Init+0x13e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3304      	adds	r3, #4
 80045b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2bff      	cmp	r3, #255	; 0xff
 80045bc:	d802      	bhi.n	80045c4 <HAL_GPIO_Init+0x14c>
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	e002      	b.n	80045ca <HAL_GPIO_Init+0x152>
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	3b08      	subs	r3, #8
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	210f      	movs	r1, #15
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	fa01 f303 	lsl.w	r3, r1, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	401a      	ands	r2, r3
 80045dc:	6a39      	ldr	r1, [r7, #32]
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	fa01 f303 	lsl.w	r3, r1, r3
 80045e4:	431a      	orrs	r2, r3
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80b1 	beq.w	800475a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045f8:	4b4d      	ldr	r3, [pc, #308]	; (8004730 <HAL_GPIO_Init+0x2b8>)
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	4a4c      	ldr	r2, [pc, #304]	; (8004730 <HAL_GPIO_Init+0x2b8>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	6193      	str	r3, [r2, #24]
 8004604:	4b4a      	ldr	r3, [pc, #296]	; (8004730 <HAL_GPIO_Init+0x2b8>)
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004610:	4a48      	ldr	r2, [pc, #288]	; (8004734 <HAL_GPIO_Init+0x2bc>)
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	089b      	lsrs	r3, r3, #2
 8004616:	3302      	adds	r3, #2
 8004618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800461c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	220f      	movs	r2, #15
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4013      	ands	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a40      	ldr	r2, [pc, #256]	; (8004738 <HAL_GPIO_Init+0x2c0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d013      	beq.n	8004664 <HAL_GPIO_Init+0x1ec>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a3f      	ldr	r2, [pc, #252]	; (800473c <HAL_GPIO_Init+0x2c4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00d      	beq.n	8004660 <HAL_GPIO_Init+0x1e8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a3e      	ldr	r2, [pc, #248]	; (8004740 <HAL_GPIO_Init+0x2c8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d007      	beq.n	800465c <HAL_GPIO_Init+0x1e4>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a3d      	ldr	r2, [pc, #244]	; (8004744 <HAL_GPIO_Init+0x2cc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d101      	bne.n	8004658 <HAL_GPIO_Init+0x1e0>
 8004654:	2303      	movs	r3, #3
 8004656:	e006      	b.n	8004666 <HAL_GPIO_Init+0x1ee>
 8004658:	2304      	movs	r3, #4
 800465a:	e004      	b.n	8004666 <HAL_GPIO_Init+0x1ee>
 800465c:	2302      	movs	r3, #2
 800465e:	e002      	b.n	8004666 <HAL_GPIO_Init+0x1ee>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_GPIO_Init+0x1ee>
 8004664:	2300      	movs	r3, #0
 8004666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004668:	f002 0203 	and.w	r2, r2, #3
 800466c:	0092      	lsls	r2, r2, #2
 800466e:	4093      	lsls	r3, r2
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004676:	492f      	ldr	r1, [pc, #188]	; (8004734 <HAL_GPIO_Init+0x2bc>)
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	089b      	lsrs	r3, r3, #2
 800467c:	3302      	adds	r3, #2
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d006      	beq.n	800469e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004690:	4b2d      	ldr	r3, [pc, #180]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	492c      	ldr	r1, [pc, #176]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	4313      	orrs	r3, r2
 800469a:	600b      	str	r3, [r1, #0]
 800469c:	e006      	b.n	80046ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800469e:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	43db      	mvns	r3, r3
 80046a6:	4928      	ldr	r1, [pc, #160]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d006      	beq.n	80046c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80046b8:	4b23      	ldr	r3, [pc, #140]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	4922      	ldr	r1, [pc, #136]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
 80046c4:	e006      	b.n	80046d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80046c6:	4b20      	ldr	r3, [pc, #128]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	491e      	ldr	r1, [pc, #120]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d006      	beq.n	80046ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80046e0:	4b19      	ldr	r3, [pc, #100]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	4918      	ldr	r1, [pc, #96]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	608b      	str	r3, [r1, #8]
 80046ec:	e006      	b.n	80046fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046ee:	4b16      	ldr	r3, [pc, #88]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	4914      	ldr	r1, [pc, #80]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d021      	beq.n	800474c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004708:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	490e      	ldr	r1, [pc, #56]	; (8004748 <HAL_GPIO_Init+0x2d0>)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	4313      	orrs	r3, r2
 8004712:	60cb      	str	r3, [r1, #12]
 8004714:	e021      	b.n	800475a <HAL_GPIO_Init+0x2e2>
 8004716:	bf00      	nop
 8004718:	10320000 	.word	0x10320000
 800471c:	10310000 	.word	0x10310000
 8004720:	10220000 	.word	0x10220000
 8004724:	10210000 	.word	0x10210000
 8004728:	10120000 	.word	0x10120000
 800472c:	10110000 	.word	0x10110000
 8004730:	40021000 	.word	0x40021000
 8004734:	40010000 	.word	0x40010000
 8004738:	40010800 	.word	0x40010800
 800473c:	40010c00 	.word	0x40010c00
 8004740:	40011000 	.word	0x40011000
 8004744:	40011400 	.word	0x40011400
 8004748:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_GPIO_Init+0x304>)
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	43db      	mvns	r3, r3
 8004754:	4909      	ldr	r1, [pc, #36]	; (800477c <HAL_GPIO_Init+0x304>)
 8004756:	4013      	ands	r3, r2
 8004758:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	3301      	adds	r3, #1
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	fa22 f303 	lsr.w	r3, r2, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	f47f ae8e 	bne.w	800448c <HAL_GPIO_Init+0x14>
  }
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	372c      	adds	r7, #44	; 0x2c
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	40010400 	.word	0x40010400

08004780 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	887b      	ldrh	r3, [r7, #2]
 8004792:	4013      	ands	r3, r2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
 800479c:	e001      	b.n	80047a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr

080047ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	460b      	mov	r3, r1
 80047b8:	807b      	strh	r3, [r7, #2]
 80047ba:	4613      	mov	r3, r2
 80047bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047be:	787b      	ldrb	r3, [r7, #1]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047c4:	887a      	ldrh	r2, [r7, #2]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80047ca:	e003      	b.n	80047d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047cc:	887b      	ldrh	r3, [r7, #2]
 80047ce:	041a      	lsls	r2, r3, #16
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	611a      	str	r2, [r3, #16]
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr
	...

080047e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e304      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 8087 	beq.w	800490e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004800:	4b92      	ldr	r3, [pc, #584]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 030c 	and.w	r3, r3, #12
 8004808:	2b04      	cmp	r3, #4
 800480a:	d00c      	beq.n	8004826 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800480c:	4b8f      	ldr	r3, [pc, #572]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 030c 	and.w	r3, r3, #12
 8004814:	2b08      	cmp	r3, #8
 8004816:	d112      	bne.n	800483e <HAL_RCC_OscConfig+0x5e>
 8004818:	4b8c      	ldr	r3, [pc, #560]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004824:	d10b      	bne.n	800483e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004826:	4b89      	ldr	r3, [pc, #548]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d06c      	beq.n	800490c <HAL_RCC_OscConfig+0x12c>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d168      	bne.n	800490c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e2de      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004846:	d106      	bne.n	8004856 <HAL_RCC_OscConfig+0x76>
 8004848:	4b80      	ldr	r3, [pc, #512]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a7f      	ldr	r2, [pc, #508]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 800484e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	e02e      	b.n	80048b4 <HAL_RCC_OscConfig+0xd4>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10c      	bne.n	8004878 <HAL_RCC_OscConfig+0x98>
 800485e:	4b7b      	ldr	r3, [pc, #492]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a7a      	ldr	r2, [pc, #488]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	4b78      	ldr	r3, [pc, #480]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a77      	ldr	r2, [pc, #476]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e01d      	b.n	80048b4 <HAL_RCC_OscConfig+0xd4>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004880:	d10c      	bne.n	800489c <HAL_RCC_OscConfig+0xbc>
 8004882:	4b72      	ldr	r3, [pc, #456]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a71      	ldr	r2, [pc, #452]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	4b6f      	ldr	r3, [pc, #444]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a6e      	ldr	r2, [pc, #440]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e00b      	b.n	80048b4 <HAL_RCC_OscConfig+0xd4>
 800489c:	4b6b      	ldr	r3, [pc, #428]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a6a      	ldr	r2, [pc, #424]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 80048a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	4b68      	ldr	r3, [pc, #416]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a67      	ldr	r2, [pc, #412]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 80048ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d013      	beq.n	80048e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7fe fbf4 	bl	80030a8 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c4:	f7fe fbf0 	bl	80030a8 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e292      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d6:	4b5d      	ldr	r3, [pc, #372]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0xe4>
 80048e2:	e014      	b.n	800490e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7fe fbe0 	bl	80030a8 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ec:	f7fe fbdc 	bl	80030a8 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	; 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e27e      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048fe:	4b53      	ldr	r3, [pc, #332]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x10c>
 800490a:	e000      	b.n	800490e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d063      	beq.n	80049e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800491a:	4b4c      	ldr	r3, [pc, #304]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004926:	4b49      	ldr	r3, [pc, #292]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b08      	cmp	r3, #8
 8004930:	d11c      	bne.n	800496c <HAL_RCC_OscConfig+0x18c>
 8004932:	4b46      	ldr	r3, [pc, #280]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d116      	bne.n	800496c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493e:	4b43      	ldr	r3, [pc, #268]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_RCC_OscConfig+0x176>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d001      	beq.n	8004956 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e252      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004956:	4b3d      	ldr	r3, [pc, #244]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	4939      	ldr	r1, [pc, #228]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004966:	4313      	orrs	r3, r2
 8004968:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800496a:	e03a      	b.n	80049e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d020      	beq.n	80049b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004974:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497a:	f7fe fb95 	bl	80030a8 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004982:	f7fe fb91 	bl	80030a8 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e233      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004994:	4b2d      	ldr	r3, [pc, #180]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a0:	4b2a      	ldr	r3, [pc, #168]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	4927      	ldr	r1, [pc, #156]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	600b      	str	r3, [r1, #0]
 80049b4:	e015      	b.n	80049e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049b6:	4b26      	ldr	r3, [pc, #152]	; (8004a50 <HAL_RCC_OscConfig+0x270>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049bc:	f7fe fb74 	bl	80030a8 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049c4:	f7fe fb70 	bl	80030a8 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e212      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049d6:	4b1d      	ldr	r3, [pc, #116]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d03a      	beq.n	8004a64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d019      	beq.n	8004a2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049f6:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <HAL_RCC_OscConfig+0x274>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fc:	f7fe fb54 	bl	80030a8 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a04:	f7fe fb50 	bl	80030a8 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e1f2      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a16:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a22:	2001      	movs	r0, #1
 8004a24:	f000 fc50 	bl	80052c8 <RCC_Delay>
 8004a28:	e01c      	b.n	8004a64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <HAL_RCC_OscConfig+0x274>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a30:	f7fe fb3a 	bl	80030a8 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a36:	e00f      	b.n	8004a58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a38:	f7fe fb36 	bl	80030a8 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d908      	bls.n	8004a58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e1d8      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
 8004a4a:	bf00      	nop
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	42420000 	.word	0x42420000
 8004a54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a58:	4b9b      	ldr	r3, [pc, #620]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e9      	bne.n	8004a38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80a6 	beq.w	8004bbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a76:	4b94      	ldr	r3, [pc, #592]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10d      	bne.n	8004a9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a82:	4b91      	ldr	r3, [pc, #580]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	4a90      	ldr	r2, [pc, #576]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	61d3      	str	r3, [r2, #28]
 8004a8e:	4b8e      	ldr	r3, [pc, #568]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a96:	60bb      	str	r3, [r7, #8]
 8004a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9e:	4b8b      	ldr	r3, [pc, #556]	; (8004ccc <HAL_RCC_OscConfig+0x4ec>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d118      	bne.n	8004adc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aaa:	4b88      	ldr	r3, [pc, #544]	; (8004ccc <HAL_RCC_OscConfig+0x4ec>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a87      	ldr	r2, [pc, #540]	; (8004ccc <HAL_RCC_OscConfig+0x4ec>)
 8004ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ab6:	f7fe faf7 	bl	80030a8 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004abe:	f7fe faf3 	bl	80030a8 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b64      	cmp	r3, #100	; 0x64
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e195      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad0:	4b7e      	ldr	r3, [pc, #504]	; (8004ccc <HAL_RCC_OscConfig+0x4ec>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCC_OscConfig+0x312>
 8004ae4:	4b78      	ldr	r3, [pc, #480]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	4a77      	ldr	r2, [pc, #476]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	6213      	str	r3, [r2, #32]
 8004af0:	e02d      	b.n	8004b4e <HAL_RCC_OscConfig+0x36e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x334>
 8004afa:	4b73      	ldr	r3, [pc, #460]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	4a72      	ldr	r2, [pc, #456]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	6213      	str	r3, [r2, #32]
 8004b06:	4b70      	ldr	r3, [pc, #448]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	4a6f      	ldr	r2, [pc, #444]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b0c:	f023 0304 	bic.w	r3, r3, #4
 8004b10:	6213      	str	r3, [r2, #32]
 8004b12:	e01c      	b.n	8004b4e <HAL_RCC_OscConfig+0x36e>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2b05      	cmp	r3, #5
 8004b1a:	d10c      	bne.n	8004b36 <HAL_RCC_OscConfig+0x356>
 8004b1c:	4b6a      	ldr	r3, [pc, #424]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	4a69      	ldr	r2, [pc, #420]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b22:	f043 0304 	orr.w	r3, r3, #4
 8004b26:	6213      	str	r3, [r2, #32]
 8004b28:	4b67      	ldr	r3, [pc, #412]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	4a66      	ldr	r2, [pc, #408]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	6213      	str	r3, [r2, #32]
 8004b34:	e00b      	b.n	8004b4e <HAL_RCC_OscConfig+0x36e>
 8004b36:	4b64      	ldr	r3, [pc, #400]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	4a63      	ldr	r2, [pc, #396]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b3c:	f023 0301 	bic.w	r3, r3, #1
 8004b40:	6213      	str	r3, [r2, #32]
 8004b42:	4b61      	ldr	r3, [pc, #388]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	4a60      	ldr	r2, [pc, #384]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b48:	f023 0304 	bic.w	r3, r3, #4
 8004b4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d015      	beq.n	8004b82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b56:	f7fe faa7 	bl	80030a8 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5c:	e00a      	b.n	8004b74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5e:	f7fe faa3 	bl	80030a8 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e143      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b74:	4b54      	ldr	r3, [pc, #336]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ee      	beq.n	8004b5e <HAL_RCC_OscConfig+0x37e>
 8004b80:	e014      	b.n	8004bac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b82:	f7fe fa91 	bl	80030a8 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b88:	e00a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8a:	f7fe fa8d 	bl	80030a8 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e12d      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba0:	4b49      	ldr	r3, [pc, #292]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1ee      	bne.n	8004b8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d105      	bne.n	8004bbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb2:	4b45      	ldr	r3, [pc, #276]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	4a44      	ldr	r2, [pc, #272]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 808c 	beq.w	8004ce0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004bc8:	4b3f      	ldr	r3, [pc, #252]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd4:	d10e      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004bd6:	4b3c      	ldr	r3, [pc, #240]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d108      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8004be2:	4b39      	ldr	r3, [pc, #228]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bee:	d101      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e103      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d14e      	bne.n	8004c9a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004bfc:	4b32      	ldr	r3, [pc, #200]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d009      	beq.n	8004c1c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004c08:	4b2f      	ldr	r3, [pc, #188]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0ef      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004c1c:	4b2c      	ldr	r3, [pc, #176]	; (8004cd0 <HAL_RCC_OscConfig+0x4f0>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c22:	f7fe fa41 	bl	80030a8 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c2a:	f7fe fa3d 	bl	80030a8 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b64      	cmp	r3, #100	; 0x64
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e0df      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004c3c:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004c48:	4b1f      	ldr	r3, [pc, #124]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c54:	491c      	ldr	r1, [pc, #112]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	4918      	ldr	r1, [pc, #96]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004c6c:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <HAL_RCC_OscConfig+0x4f0>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c72:	f7fe fa19 	bl	80030a8 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c7a:	f7fe fa15 	bl	80030a8 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b64      	cmp	r3, #100	; 0x64
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e0b7      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004c8c:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0f0      	beq.n	8004c7a <HAL_RCC_OscConfig+0x49a>
 8004c98:	e022      	b.n	8004ce0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8004c9a:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <HAL_RCC_OscConfig+0x4f0>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cac:	f7fe f9fc 	bl	80030a8 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004cb2:	e00f      	b.n	8004cd4 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cb4:	f7fe f9f8 	bl	80030a8 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	; 0x64
 8004cc0:	d908      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e09a      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	40007000 	.word	0x40007000
 8004cd0:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004cd4:	4b4b      	ldr	r3, [pc, #300]	; (8004e04 <HAL_RCC_OscConfig+0x624>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e9      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 8088 	beq.w	8004dfa <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cea:	4b46      	ldr	r3, [pc, #280]	; (8004e04 <HAL_RCC_OscConfig+0x624>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 030c 	and.w	r3, r3, #12
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d068      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d14d      	bne.n	8004d9a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfe:	4b42      	ldr	r3, [pc, #264]	; (8004e08 <HAL_RCC_OscConfig+0x628>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d04:	f7fe f9d0 	bl	80030a8 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fe f9cc 	bl	80030a8 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e06e      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d1e:	4b39      	ldr	r3, [pc, #228]	; (8004e04 <HAL_RCC_OscConfig+0x624>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d32:	d10f      	bne.n	8004d54 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004d34:	4b33      	ldr	r3, [pc, #204]	; (8004e04 <HAL_RCC_OscConfig+0x624>)
 8004d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4931      	ldr	r1, [pc, #196]	; (8004e04 <HAL_RCC_OscConfig+0x624>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d42:	4b30      	ldr	r3, [pc, #192]	; (8004e04 <HAL_RCC_OscConfig+0x624>)
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	f023 020f 	bic.w	r2, r3, #15
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	492d      	ldr	r1, [pc, #180]	; (8004e04 <HAL_RCC_OscConfig+0x624>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d54:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <HAL_RCC_OscConfig+0x624>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	430b      	orrs	r3, r1
 8004d66:	4927      	ldr	r1, [pc, #156]	; (8004e04 <HAL_RCC_OscConfig+0x624>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d6c:	4b26      	ldr	r3, [pc, #152]	; (8004e08 <HAL_RCC_OscConfig+0x628>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d72:	f7fe f999 	bl	80030a8 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7a:	f7fe f995 	bl	80030a8 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e037      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d8c:	4b1d      	ldr	r3, [pc, #116]	; (8004e04 <HAL_RCC_OscConfig+0x624>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <HAL_RCC_OscConfig+0x59a>
 8004d98:	e02f      	b.n	8004dfa <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9a:	4b1b      	ldr	r3, [pc, #108]	; (8004e08 <HAL_RCC_OscConfig+0x628>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da0:	f7fe f982 	bl	80030a8 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da8:	f7fe f97e 	bl	80030a8 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e020      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dba:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <HAL_RCC_OscConfig+0x624>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x5c8>
 8004dc6:	e018      	b.n	8004dfa <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e013      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_RCC_OscConfig+0x624>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d106      	bne.n	8004df6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40021000 	.word	0x40021000
 8004e08:	42420060 	.word	0x42420060

08004e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0d0      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e20:	4b6a      	ldr	r3, [pc, #424]	; (8004fcc <HAL_RCC_ClockConfig+0x1c0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d910      	bls.n	8004e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b67      	ldr	r3, [pc, #412]	; (8004fcc <HAL_RCC_ClockConfig+0x1c0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 0207 	bic.w	r2, r3, #7
 8004e36:	4965      	ldr	r1, [pc, #404]	; (8004fcc <HAL_RCC_ClockConfig+0x1c0>)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3e:	4b63      	ldr	r3, [pc, #396]	; (8004fcc <HAL_RCC_ClockConfig+0x1c0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e0b8      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d020      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e68:	4b59      	ldr	r3, [pc, #356]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	4a58      	ldr	r2, [pc, #352]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e80:	4b53      	ldr	r3, [pc, #332]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	4a52      	ldr	r2, [pc, #328]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e8c:	4b50      	ldr	r3, [pc, #320]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	494d      	ldr	r1, [pc, #308]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d040      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d107      	bne.n	8004ec2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb2:	4b47      	ldr	r3, [pc, #284]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d115      	bne.n	8004eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e07f      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d107      	bne.n	8004eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eca:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e073      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eda:	4b3d      	ldr	r3, [pc, #244]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e06b      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eea:	4b39      	ldr	r3, [pc, #228]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f023 0203 	bic.w	r2, r3, #3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4936      	ldr	r1, [pc, #216]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004efc:	f7fe f8d4 	bl	80030a8 <HAL_GetTick>
 8004f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f02:	e00a      	b.n	8004f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f04:	f7fe f8d0 	bl	80030a8 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e053      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1a:	4b2d      	ldr	r3, [pc, #180]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 020c 	and.w	r2, r3, #12
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d1eb      	bne.n	8004f04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f2c:	4b27      	ldr	r3, [pc, #156]	; (8004fcc <HAL_RCC_ClockConfig+0x1c0>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d210      	bcs.n	8004f5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3a:	4b24      	ldr	r3, [pc, #144]	; (8004fcc <HAL_RCC_ClockConfig+0x1c0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f023 0207 	bic.w	r2, r3, #7
 8004f42:	4922      	ldr	r1, [pc, #136]	; (8004fcc <HAL_RCC_ClockConfig+0x1c0>)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4a:	4b20      	ldr	r3, [pc, #128]	; (8004fcc <HAL_RCC_ClockConfig+0x1c0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d001      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e032      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f68:	4b19      	ldr	r3, [pc, #100]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4916      	ldr	r1, [pc, #88]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d009      	beq.n	8004f9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f86:	4b12      	ldr	r3, [pc, #72]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	490e      	ldr	r1, [pc, #56]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f9a:	f000 f821 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	490a      	ldr	r1, [pc, #40]	; (8004fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fac:	5ccb      	ldrb	r3, [r1, r3]
 8004fae:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb2:	4a09      	ldr	r2, [pc, #36]	; (8004fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8004fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fb6:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <HAL_RCC_ClockConfig+0x1d0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fd feb0 	bl	8002d20 <HAL_InitTick>

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40022000 	.word	0x40022000
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	0800d938 	.word	0x0800d938
 8004fd8:	20000000 	.word	0x20000000
 8004fdc:	20000004 	.word	0x20000004

08004fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe4:	b09d      	sub	sp, #116	; 0x74
 8004fe6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8004fe8:	4b81      	ldr	r3, [pc, #516]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x210>)
 8004fea:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8004fee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ff0:	c407      	stmia	r4!, {r0, r1, r2}
 8004ff2:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8004ff4:	4b7f      	ldr	r3, [pc, #508]	; (80051f4 <HAL_RCC_GetSysClockFreq+0x214>)
 8004ff6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8004ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	667b      	str	r3, [r7, #100]	; 0x64
 8005004:	2300      	movs	r3, #0
 8005006:	663b      	str	r3, [r7, #96]	; 0x60
 8005008:	2300      	movs	r3, #0
 800500a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800500c:	2300      	movs	r3, #0
 800500e:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	65bb      	str	r3, [r7, #88]	; 0x58
 8005018:	2300      	movs	r3, #0
 800501a:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800501c:	4b76      	ldr	r3, [pc, #472]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x218>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005024:	f003 030c 	and.w	r3, r3, #12
 8005028:	2b04      	cmp	r3, #4
 800502a:	d002      	beq.n	8005032 <HAL_RCC_GetSysClockFreq+0x52>
 800502c:	2b08      	cmp	r3, #8
 800502e:	d003      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0x58>
 8005030:	e0d4      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005032:	4b72      	ldr	r3, [pc, #456]	; (80051fc <HAL_RCC_GetSysClockFreq+0x21c>)
 8005034:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8005036:	e0d4      	b.n	80051e2 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800503a:	0c9b      	lsrs	r3, r3, #18
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	3340      	adds	r3, #64	; 0x40
 8005042:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005046:	4413      	add	r3, r2
 8005048:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800504c:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800504e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80b9 	beq.w	80051cc <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800505a:	4b67      	ldr	r3, [pc, #412]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x218>)
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	3340      	adds	r3, #64	; 0x40
 8005064:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005068:	4413      	add	r3, r2
 800506a:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800506e:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005070:	4b61      	ldr	r3, [pc, #388]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x218>)
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8095 	beq.w	80051a8 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800507e:	4b5e      	ldr	r3, [pc, #376]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x218>)
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	091b      	lsrs	r3, r3, #4
 8005084:	f003 030f 	and.w	r3, r3, #15
 8005088:	3301      	adds	r3, #1
 800508a:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800508c:	4b5a      	ldr	r3, [pc, #360]	; (80051f8 <HAL_RCC_GetSysClockFreq+0x218>)
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	0a1b      	lsrs	r3, r3, #8
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	3302      	adds	r3, #2
 8005098:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800509a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800509c:	2200      	movs	r2, #0
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	61fa      	str	r2, [r7, #28]
 80050a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050a4:	2200      	movs	r2, #0
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050aa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80050ae:	4622      	mov	r2, r4
 80050b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80050b4:	4684      	mov	ip, r0
 80050b6:	fb0c f202 	mul.w	r2, ip, r2
 80050ba:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80050be:	468c      	mov	ip, r1
 80050c0:	4618      	mov	r0, r3
 80050c2:	4621      	mov	r1, r4
 80050c4:	4603      	mov	r3, r0
 80050c6:	fb03 f30c 	mul.w	r3, r3, ip
 80050ca:	4413      	add	r3, r2
 80050cc:	4602      	mov	r2, r0
 80050ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050d0:	fba2 8901 	umull	r8, r9, r2, r1
 80050d4:	444b      	add	r3, r9
 80050d6:	4699      	mov	r9, r3
 80050d8:	4642      	mov	r2, r8
 80050da:	464b      	mov	r3, r9
 80050dc:	f04f 0000 	mov.w	r0, #0
 80050e0:	f04f 0100 	mov.w	r1, #0
 80050e4:	0159      	lsls	r1, r3, #5
 80050e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ea:	0150      	lsls	r0, r2, #5
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	ebb2 0508 	subs.w	r5, r2, r8
 80050f4:	eb63 0609 	sbc.w	r6, r3, r9
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	01b3      	lsls	r3, r6, #6
 8005102:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 8005106:	01aa      	lsls	r2, r5, #6
 8005108:	ebb2 0a05 	subs.w	sl, r2, r5
 800510c:	eb63 0b06 	sbc.w	fp, r3, r6
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800511c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005124:	4692      	mov	sl, r2
 8005126:	469b      	mov	fp, r3
 8005128:	eb1a 0308 	adds.w	r3, sl, r8
 800512c:	603b      	str	r3, [r7, #0]
 800512e:	eb4b 0309 	adc.w	r3, fp, r9
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005140:	4629      	mov	r1, r5
 8005142:	024b      	lsls	r3, r1, #9
 8005144:	4620      	mov	r0, r4
 8005146:	4629      	mov	r1, r5
 8005148:	4604      	mov	r4, r0
 800514a:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800514e:	4601      	mov	r1, r0
 8005150:	024a      	lsls	r2, r1, #9
 8005152:	4610      	mov	r0, r2
 8005154:	4619      	mov	r1, r3
 8005156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005158:	2200      	movs	r2, #0
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	617a      	str	r2, [r7, #20]
 800515e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005160:	2200      	movs	r2, #0
 8005162:	60bb      	str	r3, [r7, #8]
 8005164:	60fa      	str	r2, [r7, #12]
 8005166:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800516a:	4622      	mov	r2, r4
 800516c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8005170:	4645      	mov	r5, r8
 8005172:	fb05 f202 	mul.w	r2, r5, r2
 8005176:	464e      	mov	r6, r9
 8005178:	4625      	mov	r5, r4
 800517a:	461c      	mov	r4, r3
 800517c:	4623      	mov	r3, r4
 800517e:	fb03 f306 	mul.w	r3, r3, r6
 8005182:	4413      	add	r3, r2
 8005184:	4622      	mov	r2, r4
 8005186:	4644      	mov	r4, r8
 8005188:	fba2 2404 	umull	r2, r4, r2, r4
 800518c:	627c      	str	r4, [r7, #36]	; 0x24
 800518e:	623a      	str	r2, [r7, #32]
 8005190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005192:	4413      	add	r3, r2
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
 8005196:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800519a:	f7fb ffd3 	bl	8001144 <__aeabi_uldivmod>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4613      	mov	r3, r2
 80051a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051a6:	e007      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80051a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051aa:	4a14      	ldr	r2, [pc, #80]	; (80051fc <HAL_RCC_GetSysClockFreq+0x21c>)
 80051ac:	fb03 f202 	mul.w	r2, r3, r2
 80051b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b6:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80051b8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80051bc:	461a      	mov	r2, r3
 80051be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d108      	bne.n	80051d6 <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 80051c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c6:	085b      	lsrs	r3, r3, #1
 80051c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051ca:	e004      	b.n	80051d6 <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ce:	4a0c      	ldr	r2, [pc, #48]	; (8005200 <HAL_RCC_GetSysClockFreq+0x220>)
 80051d0:	fb02 f303 	mul.w	r3, r2, r3
 80051d4:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 80051d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d8:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80051da:	e002      	b.n	80051e2 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051dc:	4b07      	ldr	r3, [pc, #28]	; (80051fc <HAL_RCC_GetSysClockFreq+0x21c>)
 80051de:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80051e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3774      	adds	r7, #116	; 0x74
 80051e8:	46bd      	mov	sp, r7
 80051ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ee:	bf00      	nop
 80051f0:	0800d8f0 	.word	0x0800d8f0
 80051f4:	0800d900 	.word	0x0800d900
 80051f8:	40021000 	.word	0x40021000
 80051fc:	007a1200 	.word	0x007a1200
 8005200:	003d0900 	.word	0x003d0900

08005204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005208:	4b02      	ldr	r3, [pc, #8]	; (8005214 <HAL_RCC_GetHCLKFreq+0x10>)
 800520a:	681b      	ldr	r3, [r3, #0]
}
 800520c:	4618      	mov	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr
 8005214:	20000000 	.word	0x20000000

08005218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800521c:	f7ff fff2 	bl	8005204 <HAL_RCC_GetHCLKFreq>
 8005220:	4602      	mov	r2, r0
 8005222:	4b05      	ldr	r3, [pc, #20]	; (8005238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	4903      	ldr	r1, [pc, #12]	; (800523c <HAL_RCC_GetPCLK1Freq+0x24>)
 800522e:	5ccb      	ldrb	r3, [r1, r3]
 8005230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005234:	4618      	mov	r0, r3
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40021000 	.word	0x40021000
 800523c:	0800d948 	.word	0x0800d948

08005240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005244:	f7ff ffde 	bl	8005204 <HAL_RCC_GetHCLKFreq>
 8005248:	4602      	mov	r2, r0
 800524a:	4b05      	ldr	r3, [pc, #20]	; (8005260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	0adb      	lsrs	r3, r3, #11
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	4903      	ldr	r1, [pc, #12]	; (8005264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005256:	5ccb      	ldrb	r3, [r1, r3]
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800525c:	4618      	mov	r0, r3
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40021000 	.word	0x40021000
 8005264:	0800d948 	.word	0x0800d948

08005268 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	220f      	movs	r2, #15
 8005276:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005278:	4b11      	ldr	r3, [pc, #68]	; (80052c0 <HAL_RCC_GetClockConfig+0x58>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f003 0203 	and.w	r2, r3, #3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005284:	4b0e      	ldr	r3, [pc, #56]	; (80052c0 <HAL_RCC_GetClockConfig+0x58>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <HAL_RCC_GetClockConfig+0x58>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800529c:	4b08      	ldr	r3, [pc, #32]	; (80052c0 <HAL_RCC_GetClockConfig+0x58>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	08db      	lsrs	r3, r3, #3
 80052a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052aa:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <HAL_RCC_GetClockConfig+0x5c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0207 	and.w	r2, r3, #7
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr
 80052c0:	40021000 	.word	0x40021000
 80052c4:	40022000 	.word	0x40022000

080052c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052d0:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <RCC_Delay+0x34>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <RCC_Delay+0x38>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	0a5b      	lsrs	r3, r3, #9
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	fb02 f303 	mul.w	r3, r2, r3
 80052e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052e4:	bf00      	nop
  }
  while (Delay --);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1e5a      	subs	r2, r3, #1
 80052ea:	60fa      	str	r2, [r7, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1f9      	bne.n	80052e4 <RCC_Delay+0x1c>
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr
 80052fc:	20000000 	.word	0x20000000
 8005300:	10624dd3 	.word	0x10624dd3

08005304 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	2300      	movs	r3, #0
 8005312:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d07d      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005324:	2300      	movs	r3, #0
 8005326:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005328:	4b8b      	ldr	r3, [pc, #556]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10d      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005334:	4b88      	ldr	r3, [pc, #544]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	4a87      	ldr	r2, [pc, #540]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800533a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533e:	61d3      	str	r3, [r2, #28]
 8005340:	4b85      	ldr	r3, [pc, #532]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800534c:	2301      	movs	r3, #1
 800534e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005350:	4b82      	ldr	r3, [pc, #520]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d118      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800535c:	4b7f      	ldr	r3, [pc, #508]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a7e      	ldr	r2, [pc, #504]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005366:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005368:	f7fd fe9e 	bl	80030a8 <HAL_GetTick>
 800536c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536e:	e008      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005370:	f7fd fe9a 	bl	80030a8 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b64      	cmp	r3, #100	; 0x64
 800537c:	d901      	bls.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e0e5      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005382:	4b76      	ldr	r3, [pc, #472]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800538e:	4b72      	ldr	r3, [pc, #456]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005396:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02e      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d027      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053ac:	4b6a      	ldr	r3, [pc, #424]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053b6:	4b6a      	ldr	r3, [pc, #424]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80053b8:	2201      	movs	r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053bc:	4b68      	ldr	r3, [pc, #416]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053c2:	4a65      	ldr	r2, [pc, #404]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d014      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d2:	f7fd fe69 	bl	80030a8 <HAL_GetTick>
 80053d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d8:	e00a      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053da:	f7fd fe65 	bl	80030a8 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e0ae      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f0:	4b59      	ldr	r3, [pc, #356]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0ee      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053fc:	4b56      	ldr	r3, [pc, #344]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	4953      	ldr	r1, [pc, #332]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800540a:	4313      	orrs	r3, r2
 800540c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800540e:	7efb      	ldrb	r3, [r7, #27]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d105      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005414:	4b50      	ldr	r3, [pc, #320]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	4a4f      	ldr	r2, [pc, #316]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800541a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800541e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800542c:	4b4a      	ldr	r3, [pc, #296]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	4947      	ldr	r1, [pc, #284]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800543a:	4313      	orrs	r3, r2
 800543c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	d008      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800544a:	4b43      	ldr	r3, [pc, #268]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	4940      	ldr	r1, [pc, #256]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005458:	4313      	orrs	r3, r2
 800545a:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005468:	4b3b      	ldr	r3, [pc, #236]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	4938      	ldr	r1, [pc, #224]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005476:	4313      	orrs	r3, r2
 8005478:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800547a:	4b37      	ldr	r3, [pc, #220]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d105      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005486:	4b34      	ldr	r3, [pc, #208]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8005492:	2301      	movs	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d148      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 800549c:	4b2e      	ldr	r3, [pc, #184]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d138      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80054a8:	4b2b      	ldr	r3, [pc, #172]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d009      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80054b4:	4b28      	ldr	r3, [pc, #160]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e042      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80054c8:	4b23      	ldr	r3, [pc, #140]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	4920      	ldr	r1, [pc, #128]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80054da:	4b1f      	ldr	r3, [pc, #124]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054de:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	491c      	ldr	r1, [pc, #112]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80054ec:	4b1d      	ldr	r3, [pc, #116]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f2:	f7fd fdd9 	bl	80030a8 <HAL_GetTick>
 80054f6:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054f8:	e008      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054fa:	f7fd fdd5 	bl	80030a8 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b64      	cmp	r3, #100	; 0x64
 8005506:	d901      	bls.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e020      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800550c:	4b12      	ldr	r3, [pc, #72]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005518:	e009      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800551a:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	429a      	cmp	r2, r3
 8005528:	d001      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e00f      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	2b00      	cmp	r3, #0
 8005538:	d008      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800553a:	4b07      	ldr	r3, [pc, #28]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	4904      	ldr	r1, [pc, #16]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005548:	4313      	orrs	r3, r2
 800554a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3720      	adds	r7, #32
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000
 800555c:	40007000 	.word	0x40007000
 8005560:	42420440 	.word	0x42420440
 8005564:	42420070 	.word	0x42420070

08005568 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b093      	sub	sp, #76	; 0x4c
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8005570:	4ba8      	ldr	r3, [pc, #672]	; (8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8005572:	f107 0418 	add.w	r4, r7, #24
 8005576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005578:	c407      	stmia	r4!, {r0, r1, r2}
 800557a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800557c:	4ba6      	ldr	r3, [pc, #664]	; (8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800557e:	f107 0408 	add.w	r4, r7, #8
 8005582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800558c:	2300      	movs	r3, #0
 800558e:	647b      	str	r3, [r7, #68]	; 0x44
 8005590:	2300      	movs	r3, #0
 8005592:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	637b      	str	r3, [r7, #52]	; 0x34
 8005598:	2300      	movs	r3, #0
 800559a:	633b      	str	r3, [r7, #48]	; 0x30
 800559c:	2300      	movs	r3, #0
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a4:	2300      	movs	r3, #0
 80055a6:	643b      	str	r3, [r7, #64]	; 0x40

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	2b0f      	cmp	r3, #15
 80055ae:	f200 8122 	bhi.w	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 80055b2:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	08005775 	.word	0x08005775
 80055bc:	080057db 	.word	0x080057db
 80055c0:	080057f7 	.word	0x080057f7
 80055c4:	080056d3 	.word	0x080056d3
 80055c8:	080057f7 	.word	0x080057f7
 80055cc:	080057f7 	.word	0x080057f7
 80055d0:	080057f7 	.word	0x080057f7
 80055d4:	08005725 	.word	0x08005725
 80055d8:	080057f7 	.word	0x080057f7
 80055dc:	080057f7 	.word	0x080057f7
 80055e0:	080057f7 	.word	0x080057f7
 80055e4:	080057f7 	.word	0x080057f7
 80055e8:	080057f7 	.word	0x080057f7
 80055ec:	080057f7 	.word	0x080057f7
 80055f0:	080057f7 	.word	0x080057f7
 80055f4:	080055f9 	.word	0x080055f9
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80055f8:	4b88      	ldr	r3, [pc, #544]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80055fe:	4b87      	ldr	r3, [pc, #540]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 80f7 	beq.w	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	0c9b      	lsrs	r3, r3, #18
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	3348      	adds	r3, #72	; 0x48
 8005616:	443b      	add	r3, r7
 8005618:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800561c:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d03d      	beq.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005628:	4b7c      	ldr	r3, [pc, #496]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	3348      	adds	r3, #72	; 0x48
 8005632:	443b      	add	r3, r7
 8005634:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8005638:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800563a:	4b78      	ldr	r3, [pc, #480]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01c      	beq.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005646:	4b75      	ldr	r3, [pc, #468]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	091b      	lsrs	r3, r3, #4
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	3301      	adds	r3, #1
 8005652:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005654:	4b71      	ldr	r3, [pc, #452]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	0a1b      	lsrs	r3, r3, #8
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	3302      	adds	r3, #2
 8005660:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8005662:	4a6f      	ldr	r2, [pc, #444]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005666:	fbb2 f3f3 	udiv	r3, r2, r3
 800566a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800566c:	fb03 f202 	mul.w	r2, r3, r2
 8005670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005672:	fbb2 f2f3 	udiv	r2, r2, r3
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	fb02 f303 	mul.w	r3, r2, r3
 800567c:	647b      	str	r3, [r7, #68]	; 0x44
 800567e:	e007      	b.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005680:	4a67      	ldr	r2, [pc, #412]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005684:	fbb2 f2f3 	udiv	r2, r2, r3
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	fb02 f303 	mul.w	r3, r2, r3
 800568e:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005690:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005694:	461a      	mov	r2, r3
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	4293      	cmp	r3, r2
 800569a:	d108      	bne.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            pllclk = pllclk / 2;
 800569c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800569e:	085b      	lsrs	r3, r3, #1
 80056a0:	647b      	str	r3, [r7, #68]	; 0x44
 80056a2:	e004      	b.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a6:	4a5f      	ldr	r2, [pc, #380]	; (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80056a8:	fb02 f303 	mul.w	r3, r2, r3
 80056ac:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 80056ae:	4b5b      	ldr	r3, [pc, #364]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ba:	d102      	bne.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 80056bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056be:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80056c0:	e09b      	b.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
          frequency = (2 * pllclk) / 3;
 80056c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	4a58      	ldr	r2, [pc, #352]	; (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80056d0:	e093      	b.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 80056d2:	4b52      	ldr	r3, [pc, #328]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d103      	bne.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 80056de:	f7ff fc7f 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 80056e2:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80056e4:	e08b      	b.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x296>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80056e6:	4b4d      	ldr	r3, [pc, #308]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 8085 	beq.w	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80056f4:	4b49      	ldr	r3, [pc, #292]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	091b      	lsrs	r3, r3, #4
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	3301      	adds	r3, #1
 8005700:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8005702:	4b46      	ldr	r3, [pc, #280]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	0b1b      	lsrs	r3, r3, #12
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	3302      	adds	r3, #2
 800570e:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8005710:	4a43      	ldr	r2, [pc, #268]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	fbb2 f3f3 	udiv	r3, r2, r3
 8005718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571a:	fb02 f303 	mul.w	r3, r2, r3
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005722:	e06c      	b.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8005724:	4b3d      	ldr	r3, [pc, #244]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d103      	bne.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8005730:	f7ff fc56 	bl	8004fe0 <HAL_RCC_GetSysClockFreq>
 8005734:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005736:	e064      	b.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8005738:	4b38      	ldr	r3, [pc, #224]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d05e      	beq.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005744:	4b35      	ldr	r3, [pc, #212]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	091b      	lsrs	r3, r3, #4
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	3301      	adds	r3, #1
 8005750:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8005752:	4b32      	ldr	r3, [pc, #200]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	0b1b      	lsrs	r3, r3, #12
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	3302      	adds	r3, #2
 800575e:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8005760:	4a2f      	ldr	r2, [pc, #188]	; (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005764:	fbb2 f3f3 	udiv	r3, r2, r3
 8005768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800576a:	fb02 f303 	mul.w	r3, r2, r3
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005772:	e046      	b.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005774:	4b29      	ldr	r3, [pc, #164]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005784:	d108      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSE_VALUE;
 8005790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005794:	643b      	str	r3, [r7, #64]	; 0x40
 8005796:	e01f      	b.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a2:	d109      	bne.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 80057a4:	4b1d      	ldr	r3, [pc, #116]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
      {
        frequency = LSI_VALUE;
 80057b0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80057b4:	643b      	str	r3, [r7, #64]	; 0x40
 80057b6:	e00f      	b.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c2:	d120      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 80057c4:	4b15      	ldr	r3, [pc, #84]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01a      	beq.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
      {
        frequency = HSE_VALUE / 128U;
 80057d0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80057d4:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80057d6:	e016      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 80057d8:	e015      	b.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80057da:	f7ff fd31 	bl	8005240 <HAL_RCC_GetPCLK2Freq>
 80057de:	4602      	mov	r2, r0
 80057e0:	4b0e      	ldr	r3, [pc, #56]	; (800581c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	0b9b      	lsrs	r3, r3, #14
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	3301      	adds	r3, #1
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f2:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80057f4:	e008      	b.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
    }
    default:
    {
      break;
 80057f6:	bf00      	nop
 80057f8:	e006      	b.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 80057fa:	bf00      	nop
 80057fc:	e004      	b.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 80057fe:	bf00      	nop
 8005800:	e002      	b.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 8005802:	bf00      	nop
 8005804:	e000      	b.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      break;
 8005806:	bf00      	nop
    }
  }
  return (frequency);
 8005808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800580a:	4618      	mov	r0, r3
 800580c:	374c      	adds	r7, #76	; 0x4c
 800580e:	46bd      	mov	sp, r7
 8005810:	bd90      	pop	{r4, r7, pc}
 8005812:	bf00      	nop
 8005814:	0800d910 	.word	0x0800d910
 8005818:	0800d920 	.word	0x0800d920
 800581c:	40021000 	.word	0x40021000
 8005820:	007a1200 	.word	0x007a1200
 8005824:	003d0900 	.word	0x003d0900
 8005828:	aaaaaaab 	.word	0xaaaaaaab

0800582c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e076      	b.n	800592c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800584e:	d009      	beq.n	8005864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	61da      	str	r2, [r3, #28]
 8005856:	e005      	b.n	8005864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fd f93c 	bl	8002afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800589a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e8:	ea42 0103 	orr.w	r1, r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	0c1a      	lsrs	r2, r3, #16
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f002 0204 	and.w	r2, r2, #4
 800590a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69da      	ldr	r2, [r3, #28]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800591a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	4613      	mov	r3, r2
 8005942:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_SPI_Transmit+0x22>
 8005952:	2302      	movs	r3, #2
 8005954:	e126      	b.n	8005ba4 <HAL_SPI_Transmit+0x270>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800595e:	f7fd fba3 	bl	80030a8 <HAL_GetTick>
 8005962:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b01      	cmp	r3, #1
 8005972:	d002      	beq.n	800597a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005974:	2302      	movs	r3, #2
 8005976:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005978:	e10b      	b.n	8005b92 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_SPI_Transmit+0x52>
 8005980:	88fb      	ldrh	r3, [r7, #6]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	77fb      	strb	r3, [r7, #31]
    goto error;
 800598a:	e102      	b.n	8005b92 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2203      	movs	r2, #3
 8005990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	88fa      	ldrh	r2, [r7, #6]
 80059a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	88fa      	ldrh	r2, [r7, #6]
 80059aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d2:	d10f      	bne.n	80059f4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b40      	cmp	r3, #64	; 0x40
 8005a00:	d007      	beq.n	8005a12 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a1a:	d14b      	bne.n	8005ab4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <HAL_SPI_Transmit+0xf6>
 8005a24:	8afb      	ldrh	r3, [r7, #22]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d13e      	bne.n	8005aa8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	881a      	ldrh	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3a:	1c9a      	adds	r2, r3, #2
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a4e:	e02b      	b.n	8005aa8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d112      	bne.n	8005a84 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	881a      	ldrh	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	1c9a      	adds	r2, r3, #2
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a82:	e011      	b.n	8005aa8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a84:	f7fd fb10 	bl	80030a8 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d803      	bhi.n	8005a9c <HAL_SPI_Transmit+0x168>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9a:	d102      	bne.n	8005aa2 <HAL_SPI_Transmit+0x16e>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005aa6:	e074      	b.n	8005b92 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1ce      	bne.n	8005a50 <HAL_SPI_Transmit+0x11c>
 8005ab2:	e04c      	b.n	8005b4e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_SPI_Transmit+0x18e>
 8005abc:	8afb      	ldrh	r3, [r7, #22]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d140      	bne.n	8005b44 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	330c      	adds	r3, #12
 8005acc:	7812      	ldrb	r2, [r2, #0]
 8005ace:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ae8:	e02c      	b.n	8005b44 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d113      	bne.n	8005b20 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	330c      	adds	r3, #12
 8005b02:	7812      	ldrb	r2, [r2, #0]
 8005b04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b1e:	e011      	b.n	8005b44 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b20:	f7fd fac2 	bl	80030a8 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d803      	bhi.n	8005b38 <HAL_SPI_Transmit+0x204>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	d102      	bne.n	8005b3e <HAL_SPI_Transmit+0x20a>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d102      	bne.n	8005b44 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b42:	e026      	b.n	8005b92 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1cd      	bne.n	8005aea <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 fbb8 	bl	80062c8 <SPI_EndRxTxTransaction>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	613b      	str	r3, [r7, #16]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	77fb      	strb	r3, [r7, #31]
 8005b8e:	e000      	b.n	8005b92 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005b90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ba2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3720      	adds	r7, #32
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	603b      	str	r3, [r7, #0]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bc8:	d112      	bne.n	8005bf0 <HAL_SPI_Receive+0x44>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2204      	movs	r2, #4
 8005bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005bda:	88fa      	ldrh	r2, [r7, #6]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 f8f1 	bl	8005dce <HAL_SPI_TransmitReceive>
 8005bec:	4603      	mov	r3, r0
 8005bee:	e0ea      	b.n	8005dc6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_SPI_Receive+0x52>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e0e3      	b.n	8005dc6 <HAL_SPI_Receive+0x21a>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c06:	f7fd fa4f 	bl	80030a8 <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d002      	beq.n	8005c1e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005c18:	2302      	movs	r3, #2
 8005c1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c1c:	e0ca      	b.n	8005db4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <HAL_SPI_Receive+0x7e>
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c2e:	e0c1      	b.n	8005db4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2204      	movs	r2, #4
 8005c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	88fa      	ldrh	r2, [r7, #6]
 8005c48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	88fa      	ldrh	r2, [r7, #6]
 8005c4e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c76:	d10f      	bne.n	8005c98 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c96:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca2:	2b40      	cmp	r3, #64	; 0x40
 8005ca4:	d007      	beq.n	8005cb6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cb4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d162      	bne.n	8005d84 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005cbe:	e02e      	b.n	8005d1e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d115      	bne.n	8005cfa <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f103 020c 	add.w	r2, r3, #12
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	7812      	ldrb	r2, [r2, #0]
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cf8:	e011      	b.n	8005d1e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cfa:	f7fd f9d5 	bl	80030a8 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d803      	bhi.n	8005d12 <HAL_SPI_Receive+0x166>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d10:	d102      	bne.n	8005d18 <HAL_SPI_Receive+0x16c>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d102      	bne.n	8005d1e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d1c:	e04a      	b.n	8005db4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1cb      	bne.n	8005cc0 <HAL_SPI_Receive+0x114>
 8005d28:	e031      	b.n	8005d8e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d113      	bne.n	8005d60 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	b292      	uxth	r2, r2
 8005d44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	1c9a      	adds	r2, r3, #2
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d5e:	e011      	b.n	8005d84 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d60:	f7fd f9a2 	bl	80030a8 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d803      	bhi.n	8005d78 <HAL_SPI_Receive+0x1cc>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d76:	d102      	bne.n	8005d7e <HAL_SPI_Receive+0x1d2>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d102      	bne.n	8005d84 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d82:	e017      	b.n	8005db4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1cd      	bne.n	8005d2a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 fa46 	bl	8006224 <SPI_EndRxTransaction>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2220      	movs	r2, #32
 8005da2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	75fb      	strb	r3, [r7, #23]
 8005db0:	e000      	b.n	8005db4 <HAL_SPI_Receive+0x208>
  }

error :
 8005db2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b08c      	sub	sp, #48	; 0x30
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_SPI_TransmitReceive+0x26>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e18a      	b.n	800610a <HAL_SPI_TransmitReceive+0x33c>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dfc:	f7fd f954 	bl	80030a8 <HAL_GetTick>
 8005e00:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e12:	887b      	ldrh	r3, [r7, #2]
 8005e14:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d00f      	beq.n	8005e3e <HAL_SPI_TransmitReceive+0x70>
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e24:	d107      	bne.n	8005e36 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d103      	bne.n	8005e36 <HAL_SPI_TransmitReceive+0x68>
 8005e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d003      	beq.n	8005e3e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e36:	2302      	movs	r3, #2
 8005e38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e3c:	e15b      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x82>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x82>
 8005e4a:	887b      	ldrh	r3, [r7, #2]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d103      	bne.n	8005e58 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e56:	e14e      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d003      	beq.n	8005e6c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2205      	movs	r2, #5
 8005e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	887a      	ldrh	r2, [r7, #2]
 8005e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	887a      	ldrh	r2, [r7, #2]
 8005e82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	887a      	ldrh	r2, [r7, #2]
 8005e8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	887a      	ldrh	r2, [r7, #2]
 8005e94:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d007      	beq.n	8005ec0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ebe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec8:	d178      	bne.n	8005fbc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0x10a>
 8005ed2:	8b7b      	ldrh	r3, [r7, #26]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d166      	bne.n	8005fa6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005edc:	881a      	ldrh	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	1c9a      	adds	r2, r3, #2
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005efc:	e053      	b.n	8005fa6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d11b      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x176>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d016      	beq.n	8005f44 <HAL_SPI_TransmitReceive+0x176>
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d113      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	881a      	ldrh	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	1c9a      	adds	r2, r3, #2
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d119      	bne.n	8005f86 <HAL_SPI_TransmitReceive+0x1b8>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d014      	beq.n	8005f86 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	b292      	uxth	r2, r2
 8005f68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6e:	1c9a      	adds	r2, r3, #2
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f82:	2301      	movs	r3, #1
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f86:	f7fd f88f 	bl	80030a8 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d807      	bhi.n	8005fa6 <HAL_SPI_TransmitReceive+0x1d8>
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9c:	d003      	beq.n	8005fa6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005fa4:	e0a7      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1a6      	bne.n	8005efe <HAL_SPI_TransmitReceive+0x130>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1a1      	bne.n	8005efe <HAL_SPI_TransmitReceive+0x130>
 8005fba:	e07c      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d002      	beq.n	8005fca <HAL_SPI_TransmitReceive+0x1fc>
 8005fc4:	8b7b      	ldrh	r3, [r7, #26]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d16b      	bne.n	80060a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	7812      	ldrb	r2, [r2, #0]
 8005fd6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ff0:	e057      	b.n	80060a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d11c      	bne.n	800603a <HAL_SPI_TransmitReceive+0x26c>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006004:	b29b      	uxth	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d017      	beq.n	800603a <HAL_SPI_TransmitReceive+0x26c>
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	2b01      	cmp	r3, #1
 800600e:	d114      	bne.n	800603a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	7812      	ldrb	r2, [r2, #0]
 800601c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b01      	cmp	r3, #1
 8006046:	d119      	bne.n	800607c <HAL_SPI_TransmitReceive+0x2ae>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d014      	beq.n	800607c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29a      	uxth	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006078:	2301      	movs	r3, #1
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800607c:	f7fd f814 	bl	80030a8 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006088:	429a      	cmp	r2, r3
 800608a:	d803      	bhi.n	8006094 <HAL_SPI_TransmitReceive+0x2c6>
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d102      	bne.n	800609a <HAL_SPI_TransmitReceive+0x2cc>
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	2b00      	cmp	r3, #0
 8006098:	d103      	bne.n	80060a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80060a0:	e029      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1a2      	bne.n	8005ff2 <HAL_SPI_TransmitReceive+0x224>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d19d      	bne.n	8005ff2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 f904 	bl	80062c8 <SPI_EndRxTxTransaction>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d006      	beq.n	80060d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2220      	movs	r2, #32
 80060d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80060d2:	e010      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10b      	bne.n	80060f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	e000      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80060f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006106:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800610a:	4618      	mov	r0, r3
 800610c:	3730      	adds	r7, #48	; 0x30
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	4613      	mov	r3, r2
 8006122:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006124:	f7fc ffc0 	bl	80030a8 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	4413      	add	r3, r2
 8006132:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006134:	f7fc ffb8 	bl	80030a8 <HAL_GetTick>
 8006138:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800613a:	4b39      	ldr	r3, [pc, #228]	; (8006220 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	015b      	lsls	r3, r3, #5
 8006140:	0d1b      	lsrs	r3, r3, #20
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	fb02 f303 	mul.w	r3, r2, r3
 8006148:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800614a:	e054      	b.n	80061f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006152:	d050      	beq.n	80061f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006154:	f7fc ffa8 	bl	80030a8 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	429a      	cmp	r2, r3
 8006162:	d902      	bls.n	800616a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d13d      	bne.n	80061e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006178:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006182:	d111      	bne.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800618c:	d004      	beq.n	8006198 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006196:	d107      	bne.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b0:	d10f      	bne.n	80061d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e017      	b.n	8006216 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4013      	ands	r3, r2
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	429a      	cmp	r2, r3
 8006204:	bf0c      	ite	eq
 8006206:	2301      	moveq	r3, #1
 8006208:	2300      	movne	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	429a      	cmp	r2, r3
 8006212:	d19b      	bne.n	800614c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000000 	.word	0x20000000

08006224 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af02      	add	r7, sp, #8
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006238:	d111      	bne.n	800625e <SPI_EndRxTransaction+0x3a>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006242:	d004      	beq.n	800624e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800624c:	d107      	bne.n	800625e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800625c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006266:	d117      	bne.n	8006298 <SPI_EndRxTransaction+0x74>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006270:	d112      	bne.n	8006298 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2200      	movs	r2, #0
 800627a:	2101      	movs	r1, #1
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7ff ff49 	bl	8006114 <SPI_WaitFlagStateUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01a      	beq.n	80062be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628c:	f043 0220 	orr.w	r2, r3, #32
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e013      	b.n	80062c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2200      	movs	r2, #0
 80062a0:	2180      	movs	r1, #128	; 0x80
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f7ff ff36 	bl	8006114 <SPI_WaitFlagStateUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b2:	f043 0220 	orr.w	r2, r3, #32
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e000      	b.n	80062c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2200      	movs	r2, #0
 80062dc:	2180      	movs	r1, #128	; 0x80
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f7ff ff18 	bl	8006114 <SPI_WaitFlagStateUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ee:	f043 0220 	orr.w	r2, r3, #32
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e000      	b.n	80062fc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e041      	b.n	800639a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f839 	bl	80063a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3304      	adds	r3, #4
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f000 f9bc 	bl	80066c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr

080063b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d001      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e03f      	b.n	800644c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0201 	orr.w	r2, r2, #1
 80063e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1b      	ldr	r2, [pc, #108]	; (8006458 <HAL_TIM_Base_Start_IT+0xa4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d013      	beq.n	8006416 <HAL_TIM_Base_Start_IT+0x62>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f6:	d00e      	beq.n	8006416 <HAL_TIM_Base_Start_IT+0x62>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a17      	ldr	r2, [pc, #92]	; (800645c <HAL_TIM_Base_Start_IT+0xa8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d009      	beq.n	8006416 <HAL_TIM_Base_Start_IT+0x62>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a16      	ldr	r2, [pc, #88]	; (8006460 <HAL_TIM_Base_Start_IT+0xac>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d004      	beq.n	8006416 <HAL_TIM_Base_Start_IT+0x62>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a14      	ldr	r2, [pc, #80]	; (8006464 <HAL_TIM_Base_Start_IT+0xb0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d111      	bne.n	800643a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b06      	cmp	r3, #6
 8006426:	d010      	beq.n	800644a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0201 	orr.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006438:	e007      	b.n	800644a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0201 	orr.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	bc80      	pop	{r7}
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40000400 	.word	0x40000400
 8006460:	40000800 	.word	0x40000800
 8006464:	40000c00 	.word	0x40000c00

08006468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b02      	cmp	r3, #2
 800647c:	d122      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b02      	cmp	r3, #2
 800648a:	d11b      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0202 	mvn.w	r2, #2
 8006494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f8ed 	bl	800668a <HAL_TIM_IC_CaptureCallback>
 80064b0:	e005      	b.n	80064be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f8e0 	bl	8006678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f8ef 	bl	800669c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d122      	bne.n	8006518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d11b      	bne.n	8006518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0204 	mvn.w	r2, #4
 80064e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2202      	movs	r2, #2
 80064ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f8c3 	bl	800668a <HAL_TIM_IC_CaptureCallback>
 8006504:	e005      	b.n	8006512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f8b6 	bl	8006678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f8c5 	bl	800669c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b08      	cmp	r3, #8
 8006524:	d122      	bne.n	800656c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b08      	cmp	r3, #8
 8006532:	d11b      	bne.n	800656c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0208 	mvn.w	r2, #8
 800653c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2204      	movs	r2, #4
 8006542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f899 	bl	800668a <HAL_TIM_IC_CaptureCallback>
 8006558:	e005      	b.n	8006566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f88c 	bl	8006678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f89b 	bl	800669c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 0310 	and.w	r3, r3, #16
 8006576:	2b10      	cmp	r3, #16
 8006578:	d122      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f003 0310 	and.w	r3, r3, #16
 8006584:	2b10      	cmp	r3, #16
 8006586:	d11b      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0210 	mvn.w	r2, #16
 8006590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2208      	movs	r2, #8
 8006596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f86f 	bl	800668a <HAL_TIM_IC_CaptureCallback>
 80065ac:	e005      	b.n	80065ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f862 	bl	8006678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f871 	bl	800669c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d10e      	bne.n	80065ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d107      	bne.n	80065ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0201 	mvn.w	r2, #1
 80065e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fc f9e0 	bl	80029ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f6:	2b80      	cmp	r3, #128	; 0x80
 80065f8:	d10e      	bne.n	8006618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006604:	2b80      	cmp	r3, #128	; 0x80
 8006606:	d107      	bne.n	8006618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f8c9 	bl	80067aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006622:	2b40      	cmp	r3, #64	; 0x40
 8006624:	d10e      	bne.n	8006644 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006630:	2b40      	cmp	r3, #64	; 0x40
 8006632:	d107      	bne.n	8006644 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800663c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f835 	bl	80066ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b20      	cmp	r3, #32
 8006650:	d10e      	bne.n	8006670 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b20      	cmp	r3, #32
 800665e:	d107      	bne.n	8006670 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0220 	mvn.w	r2, #32
 8006668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f894 	bl	8006798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr

0800668a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr

0800669c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bc80      	pop	{r7}
 80066ac:	4770      	bx	lr

080066ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr

080066c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a2d      	ldr	r2, [pc, #180]	; (8006788 <TIM_Base_SetConfig+0xc8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00f      	beq.n	80066f8 <TIM_Base_SetConfig+0x38>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066de:	d00b      	beq.n	80066f8 <TIM_Base_SetConfig+0x38>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a2a      	ldr	r2, [pc, #168]	; (800678c <TIM_Base_SetConfig+0xcc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d007      	beq.n	80066f8 <TIM_Base_SetConfig+0x38>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a29      	ldr	r2, [pc, #164]	; (8006790 <TIM_Base_SetConfig+0xd0>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d003      	beq.n	80066f8 <TIM_Base_SetConfig+0x38>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a28      	ldr	r2, [pc, #160]	; (8006794 <TIM_Base_SetConfig+0xd4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d108      	bne.n	800670a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1e      	ldr	r2, [pc, #120]	; (8006788 <TIM_Base_SetConfig+0xc8>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00f      	beq.n	8006732 <TIM_Base_SetConfig+0x72>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006718:	d00b      	beq.n	8006732 <TIM_Base_SetConfig+0x72>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a1b      	ldr	r2, [pc, #108]	; (800678c <TIM_Base_SetConfig+0xcc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d007      	beq.n	8006732 <TIM_Base_SetConfig+0x72>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a1a      	ldr	r2, [pc, #104]	; (8006790 <TIM_Base_SetConfig+0xd0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d003      	beq.n	8006732 <TIM_Base_SetConfig+0x72>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a19      	ldr	r2, [pc, #100]	; (8006794 <TIM_Base_SetConfig+0xd4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d108      	bne.n	8006744 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a07      	ldr	r2, [pc, #28]	; (8006788 <TIM_Base_SetConfig+0xc8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d103      	bne.n	8006778 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	691a      	ldr	r2, [r3, #16]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	615a      	str	r2, [r3, #20]
}
 800677e:	bf00      	nop
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr
 8006788:	40012c00 	.word	0x40012c00
 800678c:	40000400 	.word	0x40000400
 8006790:	40000800 	.word	0x40000800
 8006794:	40000c00 	.word	0x40000c00

08006798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr

080067aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr

080067bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e03f      	b.n	800684e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d106      	bne.n	80067e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fc fa20 	bl	8002c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2224      	movs	r2, #36	; 0x24
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fd7f 	bl	8007304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	695a      	ldr	r2, [r3, #20]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68da      	ldr	r2, [r3, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2220      	movs	r2, #32
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2220      	movs	r2, #32
 8006848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b08a      	sub	sp, #40	; 0x28
 800685a:	af02      	add	r7, sp, #8
 800685c:	60f8      	str	r0, [r7, #12]
 800685e:	60b9      	str	r1, [r7, #8]
 8006860:	603b      	str	r3, [r7, #0]
 8006862:	4613      	mov	r3, r2
 8006864:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b20      	cmp	r3, #32
 8006874:	d17c      	bne.n	8006970 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <HAL_UART_Transmit+0x2c>
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e075      	b.n	8006972 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_UART_Transmit+0x3e>
 8006890:	2302      	movs	r3, #2
 8006892:	e06e      	b.n	8006972 <HAL_UART_Transmit+0x11c>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2221      	movs	r2, #33	; 0x21
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068aa:	f7fc fbfd 	bl	80030a8 <HAL_GetTick>
 80068ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	88fa      	ldrh	r2, [r7, #6]
 80068b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	88fa      	ldrh	r2, [r7, #6]
 80068ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c4:	d108      	bne.n	80068d8 <HAL_UART_Transmit+0x82>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d104      	bne.n	80068d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	61bb      	str	r3, [r7, #24]
 80068d6:	e003      	b.n	80068e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068dc:	2300      	movs	r3, #0
 80068de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80068e8:	e02a      	b.n	8006940 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2200      	movs	r2, #0
 80068f2:	2180      	movs	r1, #128	; 0x80
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 faf1 	bl	8006edc <UART_WaitOnFlagUntilTimeout>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e036      	b.n	8006972 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10b      	bne.n	8006922 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006918:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	3302      	adds	r3, #2
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	e007      	b.n	8006932 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	781a      	ldrb	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	3301      	adds	r3, #1
 8006930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006936:	b29b      	uxth	r3, r3
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1cf      	bne.n	80068ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2200      	movs	r2, #0
 8006952:	2140      	movs	r1, #64	; 0x40
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 fac1 	bl	8006edc <UART_WaitOnFlagUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e006      	b.n	8006972 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	e000      	b.n	8006972 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006970:	2302      	movs	r3, #2
  }
}
 8006972:	4618      	mov	r0, r3
 8006974:	3720      	adds	r7, #32
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	4613      	mov	r3, r2
 8006986:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b20      	cmp	r3, #32
 8006992:	d11d      	bne.n	80069d0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <HAL_UART_Receive_DMA+0x26>
 800699a:	88fb      	ldrh	r3, [r7, #6]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e016      	b.n	80069d2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <HAL_UART_Receive_DMA+0x38>
 80069ae:	2302      	movs	r3, #2
 80069b0:	e00f      	b.n	80069d2 <HAL_UART_Receive_DMA+0x58>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80069c0:	88fb      	ldrh	r3, [r7, #6]
 80069c2:	461a      	mov	r2, r3
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 fad2 	bl	8006f70 <UART_Start_Receive_DMA>
 80069cc:	4603      	mov	r3, r0
 80069ce:	e000      	b.n	80069d2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80069d0:	2302      	movs	r3, #2
  }
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08a      	sub	sp, #40	; 0x28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10d      	bne.n	8006a2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <HAL_UART_IRQHandler+0x52>
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fbc2 	bl	80071b0 <UART_Receive_IT>
      return;
 8006a2c:	e17b      	b.n	8006d26 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80b1 	beq.w	8006b98 <HAL_UART_IRQHandler+0x1bc>
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d105      	bne.n	8006a4c <HAL_UART_IRQHandler+0x70>
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 80a6 	beq.w	8006b98 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <HAL_UART_IRQHandler+0x90>
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a64:	f043 0201 	orr.w	r2, r3, #1
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	f003 0304 	and.w	r3, r3, #4
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <HAL_UART_IRQHandler+0xb0>
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a84:	f043 0202 	orr.w	r2, r3, #2
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <HAL_UART_IRQHandler+0xd0>
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	f043 0204 	orr.w	r2, r3, #4
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00f      	beq.n	8006ad6 <HAL_UART_IRQHandler+0xfa>
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d104      	bne.n	8006aca <HAL_UART_IRQHandler+0xee>
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	f043 0208 	orr.w	r2, r3, #8
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 811e 	beq.w	8006d1c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	f003 0320 	and.w	r3, r3, #32
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <HAL_UART_IRQHandler+0x11e>
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fb5b 	bl	80071b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bf14      	ite	ne
 8006b08:	2301      	movne	r3, #1
 8006b0a:	2300      	moveq	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d102      	bne.n	8006b22 <HAL_UART_IRQHandler+0x146>
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d031      	beq.n	8006b86 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fa9d 	bl	8007062 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d023      	beq.n	8006b7e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	695a      	ldr	r2, [r3, #20]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b44:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d013      	beq.n	8006b76 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b52:	4a76      	ldr	r2, [pc, #472]	; (8006d2c <HAL_UART_IRQHandler+0x350>)
 8006b54:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fd f91a 	bl	8003d94 <HAL_DMA_Abort_IT>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d016      	beq.n	8006b94 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b70:	4610      	mov	r0, r2
 8006b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b74:	e00e      	b.n	8006b94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f8ec 	bl	8006d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7c:	e00a      	b.n	8006b94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f8e8 	bl	8006d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b84:	e006      	b.n	8006b94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f8e4 	bl	8006d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b92:	e0c3      	b.n	8006d1c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b94:	bf00      	nop
    return;
 8006b96:	e0c1      	b.n	8006d1c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	f040 80a1 	bne.w	8006ce4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 809b 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 8095 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d04e      	beq.n	8006c7c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006be8:	8a3b      	ldrh	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 8098 	beq.w	8006d20 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bf4:	8a3a      	ldrh	r2, [r7, #16]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	f080 8092 	bcs.w	8006d20 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	8a3a      	ldrh	r2, [r7, #16]
 8006c00:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d02b      	beq.n	8006c64 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68da      	ldr	r2, [r3, #12]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c1a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695a      	ldr	r2, [r3, #20]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0201 	bic.w	r2, r2, #1
 8006c2a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	695a      	ldr	r2, [r3, #20]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c3a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68da      	ldr	r2, [r3, #12]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0210 	bic.w	r2, r2, #16
 8006c58:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fd f85d 	bl	8003d1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f876 	bl	8006d66 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006c7a:	e051      	b.n	8006d20 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d047      	beq.n	8006d24 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006c94:	8a7b      	ldrh	r3, [r7, #18]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d044      	beq.n	8006d24 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ca8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	695a      	ldr	r2, [r3, #20]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0201 	bic.w	r2, r2, #1
 8006cb8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0210 	bic.w	r2, r2, #16
 8006cd6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cd8:	8a7b      	ldrh	r3, [r7, #18]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f842 	bl	8006d66 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ce2:	e01f      	b.n	8006d24 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d008      	beq.n	8006d00 <HAL_UART_IRQHandler+0x324>
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f9f2 	bl	80070e2 <UART_Transmit_IT>
    return;
 8006cfe:	e012      	b.n	8006d26 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00d      	beq.n	8006d26 <HAL_UART_IRQHandler+0x34a>
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d008      	beq.n	8006d26 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fa33 	bl	8007180 <UART_EndTransmit_IT>
    return;
 8006d1a:	e004      	b.n	8006d26 <HAL_UART_IRQHandler+0x34a>
    return;
 8006d1c:	bf00      	nop
 8006d1e:	e002      	b.n	8006d26 <HAL_UART_IRQHandler+0x34a>
      return;
 8006d20:	bf00      	nop
 8006d22:	e000      	b.n	8006d26 <HAL_UART_IRQHandler+0x34a>
      return;
 8006d24:	bf00      	nop
  }
}
 8006d26:	3728      	adds	r7, #40	; 0x28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	080070bb 	.word	0x080070bb

08006d30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bc80      	pop	{r7}
 8006d40:	4770      	bx	lr

08006d42 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bc80      	pop	{r7}
 8006d52:	4770      	bx	lr

08006d54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc80      	pop	{r7}
 8006d64:	4770      	bx	lr

08006d66 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d72:	bf00      	nop
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bc80      	pop	{r7}
 8006d7a:	4770      	bx	lr

08006d7c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d12a      	bne.n	8006dee <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dac:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695a      	ldr	r2, [r3, #20]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 0201 	bic.w	r2, r2, #1
 8006dbc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	695a      	ldr	r2, [r3, #20]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dcc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d107      	bne.n	8006dee <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0210 	bic.w	r2, r2, #16
 8006dec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d106      	bne.n	8006e04 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff ffb2 	bl	8006d66 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e02:	e002      	b.n	8006e0a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f7fa ff2f 	bl	8001c68 <HAL_UART_RxCpltCallback>
}
 8006e0a:	bf00      	nop
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d108      	bne.n	8006e3a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e2c:	085b      	lsrs	r3, r3, #1
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	4619      	mov	r1, r3
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f7ff ff97 	bl	8006d66 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e38:	e002      	b.n	8006e40 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff ff81 	bl	8006d42 <HAL_UART_RxHalfCpltCallback>
}
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	bf14      	ite	ne
 8006e68:	2301      	movne	r3, #1
 8006e6a:	2300      	moveq	r3, #0
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b21      	cmp	r3, #33	; 0x21
 8006e7a:	d108      	bne.n	8006e8e <UART_DMAError+0x46>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d005      	beq.n	8006e8e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2200      	movs	r2, #0
 8006e86:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006e88:	68b8      	ldr	r0, [r7, #8]
 8006e8a:	f000 f8d5 	bl	8007038 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	bf14      	ite	ne
 8006e9c:	2301      	movne	r3, #1
 8006e9e:	2300      	moveq	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b22      	cmp	r3, #34	; 0x22
 8006eae:	d108      	bne.n	8006ec2 <UART_DMAError+0x7a>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006ebc:	68b8      	ldr	r0, [r7, #8]
 8006ebe:	f000 f8d0 	bl	8007062 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	f043 0210 	orr.w	r2, r3, #16
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ece:	68b8      	ldr	r0, [r7, #8]
 8006ed0:	f7ff ff40 	bl	8006d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ed4:	bf00      	nop
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eec:	e02c      	b.n	8006f48 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef4:	d028      	beq.n	8006f48 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006efc:	f7fc f8d4 	bl	80030a8 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d21d      	bcs.n	8006f48 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f1a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695a      	ldr	r2, [r3, #20]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0201 	bic.w	r2, r2, #1
 8006f2a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e00f      	b.n	8006f68 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	4013      	ands	r3, r2
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	bf0c      	ite	eq
 8006f58:	2301      	moveq	r3, #1
 8006f5a:	2300      	movne	r3, #0
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d0c3      	beq.n	8006eee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	88fa      	ldrh	r2, [r7, #6]
 8006f88:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2222      	movs	r2, #34	; 0x22
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	4a23      	ldr	r2, [pc, #140]	; (800702c <UART_Start_Receive_DMA+0xbc>)
 8006f9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	4a22      	ldr	r2, [pc, #136]	; (8007030 <UART_Start_Receive_DMA+0xc0>)
 8006fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	4a21      	ldr	r2, [pc, #132]	; (8007034 <UART_Start_Receive_DMA+0xc4>)
 8006fae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006fb8:	f107 0308 	add.w	r3, r7, #8
 8006fbc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	88fb      	ldrh	r3, [r7, #6]
 8006fd0:	f7fc fe46 	bl	8003c60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007000:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695a      	ldr	r2, [r3, #20]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0201 	orr.w	r2, r2, #1
 8007010:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	695a      	ldr	r2, [r3, #20]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007020:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	08006d7d 	.word	0x08006d7d
 8007030:	08006e13 	.word	0x08006e13
 8007034:	08006e49 	.word	0x08006e49

08007038 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800704e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	bc80      	pop	{r7}
 8007060:	4770      	bx	lr

08007062 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007078:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	695a      	ldr	r2, [r3, #20]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f022 0201 	bic.w	r2, r2, #1
 8007088:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	2b01      	cmp	r3, #1
 8007090:	d107      	bne.n	80070a2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0210 	bic.w	r2, r2, #16
 80070a0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bc80      	pop	{r7}
 80070b8:	4770      	bx	lr

080070ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7ff fe3d 	bl	8006d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b085      	sub	sp, #20
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b21      	cmp	r3, #33	; 0x21
 80070f4:	d13e      	bne.n	8007174 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070fe:	d114      	bne.n	800712a <UART_Transmit_IT+0x48>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d110      	bne.n	800712a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800711c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	1c9a      	adds	r2, r3, #2
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	621a      	str	r2, [r3, #32]
 8007128:	e008      	b.n	800713c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	1c59      	adds	r1, r3, #1
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	6211      	str	r1, [r2, #32]
 8007134:	781a      	ldrb	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007140:	b29b      	uxth	r3, r3
 8007142:	3b01      	subs	r3, #1
 8007144:	b29b      	uxth	r3, r3
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	4619      	mov	r1, r3
 800714a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10f      	bne.n	8007170 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800715e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800716e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	e000      	b.n	8007176 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007174:	2302      	movs	r3, #2
  }
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	bc80      	pop	{r7}
 800717e:	4770      	bx	lr

08007180 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007196:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2220      	movs	r2, #32
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff fdc5 	bl	8006d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b22      	cmp	r3, #34	; 0x22
 80071c2:	f040 8099 	bne.w	80072f8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ce:	d117      	bne.n	8007200 <UART_Receive_IT+0x50>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d113      	bne.n	8007200 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	1c9a      	adds	r2, r3, #2
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	629a      	str	r2, [r3, #40]	; 0x28
 80071fe:	e026      	b.n	800724e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007204:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007206:	2300      	movs	r3, #0
 8007208:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007212:	d007      	beq.n	8007224 <UART_Receive_IT+0x74>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10a      	bne.n	8007232 <UART_Receive_IT+0x82>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d106      	bne.n	8007232 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	b2da      	uxtb	r2, r3
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	701a      	strb	r2, [r3, #0]
 8007230:	e008      	b.n	8007244 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800723e:	b2da      	uxtb	r2, r3
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007252:	b29b      	uxth	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	b29b      	uxth	r3, r3
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	4619      	mov	r1, r3
 800725c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800725e:	2b00      	cmp	r3, #0
 8007260:	d148      	bne.n	80072f4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0220 	bic.w	r2, r2, #32
 8007270:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007280:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695a      	ldr	r2, [r3, #20]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0201 	bic.w	r2, r2, #1
 8007290:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2220      	movs	r2, #32
 8007296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d123      	bne.n	80072ea <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68da      	ldr	r2, [r3, #12]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 0210 	bic.w	r2, r2, #16
 80072b6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0310 	and.w	r3, r3, #16
 80072c2:	2b10      	cmp	r3, #16
 80072c4:	d10a      	bne.n	80072dc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff fd3f 	bl	8006d66 <HAL_UARTEx_RxEventCallback>
 80072e8:	e002      	b.n	80072f0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7fa fcbc 	bl	8001c68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	e002      	b.n	80072fa <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	e000      	b.n	80072fa <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80072f8:	2302      	movs	r3, #2
  }
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	4313      	orrs	r3, r2
 8007332:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800733e:	f023 030c 	bic.w	r3, r3, #12
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6812      	ldr	r2, [r2, #0]
 8007346:	68b9      	ldr	r1, [r7, #8]
 8007348:	430b      	orrs	r3, r1
 800734a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a2c      	ldr	r2, [pc, #176]	; (8007418 <UART_SetConfig+0x114>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d103      	bne.n	8007374 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800736c:	f7fd ff68 	bl	8005240 <HAL_RCC_GetPCLK2Freq>
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	e002      	b.n	800737a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007374:	f7fd ff50 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
 8007378:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	009a      	lsls	r2, r3, #2
 8007384:	441a      	add	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007390:	4a22      	ldr	r2, [pc, #136]	; (800741c <UART_SetConfig+0x118>)
 8007392:	fba2 2303 	umull	r2, r3, r2, r3
 8007396:	095b      	lsrs	r3, r3, #5
 8007398:	0119      	lsls	r1, r3, #4
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	009a      	lsls	r2, r3, #2
 80073a4:	441a      	add	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80073b0:	4b1a      	ldr	r3, [pc, #104]	; (800741c <UART_SetConfig+0x118>)
 80073b2:	fba3 0302 	umull	r0, r3, r3, r2
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	2064      	movs	r0, #100	; 0x64
 80073ba:	fb00 f303 	mul.w	r3, r0, r3
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	3332      	adds	r3, #50	; 0x32
 80073c4:	4a15      	ldr	r2, [pc, #84]	; (800741c <UART_SetConfig+0x118>)
 80073c6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073d0:	4419      	add	r1, r3
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009a      	lsls	r2, r3, #2
 80073dc:	441a      	add	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80073e8:	4b0c      	ldr	r3, [pc, #48]	; (800741c <UART_SetConfig+0x118>)
 80073ea:	fba3 0302 	umull	r0, r3, r3, r2
 80073ee:	095b      	lsrs	r3, r3, #5
 80073f0:	2064      	movs	r0, #100	; 0x64
 80073f2:	fb00 f303 	mul.w	r3, r0, r3
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	011b      	lsls	r3, r3, #4
 80073fa:	3332      	adds	r3, #50	; 0x32
 80073fc:	4a07      	ldr	r2, [pc, #28]	; (800741c <UART_SetConfig+0x118>)
 80073fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	f003 020f 	and.w	r2, r3, #15
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	440a      	add	r2, r1
 800740e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007410:	bf00      	nop
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	40013800 	.word	0x40013800
 800741c:	51eb851f 	.word	0x51eb851f

08007420 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800742e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007432:	2b84      	cmp	r3, #132	; 0x84
 8007434:	d005      	beq.n	8007442 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007436:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4413      	add	r3, r2
 800743e:	3303      	adds	r3, #3
 8007440:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007442:	68fb      	ldr	r3, [r7, #12]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	bc80      	pop	{r7}
 800744c:	4770      	bx	lr

0800744e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007452:	f000 fae7 	bl	8007a24 <vTaskStartScheduler>
  
  return osOK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	bd80      	pop	{r7, pc}

0800745c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800745c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800745e:	b089      	sub	sp, #36	; 0x24
 8007460:	af04      	add	r7, sp, #16
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d020      	beq.n	80074b0 <osThreadCreate+0x54>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d01c      	beq.n	80074b0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685c      	ldr	r4, [r3, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681d      	ldr	r5, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691e      	ldr	r6, [r3, #16]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007488:	4618      	mov	r0, r3
 800748a:	f7ff ffc9 	bl	8007420 <makeFreeRtosPriority>
 800748e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007498:	9202      	str	r2, [sp, #8]
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	9100      	str	r1, [sp, #0]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	4632      	mov	r2, r6
 80074a2:	4629      	mov	r1, r5
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 f8e8 	bl	800767a <xTaskCreateStatic>
 80074aa:	4603      	mov	r3, r0
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	e01c      	b.n	80074ea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685c      	ldr	r4, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074bc:	b29e      	uxth	r6, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff ffab 	bl	8007420 <makeFreeRtosPriority>
 80074ca:	4602      	mov	r2, r0
 80074cc:	f107 030c 	add.w	r3, r7, #12
 80074d0:	9301      	str	r3, [sp, #4]
 80074d2:	9200      	str	r2, [sp, #0]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	4632      	mov	r2, r6
 80074d8:	4629      	mov	r1, r5
 80074da:	4620      	mov	r0, r4
 80074dc:	f000 f929 	bl	8007732 <xTaskCreate>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d001      	beq.n	80074ea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	e000      	b.n	80074ec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80074ea:	68fb      	ldr	r3, [r7, #12]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <osDelay+0x16>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	e000      	b.n	800750c <osDelay+0x18>
 800750a:	2301      	movs	r3, #1
 800750c:	4618      	mov	r0, r3
 800750e:	f000 fa55 	bl	80079bc <vTaskDelay>
  
  return osOK;
 8007512:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f103 0208 	add.w	r2, r3, #8
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f04f 32ff 	mov.w	r2, #4294967295
 8007534:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f103 0208 	add.w	r2, r3, #8
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f103 0208 	add.w	r2, r3, #8
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr

0800755a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	bc80      	pop	{r7}
 8007570:	4770      	bx	lr

08007572 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007572:	b480      	push	{r7}
 8007574:	b085      	sub	sp, #20
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	601a      	str	r2, [r3, #0]
}
 80075ae:	bf00      	nop
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bc80      	pop	{r7}
 80075b6:	4770      	bx	lr

080075b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	d103      	bne.n	80075d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	e00c      	b.n	80075f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3308      	adds	r3, #8
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	e002      	b.n	80075e6 <vListInsert+0x2e>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d2f6      	bcs.n	80075e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	601a      	str	r2, [r3, #0]
}
 800761e:	bf00      	nop
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	bc80      	pop	{r7}
 8007626:	4770      	bx	lr

08007628 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	6892      	ldr	r2, [r2, #8]
 800763e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	6852      	ldr	r2, [r2, #4]
 8007648:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	d103      	bne.n	800765c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	1e5a      	subs	r2, r3, #1
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	bc80      	pop	{r7}
 8007678:	4770      	bx	lr

0800767a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800767a:	b580      	push	{r7, lr}
 800767c:	b08e      	sub	sp, #56	; 0x38
 800767e:	af04      	add	r7, sp, #16
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10a      	bne.n	80076c0 <xTaskCreateStatic+0x46>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	61fb      	str	r3, [r7, #28]
}
 80076bc:	bf00      	nop
 80076be:	e7fe      	b.n	80076be <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076c0:	23b4      	movs	r3, #180	; 0xb4
 80076c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	2bb4      	cmp	r3, #180	; 0xb4
 80076c8:	d00a      	beq.n	80076e0 <xTaskCreateStatic+0x66>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	61bb      	str	r3, [r7, #24]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d01e      	beq.n	8007724 <xTaskCreateStatic+0xaa>
 80076e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01b      	beq.n	8007724 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	2202      	movs	r2, #2
 80076fa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076fe:	2300      	movs	r3, #0
 8007700:	9303      	str	r3, [sp, #12]
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	9302      	str	r3, [sp, #8]
 8007706:	f107 0314 	add.w	r3, r7, #20
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	68b9      	ldr	r1, [r7, #8]
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 f850 	bl	80077bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800771c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800771e:	f000 f8e3 	bl	80078e8 <prvAddNewTaskToReadyList>
 8007722:	e001      	b.n	8007728 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007724:	2300      	movs	r3, #0
 8007726:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007728:	697b      	ldr	r3, [r7, #20]
	}
 800772a:	4618      	mov	r0, r3
 800772c:	3728      	adds	r7, #40	; 0x28
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007732:	b580      	push	{r7, lr}
 8007734:	b08c      	sub	sp, #48	; 0x30
 8007736:	af04      	add	r7, sp, #16
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	603b      	str	r3, [r7, #0]
 800773e:	4613      	mov	r3, r2
 8007740:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007742:	88fb      	ldrh	r3, [r7, #6]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fe9a 	bl	8008480 <pvPortMalloc>
 800774c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00e      	beq.n	8007772 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007754:	20b4      	movs	r0, #180	; 0xb4
 8007756:	f000 fe93 	bl	8008480 <pvPortMalloc>
 800775a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	631a      	str	r2, [r3, #48]	; 0x30
 8007768:	e005      	b.n	8007776 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800776a:	6978      	ldr	r0, [r7, #20]
 800776c:	f000 fe9a 	bl	80084a4 <vPortFree>
 8007770:	e001      	b.n	8007776 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d017      	beq.n	80077ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007784:	88fa      	ldrh	r2, [r7, #6]
 8007786:	2300      	movs	r3, #0
 8007788:	9303      	str	r3, [sp, #12]
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	9302      	str	r3, [sp, #8]
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	9301      	str	r3, [sp, #4]
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	68b9      	ldr	r1, [r7, #8]
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 f80e 	bl	80077bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077a0:	69f8      	ldr	r0, [r7, #28]
 80077a2:	f000 f8a1 	bl	80078e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077a6:	2301      	movs	r3, #1
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	e002      	b.n	80077b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077ac:	f04f 33ff 	mov.w	r3, #4294967295
 80077b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077b2:	69bb      	ldr	r3, [r7, #24]
	}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3720      	adds	r7, #32
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077d4:	3b01      	subs	r3, #1
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	f023 0307 	bic.w	r3, r3, #7
 80077e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00a      	beq.n	8007804 <prvInitialiseNewTask+0x48>
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	617b      	str	r3, [r7, #20]
}
 8007800:	bf00      	nop
 8007802:	e7fe      	b.n	8007802 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007804:	2300      	movs	r3, #0
 8007806:	61fb      	str	r3, [r7, #28]
 8007808:	e012      	b.n	8007830 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	4413      	add	r3, r2
 8007810:	7819      	ldrb	r1, [r3, #0]
 8007812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	4413      	add	r3, r2
 8007818:	3334      	adds	r3, #52	; 0x34
 800781a:	460a      	mov	r2, r1
 800781c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	4413      	add	r3, r2
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d006      	beq.n	8007838 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	3301      	adds	r3, #1
 800782e:	61fb      	str	r3, [r7, #28]
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	2b0f      	cmp	r3, #15
 8007834:	d9e9      	bls.n	800780a <prvInitialiseNewTask+0x4e>
 8007836:	e000      	b.n	800783a <prvInitialiseNewTask+0x7e>
		{
			break;
 8007838:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	2b06      	cmp	r3, #6
 8007846:	d901      	bls.n	800784c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007848:	2306      	movs	r3, #6
 800784a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007850:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007856:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	2200      	movs	r2, #0
 800785c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	3304      	adds	r3, #4
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff fe79 	bl	800755a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	3318      	adds	r3, #24
 800786c:	4618      	mov	r0, r3
 800786e:	f7ff fe74 	bl	800755a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007876:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	f1c3 0207 	rsb	r2, r3, #7
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007886:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	2200      	movs	r2, #0
 800788c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	2200      	movs	r2, #0
 8007894:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789a:	334c      	adds	r3, #76	; 0x4c
 800789c:	2260      	movs	r2, #96	; 0x60
 800789e:	2100      	movs	r1, #0
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 ff57 	bl	8008754 <memset>
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	4a0c      	ldr	r2, [pc, #48]	; (80078dc <prvInitialiseNewTask+0x120>)
 80078aa:	651a      	str	r2, [r3, #80]	; 0x50
 80078ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ae:	4a0c      	ldr	r2, [pc, #48]	; (80078e0 <prvInitialiseNewTask+0x124>)
 80078b0:	655a      	str	r2, [r3, #84]	; 0x54
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	4a0b      	ldr	r2, [pc, #44]	; (80078e4 <prvInitialiseNewTask+0x128>)
 80078b6:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	68f9      	ldr	r1, [r7, #12]
 80078bc:	69b8      	ldr	r0, [r7, #24]
 80078be:	f000 fc29 	bl	8008114 <pxPortInitialiseStack>
 80078c2:	4602      	mov	r2, r0
 80078c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078d4:	bf00      	nop
 80078d6:	3720      	adds	r7, #32
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	0800d970 	.word	0x0800d970
 80078e0:	0800d990 	.word	0x0800d990
 80078e4:	0800d950 	.word	0x0800d950

080078e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078f0:	f000 fd04 	bl	80082fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078f4:	4b2a      	ldr	r3, [pc, #168]	; (80079a0 <prvAddNewTaskToReadyList+0xb8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3301      	adds	r3, #1
 80078fa:	4a29      	ldr	r2, [pc, #164]	; (80079a0 <prvAddNewTaskToReadyList+0xb8>)
 80078fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078fe:	4b29      	ldr	r3, [pc, #164]	; (80079a4 <prvAddNewTaskToReadyList+0xbc>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d109      	bne.n	800791a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007906:	4a27      	ldr	r2, [pc, #156]	; (80079a4 <prvAddNewTaskToReadyList+0xbc>)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800790c:	4b24      	ldr	r3, [pc, #144]	; (80079a0 <prvAddNewTaskToReadyList+0xb8>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d110      	bne.n	8007936 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007914:	f000 fad2 	bl	8007ebc <prvInitialiseTaskLists>
 8007918:	e00d      	b.n	8007936 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800791a:	4b23      	ldr	r3, [pc, #140]	; (80079a8 <prvAddNewTaskToReadyList+0xc0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d109      	bne.n	8007936 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007922:	4b20      	ldr	r3, [pc, #128]	; (80079a4 <prvAddNewTaskToReadyList+0xbc>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	429a      	cmp	r2, r3
 800792e:	d802      	bhi.n	8007936 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007930:	4a1c      	ldr	r2, [pc, #112]	; (80079a4 <prvAddNewTaskToReadyList+0xbc>)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007936:	4b1d      	ldr	r3, [pc, #116]	; (80079ac <prvAddNewTaskToReadyList+0xc4>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3301      	adds	r3, #1
 800793c:	4a1b      	ldr	r2, [pc, #108]	; (80079ac <prvAddNewTaskToReadyList+0xc4>)
 800793e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	2201      	movs	r2, #1
 8007946:	409a      	lsls	r2, r3
 8007948:	4b19      	ldr	r3, [pc, #100]	; (80079b0 <prvAddNewTaskToReadyList+0xc8>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4313      	orrs	r3, r2
 800794e:	4a18      	ldr	r2, [pc, #96]	; (80079b0 <prvAddNewTaskToReadyList+0xc8>)
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4a15      	ldr	r2, [pc, #84]	; (80079b4 <prvAddNewTaskToReadyList+0xcc>)
 8007960:	441a      	add	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3304      	adds	r3, #4
 8007966:	4619      	mov	r1, r3
 8007968:	4610      	mov	r0, r2
 800796a:	f7ff fe02 	bl	8007572 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800796e:	f000 fcf5 	bl	800835c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007972:	4b0d      	ldr	r3, [pc, #52]	; (80079a8 <prvAddNewTaskToReadyList+0xc0>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00e      	beq.n	8007998 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800797a:	4b0a      	ldr	r3, [pc, #40]	; (80079a4 <prvAddNewTaskToReadyList+0xbc>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	429a      	cmp	r2, r3
 8007986:	d207      	bcs.n	8007998 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007988:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <prvAddNewTaskToReadyList+0xd0>)
 800798a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007998:	bf00      	nop
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	2000088c 	.word	0x2000088c
 80079a4:	2000078c 	.word	0x2000078c
 80079a8:	20000898 	.word	0x20000898
 80079ac:	200008a8 	.word	0x200008a8
 80079b0:	20000894 	.word	0x20000894
 80079b4:	20000790 	.word	0x20000790
 80079b8:	e000ed04 	.word	0xe000ed04

080079bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d017      	beq.n	80079fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079ce:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <vTaskDelay+0x60>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <vTaskDelay+0x30>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	60bb      	str	r3, [r7, #8]
}
 80079e8:	bf00      	nop
 80079ea:	e7fe      	b.n	80079ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079ec:	f000 f884 	bl	8007af8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079f0:	2100      	movs	r1, #0
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fb28 	bl	8008048 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079f8:	f000 f88c 	bl	8007b14 <xTaskResumeAll>
 80079fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d107      	bne.n	8007a14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007a04:	4b06      	ldr	r3, [pc, #24]	; (8007a20 <vTaskDelay+0x64>)
 8007a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a14:	bf00      	nop
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	200008b4 	.word	0x200008b4
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08a      	sub	sp, #40	; 0x28
 8007a28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a32:	463a      	mov	r2, r7
 8007a34:	1d39      	adds	r1, r7, #4
 8007a36:	f107 0308 	add.w	r3, r7, #8
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fa f8fc 	bl	8001c38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	9202      	str	r2, [sp, #8]
 8007a48:	9301      	str	r3, [sp, #4]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	460a      	mov	r2, r1
 8007a52:	4921      	ldr	r1, [pc, #132]	; (8007ad8 <vTaskStartScheduler+0xb4>)
 8007a54:	4821      	ldr	r0, [pc, #132]	; (8007adc <vTaskStartScheduler+0xb8>)
 8007a56:	f7ff fe10 	bl	800767a <xTaskCreateStatic>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	4a20      	ldr	r2, [pc, #128]	; (8007ae0 <vTaskStartScheduler+0xbc>)
 8007a5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a60:	4b1f      	ldr	r3, [pc, #124]	; (8007ae0 <vTaskStartScheduler+0xbc>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	e001      	b.n	8007a72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d11b      	bne.n	8007ab0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	613b      	str	r3, [r7, #16]
}
 8007a8a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a8c:	4b15      	ldr	r3, [pc, #84]	; (8007ae4 <vTaskStartScheduler+0xc0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	334c      	adds	r3, #76	; 0x4c
 8007a92:	4a15      	ldr	r2, [pc, #84]	; (8007ae8 <vTaskStartScheduler+0xc4>)
 8007a94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a96:	4b15      	ldr	r3, [pc, #84]	; (8007aec <vTaskStartScheduler+0xc8>)
 8007a98:	f04f 32ff 	mov.w	r2, #4294967295
 8007a9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a9e:	4b14      	ldr	r3, [pc, #80]	; (8007af0 <vTaskStartScheduler+0xcc>)
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007aa4:	4b13      	ldr	r3, [pc, #76]	; (8007af4 <vTaskStartScheduler+0xd0>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007aaa:	f000 fbb5 	bl	8008218 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007aae:	e00e      	b.n	8007ace <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab6:	d10a      	bne.n	8007ace <vTaskStartScheduler+0xaa>
	__asm volatile
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	60fb      	str	r3, [r7, #12]
}
 8007aca:	bf00      	nop
 8007acc:	e7fe      	b.n	8007acc <vTaskStartScheduler+0xa8>
}
 8007ace:	bf00      	nop
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	0800d930 	.word	0x0800d930
 8007adc:	08007e8d 	.word	0x08007e8d
 8007ae0:	200008b0 	.word	0x200008b0
 8007ae4:	2000078c 	.word	0x2000078c
 8007ae8:	20000010 	.word	0x20000010
 8007aec:	200008ac 	.word	0x200008ac
 8007af0:	20000898 	.word	0x20000898
 8007af4:	20000890 	.word	0x20000890

08007af8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007afc:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <vTaskSuspendAll+0x18>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3301      	adds	r3, #1
 8007b02:	4a03      	ldr	r2, [pc, #12]	; (8007b10 <vTaskSuspendAll+0x18>)
 8007b04:	6013      	str	r3, [r2, #0]
}
 8007b06:	bf00      	nop
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	200008b4 	.word	0x200008b4

08007b14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b22:	4b41      	ldr	r3, [pc, #260]	; (8007c28 <xTaskResumeAll+0x114>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10a      	bne.n	8007b40 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	603b      	str	r3, [r7, #0]
}
 8007b3c:	bf00      	nop
 8007b3e:	e7fe      	b.n	8007b3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b40:	f000 fbdc 	bl	80082fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b44:	4b38      	ldr	r3, [pc, #224]	; (8007c28 <xTaskResumeAll+0x114>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	4a37      	ldr	r2, [pc, #220]	; (8007c28 <xTaskResumeAll+0x114>)
 8007b4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b4e:	4b36      	ldr	r3, [pc, #216]	; (8007c28 <xTaskResumeAll+0x114>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d161      	bne.n	8007c1a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b56:	4b35      	ldr	r3, [pc, #212]	; (8007c2c <xTaskResumeAll+0x118>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d05d      	beq.n	8007c1a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b5e:	e02e      	b.n	8007bbe <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007b60:	4b33      	ldr	r3, [pc, #204]	; (8007c30 <xTaskResumeAll+0x11c>)
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3318      	adds	r3, #24
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7ff fd5b 	bl	8007628 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3304      	adds	r3, #4
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff fd56 	bl	8007628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b80:	2201      	movs	r2, #1
 8007b82:	409a      	lsls	r2, r3
 8007b84:	4b2b      	ldr	r3, [pc, #172]	; (8007c34 <xTaskResumeAll+0x120>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	4a2a      	ldr	r2, [pc, #168]	; (8007c34 <xTaskResumeAll+0x120>)
 8007b8c:	6013      	str	r3, [r2, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b92:	4613      	mov	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4a27      	ldr	r2, [pc, #156]	; (8007c38 <xTaskResumeAll+0x124>)
 8007b9c:	441a      	add	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	f7ff fce4 	bl	8007572 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bae:	4b23      	ldr	r3, [pc, #140]	; (8007c3c <xTaskResumeAll+0x128>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d302      	bcc.n	8007bbe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007bb8:	4b21      	ldr	r3, [pc, #132]	; (8007c40 <xTaskResumeAll+0x12c>)
 8007bba:	2201      	movs	r2, #1
 8007bbc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bbe:	4b1c      	ldr	r3, [pc, #112]	; (8007c30 <xTaskResumeAll+0x11c>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1cc      	bne.n	8007b60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bcc:	f000 fa18 	bl	8008000 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007bd0:	4b1c      	ldr	r3, [pc, #112]	; (8007c44 <xTaskResumeAll+0x130>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d010      	beq.n	8007bfe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bdc:	f000 f836 	bl	8007c4c <xTaskIncrementTick>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007be6:	4b16      	ldr	r3, [pc, #88]	; (8007c40 <xTaskResumeAll+0x12c>)
 8007be8:	2201      	movs	r2, #1
 8007bea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1f1      	bne.n	8007bdc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007bf8:	4b12      	ldr	r3, [pc, #72]	; (8007c44 <xTaskResumeAll+0x130>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bfe:	4b10      	ldr	r3, [pc, #64]	; (8007c40 <xTaskResumeAll+0x12c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d009      	beq.n	8007c1a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c06:	2301      	movs	r3, #1
 8007c08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c0a:	4b0f      	ldr	r3, [pc, #60]	; (8007c48 <xTaskResumeAll+0x134>)
 8007c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c1a:	f000 fb9f 	bl	800835c <vPortExitCritical>

	return xAlreadyYielded;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	200008b4 	.word	0x200008b4
 8007c2c:	2000088c 	.word	0x2000088c
 8007c30:	2000084c 	.word	0x2000084c
 8007c34:	20000894 	.word	0x20000894
 8007c38:	20000790 	.word	0x20000790
 8007c3c:	2000078c 	.word	0x2000078c
 8007c40:	200008a0 	.word	0x200008a0
 8007c44:	2000089c 	.word	0x2000089c
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c52:	2300      	movs	r3, #0
 8007c54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c56:	4b51      	ldr	r3, [pc, #324]	; (8007d9c <xTaskIncrementTick+0x150>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f040 808d 	bne.w	8007d7a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c60:	4b4f      	ldr	r3, [pc, #316]	; (8007da0 <xTaskIncrementTick+0x154>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3301      	adds	r3, #1
 8007c66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c68:	4a4d      	ldr	r2, [pc, #308]	; (8007da0 <xTaskIncrementTick+0x154>)
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d120      	bne.n	8007cb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c74:	4b4b      	ldr	r3, [pc, #300]	; (8007da4 <xTaskIncrementTick+0x158>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <xTaskIncrementTick+0x48>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	603b      	str	r3, [r7, #0]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <xTaskIncrementTick+0x46>
 8007c94:	4b43      	ldr	r3, [pc, #268]	; (8007da4 <xTaskIncrementTick+0x158>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	4b43      	ldr	r3, [pc, #268]	; (8007da8 <xTaskIncrementTick+0x15c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a41      	ldr	r2, [pc, #260]	; (8007da4 <xTaskIncrementTick+0x158>)
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	4a41      	ldr	r2, [pc, #260]	; (8007da8 <xTaskIncrementTick+0x15c>)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	4b40      	ldr	r3, [pc, #256]	; (8007dac <xTaskIncrementTick+0x160>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3301      	adds	r3, #1
 8007cae:	4a3f      	ldr	r2, [pc, #252]	; (8007dac <xTaskIncrementTick+0x160>)
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	f000 f9a5 	bl	8008000 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cb6:	4b3e      	ldr	r3, [pc, #248]	; (8007db0 <xTaskIncrementTick+0x164>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d34d      	bcc.n	8007d5c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cc0:	4b38      	ldr	r3, [pc, #224]	; (8007da4 <xTaskIncrementTick+0x158>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <xTaskIncrementTick+0x82>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e000      	b.n	8007cd0 <xTaskIncrementTick+0x84>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d004      	beq.n	8007cde <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cd4:	4b36      	ldr	r3, [pc, #216]	; (8007db0 <xTaskIncrementTick+0x164>)
 8007cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cda:	601a      	str	r2, [r3, #0]
					break;
 8007cdc:	e03e      	b.n	8007d5c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007cde:	4b31      	ldr	r3, [pc, #196]	; (8007da4 <xTaskIncrementTick+0x158>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d203      	bcs.n	8007cfe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cf6:	4a2e      	ldr	r2, [pc, #184]	; (8007db0 <xTaskIncrementTick+0x164>)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6013      	str	r3, [r2, #0]
						break;
 8007cfc:	e02e      	b.n	8007d5c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	3304      	adds	r3, #4
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff fc90 	bl	8007628 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	3318      	adds	r3, #24
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7ff fc87 	bl	8007628 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1e:	2201      	movs	r2, #1
 8007d20:	409a      	lsls	r2, r3
 8007d22:	4b24      	ldr	r3, [pc, #144]	; (8007db4 <xTaskIncrementTick+0x168>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	4a22      	ldr	r2, [pc, #136]	; (8007db4 <xTaskIncrementTick+0x168>)
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d30:	4613      	mov	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4a1f      	ldr	r2, [pc, #124]	; (8007db8 <xTaskIncrementTick+0x16c>)
 8007d3a:	441a      	add	r2, r3
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4619      	mov	r1, r3
 8007d42:	4610      	mov	r0, r2
 8007d44:	f7ff fc15 	bl	8007572 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4c:	4b1b      	ldr	r3, [pc, #108]	; (8007dbc <xTaskIncrementTick+0x170>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d3b4      	bcc.n	8007cc0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d56:	2301      	movs	r3, #1
 8007d58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d5a:	e7b1      	b.n	8007cc0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d5c:	4b17      	ldr	r3, [pc, #92]	; (8007dbc <xTaskIncrementTick+0x170>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d62:	4915      	ldr	r1, [pc, #84]	; (8007db8 <xTaskIncrementTick+0x16c>)
 8007d64:	4613      	mov	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d907      	bls.n	8007d84 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007d74:	2301      	movs	r3, #1
 8007d76:	617b      	str	r3, [r7, #20]
 8007d78:	e004      	b.n	8007d84 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007d7a:	4b11      	ldr	r3, [pc, #68]	; (8007dc0 <xTaskIncrementTick+0x174>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	4a0f      	ldr	r2, [pc, #60]	; (8007dc0 <xTaskIncrementTick+0x174>)
 8007d82:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007d84:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <xTaskIncrementTick+0x178>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007d90:	697b      	ldr	r3, [r7, #20]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	200008b4 	.word	0x200008b4
 8007da0:	20000890 	.word	0x20000890
 8007da4:	20000844 	.word	0x20000844
 8007da8:	20000848 	.word	0x20000848
 8007dac:	200008a4 	.word	0x200008a4
 8007db0:	200008ac 	.word	0x200008ac
 8007db4:	20000894 	.word	0x20000894
 8007db8:	20000790 	.word	0x20000790
 8007dbc:	2000078c 	.word	0x2000078c
 8007dc0:	2000089c 	.word	0x2000089c
 8007dc4:	200008a0 	.word	0x200008a0

08007dc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007dce:	4b29      	ldr	r3, [pc, #164]	; (8007e74 <vTaskSwitchContext+0xac>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007dd6:	4b28      	ldr	r3, [pc, #160]	; (8007e78 <vTaskSwitchContext+0xb0>)
 8007dd8:	2201      	movs	r2, #1
 8007dda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ddc:	e044      	b.n	8007e68 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007dde:	4b26      	ldr	r3, [pc, #152]	; (8007e78 <vTaskSwitchContext+0xb0>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007de4:	4b25      	ldr	r3, [pc, #148]	; (8007e7c <vTaskSwitchContext+0xb4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	fab3 f383 	clz	r3, r3
 8007df0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007df2:	7afb      	ldrb	r3, [r7, #11]
 8007df4:	f1c3 031f 	rsb	r3, r3, #31
 8007df8:	617b      	str	r3, [r7, #20]
 8007dfa:	4921      	ldr	r1, [pc, #132]	; (8007e80 <vTaskSwitchContext+0xb8>)
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	440b      	add	r3, r1
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10a      	bne.n	8007e24 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	607b      	str	r3, [r7, #4]
}
 8007e20:	bf00      	nop
 8007e22:	e7fe      	b.n	8007e22 <vTaskSwitchContext+0x5a>
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4a14      	ldr	r2, [pc, #80]	; (8007e80 <vTaskSwitchContext+0xb8>)
 8007e30:	4413      	add	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	605a      	str	r2, [r3, #4]
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	3308      	adds	r3, #8
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d104      	bne.n	8007e54 <vTaskSwitchContext+0x8c>
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	605a      	str	r2, [r3, #4]
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	4a0a      	ldr	r2, [pc, #40]	; (8007e84 <vTaskSwitchContext+0xbc>)
 8007e5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e5e:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <vTaskSwitchContext+0xbc>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	334c      	adds	r3, #76	; 0x4c
 8007e64:	4a08      	ldr	r2, [pc, #32]	; (8007e88 <vTaskSwitchContext+0xc0>)
 8007e66:	6013      	str	r3, [r2, #0]
}
 8007e68:	bf00      	nop
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	200008b4 	.word	0x200008b4
 8007e78:	200008a0 	.word	0x200008a0
 8007e7c:	20000894 	.word	0x20000894
 8007e80:	20000790 	.word	0x20000790
 8007e84:	2000078c 	.word	0x2000078c
 8007e88:	20000010 	.word	0x20000010

08007e8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e94:	f000 f852 	bl	8007f3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e98:	4b06      	ldr	r3, [pc, #24]	; (8007eb4 <prvIdleTask+0x28>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d9f9      	bls.n	8007e94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <prvIdleTask+0x2c>)
 8007ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007eb0:	e7f0      	b.n	8007e94 <prvIdleTask+0x8>
 8007eb2:	bf00      	nop
 8007eb4:	20000790 	.word	0x20000790
 8007eb8:	e000ed04 	.word	0xe000ed04

08007ebc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	607b      	str	r3, [r7, #4]
 8007ec6:	e00c      	b.n	8007ee2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4a12      	ldr	r2, [pc, #72]	; (8007f1c <prvInitialiseTaskLists+0x60>)
 8007ed4:	4413      	add	r3, r2
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff fb20 	bl	800751c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	607b      	str	r3, [r7, #4]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b06      	cmp	r3, #6
 8007ee6:	d9ef      	bls.n	8007ec8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ee8:	480d      	ldr	r0, [pc, #52]	; (8007f20 <prvInitialiseTaskLists+0x64>)
 8007eea:	f7ff fb17 	bl	800751c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007eee:	480d      	ldr	r0, [pc, #52]	; (8007f24 <prvInitialiseTaskLists+0x68>)
 8007ef0:	f7ff fb14 	bl	800751c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ef4:	480c      	ldr	r0, [pc, #48]	; (8007f28 <prvInitialiseTaskLists+0x6c>)
 8007ef6:	f7ff fb11 	bl	800751c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007efa:	480c      	ldr	r0, [pc, #48]	; (8007f2c <prvInitialiseTaskLists+0x70>)
 8007efc:	f7ff fb0e 	bl	800751c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f00:	480b      	ldr	r0, [pc, #44]	; (8007f30 <prvInitialiseTaskLists+0x74>)
 8007f02:	f7ff fb0b 	bl	800751c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f06:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <prvInitialiseTaskLists+0x78>)
 8007f08:	4a05      	ldr	r2, [pc, #20]	; (8007f20 <prvInitialiseTaskLists+0x64>)
 8007f0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f0c:	4b0a      	ldr	r3, [pc, #40]	; (8007f38 <prvInitialiseTaskLists+0x7c>)
 8007f0e:	4a05      	ldr	r2, [pc, #20]	; (8007f24 <prvInitialiseTaskLists+0x68>)
 8007f10:	601a      	str	r2, [r3, #0]
}
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20000790 	.word	0x20000790
 8007f20:	2000081c 	.word	0x2000081c
 8007f24:	20000830 	.word	0x20000830
 8007f28:	2000084c 	.word	0x2000084c
 8007f2c:	20000860 	.word	0x20000860
 8007f30:	20000878 	.word	0x20000878
 8007f34:	20000844 	.word	0x20000844
 8007f38:	20000848 	.word	0x20000848

08007f3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f42:	e019      	b.n	8007f78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f44:	f000 f9da 	bl	80082fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007f48:	4b10      	ldr	r3, [pc, #64]	; (8007f8c <prvCheckTasksWaitingTermination+0x50>)
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	3304      	adds	r3, #4
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7ff fb67 	bl	8007628 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f5a:	4b0d      	ldr	r3, [pc, #52]	; (8007f90 <prvCheckTasksWaitingTermination+0x54>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	4a0b      	ldr	r2, [pc, #44]	; (8007f90 <prvCheckTasksWaitingTermination+0x54>)
 8007f62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f64:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <prvCheckTasksWaitingTermination+0x58>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	4a0a      	ldr	r2, [pc, #40]	; (8007f94 <prvCheckTasksWaitingTermination+0x58>)
 8007f6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f6e:	f000 f9f5 	bl	800835c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f810 	bl	8007f98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f78:	4b06      	ldr	r3, [pc, #24]	; (8007f94 <prvCheckTasksWaitingTermination+0x58>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e1      	bne.n	8007f44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f80:	bf00      	nop
 8007f82:	bf00      	nop
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000860 	.word	0x20000860
 8007f90:	2000088c 	.word	0x2000088c
 8007f94:	20000874 	.word	0x20000874

08007f98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	334c      	adds	r3, #76	; 0x4c
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f001 f927 	bl	80091f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d108      	bne.n	8007fc6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 fa73 	bl	80084a4 <vPortFree>
				vPortFree( pxTCB );
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fa70 	bl	80084a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fc4:	e018      	b.n	8007ff8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d103      	bne.n	8007fd8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fa67 	bl	80084a4 <vPortFree>
	}
 8007fd6:	e00f      	b.n	8007ff8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d00a      	beq.n	8007ff8 <prvDeleteTCB+0x60>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	60fb      	str	r3, [r7, #12]
}
 8007ff4:	bf00      	nop
 8007ff6:	e7fe      	b.n	8007ff6 <prvDeleteTCB+0x5e>
	}
 8007ff8:	bf00      	nop
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008006:	4b0e      	ldr	r3, [pc, #56]	; (8008040 <prvResetNextTaskUnblockTime+0x40>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d101      	bne.n	8008014 <prvResetNextTaskUnblockTime+0x14>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <prvResetNextTaskUnblockTime+0x16>
 8008014:	2300      	movs	r3, #0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d004      	beq.n	8008024 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800801a:	4b0a      	ldr	r3, [pc, #40]	; (8008044 <prvResetNextTaskUnblockTime+0x44>)
 800801c:	f04f 32ff 	mov.w	r2, #4294967295
 8008020:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008022:	e008      	b.n	8008036 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008024:	4b06      	ldr	r3, [pc, #24]	; (8008040 <prvResetNextTaskUnblockTime+0x40>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	4a04      	ldr	r2, [pc, #16]	; (8008044 <prvResetNextTaskUnblockTime+0x44>)
 8008034:	6013      	str	r3, [r2, #0]
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	bc80      	pop	{r7}
 800803e:	4770      	bx	lr
 8008040:	20000844 	.word	0x20000844
 8008044:	200008ac 	.word	0x200008ac

08008048 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008052:	4b29      	ldr	r3, [pc, #164]	; (80080f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008058:	4b28      	ldr	r3, [pc, #160]	; (80080fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3304      	adds	r3, #4
 800805e:	4618      	mov	r0, r3
 8008060:	f7ff fae2 	bl	8007628 <uxListRemove>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10b      	bne.n	8008082 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800806a:	4b24      	ldr	r3, [pc, #144]	; (80080fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	2201      	movs	r2, #1
 8008072:	fa02 f303 	lsl.w	r3, r2, r3
 8008076:	43da      	mvns	r2, r3
 8008078:	4b21      	ldr	r3, [pc, #132]	; (8008100 <prvAddCurrentTaskToDelayedList+0xb8>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4013      	ands	r3, r2
 800807e:	4a20      	ldr	r2, [pc, #128]	; (8008100 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008080:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008088:	d10a      	bne.n	80080a0 <prvAddCurrentTaskToDelayedList+0x58>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d007      	beq.n	80080a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008090:	4b1a      	ldr	r3, [pc, #104]	; (80080fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3304      	adds	r3, #4
 8008096:	4619      	mov	r1, r3
 8008098:	481a      	ldr	r0, [pc, #104]	; (8008104 <prvAddCurrentTaskToDelayedList+0xbc>)
 800809a:	f7ff fa6a 	bl	8007572 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800809e:	e026      	b.n	80080ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4413      	add	r3, r2
 80080a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080a8:	4b14      	ldr	r3, [pc, #80]	; (80080fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d209      	bcs.n	80080cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080b8:	4b13      	ldr	r3, [pc, #76]	; (8008108 <prvAddCurrentTaskToDelayedList+0xc0>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3304      	adds	r3, #4
 80080c2:	4619      	mov	r1, r3
 80080c4:	4610      	mov	r0, r2
 80080c6:	f7ff fa77 	bl	80075b8 <vListInsert>
}
 80080ca:	e010      	b.n	80080ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080cc:	4b0f      	ldr	r3, [pc, #60]	; (800810c <prvAddCurrentTaskToDelayedList+0xc4>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3304      	adds	r3, #4
 80080d6:	4619      	mov	r1, r3
 80080d8:	4610      	mov	r0, r2
 80080da:	f7ff fa6d 	bl	80075b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080de:	4b0c      	ldr	r3, [pc, #48]	; (8008110 <prvAddCurrentTaskToDelayedList+0xc8>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d202      	bcs.n	80080ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80080e8:	4a09      	ldr	r2, [pc, #36]	; (8008110 <prvAddCurrentTaskToDelayedList+0xc8>)
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	6013      	str	r3, [r2, #0]
}
 80080ee:	bf00      	nop
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20000890 	.word	0x20000890
 80080fc:	2000078c 	.word	0x2000078c
 8008100:	20000894 	.word	0x20000894
 8008104:	20000878 	.word	0x20000878
 8008108:	20000848 	.word	0x20000848
 800810c:	20000844 	.word	0x20000844
 8008110:	200008ac 	.word	0x200008ac

08008114 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3b04      	subs	r3, #4
 8008124:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800812c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3b04      	subs	r3, #4
 8008132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	f023 0201 	bic.w	r2, r3, #1
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3b04      	subs	r3, #4
 8008142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008144:	4a08      	ldr	r2, [pc, #32]	; (8008168 <pxPortInitialiseStack+0x54>)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3b14      	subs	r3, #20
 800814e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	3b20      	subs	r3, #32
 800815a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800815c:	68fb      	ldr	r3, [r7, #12]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	bc80      	pop	{r7}
 8008166:	4770      	bx	lr
 8008168:	0800816d 	.word	0x0800816d

0800816c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008172:	2300      	movs	r3, #0
 8008174:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008176:	4b12      	ldr	r3, [pc, #72]	; (80081c0 <prvTaskExitError+0x54>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817e:	d00a      	beq.n	8008196 <prvTaskExitError+0x2a>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	60fb      	str	r3, [r7, #12]
}
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <prvTaskExitError+0x28>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60bb      	str	r3, [r7, #8]
}
 80081a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081aa:	bf00      	nop
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0fc      	beq.n	80081ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bc80      	pop	{r7}
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	2000000c 	.word	0x2000000c
	...

080081d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081d0:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <pxCurrentTCBConst2>)
 80081d2:	6819      	ldr	r1, [r3, #0]
 80081d4:	6808      	ldr	r0, [r1, #0]
 80081d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80081da:	f380 8809 	msr	PSP, r0
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f04f 0000 	mov.w	r0, #0
 80081e6:	f380 8811 	msr	BASEPRI, r0
 80081ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80081ee:	4770      	bx	lr

080081f0 <pxCurrentTCBConst2>:
 80081f0:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop

080081f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80081f8:	4806      	ldr	r0, [pc, #24]	; (8008214 <prvPortStartFirstTask+0x1c>)
 80081fa:	6800      	ldr	r0, [r0, #0]
 80081fc:	6800      	ldr	r0, [r0, #0]
 80081fe:	f380 8808 	msr	MSP, r0
 8008202:	b662      	cpsie	i
 8008204:	b661      	cpsie	f
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	df00      	svc	0
 8008210:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008212:	bf00      	nop
 8008214:	e000ed08 	.word	0xe000ed08

08008218 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800821e:	4b32      	ldr	r3, [pc, #200]	; (80082e8 <xPortStartScheduler+0xd0>)
 8008220:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	b2db      	uxtb	r3, r3
 8008228:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	22ff      	movs	r2, #255	; 0xff
 800822e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	b2db      	uxtb	r3, r3
 800823c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008240:	b2da      	uxtb	r2, r3
 8008242:	4b2a      	ldr	r3, [pc, #168]	; (80082ec <xPortStartScheduler+0xd4>)
 8008244:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008246:	4b2a      	ldr	r3, [pc, #168]	; (80082f0 <xPortStartScheduler+0xd8>)
 8008248:	2207      	movs	r2, #7
 800824a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800824c:	e009      	b.n	8008262 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800824e:	4b28      	ldr	r3, [pc, #160]	; (80082f0 <xPortStartScheduler+0xd8>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3b01      	subs	r3, #1
 8008254:	4a26      	ldr	r2, [pc, #152]	; (80082f0 <xPortStartScheduler+0xd8>)
 8008256:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008258:	78fb      	ldrb	r3, [r7, #3]
 800825a:	b2db      	uxtb	r3, r3
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	b2db      	uxtb	r3, r3
 8008260:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008262:	78fb      	ldrb	r3, [r7, #3]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826a:	2b80      	cmp	r3, #128	; 0x80
 800826c:	d0ef      	beq.n	800824e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800826e:	4b20      	ldr	r3, [pc, #128]	; (80082f0 <xPortStartScheduler+0xd8>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f1c3 0307 	rsb	r3, r3, #7
 8008276:	2b04      	cmp	r3, #4
 8008278:	d00a      	beq.n	8008290 <xPortStartScheduler+0x78>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	60bb      	str	r3, [r7, #8]
}
 800828c:	bf00      	nop
 800828e:	e7fe      	b.n	800828e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008290:	4b17      	ldr	r3, [pc, #92]	; (80082f0 <xPortStartScheduler+0xd8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	021b      	lsls	r3, r3, #8
 8008296:	4a16      	ldr	r2, [pc, #88]	; (80082f0 <xPortStartScheduler+0xd8>)
 8008298:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800829a:	4b15      	ldr	r3, [pc, #84]	; (80082f0 <xPortStartScheduler+0xd8>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082a2:	4a13      	ldr	r2, [pc, #76]	; (80082f0 <xPortStartScheduler+0xd8>)
 80082a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082ae:	4b11      	ldr	r3, [pc, #68]	; (80082f4 <xPortStartScheduler+0xdc>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a10      	ldr	r2, [pc, #64]	; (80082f4 <xPortStartScheduler+0xdc>)
 80082b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082ba:	4b0e      	ldr	r3, [pc, #56]	; (80082f4 <xPortStartScheduler+0xdc>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a0d      	ldr	r2, [pc, #52]	; (80082f4 <xPortStartScheduler+0xdc>)
 80082c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082c6:	f000 f8b9 	bl	800843c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082ca:	4b0b      	ldr	r3, [pc, #44]	; (80082f8 <xPortStartScheduler+0xe0>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082d0:	f7ff ff92 	bl	80081f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082d4:	f7ff fd78 	bl	8007dc8 <vTaskSwitchContext>
	prvTaskExitError();
 80082d8:	f7ff ff48 	bl	800816c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	e000e400 	.word	0xe000e400
 80082ec:	200008b8 	.word	0x200008b8
 80082f0:	200008bc 	.word	0x200008bc
 80082f4:	e000ed20 	.word	0xe000ed20
 80082f8:	2000000c 	.word	0x2000000c

080082fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	607b      	str	r3, [r7, #4]
}
 8008314:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008316:	4b0f      	ldr	r3, [pc, #60]	; (8008354 <vPortEnterCritical+0x58>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3301      	adds	r3, #1
 800831c:	4a0d      	ldr	r2, [pc, #52]	; (8008354 <vPortEnterCritical+0x58>)
 800831e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008320:	4b0c      	ldr	r3, [pc, #48]	; (8008354 <vPortEnterCritical+0x58>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d10f      	bne.n	8008348 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008328:	4b0b      	ldr	r3, [pc, #44]	; (8008358 <vPortEnterCritical+0x5c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <vPortEnterCritical+0x4c>
	__asm volatile
 8008332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	603b      	str	r3, [r7, #0]
}
 8008344:	bf00      	nop
 8008346:	e7fe      	b.n	8008346 <vPortEnterCritical+0x4a>
	}
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	bc80      	pop	{r7}
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	2000000c 	.word	0x2000000c
 8008358:	e000ed04 	.word	0xe000ed04

0800835c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008362:	4b11      	ldr	r3, [pc, #68]	; (80083a8 <vPortExitCritical+0x4c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10a      	bne.n	8008380 <vPortExitCritical+0x24>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	607b      	str	r3, [r7, #4]
}
 800837c:	bf00      	nop
 800837e:	e7fe      	b.n	800837e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008380:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <vPortExitCritical+0x4c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3b01      	subs	r3, #1
 8008386:	4a08      	ldr	r2, [pc, #32]	; (80083a8 <vPortExitCritical+0x4c>)
 8008388:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800838a:	4b07      	ldr	r3, [pc, #28]	; (80083a8 <vPortExitCritical+0x4c>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d105      	bne.n	800839e <vPortExitCritical+0x42>
 8008392:	2300      	movs	r3, #0
 8008394:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800839c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bc80      	pop	{r7}
 80083a6:	4770      	bx	lr
 80083a8:	2000000c 	.word	0x2000000c
 80083ac:	00000000 	.word	0x00000000

080083b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083b0:	f3ef 8009 	mrs	r0, PSP
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	4b0d      	ldr	r3, [pc, #52]	; (80083f0 <pxCurrentTCBConst>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80083c0:	6010      	str	r0, [r2, #0]
 80083c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80083c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083ca:	f380 8811 	msr	BASEPRI, r0
 80083ce:	f7ff fcfb 	bl	8007dc8 <vTaskSwitchContext>
 80083d2:	f04f 0000 	mov.w	r0, #0
 80083d6:	f380 8811 	msr	BASEPRI, r0
 80083da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80083de:	6819      	ldr	r1, [r3, #0]
 80083e0:	6808      	ldr	r0, [r1, #0]
 80083e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80083e6:	f380 8809 	msr	PSP, r0
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	4770      	bx	lr

080083f0 <pxCurrentTCBConst>:
 80083f0:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop

080083f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	607b      	str	r3, [r7, #4]
}
 8008410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008412:	f7ff fc1b 	bl	8007c4c <xTaskIncrementTick>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800841c:	4b06      	ldr	r3, [pc, #24]	; (8008438 <SysTick_Handler+0x40>)
 800841e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	2300      	movs	r3, #0
 8008426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	f383 8811 	msr	BASEPRI, r3
}
 800842e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	e000ed04 	.word	0xe000ed04

0800843c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008440:	4b0a      	ldr	r3, [pc, #40]	; (800846c <vPortSetupTimerInterrupt+0x30>)
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008446:	4b0a      	ldr	r3, [pc, #40]	; (8008470 <vPortSetupTimerInterrupt+0x34>)
 8008448:	2200      	movs	r2, #0
 800844a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800844c:	4b09      	ldr	r3, [pc, #36]	; (8008474 <vPortSetupTimerInterrupt+0x38>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a09      	ldr	r2, [pc, #36]	; (8008478 <vPortSetupTimerInterrupt+0x3c>)
 8008452:	fba2 2303 	umull	r2, r3, r2, r3
 8008456:	099b      	lsrs	r3, r3, #6
 8008458:	4a08      	ldr	r2, [pc, #32]	; (800847c <vPortSetupTimerInterrupt+0x40>)
 800845a:	3b01      	subs	r3, #1
 800845c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800845e:	4b03      	ldr	r3, [pc, #12]	; (800846c <vPortSetupTimerInterrupt+0x30>)
 8008460:	2207      	movs	r2, #7
 8008462:	601a      	str	r2, [r3, #0]
}
 8008464:	bf00      	nop
 8008466:	46bd      	mov	sp, r7
 8008468:	bc80      	pop	{r7}
 800846a:	4770      	bx	lr
 800846c:	e000e010 	.word	0xe000e010
 8008470:	e000e018 	.word	0xe000e018
 8008474:	20000000 	.word	0x20000000
 8008478:	10624dd3 	.word	0x10624dd3
 800847c:	e000e014 	.word	0xe000e014

08008480 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8008488:	f7ff fb36 	bl	8007af8 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f943 	bl	8008718 <malloc>
 8008492:	4603      	mov	r3, r0
 8008494:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008496:	f7ff fb3d 	bl	8007b14 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800849a:	68fb      	ldr	r3, [r7, #12]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
	if( pv )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d006      	beq.n	80084c0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 80084b2:	f7ff fb21 	bl	8007af8 <vTaskSuspendAll>
		{
			free( pv );
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f936 	bl	8008728 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 80084bc:	f7ff fb2a 	bl	8007b14 <xTaskResumeAll>
	}
}
 80084c0:	bf00      	nop
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <atof>:
 80084c8:	2100      	movs	r1, #0
 80084ca:	f001 bd6d 	b.w	8009fa8 <strtod>
	...

080084d0 <__errno>:
 80084d0:	4b01      	ldr	r3, [pc, #4]	; (80084d8 <__errno+0x8>)
 80084d2:	6818      	ldr	r0, [r3, #0]
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	20000010 	.word	0x20000010

080084dc <std>:
 80084dc:	2300      	movs	r3, #0
 80084de:	b510      	push	{r4, lr}
 80084e0:	4604      	mov	r4, r0
 80084e2:	e9c0 3300 	strd	r3, r3, [r0]
 80084e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084ea:	6083      	str	r3, [r0, #8]
 80084ec:	8181      	strh	r1, [r0, #12]
 80084ee:	6643      	str	r3, [r0, #100]	; 0x64
 80084f0:	81c2      	strh	r2, [r0, #14]
 80084f2:	6183      	str	r3, [r0, #24]
 80084f4:	4619      	mov	r1, r3
 80084f6:	2208      	movs	r2, #8
 80084f8:	305c      	adds	r0, #92	; 0x5c
 80084fa:	f000 f92b 	bl	8008754 <memset>
 80084fe:	4b05      	ldr	r3, [pc, #20]	; (8008514 <std+0x38>)
 8008500:	6224      	str	r4, [r4, #32]
 8008502:	6263      	str	r3, [r4, #36]	; 0x24
 8008504:	4b04      	ldr	r3, [pc, #16]	; (8008518 <std+0x3c>)
 8008506:	62a3      	str	r3, [r4, #40]	; 0x28
 8008508:	4b04      	ldr	r3, [pc, #16]	; (800851c <std+0x40>)
 800850a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800850c:	4b04      	ldr	r3, [pc, #16]	; (8008520 <std+0x44>)
 800850e:	6323      	str	r3, [r4, #48]	; 0x30
 8008510:	bd10      	pop	{r4, pc}
 8008512:	bf00      	nop
 8008514:	08009311 	.word	0x08009311
 8008518:	08009333 	.word	0x08009333
 800851c:	0800936b 	.word	0x0800936b
 8008520:	0800938f 	.word	0x0800938f

08008524 <_cleanup_r>:
 8008524:	4901      	ldr	r1, [pc, #4]	; (800852c <_cleanup_r+0x8>)
 8008526:	f000 b8af 	b.w	8008688 <_fwalk_reent>
 800852a:	bf00      	nop
 800852c:	0800ae01 	.word	0x0800ae01

08008530 <__sfmoreglue>:
 8008530:	2268      	movs	r2, #104	; 0x68
 8008532:	b570      	push	{r4, r5, r6, lr}
 8008534:	1e4d      	subs	r5, r1, #1
 8008536:	4355      	muls	r5, r2
 8008538:	460e      	mov	r6, r1
 800853a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800853e:	f000 f979 	bl	8008834 <_malloc_r>
 8008542:	4604      	mov	r4, r0
 8008544:	b140      	cbz	r0, 8008558 <__sfmoreglue+0x28>
 8008546:	2100      	movs	r1, #0
 8008548:	e9c0 1600 	strd	r1, r6, [r0]
 800854c:	300c      	adds	r0, #12
 800854e:	60a0      	str	r0, [r4, #8]
 8008550:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008554:	f000 f8fe 	bl	8008754 <memset>
 8008558:	4620      	mov	r0, r4
 800855a:	bd70      	pop	{r4, r5, r6, pc}

0800855c <__sfp_lock_acquire>:
 800855c:	4801      	ldr	r0, [pc, #4]	; (8008564 <__sfp_lock_acquire+0x8>)
 800855e:	f000 b8d8 	b.w	8008712 <__retarget_lock_acquire_recursive>
 8008562:	bf00      	nop
 8008564:	200008c1 	.word	0x200008c1

08008568 <__sfp_lock_release>:
 8008568:	4801      	ldr	r0, [pc, #4]	; (8008570 <__sfp_lock_release+0x8>)
 800856a:	f000 b8d3 	b.w	8008714 <__retarget_lock_release_recursive>
 800856e:	bf00      	nop
 8008570:	200008c1 	.word	0x200008c1

08008574 <__sinit_lock_acquire>:
 8008574:	4801      	ldr	r0, [pc, #4]	; (800857c <__sinit_lock_acquire+0x8>)
 8008576:	f000 b8cc 	b.w	8008712 <__retarget_lock_acquire_recursive>
 800857a:	bf00      	nop
 800857c:	200008c2 	.word	0x200008c2

08008580 <__sinit_lock_release>:
 8008580:	4801      	ldr	r0, [pc, #4]	; (8008588 <__sinit_lock_release+0x8>)
 8008582:	f000 b8c7 	b.w	8008714 <__retarget_lock_release_recursive>
 8008586:	bf00      	nop
 8008588:	200008c2 	.word	0x200008c2

0800858c <__sinit>:
 800858c:	b510      	push	{r4, lr}
 800858e:	4604      	mov	r4, r0
 8008590:	f7ff fff0 	bl	8008574 <__sinit_lock_acquire>
 8008594:	69a3      	ldr	r3, [r4, #24]
 8008596:	b11b      	cbz	r3, 80085a0 <__sinit+0x14>
 8008598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800859c:	f7ff bff0 	b.w	8008580 <__sinit_lock_release>
 80085a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085a4:	6523      	str	r3, [r4, #80]	; 0x50
 80085a6:	4b13      	ldr	r3, [pc, #76]	; (80085f4 <__sinit+0x68>)
 80085a8:	4a13      	ldr	r2, [pc, #76]	; (80085f8 <__sinit+0x6c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80085ae:	42a3      	cmp	r3, r4
 80085b0:	bf08      	it	eq
 80085b2:	2301      	moveq	r3, #1
 80085b4:	4620      	mov	r0, r4
 80085b6:	bf08      	it	eq
 80085b8:	61a3      	streq	r3, [r4, #24]
 80085ba:	f000 f81f 	bl	80085fc <__sfp>
 80085be:	6060      	str	r0, [r4, #4]
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 f81b 	bl	80085fc <__sfp>
 80085c6:	60a0      	str	r0, [r4, #8]
 80085c8:	4620      	mov	r0, r4
 80085ca:	f000 f817 	bl	80085fc <__sfp>
 80085ce:	2200      	movs	r2, #0
 80085d0:	2104      	movs	r1, #4
 80085d2:	60e0      	str	r0, [r4, #12]
 80085d4:	6860      	ldr	r0, [r4, #4]
 80085d6:	f7ff ff81 	bl	80084dc <std>
 80085da:	2201      	movs	r2, #1
 80085dc:	2109      	movs	r1, #9
 80085de:	68a0      	ldr	r0, [r4, #8]
 80085e0:	f7ff ff7c 	bl	80084dc <std>
 80085e4:	2202      	movs	r2, #2
 80085e6:	2112      	movs	r1, #18
 80085e8:	68e0      	ldr	r0, [r4, #12]
 80085ea:	f7ff ff77 	bl	80084dc <std>
 80085ee:	2301      	movs	r3, #1
 80085f0:	61a3      	str	r3, [r4, #24]
 80085f2:	e7d1      	b.n	8008598 <__sinit+0xc>
 80085f4:	0800d9b0 	.word	0x0800d9b0
 80085f8:	08008525 	.word	0x08008525

080085fc <__sfp>:
 80085fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fe:	4607      	mov	r7, r0
 8008600:	f7ff ffac 	bl	800855c <__sfp_lock_acquire>
 8008604:	4b1e      	ldr	r3, [pc, #120]	; (8008680 <__sfp+0x84>)
 8008606:	681e      	ldr	r6, [r3, #0]
 8008608:	69b3      	ldr	r3, [r6, #24]
 800860a:	b913      	cbnz	r3, 8008612 <__sfp+0x16>
 800860c:	4630      	mov	r0, r6
 800860e:	f7ff ffbd 	bl	800858c <__sinit>
 8008612:	3648      	adds	r6, #72	; 0x48
 8008614:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008618:	3b01      	subs	r3, #1
 800861a:	d503      	bpl.n	8008624 <__sfp+0x28>
 800861c:	6833      	ldr	r3, [r6, #0]
 800861e:	b30b      	cbz	r3, 8008664 <__sfp+0x68>
 8008620:	6836      	ldr	r6, [r6, #0]
 8008622:	e7f7      	b.n	8008614 <__sfp+0x18>
 8008624:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008628:	b9d5      	cbnz	r5, 8008660 <__sfp+0x64>
 800862a:	4b16      	ldr	r3, [pc, #88]	; (8008684 <__sfp+0x88>)
 800862c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008630:	60e3      	str	r3, [r4, #12]
 8008632:	6665      	str	r5, [r4, #100]	; 0x64
 8008634:	f000 f86c 	bl	8008710 <__retarget_lock_init_recursive>
 8008638:	f7ff ff96 	bl	8008568 <__sfp_lock_release>
 800863c:	2208      	movs	r2, #8
 800863e:	4629      	mov	r1, r5
 8008640:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008644:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008648:	6025      	str	r5, [r4, #0]
 800864a:	61a5      	str	r5, [r4, #24]
 800864c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008650:	f000 f880 	bl	8008754 <memset>
 8008654:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008658:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800865c:	4620      	mov	r0, r4
 800865e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008660:	3468      	adds	r4, #104	; 0x68
 8008662:	e7d9      	b.n	8008618 <__sfp+0x1c>
 8008664:	2104      	movs	r1, #4
 8008666:	4638      	mov	r0, r7
 8008668:	f7ff ff62 	bl	8008530 <__sfmoreglue>
 800866c:	4604      	mov	r4, r0
 800866e:	6030      	str	r0, [r6, #0]
 8008670:	2800      	cmp	r0, #0
 8008672:	d1d5      	bne.n	8008620 <__sfp+0x24>
 8008674:	f7ff ff78 	bl	8008568 <__sfp_lock_release>
 8008678:	230c      	movs	r3, #12
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	e7ee      	b.n	800865c <__sfp+0x60>
 800867e:	bf00      	nop
 8008680:	0800d9b0 	.word	0x0800d9b0
 8008684:	ffff0001 	.word	0xffff0001

08008688 <_fwalk_reent>:
 8008688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800868c:	4606      	mov	r6, r0
 800868e:	4688      	mov	r8, r1
 8008690:	2700      	movs	r7, #0
 8008692:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008696:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800869a:	f1b9 0901 	subs.w	r9, r9, #1
 800869e:	d505      	bpl.n	80086ac <_fwalk_reent+0x24>
 80086a0:	6824      	ldr	r4, [r4, #0]
 80086a2:	2c00      	cmp	r4, #0
 80086a4:	d1f7      	bne.n	8008696 <_fwalk_reent+0xe>
 80086a6:	4638      	mov	r0, r7
 80086a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ac:	89ab      	ldrh	r3, [r5, #12]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d907      	bls.n	80086c2 <_fwalk_reent+0x3a>
 80086b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086b6:	3301      	adds	r3, #1
 80086b8:	d003      	beq.n	80086c2 <_fwalk_reent+0x3a>
 80086ba:	4629      	mov	r1, r5
 80086bc:	4630      	mov	r0, r6
 80086be:	47c0      	blx	r8
 80086c0:	4307      	orrs	r7, r0
 80086c2:	3568      	adds	r5, #104	; 0x68
 80086c4:	e7e9      	b.n	800869a <_fwalk_reent+0x12>
	...

080086c8 <__libc_init_array>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	2600      	movs	r6, #0
 80086cc:	4d0c      	ldr	r5, [pc, #48]	; (8008700 <__libc_init_array+0x38>)
 80086ce:	4c0d      	ldr	r4, [pc, #52]	; (8008704 <__libc_init_array+0x3c>)
 80086d0:	1b64      	subs	r4, r4, r5
 80086d2:	10a4      	asrs	r4, r4, #2
 80086d4:	42a6      	cmp	r6, r4
 80086d6:	d109      	bne.n	80086ec <__libc_init_array+0x24>
 80086d8:	f005 f848 	bl	800d76c <_init>
 80086dc:	2600      	movs	r6, #0
 80086de:	4d0a      	ldr	r5, [pc, #40]	; (8008708 <__libc_init_array+0x40>)
 80086e0:	4c0a      	ldr	r4, [pc, #40]	; (800870c <__libc_init_array+0x44>)
 80086e2:	1b64      	subs	r4, r4, r5
 80086e4:	10a4      	asrs	r4, r4, #2
 80086e6:	42a6      	cmp	r6, r4
 80086e8:	d105      	bne.n	80086f6 <__libc_init_array+0x2e>
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
 80086ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f0:	4798      	blx	r3
 80086f2:	3601      	adds	r6, #1
 80086f4:	e7ee      	b.n	80086d4 <__libc_init_array+0xc>
 80086f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086fa:	4798      	blx	r3
 80086fc:	3601      	adds	r6, #1
 80086fe:	e7f2      	b.n	80086e6 <__libc_init_array+0x1e>
 8008700:	0800de28 	.word	0x0800de28
 8008704:	0800de28 	.word	0x0800de28
 8008708:	0800de28 	.word	0x0800de28
 800870c:	0800de2c 	.word	0x0800de2c

08008710 <__retarget_lock_init_recursive>:
 8008710:	4770      	bx	lr

08008712 <__retarget_lock_acquire_recursive>:
 8008712:	4770      	bx	lr

08008714 <__retarget_lock_release_recursive>:
 8008714:	4770      	bx	lr
	...

08008718 <malloc>:
 8008718:	4b02      	ldr	r3, [pc, #8]	; (8008724 <malloc+0xc>)
 800871a:	4601      	mov	r1, r0
 800871c:	6818      	ldr	r0, [r3, #0]
 800871e:	f000 b889 	b.w	8008834 <_malloc_r>
 8008722:	bf00      	nop
 8008724:	20000010 	.word	0x20000010

08008728 <free>:
 8008728:	4b02      	ldr	r3, [pc, #8]	; (8008734 <free+0xc>)
 800872a:	4601      	mov	r1, r0
 800872c:	6818      	ldr	r0, [r3, #0]
 800872e:	f000 b819 	b.w	8008764 <_free_r>
 8008732:	bf00      	nop
 8008734:	20000010 	.word	0x20000010

08008738 <memcpy>:
 8008738:	440a      	add	r2, r1
 800873a:	4291      	cmp	r1, r2
 800873c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008740:	d100      	bne.n	8008744 <memcpy+0xc>
 8008742:	4770      	bx	lr
 8008744:	b510      	push	{r4, lr}
 8008746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800874a:	4291      	cmp	r1, r2
 800874c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008750:	d1f9      	bne.n	8008746 <memcpy+0xe>
 8008752:	bd10      	pop	{r4, pc}

08008754 <memset>:
 8008754:	4603      	mov	r3, r0
 8008756:	4402      	add	r2, r0
 8008758:	4293      	cmp	r3, r2
 800875a:	d100      	bne.n	800875e <memset+0xa>
 800875c:	4770      	bx	lr
 800875e:	f803 1b01 	strb.w	r1, [r3], #1
 8008762:	e7f9      	b.n	8008758 <memset+0x4>

08008764 <_free_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	4605      	mov	r5, r0
 8008768:	2900      	cmp	r1, #0
 800876a:	d040      	beq.n	80087ee <_free_r+0x8a>
 800876c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008770:	1f0c      	subs	r4, r1, #4
 8008772:	2b00      	cmp	r3, #0
 8008774:	bfb8      	it	lt
 8008776:	18e4      	addlt	r4, r4, r3
 8008778:	f002 ff1a 	bl	800b5b0 <__malloc_lock>
 800877c:	4a1c      	ldr	r2, [pc, #112]	; (80087f0 <_free_r+0x8c>)
 800877e:	6813      	ldr	r3, [r2, #0]
 8008780:	b933      	cbnz	r3, 8008790 <_free_r+0x2c>
 8008782:	6063      	str	r3, [r4, #4]
 8008784:	6014      	str	r4, [r2, #0]
 8008786:	4628      	mov	r0, r5
 8008788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800878c:	f002 bf16 	b.w	800b5bc <__malloc_unlock>
 8008790:	42a3      	cmp	r3, r4
 8008792:	d908      	bls.n	80087a6 <_free_r+0x42>
 8008794:	6820      	ldr	r0, [r4, #0]
 8008796:	1821      	adds	r1, r4, r0
 8008798:	428b      	cmp	r3, r1
 800879a:	bf01      	itttt	eq
 800879c:	6819      	ldreq	r1, [r3, #0]
 800879e:	685b      	ldreq	r3, [r3, #4]
 80087a0:	1809      	addeq	r1, r1, r0
 80087a2:	6021      	streq	r1, [r4, #0]
 80087a4:	e7ed      	b.n	8008782 <_free_r+0x1e>
 80087a6:	461a      	mov	r2, r3
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	b10b      	cbz	r3, 80087b0 <_free_r+0x4c>
 80087ac:	42a3      	cmp	r3, r4
 80087ae:	d9fa      	bls.n	80087a6 <_free_r+0x42>
 80087b0:	6811      	ldr	r1, [r2, #0]
 80087b2:	1850      	adds	r0, r2, r1
 80087b4:	42a0      	cmp	r0, r4
 80087b6:	d10b      	bne.n	80087d0 <_free_r+0x6c>
 80087b8:	6820      	ldr	r0, [r4, #0]
 80087ba:	4401      	add	r1, r0
 80087bc:	1850      	adds	r0, r2, r1
 80087be:	4283      	cmp	r3, r0
 80087c0:	6011      	str	r1, [r2, #0]
 80087c2:	d1e0      	bne.n	8008786 <_free_r+0x22>
 80087c4:	6818      	ldr	r0, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	4401      	add	r1, r0
 80087ca:	6011      	str	r1, [r2, #0]
 80087cc:	6053      	str	r3, [r2, #4]
 80087ce:	e7da      	b.n	8008786 <_free_r+0x22>
 80087d0:	d902      	bls.n	80087d8 <_free_r+0x74>
 80087d2:	230c      	movs	r3, #12
 80087d4:	602b      	str	r3, [r5, #0]
 80087d6:	e7d6      	b.n	8008786 <_free_r+0x22>
 80087d8:	6820      	ldr	r0, [r4, #0]
 80087da:	1821      	adds	r1, r4, r0
 80087dc:	428b      	cmp	r3, r1
 80087de:	bf01      	itttt	eq
 80087e0:	6819      	ldreq	r1, [r3, #0]
 80087e2:	685b      	ldreq	r3, [r3, #4]
 80087e4:	1809      	addeq	r1, r1, r0
 80087e6:	6021      	streq	r1, [r4, #0]
 80087e8:	6063      	str	r3, [r4, #4]
 80087ea:	6054      	str	r4, [r2, #4]
 80087ec:	e7cb      	b.n	8008786 <_free_r+0x22>
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
 80087f0:	200008c4 	.word	0x200008c4

080087f4 <sbrk_aligned>:
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	4e0e      	ldr	r6, [pc, #56]	; (8008830 <sbrk_aligned+0x3c>)
 80087f8:	460c      	mov	r4, r1
 80087fa:	6831      	ldr	r1, [r6, #0]
 80087fc:	4605      	mov	r5, r0
 80087fe:	b911      	cbnz	r1, 8008806 <sbrk_aligned+0x12>
 8008800:	f000 fd56 	bl	80092b0 <_sbrk_r>
 8008804:	6030      	str	r0, [r6, #0]
 8008806:	4621      	mov	r1, r4
 8008808:	4628      	mov	r0, r5
 800880a:	f000 fd51 	bl	80092b0 <_sbrk_r>
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	d00a      	beq.n	8008828 <sbrk_aligned+0x34>
 8008812:	1cc4      	adds	r4, r0, #3
 8008814:	f024 0403 	bic.w	r4, r4, #3
 8008818:	42a0      	cmp	r0, r4
 800881a:	d007      	beq.n	800882c <sbrk_aligned+0x38>
 800881c:	1a21      	subs	r1, r4, r0
 800881e:	4628      	mov	r0, r5
 8008820:	f000 fd46 	bl	80092b0 <_sbrk_r>
 8008824:	3001      	adds	r0, #1
 8008826:	d101      	bne.n	800882c <sbrk_aligned+0x38>
 8008828:	f04f 34ff 	mov.w	r4, #4294967295
 800882c:	4620      	mov	r0, r4
 800882e:	bd70      	pop	{r4, r5, r6, pc}
 8008830:	200008c8 	.word	0x200008c8

08008834 <_malloc_r>:
 8008834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008838:	1ccd      	adds	r5, r1, #3
 800883a:	f025 0503 	bic.w	r5, r5, #3
 800883e:	3508      	adds	r5, #8
 8008840:	2d0c      	cmp	r5, #12
 8008842:	bf38      	it	cc
 8008844:	250c      	movcc	r5, #12
 8008846:	2d00      	cmp	r5, #0
 8008848:	4607      	mov	r7, r0
 800884a:	db01      	blt.n	8008850 <_malloc_r+0x1c>
 800884c:	42a9      	cmp	r1, r5
 800884e:	d905      	bls.n	800885c <_malloc_r+0x28>
 8008850:	230c      	movs	r3, #12
 8008852:	2600      	movs	r6, #0
 8008854:	603b      	str	r3, [r7, #0]
 8008856:	4630      	mov	r0, r6
 8008858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800885c:	4e2e      	ldr	r6, [pc, #184]	; (8008918 <_malloc_r+0xe4>)
 800885e:	f002 fea7 	bl	800b5b0 <__malloc_lock>
 8008862:	6833      	ldr	r3, [r6, #0]
 8008864:	461c      	mov	r4, r3
 8008866:	bb34      	cbnz	r4, 80088b6 <_malloc_r+0x82>
 8008868:	4629      	mov	r1, r5
 800886a:	4638      	mov	r0, r7
 800886c:	f7ff ffc2 	bl	80087f4 <sbrk_aligned>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	4604      	mov	r4, r0
 8008874:	d14d      	bne.n	8008912 <_malloc_r+0xde>
 8008876:	6834      	ldr	r4, [r6, #0]
 8008878:	4626      	mov	r6, r4
 800887a:	2e00      	cmp	r6, #0
 800887c:	d140      	bne.n	8008900 <_malloc_r+0xcc>
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	4631      	mov	r1, r6
 8008882:	4638      	mov	r0, r7
 8008884:	eb04 0803 	add.w	r8, r4, r3
 8008888:	f000 fd12 	bl	80092b0 <_sbrk_r>
 800888c:	4580      	cmp	r8, r0
 800888e:	d13a      	bne.n	8008906 <_malloc_r+0xd2>
 8008890:	6821      	ldr	r1, [r4, #0]
 8008892:	3503      	adds	r5, #3
 8008894:	1a6d      	subs	r5, r5, r1
 8008896:	f025 0503 	bic.w	r5, r5, #3
 800889a:	3508      	adds	r5, #8
 800889c:	2d0c      	cmp	r5, #12
 800889e:	bf38      	it	cc
 80088a0:	250c      	movcc	r5, #12
 80088a2:	4638      	mov	r0, r7
 80088a4:	4629      	mov	r1, r5
 80088a6:	f7ff ffa5 	bl	80087f4 <sbrk_aligned>
 80088aa:	3001      	adds	r0, #1
 80088ac:	d02b      	beq.n	8008906 <_malloc_r+0xd2>
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	442b      	add	r3, r5
 80088b2:	6023      	str	r3, [r4, #0]
 80088b4:	e00e      	b.n	80088d4 <_malloc_r+0xa0>
 80088b6:	6822      	ldr	r2, [r4, #0]
 80088b8:	1b52      	subs	r2, r2, r5
 80088ba:	d41e      	bmi.n	80088fa <_malloc_r+0xc6>
 80088bc:	2a0b      	cmp	r2, #11
 80088be:	d916      	bls.n	80088ee <_malloc_r+0xba>
 80088c0:	1961      	adds	r1, r4, r5
 80088c2:	42a3      	cmp	r3, r4
 80088c4:	6025      	str	r5, [r4, #0]
 80088c6:	bf18      	it	ne
 80088c8:	6059      	strne	r1, [r3, #4]
 80088ca:	6863      	ldr	r3, [r4, #4]
 80088cc:	bf08      	it	eq
 80088ce:	6031      	streq	r1, [r6, #0]
 80088d0:	5162      	str	r2, [r4, r5]
 80088d2:	604b      	str	r3, [r1, #4]
 80088d4:	4638      	mov	r0, r7
 80088d6:	f104 060b 	add.w	r6, r4, #11
 80088da:	f002 fe6f 	bl	800b5bc <__malloc_unlock>
 80088de:	f026 0607 	bic.w	r6, r6, #7
 80088e2:	1d23      	adds	r3, r4, #4
 80088e4:	1af2      	subs	r2, r6, r3
 80088e6:	d0b6      	beq.n	8008856 <_malloc_r+0x22>
 80088e8:	1b9b      	subs	r3, r3, r6
 80088ea:	50a3      	str	r3, [r4, r2]
 80088ec:	e7b3      	b.n	8008856 <_malloc_r+0x22>
 80088ee:	6862      	ldr	r2, [r4, #4]
 80088f0:	42a3      	cmp	r3, r4
 80088f2:	bf0c      	ite	eq
 80088f4:	6032      	streq	r2, [r6, #0]
 80088f6:	605a      	strne	r2, [r3, #4]
 80088f8:	e7ec      	b.n	80088d4 <_malloc_r+0xa0>
 80088fa:	4623      	mov	r3, r4
 80088fc:	6864      	ldr	r4, [r4, #4]
 80088fe:	e7b2      	b.n	8008866 <_malloc_r+0x32>
 8008900:	4634      	mov	r4, r6
 8008902:	6876      	ldr	r6, [r6, #4]
 8008904:	e7b9      	b.n	800887a <_malloc_r+0x46>
 8008906:	230c      	movs	r3, #12
 8008908:	4638      	mov	r0, r7
 800890a:	603b      	str	r3, [r7, #0]
 800890c:	f002 fe56 	bl	800b5bc <__malloc_unlock>
 8008910:	e7a1      	b.n	8008856 <_malloc_r+0x22>
 8008912:	6025      	str	r5, [r4, #0]
 8008914:	e7de      	b.n	80088d4 <_malloc_r+0xa0>
 8008916:	bf00      	nop
 8008918:	200008c4 	.word	0x200008c4

0800891c <__cvt>:
 800891c:	2b00      	cmp	r3, #0
 800891e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008922:	461f      	mov	r7, r3
 8008924:	bfbb      	ittet	lt
 8008926:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800892a:	461f      	movlt	r7, r3
 800892c:	2300      	movge	r3, #0
 800892e:	232d      	movlt	r3, #45	; 0x2d
 8008930:	b088      	sub	sp, #32
 8008932:	4614      	mov	r4, r2
 8008934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008936:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008938:	7013      	strb	r3, [r2, #0]
 800893a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800893c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008940:	f023 0820 	bic.w	r8, r3, #32
 8008944:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008948:	d005      	beq.n	8008956 <__cvt+0x3a>
 800894a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800894e:	d100      	bne.n	8008952 <__cvt+0x36>
 8008950:	3501      	adds	r5, #1
 8008952:	2302      	movs	r3, #2
 8008954:	e000      	b.n	8008958 <__cvt+0x3c>
 8008956:	2303      	movs	r3, #3
 8008958:	aa07      	add	r2, sp, #28
 800895a:	9204      	str	r2, [sp, #16]
 800895c:	aa06      	add	r2, sp, #24
 800895e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008962:	e9cd 3500 	strd	r3, r5, [sp]
 8008966:	4622      	mov	r2, r4
 8008968:	463b      	mov	r3, r7
 800896a:	f001 fbd9 	bl	800a120 <_dtoa_r>
 800896e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008972:	4606      	mov	r6, r0
 8008974:	d102      	bne.n	800897c <__cvt+0x60>
 8008976:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008978:	07db      	lsls	r3, r3, #31
 800897a:	d522      	bpl.n	80089c2 <__cvt+0xa6>
 800897c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008980:	eb06 0905 	add.w	r9, r6, r5
 8008984:	d110      	bne.n	80089a8 <__cvt+0x8c>
 8008986:	7833      	ldrb	r3, [r6, #0]
 8008988:	2b30      	cmp	r3, #48	; 0x30
 800898a:	d10a      	bne.n	80089a2 <__cvt+0x86>
 800898c:	2200      	movs	r2, #0
 800898e:	2300      	movs	r3, #0
 8008990:	4620      	mov	r0, r4
 8008992:	4639      	mov	r1, r7
 8008994:	f7f8 f92c 	bl	8000bf0 <__aeabi_dcmpeq>
 8008998:	b918      	cbnz	r0, 80089a2 <__cvt+0x86>
 800899a:	f1c5 0501 	rsb	r5, r5, #1
 800899e:	f8ca 5000 	str.w	r5, [sl]
 80089a2:	f8da 3000 	ldr.w	r3, [sl]
 80089a6:	4499      	add	r9, r3
 80089a8:	2200      	movs	r2, #0
 80089aa:	2300      	movs	r3, #0
 80089ac:	4620      	mov	r0, r4
 80089ae:	4639      	mov	r1, r7
 80089b0:	f7f8 f91e 	bl	8000bf0 <__aeabi_dcmpeq>
 80089b4:	b108      	cbz	r0, 80089ba <__cvt+0x9e>
 80089b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80089ba:	2230      	movs	r2, #48	; 0x30
 80089bc:	9b07      	ldr	r3, [sp, #28]
 80089be:	454b      	cmp	r3, r9
 80089c0:	d307      	bcc.n	80089d2 <__cvt+0xb6>
 80089c2:	4630      	mov	r0, r6
 80089c4:	9b07      	ldr	r3, [sp, #28]
 80089c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80089c8:	1b9b      	subs	r3, r3, r6
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	b008      	add	sp, #32
 80089ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d2:	1c59      	adds	r1, r3, #1
 80089d4:	9107      	str	r1, [sp, #28]
 80089d6:	701a      	strb	r2, [r3, #0]
 80089d8:	e7f0      	b.n	80089bc <__cvt+0xa0>

080089da <__exponent>:
 80089da:	4603      	mov	r3, r0
 80089dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089de:	2900      	cmp	r1, #0
 80089e0:	f803 2b02 	strb.w	r2, [r3], #2
 80089e4:	bfb6      	itet	lt
 80089e6:	222d      	movlt	r2, #45	; 0x2d
 80089e8:	222b      	movge	r2, #43	; 0x2b
 80089ea:	4249      	neglt	r1, r1
 80089ec:	2909      	cmp	r1, #9
 80089ee:	7042      	strb	r2, [r0, #1]
 80089f0:	dd2b      	ble.n	8008a4a <__exponent+0x70>
 80089f2:	f10d 0407 	add.w	r4, sp, #7
 80089f6:	46a4      	mov	ip, r4
 80089f8:	270a      	movs	r7, #10
 80089fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80089fe:	460a      	mov	r2, r1
 8008a00:	46a6      	mov	lr, r4
 8008a02:	fb07 1516 	mls	r5, r7, r6, r1
 8008a06:	2a63      	cmp	r2, #99	; 0x63
 8008a08:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008a12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008a16:	dcf0      	bgt.n	80089fa <__exponent+0x20>
 8008a18:	3130      	adds	r1, #48	; 0x30
 8008a1a:	f1ae 0502 	sub.w	r5, lr, #2
 8008a1e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008a22:	4629      	mov	r1, r5
 8008a24:	1c44      	adds	r4, r0, #1
 8008a26:	4561      	cmp	r1, ip
 8008a28:	d30a      	bcc.n	8008a40 <__exponent+0x66>
 8008a2a:	f10d 0209 	add.w	r2, sp, #9
 8008a2e:	eba2 020e 	sub.w	r2, r2, lr
 8008a32:	4565      	cmp	r5, ip
 8008a34:	bf88      	it	hi
 8008a36:	2200      	movhi	r2, #0
 8008a38:	4413      	add	r3, r2
 8008a3a:	1a18      	subs	r0, r3, r0
 8008a3c:	b003      	add	sp, #12
 8008a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a44:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008a48:	e7ed      	b.n	8008a26 <__exponent+0x4c>
 8008a4a:	2330      	movs	r3, #48	; 0x30
 8008a4c:	3130      	adds	r1, #48	; 0x30
 8008a4e:	7083      	strb	r3, [r0, #2]
 8008a50:	70c1      	strb	r1, [r0, #3]
 8008a52:	1d03      	adds	r3, r0, #4
 8008a54:	e7f1      	b.n	8008a3a <__exponent+0x60>
	...

08008a58 <_printf_float>:
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	b091      	sub	sp, #68	; 0x44
 8008a5e:	460c      	mov	r4, r1
 8008a60:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008a64:	4616      	mov	r6, r2
 8008a66:	461f      	mov	r7, r3
 8008a68:	4605      	mov	r5, r0
 8008a6a:	f002 fd6b 	bl	800b544 <_localeconv_r>
 8008a6e:	6803      	ldr	r3, [r0, #0]
 8008a70:	4618      	mov	r0, r3
 8008a72:	9309      	str	r3, [sp, #36]	; 0x24
 8008a74:	f7f7 fbdc 	bl	8000230 <strlen>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	930e      	str	r3, [sp, #56]	; 0x38
 8008a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008a80:	900a      	str	r0, [sp, #40]	; 0x28
 8008a82:	3307      	adds	r3, #7
 8008a84:	f023 0307 	bic.w	r3, r3, #7
 8008a88:	f103 0208 	add.w	r2, r3, #8
 8008a8c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008a90:	f8d4 b000 	ldr.w	fp, [r4]
 8008a94:	f8c8 2000 	str.w	r2, [r8]
 8008a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008aa0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008aa4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008aa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008aae:	4640      	mov	r0, r8
 8008ab0:	4b9c      	ldr	r3, [pc, #624]	; (8008d24 <_printf_float+0x2cc>)
 8008ab2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ab4:	f7f8 f8ce 	bl	8000c54 <__aeabi_dcmpun>
 8008ab8:	bb70      	cbnz	r0, 8008b18 <_printf_float+0xc0>
 8008aba:	f04f 32ff 	mov.w	r2, #4294967295
 8008abe:	4640      	mov	r0, r8
 8008ac0:	4b98      	ldr	r3, [pc, #608]	; (8008d24 <_printf_float+0x2cc>)
 8008ac2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ac4:	f7f8 f8a8 	bl	8000c18 <__aeabi_dcmple>
 8008ac8:	bb30      	cbnz	r0, 8008b18 <_printf_float+0xc0>
 8008aca:	2200      	movs	r2, #0
 8008acc:	2300      	movs	r3, #0
 8008ace:	4640      	mov	r0, r8
 8008ad0:	4651      	mov	r1, sl
 8008ad2:	f7f8 f897 	bl	8000c04 <__aeabi_dcmplt>
 8008ad6:	b110      	cbz	r0, 8008ade <_printf_float+0x86>
 8008ad8:	232d      	movs	r3, #45	; 0x2d
 8008ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ade:	4b92      	ldr	r3, [pc, #584]	; (8008d28 <_printf_float+0x2d0>)
 8008ae0:	4892      	ldr	r0, [pc, #584]	; (8008d2c <_printf_float+0x2d4>)
 8008ae2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008ae6:	bf94      	ite	ls
 8008ae8:	4698      	movls	r8, r3
 8008aea:	4680      	movhi	r8, r0
 8008aec:	2303      	movs	r3, #3
 8008aee:	f04f 0a00 	mov.w	sl, #0
 8008af2:	6123      	str	r3, [r4, #16]
 8008af4:	f02b 0304 	bic.w	r3, fp, #4
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	4633      	mov	r3, r6
 8008afc:	4621      	mov	r1, r4
 8008afe:	4628      	mov	r0, r5
 8008b00:	9700      	str	r7, [sp, #0]
 8008b02:	aa0f      	add	r2, sp, #60	; 0x3c
 8008b04:	f000 f9d4 	bl	8008eb0 <_printf_common>
 8008b08:	3001      	adds	r0, #1
 8008b0a:	f040 8090 	bne.w	8008c2e <_printf_float+0x1d6>
 8008b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b12:	b011      	add	sp, #68	; 0x44
 8008b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b18:	4642      	mov	r2, r8
 8008b1a:	4653      	mov	r3, sl
 8008b1c:	4640      	mov	r0, r8
 8008b1e:	4651      	mov	r1, sl
 8008b20:	f7f8 f898 	bl	8000c54 <__aeabi_dcmpun>
 8008b24:	b148      	cbz	r0, 8008b3a <_printf_float+0xe2>
 8008b26:	f1ba 0f00 	cmp.w	sl, #0
 8008b2a:	bfb8      	it	lt
 8008b2c:	232d      	movlt	r3, #45	; 0x2d
 8008b2e:	4880      	ldr	r0, [pc, #512]	; (8008d30 <_printf_float+0x2d8>)
 8008b30:	bfb8      	it	lt
 8008b32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008b36:	4b7f      	ldr	r3, [pc, #508]	; (8008d34 <_printf_float+0x2dc>)
 8008b38:	e7d3      	b.n	8008ae2 <_printf_float+0x8a>
 8008b3a:	6863      	ldr	r3, [r4, #4]
 8008b3c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008b40:	1c5a      	adds	r2, r3, #1
 8008b42:	d142      	bne.n	8008bca <_printf_float+0x172>
 8008b44:	2306      	movs	r3, #6
 8008b46:	6063      	str	r3, [r4, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	9206      	str	r2, [sp, #24]
 8008b4c:	aa0e      	add	r2, sp, #56	; 0x38
 8008b4e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008b52:	aa0d      	add	r2, sp, #52	; 0x34
 8008b54:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008b58:	9203      	str	r2, [sp, #12]
 8008b5a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008b5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008b62:	6023      	str	r3, [r4, #0]
 8008b64:	6863      	ldr	r3, [r4, #4]
 8008b66:	4642      	mov	r2, r8
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	4653      	mov	r3, sl
 8008b6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008b70:	f7ff fed4 	bl	800891c <__cvt>
 8008b74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b76:	4680      	mov	r8, r0
 8008b78:	2947      	cmp	r1, #71	; 0x47
 8008b7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008b7c:	d108      	bne.n	8008b90 <_printf_float+0x138>
 8008b7e:	1cc8      	adds	r0, r1, #3
 8008b80:	db02      	blt.n	8008b88 <_printf_float+0x130>
 8008b82:	6863      	ldr	r3, [r4, #4]
 8008b84:	4299      	cmp	r1, r3
 8008b86:	dd40      	ble.n	8008c0a <_printf_float+0x1b2>
 8008b88:	f1a9 0902 	sub.w	r9, r9, #2
 8008b8c:	fa5f f989 	uxtb.w	r9, r9
 8008b90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b94:	d81f      	bhi.n	8008bd6 <_printf_float+0x17e>
 8008b96:	464a      	mov	r2, r9
 8008b98:	3901      	subs	r1, #1
 8008b9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b9e:	910d      	str	r1, [sp, #52]	; 0x34
 8008ba0:	f7ff ff1b 	bl	80089da <__exponent>
 8008ba4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ba6:	4682      	mov	sl, r0
 8008ba8:	1813      	adds	r3, r2, r0
 8008baa:	2a01      	cmp	r2, #1
 8008bac:	6123      	str	r3, [r4, #16]
 8008bae:	dc02      	bgt.n	8008bb6 <_printf_float+0x15e>
 8008bb0:	6822      	ldr	r2, [r4, #0]
 8008bb2:	07d2      	lsls	r2, r2, #31
 8008bb4:	d501      	bpl.n	8008bba <_printf_float+0x162>
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	6123      	str	r3, [r4, #16]
 8008bba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d09b      	beq.n	8008afa <_printf_float+0xa2>
 8008bc2:	232d      	movs	r3, #45	; 0x2d
 8008bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bc8:	e797      	b.n	8008afa <_printf_float+0xa2>
 8008bca:	2947      	cmp	r1, #71	; 0x47
 8008bcc:	d1bc      	bne.n	8008b48 <_printf_float+0xf0>
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1ba      	bne.n	8008b48 <_printf_float+0xf0>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e7b7      	b.n	8008b46 <_printf_float+0xee>
 8008bd6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008bda:	d118      	bne.n	8008c0e <_printf_float+0x1b6>
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	6863      	ldr	r3, [r4, #4]
 8008be0:	dd0b      	ble.n	8008bfa <_printf_float+0x1a2>
 8008be2:	6121      	str	r1, [r4, #16]
 8008be4:	b913      	cbnz	r3, 8008bec <_printf_float+0x194>
 8008be6:	6822      	ldr	r2, [r4, #0]
 8008be8:	07d0      	lsls	r0, r2, #31
 8008bea:	d502      	bpl.n	8008bf2 <_printf_float+0x19a>
 8008bec:	3301      	adds	r3, #1
 8008bee:	440b      	add	r3, r1
 8008bf0:	6123      	str	r3, [r4, #16]
 8008bf2:	f04f 0a00 	mov.w	sl, #0
 8008bf6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008bf8:	e7df      	b.n	8008bba <_printf_float+0x162>
 8008bfa:	b913      	cbnz	r3, 8008c02 <_printf_float+0x1aa>
 8008bfc:	6822      	ldr	r2, [r4, #0]
 8008bfe:	07d2      	lsls	r2, r2, #31
 8008c00:	d501      	bpl.n	8008c06 <_printf_float+0x1ae>
 8008c02:	3302      	adds	r3, #2
 8008c04:	e7f4      	b.n	8008bf0 <_printf_float+0x198>
 8008c06:	2301      	movs	r3, #1
 8008c08:	e7f2      	b.n	8008bf0 <_printf_float+0x198>
 8008c0a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c10:	4299      	cmp	r1, r3
 8008c12:	db05      	blt.n	8008c20 <_printf_float+0x1c8>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	6121      	str	r1, [r4, #16]
 8008c18:	07d8      	lsls	r0, r3, #31
 8008c1a:	d5ea      	bpl.n	8008bf2 <_printf_float+0x19a>
 8008c1c:	1c4b      	adds	r3, r1, #1
 8008c1e:	e7e7      	b.n	8008bf0 <_printf_float+0x198>
 8008c20:	2900      	cmp	r1, #0
 8008c22:	bfcc      	ite	gt
 8008c24:	2201      	movgt	r2, #1
 8008c26:	f1c1 0202 	rsble	r2, r1, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	e7e0      	b.n	8008bf0 <_printf_float+0x198>
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	055a      	lsls	r2, r3, #21
 8008c32:	d407      	bmi.n	8008c44 <_printf_float+0x1ec>
 8008c34:	6923      	ldr	r3, [r4, #16]
 8008c36:	4642      	mov	r2, r8
 8008c38:	4631      	mov	r1, r6
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	47b8      	blx	r7
 8008c3e:	3001      	adds	r0, #1
 8008c40:	d12b      	bne.n	8008c9a <_printf_float+0x242>
 8008c42:	e764      	b.n	8008b0e <_printf_float+0xb6>
 8008c44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008c48:	f240 80dd 	bls.w	8008e06 <_printf_float+0x3ae>
 8008c4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c50:	2200      	movs	r2, #0
 8008c52:	2300      	movs	r3, #0
 8008c54:	f7f7 ffcc 	bl	8000bf0 <__aeabi_dcmpeq>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d033      	beq.n	8008cc4 <_printf_float+0x26c>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4628      	mov	r0, r5
 8008c62:	4a35      	ldr	r2, [pc, #212]	; (8008d38 <_printf_float+0x2e0>)
 8008c64:	47b8      	blx	r7
 8008c66:	3001      	adds	r0, #1
 8008c68:	f43f af51 	beq.w	8008b0e <_printf_float+0xb6>
 8008c6c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c70:	429a      	cmp	r2, r3
 8008c72:	db02      	blt.n	8008c7a <_printf_float+0x222>
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	07d8      	lsls	r0, r3, #31
 8008c78:	d50f      	bpl.n	8008c9a <_printf_float+0x242>
 8008c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4628      	mov	r0, r5
 8008c82:	47b8      	blx	r7
 8008c84:	3001      	adds	r0, #1
 8008c86:	f43f af42 	beq.w	8008b0e <_printf_float+0xb6>
 8008c8a:	f04f 0800 	mov.w	r8, #0
 8008c8e:	f104 091a 	add.w	r9, r4, #26
 8008c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c94:	3b01      	subs	r3, #1
 8008c96:	4543      	cmp	r3, r8
 8008c98:	dc09      	bgt.n	8008cae <_printf_float+0x256>
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	079b      	lsls	r3, r3, #30
 8008c9e:	f100 8102 	bmi.w	8008ea6 <_printf_float+0x44e>
 8008ca2:	68e0      	ldr	r0, [r4, #12]
 8008ca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ca6:	4298      	cmp	r0, r3
 8008ca8:	bfb8      	it	lt
 8008caa:	4618      	movlt	r0, r3
 8008cac:	e731      	b.n	8008b12 <_printf_float+0xba>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	464a      	mov	r2, r9
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	47b8      	blx	r7
 8008cb8:	3001      	adds	r0, #1
 8008cba:	f43f af28 	beq.w	8008b0e <_printf_float+0xb6>
 8008cbe:	f108 0801 	add.w	r8, r8, #1
 8008cc2:	e7e6      	b.n	8008c92 <_printf_float+0x23a>
 8008cc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	dc38      	bgt.n	8008d3c <_printf_float+0x2e4>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	4631      	mov	r1, r6
 8008cce:	4628      	mov	r0, r5
 8008cd0:	4a19      	ldr	r2, [pc, #100]	; (8008d38 <_printf_float+0x2e0>)
 8008cd2:	47b8      	blx	r7
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	f43f af1a 	beq.w	8008b0e <_printf_float+0xb6>
 8008cda:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	d102      	bne.n	8008ce8 <_printf_float+0x290>
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	07d9      	lsls	r1, r3, #31
 8008ce6:	d5d8      	bpl.n	8008c9a <_printf_float+0x242>
 8008ce8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cec:	4631      	mov	r1, r6
 8008cee:	4628      	mov	r0, r5
 8008cf0:	47b8      	blx	r7
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	f43f af0b 	beq.w	8008b0e <_printf_float+0xb6>
 8008cf8:	f04f 0900 	mov.w	r9, #0
 8008cfc:	f104 0a1a 	add.w	sl, r4, #26
 8008d00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d02:	425b      	negs	r3, r3
 8008d04:	454b      	cmp	r3, r9
 8008d06:	dc01      	bgt.n	8008d0c <_printf_float+0x2b4>
 8008d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d0a:	e794      	b.n	8008c36 <_printf_float+0x1de>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	4652      	mov	r2, sl
 8008d10:	4631      	mov	r1, r6
 8008d12:	4628      	mov	r0, r5
 8008d14:	47b8      	blx	r7
 8008d16:	3001      	adds	r0, #1
 8008d18:	f43f aef9 	beq.w	8008b0e <_printf_float+0xb6>
 8008d1c:	f109 0901 	add.w	r9, r9, #1
 8008d20:	e7ee      	b.n	8008d00 <_printf_float+0x2a8>
 8008d22:	bf00      	nop
 8008d24:	7fefffff 	.word	0x7fefffff
 8008d28:	0800d9b4 	.word	0x0800d9b4
 8008d2c:	0800d9b8 	.word	0x0800d9b8
 8008d30:	0800d9c0 	.word	0x0800d9c0
 8008d34:	0800d9bc 	.word	0x0800d9bc
 8008d38:	0800d9c4 	.word	0x0800d9c4
 8008d3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d40:	429a      	cmp	r2, r3
 8008d42:	bfa8      	it	ge
 8008d44:	461a      	movge	r2, r3
 8008d46:	2a00      	cmp	r2, #0
 8008d48:	4691      	mov	r9, r2
 8008d4a:	dc37      	bgt.n	8008dbc <_printf_float+0x364>
 8008d4c:	f04f 0b00 	mov.w	fp, #0
 8008d50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d54:	f104 021a 	add.w	r2, r4, #26
 8008d58:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008d5c:	ebaa 0309 	sub.w	r3, sl, r9
 8008d60:	455b      	cmp	r3, fp
 8008d62:	dc33      	bgt.n	8008dcc <_printf_float+0x374>
 8008d64:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	db3b      	blt.n	8008de4 <_printf_float+0x38c>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	07da      	lsls	r2, r3, #31
 8008d70:	d438      	bmi.n	8008de4 <_printf_float+0x38c>
 8008d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008d76:	eba3 020a 	sub.w	r2, r3, sl
 8008d7a:	eba3 0901 	sub.w	r9, r3, r1
 8008d7e:	4591      	cmp	r9, r2
 8008d80:	bfa8      	it	ge
 8008d82:	4691      	movge	r9, r2
 8008d84:	f1b9 0f00 	cmp.w	r9, #0
 8008d88:	dc34      	bgt.n	8008df4 <_printf_float+0x39c>
 8008d8a:	f04f 0800 	mov.w	r8, #0
 8008d8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d92:	f104 0a1a 	add.w	sl, r4, #26
 8008d96:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008d9a:	1a9b      	subs	r3, r3, r2
 8008d9c:	eba3 0309 	sub.w	r3, r3, r9
 8008da0:	4543      	cmp	r3, r8
 8008da2:	f77f af7a 	ble.w	8008c9a <_printf_float+0x242>
 8008da6:	2301      	movs	r3, #1
 8008da8:	4652      	mov	r2, sl
 8008daa:	4631      	mov	r1, r6
 8008dac:	4628      	mov	r0, r5
 8008dae:	47b8      	blx	r7
 8008db0:	3001      	adds	r0, #1
 8008db2:	f43f aeac 	beq.w	8008b0e <_printf_float+0xb6>
 8008db6:	f108 0801 	add.w	r8, r8, #1
 8008dba:	e7ec      	b.n	8008d96 <_printf_float+0x33e>
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	4642      	mov	r2, r8
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	47b8      	blx	r7
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d1c0      	bne.n	8008d4c <_printf_float+0x2f4>
 8008dca:	e6a0      	b.n	8008b0e <_printf_float+0xb6>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	920b      	str	r2, [sp, #44]	; 0x2c
 8008dd4:	47b8      	blx	r7
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	f43f ae99 	beq.w	8008b0e <_printf_float+0xb6>
 8008ddc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008dde:	f10b 0b01 	add.w	fp, fp, #1
 8008de2:	e7b9      	b.n	8008d58 <_printf_float+0x300>
 8008de4:	4631      	mov	r1, r6
 8008de6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dea:	4628      	mov	r0, r5
 8008dec:	47b8      	blx	r7
 8008dee:	3001      	adds	r0, #1
 8008df0:	d1bf      	bne.n	8008d72 <_printf_float+0x31a>
 8008df2:	e68c      	b.n	8008b0e <_printf_float+0xb6>
 8008df4:	464b      	mov	r3, r9
 8008df6:	4631      	mov	r1, r6
 8008df8:	4628      	mov	r0, r5
 8008dfa:	eb08 020a 	add.w	r2, r8, sl
 8008dfe:	47b8      	blx	r7
 8008e00:	3001      	adds	r0, #1
 8008e02:	d1c2      	bne.n	8008d8a <_printf_float+0x332>
 8008e04:	e683      	b.n	8008b0e <_printf_float+0xb6>
 8008e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e08:	2a01      	cmp	r2, #1
 8008e0a:	dc01      	bgt.n	8008e10 <_printf_float+0x3b8>
 8008e0c:	07db      	lsls	r3, r3, #31
 8008e0e:	d537      	bpl.n	8008e80 <_printf_float+0x428>
 8008e10:	2301      	movs	r3, #1
 8008e12:	4642      	mov	r2, r8
 8008e14:	4631      	mov	r1, r6
 8008e16:	4628      	mov	r0, r5
 8008e18:	47b8      	blx	r7
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	f43f ae77 	beq.w	8008b0e <_printf_float+0xb6>
 8008e20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e24:	4631      	mov	r1, r6
 8008e26:	4628      	mov	r0, r5
 8008e28:	47b8      	blx	r7
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	f43f ae6f 	beq.w	8008b0e <_printf_float+0xb6>
 8008e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e34:	2200      	movs	r2, #0
 8008e36:	2300      	movs	r3, #0
 8008e38:	f7f7 feda 	bl	8000bf0 <__aeabi_dcmpeq>
 8008e3c:	b9d8      	cbnz	r0, 8008e76 <_printf_float+0x41e>
 8008e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e40:	f108 0201 	add.w	r2, r8, #1
 8008e44:	3b01      	subs	r3, #1
 8008e46:	4631      	mov	r1, r6
 8008e48:	4628      	mov	r0, r5
 8008e4a:	47b8      	blx	r7
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	d10e      	bne.n	8008e6e <_printf_float+0x416>
 8008e50:	e65d      	b.n	8008b0e <_printf_float+0xb6>
 8008e52:	2301      	movs	r3, #1
 8008e54:	464a      	mov	r2, r9
 8008e56:	4631      	mov	r1, r6
 8008e58:	4628      	mov	r0, r5
 8008e5a:	47b8      	blx	r7
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	f43f ae56 	beq.w	8008b0e <_printf_float+0xb6>
 8008e62:	f108 0801 	add.w	r8, r8, #1
 8008e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	4543      	cmp	r3, r8
 8008e6c:	dcf1      	bgt.n	8008e52 <_printf_float+0x3fa>
 8008e6e:	4653      	mov	r3, sl
 8008e70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008e74:	e6e0      	b.n	8008c38 <_printf_float+0x1e0>
 8008e76:	f04f 0800 	mov.w	r8, #0
 8008e7a:	f104 091a 	add.w	r9, r4, #26
 8008e7e:	e7f2      	b.n	8008e66 <_printf_float+0x40e>
 8008e80:	2301      	movs	r3, #1
 8008e82:	4642      	mov	r2, r8
 8008e84:	e7df      	b.n	8008e46 <_printf_float+0x3ee>
 8008e86:	2301      	movs	r3, #1
 8008e88:	464a      	mov	r2, r9
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47b8      	blx	r7
 8008e90:	3001      	adds	r0, #1
 8008e92:	f43f ae3c 	beq.w	8008b0e <_printf_float+0xb6>
 8008e96:	f108 0801 	add.w	r8, r8, #1
 8008e9a:	68e3      	ldr	r3, [r4, #12]
 8008e9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008e9e:	1a5b      	subs	r3, r3, r1
 8008ea0:	4543      	cmp	r3, r8
 8008ea2:	dcf0      	bgt.n	8008e86 <_printf_float+0x42e>
 8008ea4:	e6fd      	b.n	8008ca2 <_printf_float+0x24a>
 8008ea6:	f04f 0800 	mov.w	r8, #0
 8008eaa:	f104 0919 	add.w	r9, r4, #25
 8008eae:	e7f4      	b.n	8008e9a <_printf_float+0x442>

08008eb0 <_printf_common>:
 8008eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb4:	4616      	mov	r6, r2
 8008eb6:	4699      	mov	r9, r3
 8008eb8:	688a      	ldr	r2, [r1, #8]
 8008eba:	690b      	ldr	r3, [r1, #16]
 8008ebc:	4607      	mov	r7, r0
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	bfb8      	it	lt
 8008ec2:	4613      	movlt	r3, r2
 8008ec4:	6033      	str	r3, [r6, #0]
 8008ec6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008eca:	460c      	mov	r4, r1
 8008ecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ed0:	b10a      	cbz	r2, 8008ed6 <_printf_common+0x26>
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	6033      	str	r3, [r6, #0]
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	0699      	lsls	r1, r3, #26
 8008eda:	bf42      	ittt	mi
 8008edc:	6833      	ldrmi	r3, [r6, #0]
 8008ede:	3302      	addmi	r3, #2
 8008ee0:	6033      	strmi	r3, [r6, #0]
 8008ee2:	6825      	ldr	r5, [r4, #0]
 8008ee4:	f015 0506 	ands.w	r5, r5, #6
 8008ee8:	d106      	bne.n	8008ef8 <_printf_common+0x48>
 8008eea:	f104 0a19 	add.w	sl, r4, #25
 8008eee:	68e3      	ldr	r3, [r4, #12]
 8008ef0:	6832      	ldr	r2, [r6, #0]
 8008ef2:	1a9b      	subs	r3, r3, r2
 8008ef4:	42ab      	cmp	r3, r5
 8008ef6:	dc28      	bgt.n	8008f4a <_printf_common+0x9a>
 8008ef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008efc:	1e13      	subs	r3, r2, #0
 8008efe:	6822      	ldr	r2, [r4, #0]
 8008f00:	bf18      	it	ne
 8008f02:	2301      	movne	r3, #1
 8008f04:	0692      	lsls	r2, r2, #26
 8008f06:	d42d      	bmi.n	8008f64 <_printf_common+0xb4>
 8008f08:	4649      	mov	r1, r9
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f10:	47c0      	blx	r8
 8008f12:	3001      	adds	r0, #1
 8008f14:	d020      	beq.n	8008f58 <_printf_common+0xa8>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	68e5      	ldr	r5, [r4, #12]
 8008f1a:	f003 0306 	and.w	r3, r3, #6
 8008f1e:	2b04      	cmp	r3, #4
 8008f20:	bf18      	it	ne
 8008f22:	2500      	movne	r5, #0
 8008f24:	6832      	ldr	r2, [r6, #0]
 8008f26:	f04f 0600 	mov.w	r6, #0
 8008f2a:	68a3      	ldr	r3, [r4, #8]
 8008f2c:	bf08      	it	eq
 8008f2e:	1aad      	subeq	r5, r5, r2
 8008f30:	6922      	ldr	r2, [r4, #16]
 8008f32:	bf08      	it	eq
 8008f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	bfc4      	itt	gt
 8008f3c:	1a9b      	subgt	r3, r3, r2
 8008f3e:	18ed      	addgt	r5, r5, r3
 8008f40:	341a      	adds	r4, #26
 8008f42:	42b5      	cmp	r5, r6
 8008f44:	d11a      	bne.n	8008f7c <_printf_common+0xcc>
 8008f46:	2000      	movs	r0, #0
 8008f48:	e008      	b.n	8008f5c <_printf_common+0xac>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	4652      	mov	r2, sl
 8008f4e:	4649      	mov	r1, r9
 8008f50:	4638      	mov	r0, r7
 8008f52:	47c0      	blx	r8
 8008f54:	3001      	adds	r0, #1
 8008f56:	d103      	bne.n	8008f60 <_printf_common+0xb0>
 8008f58:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f60:	3501      	adds	r5, #1
 8008f62:	e7c4      	b.n	8008eee <_printf_common+0x3e>
 8008f64:	2030      	movs	r0, #48	; 0x30
 8008f66:	18e1      	adds	r1, r4, r3
 8008f68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f72:	4422      	add	r2, r4
 8008f74:	3302      	adds	r3, #2
 8008f76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f7a:	e7c5      	b.n	8008f08 <_printf_common+0x58>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	4622      	mov	r2, r4
 8008f80:	4649      	mov	r1, r9
 8008f82:	4638      	mov	r0, r7
 8008f84:	47c0      	blx	r8
 8008f86:	3001      	adds	r0, #1
 8008f88:	d0e6      	beq.n	8008f58 <_printf_common+0xa8>
 8008f8a:	3601      	adds	r6, #1
 8008f8c:	e7d9      	b.n	8008f42 <_printf_common+0x92>
	...

08008f90 <_printf_i>:
 8008f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f94:	7e0f      	ldrb	r7, [r1, #24]
 8008f96:	4691      	mov	r9, r2
 8008f98:	2f78      	cmp	r7, #120	; 0x78
 8008f9a:	4680      	mov	r8, r0
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	469a      	mov	sl, r3
 8008fa0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008fa6:	d807      	bhi.n	8008fb8 <_printf_i+0x28>
 8008fa8:	2f62      	cmp	r7, #98	; 0x62
 8008faa:	d80a      	bhi.n	8008fc2 <_printf_i+0x32>
 8008fac:	2f00      	cmp	r7, #0
 8008fae:	f000 80d9 	beq.w	8009164 <_printf_i+0x1d4>
 8008fb2:	2f58      	cmp	r7, #88	; 0x58
 8008fb4:	f000 80a4 	beq.w	8009100 <_printf_i+0x170>
 8008fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fc0:	e03a      	b.n	8009038 <_printf_i+0xa8>
 8008fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fc6:	2b15      	cmp	r3, #21
 8008fc8:	d8f6      	bhi.n	8008fb8 <_printf_i+0x28>
 8008fca:	a101      	add	r1, pc, #4	; (adr r1, 8008fd0 <_printf_i+0x40>)
 8008fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fd0:	08009029 	.word	0x08009029
 8008fd4:	0800903d 	.word	0x0800903d
 8008fd8:	08008fb9 	.word	0x08008fb9
 8008fdc:	08008fb9 	.word	0x08008fb9
 8008fe0:	08008fb9 	.word	0x08008fb9
 8008fe4:	08008fb9 	.word	0x08008fb9
 8008fe8:	0800903d 	.word	0x0800903d
 8008fec:	08008fb9 	.word	0x08008fb9
 8008ff0:	08008fb9 	.word	0x08008fb9
 8008ff4:	08008fb9 	.word	0x08008fb9
 8008ff8:	08008fb9 	.word	0x08008fb9
 8008ffc:	0800914b 	.word	0x0800914b
 8009000:	0800906d 	.word	0x0800906d
 8009004:	0800912d 	.word	0x0800912d
 8009008:	08008fb9 	.word	0x08008fb9
 800900c:	08008fb9 	.word	0x08008fb9
 8009010:	0800916d 	.word	0x0800916d
 8009014:	08008fb9 	.word	0x08008fb9
 8009018:	0800906d 	.word	0x0800906d
 800901c:	08008fb9 	.word	0x08008fb9
 8009020:	08008fb9 	.word	0x08008fb9
 8009024:	08009135 	.word	0x08009135
 8009028:	682b      	ldr	r3, [r5, #0]
 800902a:	1d1a      	adds	r2, r3, #4
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	602a      	str	r2, [r5, #0]
 8009030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009038:	2301      	movs	r3, #1
 800903a:	e0a4      	b.n	8009186 <_printf_i+0x1f6>
 800903c:	6820      	ldr	r0, [r4, #0]
 800903e:	6829      	ldr	r1, [r5, #0]
 8009040:	0606      	lsls	r6, r0, #24
 8009042:	f101 0304 	add.w	r3, r1, #4
 8009046:	d50a      	bpl.n	800905e <_printf_i+0xce>
 8009048:	680e      	ldr	r6, [r1, #0]
 800904a:	602b      	str	r3, [r5, #0]
 800904c:	2e00      	cmp	r6, #0
 800904e:	da03      	bge.n	8009058 <_printf_i+0xc8>
 8009050:	232d      	movs	r3, #45	; 0x2d
 8009052:	4276      	negs	r6, r6
 8009054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009058:	230a      	movs	r3, #10
 800905a:	485e      	ldr	r0, [pc, #376]	; (80091d4 <_printf_i+0x244>)
 800905c:	e019      	b.n	8009092 <_printf_i+0x102>
 800905e:	680e      	ldr	r6, [r1, #0]
 8009060:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009064:	602b      	str	r3, [r5, #0]
 8009066:	bf18      	it	ne
 8009068:	b236      	sxthne	r6, r6
 800906a:	e7ef      	b.n	800904c <_printf_i+0xbc>
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	6820      	ldr	r0, [r4, #0]
 8009070:	1d19      	adds	r1, r3, #4
 8009072:	6029      	str	r1, [r5, #0]
 8009074:	0601      	lsls	r1, r0, #24
 8009076:	d501      	bpl.n	800907c <_printf_i+0xec>
 8009078:	681e      	ldr	r6, [r3, #0]
 800907a:	e002      	b.n	8009082 <_printf_i+0xf2>
 800907c:	0646      	lsls	r6, r0, #25
 800907e:	d5fb      	bpl.n	8009078 <_printf_i+0xe8>
 8009080:	881e      	ldrh	r6, [r3, #0]
 8009082:	2f6f      	cmp	r7, #111	; 0x6f
 8009084:	bf0c      	ite	eq
 8009086:	2308      	moveq	r3, #8
 8009088:	230a      	movne	r3, #10
 800908a:	4852      	ldr	r0, [pc, #328]	; (80091d4 <_printf_i+0x244>)
 800908c:	2100      	movs	r1, #0
 800908e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009092:	6865      	ldr	r5, [r4, #4]
 8009094:	2d00      	cmp	r5, #0
 8009096:	bfa8      	it	ge
 8009098:	6821      	ldrge	r1, [r4, #0]
 800909a:	60a5      	str	r5, [r4, #8]
 800909c:	bfa4      	itt	ge
 800909e:	f021 0104 	bicge.w	r1, r1, #4
 80090a2:	6021      	strge	r1, [r4, #0]
 80090a4:	b90e      	cbnz	r6, 80090aa <_printf_i+0x11a>
 80090a6:	2d00      	cmp	r5, #0
 80090a8:	d04d      	beq.n	8009146 <_printf_i+0x1b6>
 80090aa:	4615      	mov	r5, r2
 80090ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80090b0:	fb03 6711 	mls	r7, r3, r1, r6
 80090b4:	5dc7      	ldrb	r7, [r0, r7]
 80090b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090ba:	4637      	mov	r7, r6
 80090bc:	42bb      	cmp	r3, r7
 80090be:	460e      	mov	r6, r1
 80090c0:	d9f4      	bls.n	80090ac <_printf_i+0x11c>
 80090c2:	2b08      	cmp	r3, #8
 80090c4:	d10b      	bne.n	80090de <_printf_i+0x14e>
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	07de      	lsls	r6, r3, #31
 80090ca:	d508      	bpl.n	80090de <_printf_i+0x14e>
 80090cc:	6923      	ldr	r3, [r4, #16]
 80090ce:	6861      	ldr	r1, [r4, #4]
 80090d0:	4299      	cmp	r1, r3
 80090d2:	bfde      	ittt	le
 80090d4:	2330      	movle	r3, #48	; 0x30
 80090d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090de:	1b52      	subs	r2, r2, r5
 80090e0:	6122      	str	r2, [r4, #16]
 80090e2:	464b      	mov	r3, r9
 80090e4:	4621      	mov	r1, r4
 80090e6:	4640      	mov	r0, r8
 80090e8:	f8cd a000 	str.w	sl, [sp]
 80090ec:	aa03      	add	r2, sp, #12
 80090ee:	f7ff fedf 	bl	8008eb0 <_printf_common>
 80090f2:	3001      	adds	r0, #1
 80090f4:	d14c      	bne.n	8009190 <_printf_i+0x200>
 80090f6:	f04f 30ff 	mov.w	r0, #4294967295
 80090fa:	b004      	add	sp, #16
 80090fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009100:	4834      	ldr	r0, [pc, #208]	; (80091d4 <_printf_i+0x244>)
 8009102:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009106:	6829      	ldr	r1, [r5, #0]
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	f851 6b04 	ldr.w	r6, [r1], #4
 800910e:	6029      	str	r1, [r5, #0]
 8009110:	061d      	lsls	r5, r3, #24
 8009112:	d514      	bpl.n	800913e <_printf_i+0x1ae>
 8009114:	07df      	lsls	r7, r3, #31
 8009116:	bf44      	itt	mi
 8009118:	f043 0320 	orrmi.w	r3, r3, #32
 800911c:	6023      	strmi	r3, [r4, #0]
 800911e:	b91e      	cbnz	r6, 8009128 <_printf_i+0x198>
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	f023 0320 	bic.w	r3, r3, #32
 8009126:	6023      	str	r3, [r4, #0]
 8009128:	2310      	movs	r3, #16
 800912a:	e7af      	b.n	800908c <_printf_i+0xfc>
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	f043 0320 	orr.w	r3, r3, #32
 8009132:	6023      	str	r3, [r4, #0]
 8009134:	2378      	movs	r3, #120	; 0x78
 8009136:	4828      	ldr	r0, [pc, #160]	; (80091d8 <_printf_i+0x248>)
 8009138:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800913c:	e7e3      	b.n	8009106 <_printf_i+0x176>
 800913e:	0659      	lsls	r1, r3, #25
 8009140:	bf48      	it	mi
 8009142:	b2b6      	uxthmi	r6, r6
 8009144:	e7e6      	b.n	8009114 <_printf_i+0x184>
 8009146:	4615      	mov	r5, r2
 8009148:	e7bb      	b.n	80090c2 <_printf_i+0x132>
 800914a:	682b      	ldr	r3, [r5, #0]
 800914c:	6826      	ldr	r6, [r4, #0]
 800914e:	1d18      	adds	r0, r3, #4
 8009150:	6961      	ldr	r1, [r4, #20]
 8009152:	6028      	str	r0, [r5, #0]
 8009154:	0635      	lsls	r5, r6, #24
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	d501      	bpl.n	800915e <_printf_i+0x1ce>
 800915a:	6019      	str	r1, [r3, #0]
 800915c:	e002      	b.n	8009164 <_printf_i+0x1d4>
 800915e:	0670      	lsls	r0, r6, #25
 8009160:	d5fb      	bpl.n	800915a <_printf_i+0x1ca>
 8009162:	8019      	strh	r1, [r3, #0]
 8009164:	2300      	movs	r3, #0
 8009166:	4615      	mov	r5, r2
 8009168:	6123      	str	r3, [r4, #16]
 800916a:	e7ba      	b.n	80090e2 <_printf_i+0x152>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	2100      	movs	r1, #0
 8009170:	1d1a      	adds	r2, r3, #4
 8009172:	602a      	str	r2, [r5, #0]
 8009174:	681d      	ldr	r5, [r3, #0]
 8009176:	6862      	ldr	r2, [r4, #4]
 8009178:	4628      	mov	r0, r5
 800917a:	f002 fa0b 	bl	800b594 <memchr>
 800917e:	b108      	cbz	r0, 8009184 <_printf_i+0x1f4>
 8009180:	1b40      	subs	r0, r0, r5
 8009182:	6060      	str	r0, [r4, #4]
 8009184:	6863      	ldr	r3, [r4, #4]
 8009186:	6123      	str	r3, [r4, #16]
 8009188:	2300      	movs	r3, #0
 800918a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800918e:	e7a8      	b.n	80090e2 <_printf_i+0x152>
 8009190:	462a      	mov	r2, r5
 8009192:	4649      	mov	r1, r9
 8009194:	4640      	mov	r0, r8
 8009196:	6923      	ldr	r3, [r4, #16]
 8009198:	47d0      	blx	sl
 800919a:	3001      	adds	r0, #1
 800919c:	d0ab      	beq.n	80090f6 <_printf_i+0x166>
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	079b      	lsls	r3, r3, #30
 80091a2:	d413      	bmi.n	80091cc <_printf_i+0x23c>
 80091a4:	68e0      	ldr	r0, [r4, #12]
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	4298      	cmp	r0, r3
 80091aa:	bfb8      	it	lt
 80091ac:	4618      	movlt	r0, r3
 80091ae:	e7a4      	b.n	80090fa <_printf_i+0x16a>
 80091b0:	2301      	movs	r3, #1
 80091b2:	4632      	mov	r2, r6
 80091b4:	4649      	mov	r1, r9
 80091b6:	4640      	mov	r0, r8
 80091b8:	47d0      	blx	sl
 80091ba:	3001      	adds	r0, #1
 80091bc:	d09b      	beq.n	80090f6 <_printf_i+0x166>
 80091be:	3501      	adds	r5, #1
 80091c0:	68e3      	ldr	r3, [r4, #12]
 80091c2:	9903      	ldr	r1, [sp, #12]
 80091c4:	1a5b      	subs	r3, r3, r1
 80091c6:	42ab      	cmp	r3, r5
 80091c8:	dcf2      	bgt.n	80091b0 <_printf_i+0x220>
 80091ca:	e7eb      	b.n	80091a4 <_printf_i+0x214>
 80091cc:	2500      	movs	r5, #0
 80091ce:	f104 0619 	add.w	r6, r4, #25
 80091d2:	e7f5      	b.n	80091c0 <_printf_i+0x230>
 80091d4:	0800d9c6 	.word	0x0800d9c6
 80091d8:	0800d9d7 	.word	0x0800d9d7

080091dc <cleanup_glue>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	460c      	mov	r4, r1
 80091e0:	6809      	ldr	r1, [r1, #0]
 80091e2:	4605      	mov	r5, r0
 80091e4:	b109      	cbz	r1, 80091ea <cleanup_glue+0xe>
 80091e6:	f7ff fff9 	bl	80091dc <cleanup_glue>
 80091ea:	4621      	mov	r1, r4
 80091ec:	4628      	mov	r0, r5
 80091ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091f2:	f7ff bab7 	b.w	8008764 <_free_r>
	...

080091f8 <_reclaim_reent>:
 80091f8:	4b2c      	ldr	r3, [pc, #176]	; (80092ac <_reclaim_reent+0xb4>)
 80091fa:	b570      	push	{r4, r5, r6, lr}
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4604      	mov	r4, r0
 8009200:	4283      	cmp	r3, r0
 8009202:	d051      	beq.n	80092a8 <_reclaim_reent+0xb0>
 8009204:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009206:	b143      	cbz	r3, 800921a <_reclaim_reent+0x22>
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d14a      	bne.n	80092a4 <_reclaim_reent+0xac>
 800920e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009210:	6819      	ldr	r1, [r3, #0]
 8009212:	b111      	cbz	r1, 800921a <_reclaim_reent+0x22>
 8009214:	4620      	mov	r0, r4
 8009216:	f7ff faa5 	bl	8008764 <_free_r>
 800921a:	6961      	ldr	r1, [r4, #20]
 800921c:	b111      	cbz	r1, 8009224 <_reclaim_reent+0x2c>
 800921e:	4620      	mov	r0, r4
 8009220:	f7ff faa0 	bl	8008764 <_free_r>
 8009224:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009226:	b111      	cbz	r1, 800922e <_reclaim_reent+0x36>
 8009228:	4620      	mov	r0, r4
 800922a:	f7ff fa9b 	bl	8008764 <_free_r>
 800922e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009230:	b111      	cbz	r1, 8009238 <_reclaim_reent+0x40>
 8009232:	4620      	mov	r0, r4
 8009234:	f7ff fa96 	bl	8008764 <_free_r>
 8009238:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800923a:	b111      	cbz	r1, 8009242 <_reclaim_reent+0x4a>
 800923c:	4620      	mov	r0, r4
 800923e:	f7ff fa91 	bl	8008764 <_free_r>
 8009242:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009244:	b111      	cbz	r1, 800924c <_reclaim_reent+0x54>
 8009246:	4620      	mov	r0, r4
 8009248:	f7ff fa8c 	bl	8008764 <_free_r>
 800924c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800924e:	b111      	cbz	r1, 8009256 <_reclaim_reent+0x5e>
 8009250:	4620      	mov	r0, r4
 8009252:	f7ff fa87 	bl	8008764 <_free_r>
 8009256:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009258:	b111      	cbz	r1, 8009260 <_reclaim_reent+0x68>
 800925a:	4620      	mov	r0, r4
 800925c:	f7ff fa82 	bl	8008764 <_free_r>
 8009260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009262:	b111      	cbz	r1, 800926a <_reclaim_reent+0x72>
 8009264:	4620      	mov	r0, r4
 8009266:	f7ff fa7d 	bl	8008764 <_free_r>
 800926a:	69a3      	ldr	r3, [r4, #24]
 800926c:	b1e3      	cbz	r3, 80092a8 <_reclaim_reent+0xb0>
 800926e:	4620      	mov	r0, r4
 8009270:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009272:	4798      	blx	r3
 8009274:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009276:	b1b9      	cbz	r1, 80092a8 <_reclaim_reent+0xb0>
 8009278:	4620      	mov	r0, r4
 800927a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800927e:	f7ff bfad 	b.w	80091dc <cleanup_glue>
 8009282:	5949      	ldr	r1, [r1, r5]
 8009284:	b941      	cbnz	r1, 8009298 <_reclaim_reent+0xa0>
 8009286:	3504      	adds	r5, #4
 8009288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800928a:	2d80      	cmp	r5, #128	; 0x80
 800928c:	68d9      	ldr	r1, [r3, #12]
 800928e:	d1f8      	bne.n	8009282 <_reclaim_reent+0x8a>
 8009290:	4620      	mov	r0, r4
 8009292:	f7ff fa67 	bl	8008764 <_free_r>
 8009296:	e7ba      	b.n	800920e <_reclaim_reent+0x16>
 8009298:	680e      	ldr	r6, [r1, #0]
 800929a:	4620      	mov	r0, r4
 800929c:	f7ff fa62 	bl	8008764 <_free_r>
 80092a0:	4631      	mov	r1, r6
 80092a2:	e7ef      	b.n	8009284 <_reclaim_reent+0x8c>
 80092a4:	2500      	movs	r5, #0
 80092a6:	e7ef      	b.n	8009288 <_reclaim_reent+0x90>
 80092a8:	bd70      	pop	{r4, r5, r6, pc}
 80092aa:	bf00      	nop
 80092ac:	20000010 	.word	0x20000010

080092b0 <_sbrk_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	2300      	movs	r3, #0
 80092b4:	4d05      	ldr	r5, [pc, #20]	; (80092cc <_sbrk_r+0x1c>)
 80092b6:	4604      	mov	r4, r0
 80092b8:	4608      	mov	r0, r1
 80092ba:	602b      	str	r3, [r5, #0]
 80092bc:	f7f9 fe6a 	bl	8002f94 <_sbrk>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d102      	bne.n	80092ca <_sbrk_r+0x1a>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b103      	cbz	r3, 80092ca <_sbrk_r+0x1a>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	200008cc 	.word	0x200008cc

080092d0 <siprintf>:
 80092d0:	b40e      	push	{r1, r2, r3}
 80092d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092d6:	b500      	push	{lr}
 80092d8:	b09c      	sub	sp, #112	; 0x70
 80092da:	ab1d      	add	r3, sp, #116	; 0x74
 80092dc:	9002      	str	r0, [sp, #8]
 80092de:	9006      	str	r0, [sp, #24]
 80092e0:	9107      	str	r1, [sp, #28]
 80092e2:	9104      	str	r1, [sp, #16]
 80092e4:	4808      	ldr	r0, [pc, #32]	; (8009308 <siprintf+0x38>)
 80092e6:	4909      	ldr	r1, [pc, #36]	; (800930c <siprintf+0x3c>)
 80092e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ec:	9105      	str	r1, [sp, #20]
 80092ee:	6800      	ldr	r0, [r0, #0]
 80092f0:	a902      	add	r1, sp, #8
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	f002 fe90 	bl	800c018 <_svfiprintf_r>
 80092f8:	2200      	movs	r2, #0
 80092fa:	9b02      	ldr	r3, [sp, #8]
 80092fc:	701a      	strb	r2, [r3, #0]
 80092fe:	b01c      	add	sp, #112	; 0x70
 8009300:	f85d eb04 	ldr.w	lr, [sp], #4
 8009304:	b003      	add	sp, #12
 8009306:	4770      	bx	lr
 8009308:	20000010 	.word	0x20000010
 800930c:	ffff0208 	.word	0xffff0208

08009310 <__sread>:
 8009310:	b510      	push	{r4, lr}
 8009312:	460c      	mov	r4, r1
 8009314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009318:	f002 ff7e 	bl	800c218 <_read_r>
 800931c:	2800      	cmp	r0, #0
 800931e:	bfab      	itete	ge
 8009320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009322:	89a3      	ldrhlt	r3, [r4, #12]
 8009324:	181b      	addge	r3, r3, r0
 8009326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800932a:	bfac      	ite	ge
 800932c:	6563      	strge	r3, [r4, #84]	; 0x54
 800932e:	81a3      	strhlt	r3, [r4, #12]
 8009330:	bd10      	pop	{r4, pc}

08009332 <__swrite>:
 8009332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009336:	461f      	mov	r7, r3
 8009338:	898b      	ldrh	r3, [r1, #12]
 800933a:	4605      	mov	r5, r0
 800933c:	05db      	lsls	r3, r3, #23
 800933e:	460c      	mov	r4, r1
 8009340:	4616      	mov	r6, r2
 8009342:	d505      	bpl.n	8009350 <__swrite+0x1e>
 8009344:	2302      	movs	r3, #2
 8009346:	2200      	movs	r2, #0
 8009348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800934c:	f002 f8fe 	bl	800b54c <_lseek_r>
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	4632      	mov	r2, r6
 8009354:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009358:	81a3      	strh	r3, [r4, #12]
 800935a:	4628      	mov	r0, r5
 800935c:	463b      	mov	r3, r7
 800935e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009366:	f000 be2b 	b.w	8009fc0 <_write_r>

0800936a <__sseek>:
 800936a:	b510      	push	{r4, lr}
 800936c:	460c      	mov	r4, r1
 800936e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009372:	f002 f8eb 	bl	800b54c <_lseek_r>
 8009376:	1c43      	adds	r3, r0, #1
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	bf15      	itete	ne
 800937c:	6560      	strne	r0, [r4, #84]	; 0x54
 800937e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009386:	81a3      	strheq	r3, [r4, #12]
 8009388:	bf18      	it	ne
 800938a:	81a3      	strhne	r3, [r4, #12]
 800938c:	bd10      	pop	{r4, pc}

0800938e <__sclose>:
 800938e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009392:	f000 be27 	b.w	8009fe4 <_close_r>

08009396 <sulp>:
 8009396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800939a:	460f      	mov	r7, r1
 800939c:	4690      	mov	r8, r2
 800939e:	f002 fc83 	bl	800bca8 <__ulp>
 80093a2:	4604      	mov	r4, r0
 80093a4:	460d      	mov	r5, r1
 80093a6:	f1b8 0f00 	cmp.w	r8, #0
 80093aa:	d011      	beq.n	80093d0 <sulp+0x3a>
 80093ac:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80093b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	dd0b      	ble.n	80093d0 <sulp+0x3a>
 80093b8:	2400      	movs	r4, #0
 80093ba:	051b      	lsls	r3, r3, #20
 80093bc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80093c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80093c4:	4622      	mov	r2, r4
 80093c6:	462b      	mov	r3, r5
 80093c8:	f7f7 f9aa 	bl	8000720 <__aeabi_dmul>
 80093cc:	4604      	mov	r4, r0
 80093ce:	460d      	mov	r5, r1
 80093d0:	4620      	mov	r0, r4
 80093d2:	4629      	mov	r1, r5
 80093d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080093d8 <_strtod_l>:
 80093d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093dc:	469b      	mov	fp, r3
 80093de:	2300      	movs	r3, #0
 80093e0:	b09f      	sub	sp, #124	; 0x7c
 80093e2:	931a      	str	r3, [sp, #104]	; 0x68
 80093e4:	4b9e      	ldr	r3, [pc, #632]	; (8009660 <_strtod_l+0x288>)
 80093e6:	4682      	mov	sl, r0
 80093e8:	681f      	ldr	r7, [r3, #0]
 80093ea:	460e      	mov	r6, r1
 80093ec:	4638      	mov	r0, r7
 80093ee:	9215      	str	r2, [sp, #84]	; 0x54
 80093f0:	f7f6 ff1e 	bl	8000230 <strlen>
 80093f4:	f04f 0800 	mov.w	r8, #0
 80093f8:	4604      	mov	r4, r0
 80093fa:	f04f 0900 	mov.w	r9, #0
 80093fe:	9619      	str	r6, [sp, #100]	; 0x64
 8009400:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009402:	781a      	ldrb	r2, [r3, #0]
 8009404:	2a2b      	cmp	r2, #43	; 0x2b
 8009406:	d04c      	beq.n	80094a2 <_strtod_l+0xca>
 8009408:	d83a      	bhi.n	8009480 <_strtod_l+0xa8>
 800940a:	2a0d      	cmp	r2, #13
 800940c:	d833      	bhi.n	8009476 <_strtod_l+0x9e>
 800940e:	2a08      	cmp	r2, #8
 8009410:	d833      	bhi.n	800947a <_strtod_l+0xa2>
 8009412:	2a00      	cmp	r2, #0
 8009414:	d03d      	beq.n	8009492 <_strtod_l+0xba>
 8009416:	2300      	movs	r3, #0
 8009418:	930a      	str	r3, [sp, #40]	; 0x28
 800941a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800941c:	782b      	ldrb	r3, [r5, #0]
 800941e:	2b30      	cmp	r3, #48	; 0x30
 8009420:	f040 80aa 	bne.w	8009578 <_strtod_l+0x1a0>
 8009424:	786b      	ldrb	r3, [r5, #1]
 8009426:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800942a:	2b58      	cmp	r3, #88	; 0x58
 800942c:	d166      	bne.n	80094fc <_strtod_l+0x124>
 800942e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009430:	4650      	mov	r0, sl
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	ab1a      	add	r3, sp, #104	; 0x68
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	4a8a      	ldr	r2, [pc, #552]	; (8009664 <_strtod_l+0x28c>)
 800943a:	f8cd b008 	str.w	fp, [sp, #8]
 800943e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009440:	a919      	add	r1, sp, #100	; 0x64
 8009442:	f001 fd81 	bl	800af48 <__gethex>
 8009446:	f010 0607 	ands.w	r6, r0, #7
 800944a:	4604      	mov	r4, r0
 800944c:	d005      	beq.n	800945a <_strtod_l+0x82>
 800944e:	2e06      	cmp	r6, #6
 8009450:	d129      	bne.n	80094a6 <_strtod_l+0xce>
 8009452:	2300      	movs	r3, #0
 8009454:	3501      	adds	r5, #1
 8009456:	9519      	str	r5, [sp, #100]	; 0x64
 8009458:	930a      	str	r3, [sp, #40]	; 0x28
 800945a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800945c:	2b00      	cmp	r3, #0
 800945e:	f040 858a 	bne.w	8009f76 <_strtod_l+0xb9e>
 8009462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009464:	b1d3      	cbz	r3, 800949c <_strtod_l+0xc4>
 8009466:	4642      	mov	r2, r8
 8009468:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800946c:	4610      	mov	r0, r2
 800946e:	4619      	mov	r1, r3
 8009470:	b01f      	add	sp, #124	; 0x7c
 8009472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009476:	2a20      	cmp	r2, #32
 8009478:	d1cd      	bne.n	8009416 <_strtod_l+0x3e>
 800947a:	3301      	adds	r3, #1
 800947c:	9319      	str	r3, [sp, #100]	; 0x64
 800947e:	e7bf      	b.n	8009400 <_strtod_l+0x28>
 8009480:	2a2d      	cmp	r2, #45	; 0x2d
 8009482:	d1c8      	bne.n	8009416 <_strtod_l+0x3e>
 8009484:	2201      	movs	r2, #1
 8009486:	920a      	str	r2, [sp, #40]	; 0x28
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	9219      	str	r2, [sp, #100]	; 0x64
 800948c:	785b      	ldrb	r3, [r3, #1]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1c3      	bne.n	800941a <_strtod_l+0x42>
 8009492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009494:	9619      	str	r6, [sp, #100]	; 0x64
 8009496:	2b00      	cmp	r3, #0
 8009498:	f040 856b 	bne.w	8009f72 <_strtod_l+0xb9a>
 800949c:	4642      	mov	r2, r8
 800949e:	464b      	mov	r3, r9
 80094a0:	e7e4      	b.n	800946c <_strtod_l+0x94>
 80094a2:	2200      	movs	r2, #0
 80094a4:	e7ef      	b.n	8009486 <_strtod_l+0xae>
 80094a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80094a8:	b13a      	cbz	r2, 80094ba <_strtod_l+0xe2>
 80094aa:	2135      	movs	r1, #53	; 0x35
 80094ac:	a81c      	add	r0, sp, #112	; 0x70
 80094ae:	f002 fcff 	bl	800beb0 <__copybits>
 80094b2:	4650      	mov	r0, sl
 80094b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80094b6:	f002 f8c7 	bl	800b648 <_Bfree>
 80094ba:	3e01      	subs	r6, #1
 80094bc:	2e04      	cmp	r6, #4
 80094be:	d806      	bhi.n	80094ce <_strtod_l+0xf6>
 80094c0:	e8df f006 	tbb	[pc, r6]
 80094c4:	1714030a 	.word	0x1714030a
 80094c8:	0a          	.byte	0x0a
 80094c9:	00          	.byte	0x00
 80094ca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80094ce:	0721      	lsls	r1, r4, #28
 80094d0:	d5c3      	bpl.n	800945a <_strtod_l+0x82>
 80094d2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80094d6:	e7c0      	b.n	800945a <_strtod_l+0x82>
 80094d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80094da:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80094de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80094e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80094e6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80094ea:	e7f0      	b.n	80094ce <_strtod_l+0xf6>
 80094ec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009668 <_strtod_l+0x290>
 80094f0:	e7ed      	b.n	80094ce <_strtod_l+0xf6>
 80094f2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80094f6:	f04f 38ff 	mov.w	r8, #4294967295
 80094fa:	e7e8      	b.n	80094ce <_strtod_l+0xf6>
 80094fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	9219      	str	r2, [sp, #100]	; 0x64
 8009502:	785b      	ldrb	r3, [r3, #1]
 8009504:	2b30      	cmp	r3, #48	; 0x30
 8009506:	d0f9      	beq.n	80094fc <_strtod_l+0x124>
 8009508:	2b00      	cmp	r3, #0
 800950a:	d0a6      	beq.n	800945a <_strtod_l+0x82>
 800950c:	2301      	movs	r3, #1
 800950e:	9307      	str	r3, [sp, #28]
 8009510:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009512:	220a      	movs	r2, #10
 8009514:	9308      	str	r3, [sp, #32]
 8009516:	2300      	movs	r3, #0
 8009518:	469b      	mov	fp, r3
 800951a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800951e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009520:	7805      	ldrb	r5, [r0, #0]
 8009522:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009526:	b2d9      	uxtb	r1, r3
 8009528:	2909      	cmp	r1, #9
 800952a:	d927      	bls.n	800957c <_strtod_l+0x1a4>
 800952c:	4622      	mov	r2, r4
 800952e:	4639      	mov	r1, r7
 8009530:	f002 fe8a 	bl	800c248 <strncmp>
 8009534:	2800      	cmp	r0, #0
 8009536:	d033      	beq.n	80095a0 <_strtod_l+0x1c8>
 8009538:	2000      	movs	r0, #0
 800953a:	462a      	mov	r2, r5
 800953c:	465c      	mov	r4, fp
 800953e:	4603      	mov	r3, r0
 8009540:	9004      	str	r0, [sp, #16]
 8009542:	2a65      	cmp	r2, #101	; 0x65
 8009544:	d001      	beq.n	800954a <_strtod_l+0x172>
 8009546:	2a45      	cmp	r2, #69	; 0x45
 8009548:	d114      	bne.n	8009574 <_strtod_l+0x19c>
 800954a:	b91c      	cbnz	r4, 8009554 <_strtod_l+0x17c>
 800954c:	9a07      	ldr	r2, [sp, #28]
 800954e:	4302      	orrs	r2, r0
 8009550:	d09f      	beq.n	8009492 <_strtod_l+0xba>
 8009552:	2400      	movs	r4, #0
 8009554:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009556:	1c72      	adds	r2, r6, #1
 8009558:	9219      	str	r2, [sp, #100]	; 0x64
 800955a:	7872      	ldrb	r2, [r6, #1]
 800955c:	2a2b      	cmp	r2, #43	; 0x2b
 800955e:	d079      	beq.n	8009654 <_strtod_l+0x27c>
 8009560:	2a2d      	cmp	r2, #45	; 0x2d
 8009562:	f000 8083 	beq.w	800966c <_strtod_l+0x294>
 8009566:	2700      	movs	r7, #0
 8009568:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800956c:	2909      	cmp	r1, #9
 800956e:	f240 8083 	bls.w	8009678 <_strtod_l+0x2a0>
 8009572:	9619      	str	r6, [sp, #100]	; 0x64
 8009574:	2500      	movs	r5, #0
 8009576:	e09f      	b.n	80096b8 <_strtod_l+0x2e0>
 8009578:	2300      	movs	r3, #0
 800957a:	e7c8      	b.n	800950e <_strtod_l+0x136>
 800957c:	f1bb 0f08 	cmp.w	fp, #8
 8009580:	bfd5      	itete	le
 8009582:	9906      	ldrle	r1, [sp, #24]
 8009584:	9905      	ldrgt	r1, [sp, #20]
 8009586:	fb02 3301 	mlale	r3, r2, r1, r3
 800958a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800958e:	f100 0001 	add.w	r0, r0, #1
 8009592:	bfd4      	ite	le
 8009594:	9306      	strle	r3, [sp, #24]
 8009596:	9305      	strgt	r3, [sp, #20]
 8009598:	f10b 0b01 	add.w	fp, fp, #1
 800959c:	9019      	str	r0, [sp, #100]	; 0x64
 800959e:	e7be      	b.n	800951e <_strtod_l+0x146>
 80095a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095a2:	191a      	adds	r2, r3, r4
 80095a4:	9219      	str	r2, [sp, #100]	; 0x64
 80095a6:	5d1a      	ldrb	r2, [r3, r4]
 80095a8:	f1bb 0f00 	cmp.w	fp, #0
 80095ac:	d036      	beq.n	800961c <_strtod_l+0x244>
 80095ae:	465c      	mov	r4, fp
 80095b0:	9004      	str	r0, [sp, #16]
 80095b2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80095b6:	2b09      	cmp	r3, #9
 80095b8:	d912      	bls.n	80095e0 <_strtod_l+0x208>
 80095ba:	2301      	movs	r3, #1
 80095bc:	e7c1      	b.n	8009542 <_strtod_l+0x16a>
 80095be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095c0:	3001      	adds	r0, #1
 80095c2:	1c5a      	adds	r2, r3, #1
 80095c4:	9219      	str	r2, [sp, #100]	; 0x64
 80095c6:	785a      	ldrb	r2, [r3, #1]
 80095c8:	2a30      	cmp	r2, #48	; 0x30
 80095ca:	d0f8      	beq.n	80095be <_strtod_l+0x1e6>
 80095cc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80095d0:	2b08      	cmp	r3, #8
 80095d2:	f200 84d5 	bhi.w	8009f80 <_strtod_l+0xba8>
 80095d6:	9004      	str	r0, [sp, #16]
 80095d8:	2000      	movs	r0, #0
 80095da:	4604      	mov	r4, r0
 80095dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095de:	9308      	str	r3, [sp, #32]
 80095e0:	3a30      	subs	r2, #48	; 0x30
 80095e2:	f100 0301 	add.w	r3, r0, #1
 80095e6:	d013      	beq.n	8009610 <_strtod_l+0x238>
 80095e8:	9904      	ldr	r1, [sp, #16]
 80095ea:	1905      	adds	r5, r0, r4
 80095ec:	4419      	add	r1, r3
 80095ee:	9104      	str	r1, [sp, #16]
 80095f0:	4623      	mov	r3, r4
 80095f2:	210a      	movs	r1, #10
 80095f4:	42ab      	cmp	r3, r5
 80095f6:	d113      	bne.n	8009620 <_strtod_l+0x248>
 80095f8:	1823      	adds	r3, r4, r0
 80095fa:	2b08      	cmp	r3, #8
 80095fc:	f104 0401 	add.w	r4, r4, #1
 8009600:	4404      	add	r4, r0
 8009602:	dc1b      	bgt.n	800963c <_strtod_l+0x264>
 8009604:	230a      	movs	r3, #10
 8009606:	9906      	ldr	r1, [sp, #24]
 8009608:	fb03 2301 	mla	r3, r3, r1, r2
 800960c:	9306      	str	r3, [sp, #24]
 800960e:	2300      	movs	r3, #0
 8009610:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009612:	4618      	mov	r0, r3
 8009614:	1c51      	adds	r1, r2, #1
 8009616:	9119      	str	r1, [sp, #100]	; 0x64
 8009618:	7852      	ldrb	r2, [r2, #1]
 800961a:	e7ca      	b.n	80095b2 <_strtod_l+0x1da>
 800961c:	4658      	mov	r0, fp
 800961e:	e7d3      	b.n	80095c8 <_strtod_l+0x1f0>
 8009620:	2b08      	cmp	r3, #8
 8009622:	dc04      	bgt.n	800962e <_strtod_l+0x256>
 8009624:	9f06      	ldr	r7, [sp, #24]
 8009626:	434f      	muls	r7, r1
 8009628:	9706      	str	r7, [sp, #24]
 800962a:	3301      	adds	r3, #1
 800962c:	e7e2      	b.n	80095f4 <_strtod_l+0x21c>
 800962e:	1c5f      	adds	r7, r3, #1
 8009630:	2f10      	cmp	r7, #16
 8009632:	bfde      	ittt	le
 8009634:	9f05      	ldrle	r7, [sp, #20]
 8009636:	434f      	mulle	r7, r1
 8009638:	9705      	strle	r7, [sp, #20]
 800963a:	e7f6      	b.n	800962a <_strtod_l+0x252>
 800963c:	2c10      	cmp	r4, #16
 800963e:	bfdf      	itttt	le
 8009640:	230a      	movle	r3, #10
 8009642:	9905      	ldrle	r1, [sp, #20]
 8009644:	fb03 2301 	mlale	r3, r3, r1, r2
 8009648:	9305      	strle	r3, [sp, #20]
 800964a:	e7e0      	b.n	800960e <_strtod_l+0x236>
 800964c:	2300      	movs	r3, #0
 800964e:	9304      	str	r3, [sp, #16]
 8009650:	2301      	movs	r3, #1
 8009652:	e77b      	b.n	800954c <_strtod_l+0x174>
 8009654:	2700      	movs	r7, #0
 8009656:	1cb2      	adds	r2, r6, #2
 8009658:	9219      	str	r2, [sp, #100]	; 0x64
 800965a:	78b2      	ldrb	r2, [r6, #2]
 800965c:	e784      	b.n	8009568 <_strtod_l+0x190>
 800965e:	bf00      	nop
 8009660:	0800db30 	.word	0x0800db30
 8009664:	0800d9e8 	.word	0x0800d9e8
 8009668:	7ff00000 	.word	0x7ff00000
 800966c:	2701      	movs	r7, #1
 800966e:	e7f2      	b.n	8009656 <_strtod_l+0x27e>
 8009670:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009672:	1c51      	adds	r1, r2, #1
 8009674:	9119      	str	r1, [sp, #100]	; 0x64
 8009676:	7852      	ldrb	r2, [r2, #1]
 8009678:	2a30      	cmp	r2, #48	; 0x30
 800967a:	d0f9      	beq.n	8009670 <_strtod_l+0x298>
 800967c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009680:	2908      	cmp	r1, #8
 8009682:	f63f af77 	bhi.w	8009574 <_strtod_l+0x19c>
 8009686:	f04f 0e0a 	mov.w	lr, #10
 800968a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800968e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009690:	9209      	str	r2, [sp, #36]	; 0x24
 8009692:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009694:	1c51      	adds	r1, r2, #1
 8009696:	9119      	str	r1, [sp, #100]	; 0x64
 8009698:	7852      	ldrb	r2, [r2, #1]
 800969a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800969e:	2d09      	cmp	r5, #9
 80096a0:	d935      	bls.n	800970e <_strtod_l+0x336>
 80096a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80096a4:	1b49      	subs	r1, r1, r5
 80096a6:	2908      	cmp	r1, #8
 80096a8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80096ac:	dc02      	bgt.n	80096b4 <_strtod_l+0x2dc>
 80096ae:	4565      	cmp	r5, ip
 80096b0:	bfa8      	it	ge
 80096b2:	4665      	movge	r5, ip
 80096b4:	b107      	cbz	r7, 80096b8 <_strtod_l+0x2e0>
 80096b6:	426d      	negs	r5, r5
 80096b8:	2c00      	cmp	r4, #0
 80096ba:	d14c      	bne.n	8009756 <_strtod_l+0x37e>
 80096bc:	9907      	ldr	r1, [sp, #28]
 80096be:	4301      	orrs	r1, r0
 80096c0:	f47f aecb 	bne.w	800945a <_strtod_l+0x82>
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f47f aee4 	bne.w	8009492 <_strtod_l+0xba>
 80096ca:	2a69      	cmp	r2, #105	; 0x69
 80096cc:	d026      	beq.n	800971c <_strtod_l+0x344>
 80096ce:	dc23      	bgt.n	8009718 <_strtod_l+0x340>
 80096d0:	2a49      	cmp	r2, #73	; 0x49
 80096d2:	d023      	beq.n	800971c <_strtod_l+0x344>
 80096d4:	2a4e      	cmp	r2, #78	; 0x4e
 80096d6:	f47f aedc 	bne.w	8009492 <_strtod_l+0xba>
 80096da:	499d      	ldr	r1, [pc, #628]	; (8009950 <_strtod_l+0x578>)
 80096dc:	a819      	add	r0, sp, #100	; 0x64
 80096de:	f001 fe81 	bl	800b3e4 <__match>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	f43f aed5 	beq.w	8009492 <_strtod_l+0xba>
 80096e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2b28      	cmp	r3, #40	; 0x28
 80096ee:	d12c      	bne.n	800974a <_strtod_l+0x372>
 80096f0:	4998      	ldr	r1, [pc, #608]	; (8009954 <_strtod_l+0x57c>)
 80096f2:	aa1c      	add	r2, sp, #112	; 0x70
 80096f4:	a819      	add	r0, sp, #100	; 0x64
 80096f6:	f001 fe89 	bl	800b40c <__hexnan>
 80096fa:	2805      	cmp	r0, #5
 80096fc:	d125      	bne.n	800974a <_strtod_l+0x372>
 80096fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009700:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009704:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009708:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800970c:	e6a5      	b.n	800945a <_strtod_l+0x82>
 800970e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009712:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009716:	e7bc      	b.n	8009692 <_strtod_l+0x2ba>
 8009718:	2a6e      	cmp	r2, #110	; 0x6e
 800971a:	e7dc      	b.n	80096d6 <_strtod_l+0x2fe>
 800971c:	498e      	ldr	r1, [pc, #568]	; (8009958 <_strtod_l+0x580>)
 800971e:	a819      	add	r0, sp, #100	; 0x64
 8009720:	f001 fe60 	bl	800b3e4 <__match>
 8009724:	2800      	cmp	r0, #0
 8009726:	f43f aeb4 	beq.w	8009492 <_strtod_l+0xba>
 800972a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800972c:	498b      	ldr	r1, [pc, #556]	; (800995c <_strtod_l+0x584>)
 800972e:	3b01      	subs	r3, #1
 8009730:	a819      	add	r0, sp, #100	; 0x64
 8009732:	9319      	str	r3, [sp, #100]	; 0x64
 8009734:	f001 fe56 	bl	800b3e4 <__match>
 8009738:	b910      	cbnz	r0, 8009740 <_strtod_l+0x368>
 800973a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800973c:	3301      	adds	r3, #1
 800973e:	9319      	str	r3, [sp, #100]	; 0x64
 8009740:	f04f 0800 	mov.w	r8, #0
 8009744:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009960 <_strtod_l+0x588>
 8009748:	e687      	b.n	800945a <_strtod_l+0x82>
 800974a:	4886      	ldr	r0, [pc, #536]	; (8009964 <_strtod_l+0x58c>)
 800974c:	f002 fd76 	bl	800c23c <nan>
 8009750:	4680      	mov	r8, r0
 8009752:	4689      	mov	r9, r1
 8009754:	e681      	b.n	800945a <_strtod_l+0x82>
 8009756:	9b04      	ldr	r3, [sp, #16]
 8009758:	f1bb 0f00 	cmp.w	fp, #0
 800975c:	bf08      	it	eq
 800975e:	46a3      	moveq	fp, r4
 8009760:	1aeb      	subs	r3, r5, r3
 8009762:	2c10      	cmp	r4, #16
 8009764:	9806      	ldr	r0, [sp, #24]
 8009766:	4626      	mov	r6, r4
 8009768:	9307      	str	r3, [sp, #28]
 800976a:	bfa8      	it	ge
 800976c:	2610      	movge	r6, #16
 800976e:	f7f6 ff5d 	bl	800062c <__aeabi_ui2d>
 8009772:	2c09      	cmp	r4, #9
 8009774:	4680      	mov	r8, r0
 8009776:	4689      	mov	r9, r1
 8009778:	dd13      	ble.n	80097a2 <_strtod_l+0x3ca>
 800977a:	4b7b      	ldr	r3, [pc, #492]	; (8009968 <_strtod_l+0x590>)
 800977c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009780:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009784:	f7f6 ffcc 	bl	8000720 <__aeabi_dmul>
 8009788:	4680      	mov	r8, r0
 800978a:	9805      	ldr	r0, [sp, #20]
 800978c:	4689      	mov	r9, r1
 800978e:	f7f6 ff4d 	bl	800062c <__aeabi_ui2d>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	4640      	mov	r0, r8
 8009798:	4649      	mov	r1, r9
 800979a:	f7f6 fe0b 	bl	80003b4 <__adddf3>
 800979e:	4680      	mov	r8, r0
 80097a0:	4689      	mov	r9, r1
 80097a2:	2c0f      	cmp	r4, #15
 80097a4:	dc36      	bgt.n	8009814 <_strtod_l+0x43c>
 80097a6:	9b07      	ldr	r3, [sp, #28]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f43f ae56 	beq.w	800945a <_strtod_l+0x82>
 80097ae:	dd22      	ble.n	80097f6 <_strtod_l+0x41e>
 80097b0:	2b16      	cmp	r3, #22
 80097b2:	dc09      	bgt.n	80097c8 <_strtod_l+0x3f0>
 80097b4:	496c      	ldr	r1, [pc, #432]	; (8009968 <_strtod_l+0x590>)
 80097b6:	4642      	mov	r2, r8
 80097b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097bc:	464b      	mov	r3, r9
 80097be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097c2:	f7f6 ffad 	bl	8000720 <__aeabi_dmul>
 80097c6:	e7c3      	b.n	8009750 <_strtod_l+0x378>
 80097c8:	9a07      	ldr	r2, [sp, #28]
 80097ca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80097ce:	4293      	cmp	r3, r2
 80097d0:	db20      	blt.n	8009814 <_strtod_l+0x43c>
 80097d2:	4d65      	ldr	r5, [pc, #404]	; (8009968 <_strtod_l+0x590>)
 80097d4:	f1c4 040f 	rsb	r4, r4, #15
 80097d8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80097dc:	4642      	mov	r2, r8
 80097de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097e2:	464b      	mov	r3, r9
 80097e4:	f7f6 ff9c 	bl	8000720 <__aeabi_dmul>
 80097e8:	9b07      	ldr	r3, [sp, #28]
 80097ea:	1b1c      	subs	r4, r3, r4
 80097ec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80097f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097f4:	e7e5      	b.n	80097c2 <_strtod_l+0x3ea>
 80097f6:	9b07      	ldr	r3, [sp, #28]
 80097f8:	3316      	adds	r3, #22
 80097fa:	db0b      	blt.n	8009814 <_strtod_l+0x43c>
 80097fc:	9b04      	ldr	r3, [sp, #16]
 80097fe:	4640      	mov	r0, r8
 8009800:	1b5d      	subs	r5, r3, r5
 8009802:	4b59      	ldr	r3, [pc, #356]	; (8009968 <_strtod_l+0x590>)
 8009804:	4649      	mov	r1, r9
 8009806:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800980a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800980e:	f7f7 f8b1 	bl	8000974 <__aeabi_ddiv>
 8009812:	e79d      	b.n	8009750 <_strtod_l+0x378>
 8009814:	9b07      	ldr	r3, [sp, #28]
 8009816:	1ba6      	subs	r6, r4, r6
 8009818:	441e      	add	r6, r3
 800981a:	2e00      	cmp	r6, #0
 800981c:	dd74      	ble.n	8009908 <_strtod_l+0x530>
 800981e:	f016 030f 	ands.w	r3, r6, #15
 8009822:	d00a      	beq.n	800983a <_strtod_l+0x462>
 8009824:	4950      	ldr	r1, [pc, #320]	; (8009968 <_strtod_l+0x590>)
 8009826:	4642      	mov	r2, r8
 8009828:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800982c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009830:	464b      	mov	r3, r9
 8009832:	f7f6 ff75 	bl	8000720 <__aeabi_dmul>
 8009836:	4680      	mov	r8, r0
 8009838:	4689      	mov	r9, r1
 800983a:	f036 060f 	bics.w	r6, r6, #15
 800983e:	d052      	beq.n	80098e6 <_strtod_l+0x50e>
 8009840:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009844:	dd27      	ble.n	8009896 <_strtod_l+0x4be>
 8009846:	f04f 0b00 	mov.w	fp, #0
 800984a:	f8cd b010 	str.w	fp, [sp, #16]
 800984e:	f8cd b020 	str.w	fp, [sp, #32]
 8009852:	f8cd b018 	str.w	fp, [sp, #24]
 8009856:	2322      	movs	r3, #34	; 0x22
 8009858:	f04f 0800 	mov.w	r8, #0
 800985c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009960 <_strtod_l+0x588>
 8009860:	f8ca 3000 	str.w	r3, [sl]
 8009864:	9b08      	ldr	r3, [sp, #32]
 8009866:	2b00      	cmp	r3, #0
 8009868:	f43f adf7 	beq.w	800945a <_strtod_l+0x82>
 800986c:	4650      	mov	r0, sl
 800986e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009870:	f001 feea 	bl	800b648 <_Bfree>
 8009874:	4650      	mov	r0, sl
 8009876:	9906      	ldr	r1, [sp, #24]
 8009878:	f001 fee6 	bl	800b648 <_Bfree>
 800987c:	4650      	mov	r0, sl
 800987e:	9904      	ldr	r1, [sp, #16]
 8009880:	f001 fee2 	bl	800b648 <_Bfree>
 8009884:	4650      	mov	r0, sl
 8009886:	9908      	ldr	r1, [sp, #32]
 8009888:	f001 fede 	bl	800b648 <_Bfree>
 800988c:	4659      	mov	r1, fp
 800988e:	4650      	mov	r0, sl
 8009890:	f001 feda 	bl	800b648 <_Bfree>
 8009894:	e5e1      	b.n	800945a <_strtod_l+0x82>
 8009896:	4b35      	ldr	r3, [pc, #212]	; (800996c <_strtod_l+0x594>)
 8009898:	4640      	mov	r0, r8
 800989a:	9305      	str	r3, [sp, #20]
 800989c:	2300      	movs	r3, #0
 800989e:	4649      	mov	r1, r9
 80098a0:	461f      	mov	r7, r3
 80098a2:	1136      	asrs	r6, r6, #4
 80098a4:	2e01      	cmp	r6, #1
 80098a6:	dc21      	bgt.n	80098ec <_strtod_l+0x514>
 80098a8:	b10b      	cbz	r3, 80098ae <_strtod_l+0x4d6>
 80098aa:	4680      	mov	r8, r0
 80098ac:	4689      	mov	r9, r1
 80098ae:	4b2f      	ldr	r3, [pc, #188]	; (800996c <_strtod_l+0x594>)
 80098b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80098b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80098b8:	4642      	mov	r2, r8
 80098ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098be:	464b      	mov	r3, r9
 80098c0:	f7f6 ff2e 	bl	8000720 <__aeabi_dmul>
 80098c4:	4b26      	ldr	r3, [pc, #152]	; (8009960 <_strtod_l+0x588>)
 80098c6:	460a      	mov	r2, r1
 80098c8:	400b      	ands	r3, r1
 80098ca:	4929      	ldr	r1, [pc, #164]	; (8009970 <_strtod_l+0x598>)
 80098cc:	4680      	mov	r8, r0
 80098ce:	428b      	cmp	r3, r1
 80098d0:	d8b9      	bhi.n	8009846 <_strtod_l+0x46e>
 80098d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80098d6:	428b      	cmp	r3, r1
 80098d8:	bf86      	itte	hi
 80098da:	f04f 38ff 	movhi.w	r8, #4294967295
 80098de:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009974 <_strtod_l+0x59c>
 80098e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80098e6:	2300      	movs	r3, #0
 80098e8:	9305      	str	r3, [sp, #20]
 80098ea:	e07f      	b.n	80099ec <_strtod_l+0x614>
 80098ec:	07f2      	lsls	r2, r6, #31
 80098ee:	d505      	bpl.n	80098fc <_strtod_l+0x524>
 80098f0:	9b05      	ldr	r3, [sp, #20]
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	f7f6 ff13 	bl	8000720 <__aeabi_dmul>
 80098fa:	2301      	movs	r3, #1
 80098fc:	9a05      	ldr	r2, [sp, #20]
 80098fe:	3701      	adds	r7, #1
 8009900:	3208      	adds	r2, #8
 8009902:	1076      	asrs	r6, r6, #1
 8009904:	9205      	str	r2, [sp, #20]
 8009906:	e7cd      	b.n	80098a4 <_strtod_l+0x4cc>
 8009908:	d0ed      	beq.n	80098e6 <_strtod_l+0x50e>
 800990a:	4276      	negs	r6, r6
 800990c:	f016 020f 	ands.w	r2, r6, #15
 8009910:	d00a      	beq.n	8009928 <_strtod_l+0x550>
 8009912:	4b15      	ldr	r3, [pc, #84]	; (8009968 <_strtod_l+0x590>)
 8009914:	4640      	mov	r0, r8
 8009916:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800991a:	4649      	mov	r1, r9
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f7f7 f828 	bl	8000974 <__aeabi_ddiv>
 8009924:	4680      	mov	r8, r0
 8009926:	4689      	mov	r9, r1
 8009928:	1136      	asrs	r6, r6, #4
 800992a:	d0dc      	beq.n	80098e6 <_strtod_l+0x50e>
 800992c:	2e1f      	cmp	r6, #31
 800992e:	dd23      	ble.n	8009978 <_strtod_l+0x5a0>
 8009930:	f04f 0b00 	mov.w	fp, #0
 8009934:	f8cd b010 	str.w	fp, [sp, #16]
 8009938:	f8cd b020 	str.w	fp, [sp, #32]
 800993c:	f8cd b018 	str.w	fp, [sp, #24]
 8009940:	2322      	movs	r3, #34	; 0x22
 8009942:	f04f 0800 	mov.w	r8, #0
 8009946:	f04f 0900 	mov.w	r9, #0
 800994a:	f8ca 3000 	str.w	r3, [sl]
 800994e:	e789      	b.n	8009864 <_strtod_l+0x48c>
 8009950:	0800d9c1 	.word	0x0800d9c1
 8009954:	0800d9fc 	.word	0x0800d9fc
 8009958:	0800d9b9 	.word	0x0800d9b9
 800995c:	0800da3b 	.word	0x0800da3b
 8009960:	7ff00000 	.word	0x7ff00000
 8009964:	0800dce8 	.word	0x0800dce8
 8009968:	0800dbc8 	.word	0x0800dbc8
 800996c:	0800dba0 	.word	0x0800dba0
 8009970:	7ca00000 	.word	0x7ca00000
 8009974:	7fefffff 	.word	0x7fefffff
 8009978:	f016 0310 	ands.w	r3, r6, #16
 800997c:	bf18      	it	ne
 800997e:	236a      	movne	r3, #106	; 0x6a
 8009980:	4640      	mov	r0, r8
 8009982:	9305      	str	r3, [sp, #20]
 8009984:	4649      	mov	r1, r9
 8009986:	2300      	movs	r3, #0
 8009988:	4fb0      	ldr	r7, [pc, #704]	; (8009c4c <_strtod_l+0x874>)
 800998a:	07f2      	lsls	r2, r6, #31
 800998c:	d504      	bpl.n	8009998 <_strtod_l+0x5c0>
 800998e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009992:	f7f6 fec5 	bl	8000720 <__aeabi_dmul>
 8009996:	2301      	movs	r3, #1
 8009998:	1076      	asrs	r6, r6, #1
 800999a:	f107 0708 	add.w	r7, r7, #8
 800999e:	d1f4      	bne.n	800998a <_strtod_l+0x5b2>
 80099a0:	b10b      	cbz	r3, 80099a6 <_strtod_l+0x5ce>
 80099a2:	4680      	mov	r8, r0
 80099a4:	4689      	mov	r9, r1
 80099a6:	9b05      	ldr	r3, [sp, #20]
 80099a8:	b1c3      	cbz	r3, 80099dc <_strtod_l+0x604>
 80099aa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80099ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	4649      	mov	r1, r9
 80099b6:	dd11      	ble.n	80099dc <_strtod_l+0x604>
 80099b8:	2b1f      	cmp	r3, #31
 80099ba:	f340 8127 	ble.w	8009c0c <_strtod_l+0x834>
 80099be:	2b34      	cmp	r3, #52	; 0x34
 80099c0:	bfd8      	it	le
 80099c2:	f04f 33ff 	movle.w	r3, #4294967295
 80099c6:	f04f 0800 	mov.w	r8, #0
 80099ca:	bfcf      	iteee	gt
 80099cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80099d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80099d4:	fa03 f202 	lslle.w	r2, r3, r2
 80099d8:	ea02 0901 	andle.w	r9, r2, r1
 80099dc:	2200      	movs	r2, #0
 80099de:	2300      	movs	r3, #0
 80099e0:	4640      	mov	r0, r8
 80099e2:	4649      	mov	r1, r9
 80099e4:	f7f7 f904 	bl	8000bf0 <__aeabi_dcmpeq>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d1a1      	bne.n	8009930 <_strtod_l+0x558>
 80099ec:	9b06      	ldr	r3, [sp, #24]
 80099ee:	465a      	mov	r2, fp
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	4650      	mov	r0, sl
 80099f4:	4623      	mov	r3, r4
 80099f6:	9908      	ldr	r1, [sp, #32]
 80099f8:	f001 fe8e 	bl	800b718 <__s2b>
 80099fc:	9008      	str	r0, [sp, #32]
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f43f af21 	beq.w	8009846 <_strtod_l+0x46e>
 8009a04:	9b04      	ldr	r3, [sp, #16]
 8009a06:	f04f 0b00 	mov.w	fp, #0
 8009a0a:	1b5d      	subs	r5, r3, r5
 8009a0c:	9b07      	ldr	r3, [sp, #28]
 8009a0e:	f8cd b010 	str.w	fp, [sp, #16]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bfb4      	ite	lt
 8009a16:	462b      	movlt	r3, r5
 8009a18:	2300      	movge	r3, #0
 8009a1a:	930e      	str	r3, [sp, #56]	; 0x38
 8009a1c:	9b07      	ldr	r3, [sp, #28]
 8009a1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009a22:	9314      	str	r3, [sp, #80]	; 0x50
 8009a24:	9b08      	ldr	r3, [sp, #32]
 8009a26:	4650      	mov	r0, sl
 8009a28:	6859      	ldr	r1, [r3, #4]
 8009a2a:	f001 fdcd 	bl	800b5c8 <_Balloc>
 8009a2e:	9006      	str	r0, [sp, #24]
 8009a30:	2800      	cmp	r0, #0
 8009a32:	f43f af10 	beq.w	8009856 <_strtod_l+0x47e>
 8009a36:	9b08      	ldr	r3, [sp, #32]
 8009a38:	300c      	adds	r0, #12
 8009a3a:	691a      	ldr	r2, [r3, #16]
 8009a3c:	f103 010c 	add.w	r1, r3, #12
 8009a40:	3202      	adds	r2, #2
 8009a42:	0092      	lsls	r2, r2, #2
 8009a44:	f7fe fe78 	bl	8008738 <memcpy>
 8009a48:	ab1c      	add	r3, sp, #112	; 0x70
 8009a4a:	9301      	str	r3, [sp, #4]
 8009a4c:	ab1b      	add	r3, sp, #108	; 0x6c
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	4642      	mov	r2, r8
 8009a52:	464b      	mov	r3, r9
 8009a54:	4650      	mov	r0, sl
 8009a56:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009a5a:	f002 f99f 	bl	800bd9c <__d2b>
 8009a5e:	901a      	str	r0, [sp, #104]	; 0x68
 8009a60:	2800      	cmp	r0, #0
 8009a62:	f43f aef8 	beq.w	8009856 <_strtod_l+0x47e>
 8009a66:	2101      	movs	r1, #1
 8009a68:	4650      	mov	r0, sl
 8009a6a:	f001 feed 	bl	800b848 <__i2b>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	9004      	str	r0, [sp, #16]
 8009a72:	2800      	cmp	r0, #0
 8009a74:	f43f aeef 	beq.w	8009856 <_strtod_l+0x47e>
 8009a78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009a7a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a7c:	2d00      	cmp	r5, #0
 8009a7e:	bfab      	itete	ge
 8009a80:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009a82:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009a84:	18ee      	addge	r6, r5, r3
 8009a86:	1b5c      	sublt	r4, r3, r5
 8009a88:	9b05      	ldr	r3, [sp, #20]
 8009a8a:	bfa8      	it	ge
 8009a8c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009a8e:	eba5 0503 	sub.w	r5, r5, r3
 8009a92:	4415      	add	r5, r2
 8009a94:	4b6e      	ldr	r3, [pc, #440]	; (8009c50 <_strtod_l+0x878>)
 8009a96:	f105 35ff 	add.w	r5, r5, #4294967295
 8009a9a:	bfb8      	it	lt
 8009a9c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009a9e:	429d      	cmp	r5, r3
 8009aa0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009aa4:	f280 80c4 	bge.w	8009c30 <_strtod_l+0x858>
 8009aa8:	1b5b      	subs	r3, r3, r5
 8009aaa:	2b1f      	cmp	r3, #31
 8009aac:	f04f 0701 	mov.w	r7, #1
 8009ab0:	eba2 0203 	sub.w	r2, r2, r3
 8009ab4:	f300 80b1 	bgt.w	8009c1a <_strtod_l+0x842>
 8009ab8:	2500      	movs	r5, #0
 8009aba:	fa07 f303 	lsl.w	r3, r7, r3
 8009abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ac0:	18b7      	adds	r7, r6, r2
 8009ac2:	9b05      	ldr	r3, [sp, #20]
 8009ac4:	42be      	cmp	r6, r7
 8009ac6:	4414      	add	r4, r2
 8009ac8:	441c      	add	r4, r3
 8009aca:	4633      	mov	r3, r6
 8009acc:	bfa8      	it	ge
 8009ace:	463b      	movge	r3, r7
 8009ad0:	42a3      	cmp	r3, r4
 8009ad2:	bfa8      	it	ge
 8009ad4:	4623      	movge	r3, r4
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	bfc2      	ittt	gt
 8009ada:	1aff      	subgt	r7, r7, r3
 8009adc:	1ae4      	subgt	r4, r4, r3
 8009ade:	1af6      	subgt	r6, r6, r3
 8009ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	dd17      	ble.n	8009b16 <_strtod_l+0x73e>
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	4650      	mov	r0, sl
 8009aea:	9904      	ldr	r1, [sp, #16]
 8009aec:	f001 ff6a 	bl	800b9c4 <__pow5mult>
 8009af0:	9004      	str	r0, [sp, #16]
 8009af2:	2800      	cmp	r0, #0
 8009af4:	f43f aeaf 	beq.w	8009856 <_strtod_l+0x47e>
 8009af8:	4601      	mov	r1, r0
 8009afa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009afc:	4650      	mov	r0, sl
 8009afe:	f001 feb9 	bl	800b874 <__multiply>
 8009b02:	9009      	str	r0, [sp, #36]	; 0x24
 8009b04:	2800      	cmp	r0, #0
 8009b06:	f43f aea6 	beq.w	8009856 <_strtod_l+0x47e>
 8009b0a:	4650      	mov	r0, sl
 8009b0c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009b0e:	f001 fd9b 	bl	800b648 <_Bfree>
 8009b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b14:	931a      	str	r3, [sp, #104]	; 0x68
 8009b16:	2f00      	cmp	r7, #0
 8009b18:	f300 808e 	bgt.w	8009c38 <_strtod_l+0x860>
 8009b1c:	9b07      	ldr	r3, [sp, #28]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	dd08      	ble.n	8009b34 <_strtod_l+0x75c>
 8009b22:	4650      	mov	r0, sl
 8009b24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b26:	9906      	ldr	r1, [sp, #24]
 8009b28:	f001 ff4c 	bl	800b9c4 <__pow5mult>
 8009b2c:	9006      	str	r0, [sp, #24]
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	f43f ae91 	beq.w	8009856 <_strtod_l+0x47e>
 8009b34:	2c00      	cmp	r4, #0
 8009b36:	dd08      	ble.n	8009b4a <_strtod_l+0x772>
 8009b38:	4622      	mov	r2, r4
 8009b3a:	4650      	mov	r0, sl
 8009b3c:	9906      	ldr	r1, [sp, #24]
 8009b3e:	f001 ff9b 	bl	800ba78 <__lshift>
 8009b42:	9006      	str	r0, [sp, #24]
 8009b44:	2800      	cmp	r0, #0
 8009b46:	f43f ae86 	beq.w	8009856 <_strtod_l+0x47e>
 8009b4a:	2e00      	cmp	r6, #0
 8009b4c:	dd08      	ble.n	8009b60 <_strtod_l+0x788>
 8009b4e:	4632      	mov	r2, r6
 8009b50:	4650      	mov	r0, sl
 8009b52:	9904      	ldr	r1, [sp, #16]
 8009b54:	f001 ff90 	bl	800ba78 <__lshift>
 8009b58:	9004      	str	r0, [sp, #16]
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	f43f ae7b 	beq.w	8009856 <_strtod_l+0x47e>
 8009b60:	4650      	mov	r0, sl
 8009b62:	9a06      	ldr	r2, [sp, #24]
 8009b64:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009b66:	f002 f813 	bl	800bb90 <__mdiff>
 8009b6a:	4683      	mov	fp, r0
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	f43f ae72 	beq.w	8009856 <_strtod_l+0x47e>
 8009b72:	2400      	movs	r4, #0
 8009b74:	68c3      	ldr	r3, [r0, #12]
 8009b76:	9904      	ldr	r1, [sp, #16]
 8009b78:	60c4      	str	r4, [r0, #12]
 8009b7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b7c:	f001 ffec 	bl	800bb58 <__mcmp>
 8009b80:	42a0      	cmp	r0, r4
 8009b82:	da6b      	bge.n	8009c5c <_strtod_l+0x884>
 8009b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b86:	ea53 0308 	orrs.w	r3, r3, r8
 8009b8a:	f040 8091 	bne.w	8009cb0 <_strtod_l+0x8d8>
 8009b8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f040 808c 	bne.w	8009cb0 <_strtod_l+0x8d8>
 8009b98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b9c:	0d1b      	lsrs	r3, r3, #20
 8009b9e:	051b      	lsls	r3, r3, #20
 8009ba0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009ba4:	f240 8084 	bls.w	8009cb0 <_strtod_l+0x8d8>
 8009ba8:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009bac:	b91b      	cbnz	r3, 8009bb6 <_strtod_l+0x7de>
 8009bae:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	dd7c      	ble.n	8009cb0 <_strtod_l+0x8d8>
 8009bb6:	4659      	mov	r1, fp
 8009bb8:	2201      	movs	r2, #1
 8009bba:	4650      	mov	r0, sl
 8009bbc:	f001 ff5c 	bl	800ba78 <__lshift>
 8009bc0:	9904      	ldr	r1, [sp, #16]
 8009bc2:	4683      	mov	fp, r0
 8009bc4:	f001 ffc8 	bl	800bb58 <__mcmp>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	dd71      	ble.n	8009cb0 <_strtod_l+0x8d8>
 8009bcc:	9905      	ldr	r1, [sp, #20]
 8009bce:	464b      	mov	r3, r9
 8009bd0:	4a20      	ldr	r2, [pc, #128]	; (8009c54 <_strtod_l+0x87c>)
 8009bd2:	2900      	cmp	r1, #0
 8009bd4:	f000 808c 	beq.w	8009cf0 <_strtod_l+0x918>
 8009bd8:	ea02 0109 	and.w	r1, r2, r9
 8009bdc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009be0:	f300 8086 	bgt.w	8009cf0 <_strtod_l+0x918>
 8009be4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009be8:	f77f aeaa 	ble.w	8009940 <_strtod_l+0x568>
 8009bec:	4640      	mov	r0, r8
 8009bee:	4649      	mov	r1, r9
 8009bf0:	4b19      	ldr	r3, [pc, #100]	; (8009c58 <_strtod_l+0x880>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f7f6 fd94 	bl	8000720 <__aeabi_dmul>
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4303      	orrs	r3, r0
 8009bfc:	bf08      	it	eq
 8009bfe:	2322      	moveq	r3, #34	; 0x22
 8009c00:	4680      	mov	r8, r0
 8009c02:	4689      	mov	r9, r1
 8009c04:	bf08      	it	eq
 8009c06:	f8ca 3000 	streq.w	r3, [sl]
 8009c0a:	e62f      	b.n	800986c <_strtod_l+0x494>
 8009c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c10:	fa02 f303 	lsl.w	r3, r2, r3
 8009c14:	ea03 0808 	and.w	r8, r3, r8
 8009c18:	e6e0      	b.n	80099dc <_strtod_l+0x604>
 8009c1a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009c1e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009c22:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009c26:	35e2      	adds	r5, #226	; 0xe2
 8009c28:	fa07 f505 	lsl.w	r5, r7, r5
 8009c2c:	970f      	str	r7, [sp, #60]	; 0x3c
 8009c2e:	e747      	b.n	8009ac0 <_strtod_l+0x6e8>
 8009c30:	2301      	movs	r3, #1
 8009c32:	2500      	movs	r5, #0
 8009c34:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c36:	e743      	b.n	8009ac0 <_strtod_l+0x6e8>
 8009c38:	463a      	mov	r2, r7
 8009c3a:	4650      	mov	r0, sl
 8009c3c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c3e:	f001 ff1b 	bl	800ba78 <__lshift>
 8009c42:	901a      	str	r0, [sp, #104]	; 0x68
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f47f af69 	bne.w	8009b1c <_strtod_l+0x744>
 8009c4a:	e604      	b.n	8009856 <_strtod_l+0x47e>
 8009c4c:	0800da10 	.word	0x0800da10
 8009c50:	fffffc02 	.word	0xfffffc02
 8009c54:	7ff00000 	.word	0x7ff00000
 8009c58:	39500000 	.word	0x39500000
 8009c5c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009c60:	d165      	bne.n	8009d2e <_strtod_l+0x956>
 8009c62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c68:	b35a      	cbz	r2, 8009cc2 <_strtod_l+0x8ea>
 8009c6a:	4a99      	ldr	r2, [pc, #612]	; (8009ed0 <_strtod_l+0xaf8>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d12b      	bne.n	8009cc8 <_strtod_l+0x8f0>
 8009c70:	9b05      	ldr	r3, [sp, #20]
 8009c72:	4641      	mov	r1, r8
 8009c74:	b303      	cbz	r3, 8009cb8 <_strtod_l+0x8e0>
 8009c76:	464a      	mov	r2, r9
 8009c78:	4b96      	ldr	r3, [pc, #600]	; (8009ed4 <_strtod_l+0xafc>)
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c80:	f04f 32ff 	mov.w	r2, #4294967295
 8009c84:	d81b      	bhi.n	8009cbe <_strtod_l+0x8e6>
 8009c86:	0d1b      	lsrs	r3, r3, #20
 8009c88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c90:	4299      	cmp	r1, r3
 8009c92:	d119      	bne.n	8009cc8 <_strtod_l+0x8f0>
 8009c94:	4b90      	ldr	r3, [pc, #576]	; (8009ed8 <_strtod_l+0xb00>)
 8009c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d102      	bne.n	8009ca2 <_strtod_l+0x8ca>
 8009c9c:	3101      	adds	r1, #1
 8009c9e:	f43f adda 	beq.w	8009856 <_strtod_l+0x47e>
 8009ca2:	f04f 0800 	mov.w	r8, #0
 8009ca6:	4b8b      	ldr	r3, [pc, #556]	; (8009ed4 <_strtod_l+0xafc>)
 8009ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009caa:	401a      	ands	r2, r3
 8009cac:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009cb0:	9b05      	ldr	r3, [sp, #20]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d19a      	bne.n	8009bec <_strtod_l+0x814>
 8009cb6:	e5d9      	b.n	800986c <_strtod_l+0x494>
 8009cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cbc:	e7e8      	b.n	8009c90 <_strtod_l+0x8b8>
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	e7e6      	b.n	8009c90 <_strtod_l+0x8b8>
 8009cc2:	ea53 0308 	orrs.w	r3, r3, r8
 8009cc6:	d081      	beq.n	8009bcc <_strtod_l+0x7f4>
 8009cc8:	b1e5      	cbz	r5, 8009d04 <_strtod_l+0x92c>
 8009cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ccc:	421d      	tst	r5, r3
 8009cce:	d0ef      	beq.n	8009cb0 <_strtod_l+0x8d8>
 8009cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cd2:	4640      	mov	r0, r8
 8009cd4:	4649      	mov	r1, r9
 8009cd6:	9a05      	ldr	r2, [sp, #20]
 8009cd8:	b1c3      	cbz	r3, 8009d0c <_strtod_l+0x934>
 8009cda:	f7ff fb5c 	bl	8009396 <sulp>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ce6:	f7f6 fb65 	bl	80003b4 <__adddf3>
 8009cea:	4680      	mov	r8, r0
 8009cec:	4689      	mov	r9, r1
 8009cee:	e7df      	b.n	8009cb0 <_strtod_l+0x8d8>
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009cf6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009cfa:	f04f 38ff 	mov.w	r8, #4294967295
 8009cfe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009d02:	e7d5      	b.n	8009cb0 <_strtod_l+0x8d8>
 8009d04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d06:	ea13 0f08 	tst.w	r3, r8
 8009d0a:	e7e0      	b.n	8009cce <_strtod_l+0x8f6>
 8009d0c:	f7ff fb43 	bl	8009396 <sulp>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d18:	f7f6 fb4a 	bl	80003b0 <__aeabi_dsub>
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2300      	movs	r3, #0
 8009d20:	4680      	mov	r8, r0
 8009d22:	4689      	mov	r9, r1
 8009d24:	f7f6 ff64 	bl	8000bf0 <__aeabi_dcmpeq>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d0c1      	beq.n	8009cb0 <_strtod_l+0x8d8>
 8009d2c:	e608      	b.n	8009940 <_strtod_l+0x568>
 8009d2e:	4658      	mov	r0, fp
 8009d30:	9904      	ldr	r1, [sp, #16]
 8009d32:	f002 f88f 	bl	800be54 <__ratio>
 8009d36:	2200      	movs	r2, #0
 8009d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d3c:	4606      	mov	r6, r0
 8009d3e:	460f      	mov	r7, r1
 8009d40:	f7f6 ff6a 	bl	8000c18 <__aeabi_dcmple>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d070      	beq.n	8009e2a <_strtod_l+0xa52>
 8009d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d042      	beq.n	8009dd4 <_strtod_l+0x9fc>
 8009d4e:	2600      	movs	r6, #0
 8009d50:	4f62      	ldr	r7, [pc, #392]	; (8009edc <_strtod_l+0xb04>)
 8009d52:	4d62      	ldr	r5, [pc, #392]	; (8009edc <_strtod_l+0xb04>)
 8009d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d5a:	0d1b      	lsrs	r3, r3, #20
 8009d5c:	051b      	lsls	r3, r3, #20
 8009d5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d62:	4b5f      	ldr	r3, [pc, #380]	; (8009ee0 <_strtod_l+0xb08>)
 8009d64:	429a      	cmp	r2, r3
 8009d66:	f040 80c3 	bne.w	8009ef0 <_strtod_l+0xb18>
 8009d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6c:	4640      	mov	r0, r8
 8009d6e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009d72:	4649      	mov	r1, r9
 8009d74:	f001 ff98 	bl	800bca8 <__ulp>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	f7f6 fcce 	bl	8000720 <__aeabi_dmul>
 8009d84:	4642      	mov	r2, r8
 8009d86:	464b      	mov	r3, r9
 8009d88:	f7f6 fb14 	bl	80003b4 <__adddf3>
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4951      	ldr	r1, [pc, #324]	; (8009ed4 <_strtod_l+0xafc>)
 8009d90:	4a54      	ldr	r2, [pc, #336]	; (8009ee4 <_strtod_l+0xb0c>)
 8009d92:	4019      	ands	r1, r3
 8009d94:	4291      	cmp	r1, r2
 8009d96:	4680      	mov	r8, r0
 8009d98:	d95d      	bls.n	8009e56 <_strtod_l+0xa7e>
 8009d9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d9c:	4b4e      	ldr	r3, [pc, #312]	; (8009ed8 <_strtod_l+0xb00>)
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d103      	bne.n	8009daa <_strtod_l+0x9d2>
 8009da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009da4:	3301      	adds	r3, #1
 8009da6:	f43f ad56 	beq.w	8009856 <_strtod_l+0x47e>
 8009daa:	f04f 38ff 	mov.w	r8, #4294967295
 8009dae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009ed8 <_strtod_l+0xb00>
 8009db2:	4650      	mov	r0, sl
 8009db4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009db6:	f001 fc47 	bl	800b648 <_Bfree>
 8009dba:	4650      	mov	r0, sl
 8009dbc:	9906      	ldr	r1, [sp, #24]
 8009dbe:	f001 fc43 	bl	800b648 <_Bfree>
 8009dc2:	4650      	mov	r0, sl
 8009dc4:	9904      	ldr	r1, [sp, #16]
 8009dc6:	f001 fc3f 	bl	800b648 <_Bfree>
 8009dca:	4659      	mov	r1, fp
 8009dcc:	4650      	mov	r0, sl
 8009dce:	f001 fc3b 	bl	800b648 <_Bfree>
 8009dd2:	e627      	b.n	8009a24 <_strtod_l+0x64c>
 8009dd4:	f1b8 0f00 	cmp.w	r8, #0
 8009dd8:	d119      	bne.n	8009e0e <_strtod_l+0xa36>
 8009dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009de0:	b9e3      	cbnz	r3, 8009e1c <_strtod_l+0xa44>
 8009de2:	2200      	movs	r2, #0
 8009de4:	4630      	mov	r0, r6
 8009de6:	4639      	mov	r1, r7
 8009de8:	4b3c      	ldr	r3, [pc, #240]	; (8009edc <_strtod_l+0xb04>)
 8009dea:	f7f6 ff0b 	bl	8000c04 <__aeabi_dcmplt>
 8009dee:	b9c8      	cbnz	r0, 8009e24 <_strtod_l+0xa4c>
 8009df0:	2200      	movs	r2, #0
 8009df2:	4630      	mov	r0, r6
 8009df4:	4639      	mov	r1, r7
 8009df6:	4b3c      	ldr	r3, [pc, #240]	; (8009ee8 <_strtod_l+0xb10>)
 8009df8:	f7f6 fc92 	bl	8000720 <__aeabi_dmul>
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	460d      	mov	r5, r1
 8009e00:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009e04:	9416      	str	r4, [sp, #88]	; 0x58
 8009e06:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e08:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8009e0c:	e7a2      	b.n	8009d54 <_strtod_l+0x97c>
 8009e0e:	f1b8 0f01 	cmp.w	r8, #1
 8009e12:	d103      	bne.n	8009e1c <_strtod_l+0xa44>
 8009e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f43f ad92 	beq.w	8009940 <_strtod_l+0x568>
 8009e1c:	2600      	movs	r6, #0
 8009e1e:	2400      	movs	r4, #0
 8009e20:	4f32      	ldr	r7, [pc, #200]	; (8009eec <_strtod_l+0xb14>)
 8009e22:	e796      	b.n	8009d52 <_strtod_l+0x97a>
 8009e24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009e26:	4d30      	ldr	r5, [pc, #192]	; (8009ee8 <_strtod_l+0xb10>)
 8009e28:	e7ea      	b.n	8009e00 <_strtod_l+0xa28>
 8009e2a:	4b2f      	ldr	r3, [pc, #188]	; (8009ee8 <_strtod_l+0xb10>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	4630      	mov	r0, r6
 8009e30:	4639      	mov	r1, r7
 8009e32:	f7f6 fc75 	bl	8000720 <__aeabi_dmul>
 8009e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e38:	4604      	mov	r4, r0
 8009e3a:	460d      	mov	r5, r1
 8009e3c:	b933      	cbnz	r3, 8009e4c <_strtod_l+0xa74>
 8009e3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e42:	9010      	str	r0, [sp, #64]	; 0x40
 8009e44:	9311      	str	r3, [sp, #68]	; 0x44
 8009e46:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009e4a:	e783      	b.n	8009d54 <_strtod_l+0x97c>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009e54:	e7f7      	b.n	8009e46 <_strtod_l+0xa6e>
 8009e56:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009e5a:	9b05      	ldr	r3, [sp, #20]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1a8      	bne.n	8009db2 <_strtod_l+0x9da>
 8009e60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e66:	0d1b      	lsrs	r3, r3, #20
 8009e68:	051b      	lsls	r3, r3, #20
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d1a1      	bne.n	8009db2 <_strtod_l+0x9da>
 8009e6e:	4620      	mov	r0, r4
 8009e70:	4629      	mov	r1, r5
 8009e72:	f7f7 f97f 	bl	8001174 <__aeabi_d2lz>
 8009e76:	f7f6 fc25 	bl	80006c4 <__aeabi_l2d>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4620      	mov	r0, r4
 8009e80:	4629      	mov	r1, r5
 8009e82:	f7f6 fa95 	bl	80003b0 <__aeabi_dsub>
 8009e86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e8c:	ea43 0308 	orr.w	r3, r3, r8
 8009e90:	4313      	orrs	r3, r2
 8009e92:	4604      	mov	r4, r0
 8009e94:	460d      	mov	r5, r1
 8009e96:	d066      	beq.n	8009f66 <_strtod_l+0xb8e>
 8009e98:	a309      	add	r3, pc, #36	; (adr r3, 8009ec0 <_strtod_l+0xae8>)
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	f7f6 feb1 	bl	8000c04 <__aeabi_dcmplt>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	f47f ace2 	bne.w	800986c <_strtod_l+0x494>
 8009ea8:	a307      	add	r3, pc, #28	; (adr r3, 8009ec8 <_strtod_l+0xaf0>)
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	4620      	mov	r0, r4
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	f7f6 fec5 	bl	8000c40 <__aeabi_dcmpgt>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f43f af7b 	beq.w	8009db2 <_strtod_l+0x9da>
 8009ebc:	e4d6      	b.n	800986c <_strtod_l+0x494>
 8009ebe:	bf00      	nop
 8009ec0:	94a03595 	.word	0x94a03595
 8009ec4:	3fdfffff 	.word	0x3fdfffff
 8009ec8:	35afe535 	.word	0x35afe535
 8009ecc:	3fe00000 	.word	0x3fe00000
 8009ed0:	000fffff 	.word	0x000fffff
 8009ed4:	7ff00000 	.word	0x7ff00000
 8009ed8:	7fefffff 	.word	0x7fefffff
 8009edc:	3ff00000 	.word	0x3ff00000
 8009ee0:	7fe00000 	.word	0x7fe00000
 8009ee4:	7c9fffff 	.word	0x7c9fffff
 8009ee8:	3fe00000 	.word	0x3fe00000
 8009eec:	bff00000 	.word	0xbff00000
 8009ef0:	9b05      	ldr	r3, [sp, #20]
 8009ef2:	b313      	cbz	r3, 8009f3a <_strtod_l+0xb62>
 8009ef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ef6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009efa:	d81e      	bhi.n	8009f3a <_strtod_l+0xb62>
 8009efc:	a326      	add	r3, pc, #152	; (adr r3, 8009f98 <_strtod_l+0xbc0>)
 8009efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f02:	4620      	mov	r0, r4
 8009f04:	4629      	mov	r1, r5
 8009f06:	f7f6 fe87 	bl	8000c18 <__aeabi_dcmple>
 8009f0a:	b190      	cbz	r0, 8009f32 <_strtod_l+0xb5a>
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f7f6 fede 	bl	8000cd0 <__aeabi_d2uiz>
 8009f14:	2801      	cmp	r0, #1
 8009f16:	bf38      	it	cc
 8009f18:	2001      	movcc	r0, #1
 8009f1a:	f7f6 fb87 	bl	800062c <__aeabi_ui2d>
 8009f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f20:	4604      	mov	r4, r0
 8009f22:	460d      	mov	r5, r1
 8009f24:	b9d3      	cbnz	r3, 8009f5c <_strtod_l+0xb84>
 8009f26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f2a:	9012      	str	r0, [sp, #72]	; 0x48
 8009f2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f2e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009f32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f34:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009f38:	1a9f      	subs	r7, r3, r2
 8009f3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f3e:	f001 feb3 	bl	800bca8 <__ulp>
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	4630      	mov	r0, r6
 8009f48:	4639      	mov	r1, r7
 8009f4a:	f7f6 fbe9 	bl	8000720 <__aeabi_dmul>
 8009f4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009f52:	f7f6 fa2f 	bl	80003b4 <__adddf3>
 8009f56:	4680      	mov	r8, r0
 8009f58:	4689      	mov	r9, r1
 8009f5a:	e77e      	b.n	8009e5a <_strtod_l+0xa82>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009f64:	e7e3      	b.n	8009f2e <_strtod_l+0xb56>
 8009f66:	a30e      	add	r3, pc, #56	; (adr r3, 8009fa0 <_strtod_l+0xbc8>)
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	f7f6 fe4a 	bl	8000c04 <__aeabi_dcmplt>
 8009f70:	e7a1      	b.n	8009eb6 <_strtod_l+0xade>
 8009f72:	2300      	movs	r3, #0
 8009f74:	930a      	str	r3, [sp, #40]	; 0x28
 8009f76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f7a:	6013      	str	r3, [r2, #0]
 8009f7c:	f7ff ba71 	b.w	8009462 <_strtod_l+0x8a>
 8009f80:	2a65      	cmp	r2, #101	; 0x65
 8009f82:	f43f ab63 	beq.w	800964c <_strtod_l+0x274>
 8009f86:	2a45      	cmp	r2, #69	; 0x45
 8009f88:	f43f ab60 	beq.w	800964c <_strtod_l+0x274>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	f7ff bb95 	b.w	80096bc <_strtod_l+0x2e4>
 8009f92:	bf00      	nop
 8009f94:	f3af 8000 	nop.w
 8009f98:	ffc00000 	.word	0xffc00000
 8009f9c:	41dfffff 	.word	0x41dfffff
 8009fa0:	94a03595 	.word	0x94a03595
 8009fa4:	3fcfffff 	.word	0x3fcfffff

08009fa8 <strtod>:
 8009fa8:	460a      	mov	r2, r1
 8009faa:	4601      	mov	r1, r0
 8009fac:	4802      	ldr	r0, [pc, #8]	; (8009fb8 <strtod+0x10>)
 8009fae:	4b03      	ldr	r3, [pc, #12]	; (8009fbc <strtod+0x14>)
 8009fb0:	6800      	ldr	r0, [r0, #0]
 8009fb2:	f7ff ba11 	b.w	80093d8 <_strtod_l>
 8009fb6:	bf00      	nop
 8009fb8:	20000010 	.word	0x20000010
 8009fbc:	20000078 	.word	0x20000078

08009fc0 <_write_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4604      	mov	r4, r0
 8009fc4:	4608      	mov	r0, r1
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	2200      	movs	r2, #0
 8009fca:	4d05      	ldr	r5, [pc, #20]	; (8009fe0 <_write_r+0x20>)
 8009fcc:	602a      	str	r2, [r5, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f7f8 ff94 	bl	8002efc <_write>
 8009fd4:	1c43      	adds	r3, r0, #1
 8009fd6:	d102      	bne.n	8009fde <_write_r+0x1e>
 8009fd8:	682b      	ldr	r3, [r5, #0]
 8009fda:	b103      	cbz	r3, 8009fde <_write_r+0x1e>
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	bd38      	pop	{r3, r4, r5, pc}
 8009fe0:	200008cc 	.word	0x200008cc

08009fe4 <_close_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	4d05      	ldr	r5, [pc, #20]	; (800a000 <_close_r+0x1c>)
 8009fea:	4604      	mov	r4, r0
 8009fec:	4608      	mov	r0, r1
 8009fee:	602b      	str	r3, [r5, #0]
 8009ff0:	f7f8 ffa0 	bl	8002f34 <_close>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d102      	bne.n	8009ffe <_close_r+0x1a>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	b103      	cbz	r3, 8009ffe <_close_r+0x1a>
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}
 800a000:	200008cc 	.word	0x200008cc

0800a004 <quorem>:
 800a004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a008:	6903      	ldr	r3, [r0, #16]
 800a00a:	690c      	ldr	r4, [r1, #16]
 800a00c:	4607      	mov	r7, r0
 800a00e:	42a3      	cmp	r3, r4
 800a010:	f2c0 8082 	blt.w	800a118 <quorem+0x114>
 800a014:	3c01      	subs	r4, #1
 800a016:	f100 0514 	add.w	r5, r0, #20
 800a01a:	f101 0814 	add.w	r8, r1, #20
 800a01e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a022:	9301      	str	r3, [sp, #4]
 800a024:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a028:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a02c:	3301      	adds	r3, #1
 800a02e:	429a      	cmp	r2, r3
 800a030:	fbb2 f6f3 	udiv	r6, r2, r3
 800a034:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a038:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a03c:	d331      	bcc.n	800a0a2 <quorem+0x9e>
 800a03e:	f04f 0e00 	mov.w	lr, #0
 800a042:	4640      	mov	r0, r8
 800a044:	46ac      	mov	ip, r5
 800a046:	46f2      	mov	sl, lr
 800a048:	f850 2b04 	ldr.w	r2, [r0], #4
 800a04c:	b293      	uxth	r3, r2
 800a04e:	fb06 e303 	mla	r3, r6, r3, lr
 800a052:	0c12      	lsrs	r2, r2, #16
 800a054:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a058:	b29b      	uxth	r3, r3
 800a05a:	fb06 e202 	mla	r2, r6, r2, lr
 800a05e:	ebaa 0303 	sub.w	r3, sl, r3
 800a062:	f8dc a000 	ldr.w	sl, [ip]
 800a066:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a06a:	fa1f fa8a 	uxth.w	sl, sl
 800a06e:	4453      	add	r3, sl
 800a070:	f8dc a000 	ldr.w	sl, [ip]
 800a074:	b292      	uxth	r2, r2
 800a076:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a07a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a07e:	b29b      	uxth	r3, r3
 800a080:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a084:	4581      	cmp	r9, r0
 800a086:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a08a:	f84c 3b04 	str.w	r3, [ip], #4
 800a08e:	d2db      	bcs.n	800a048 <quorem+0x44>
 800a090:	f855 300b 	ldr.w	r3, [r5, fp]
 800a094:	b92b      	cbnz	r3, 800a0a2 <quorem+0x9e>
 800a096:	9b01      	ldr	r3, [sp, #4]
 800a098:	3b04      	subs	r3, #4
 800a09a:	429d      	cmp	r5, r3
 800a09c:	461a      	mov	r2, r3
 800a09e:	d32f      	bcc.n	800a100 <quorem+0xfc>
 800a0a0:	613c      	str	r4, [r7, #16]
 800a0a2:	4638      	mov	r0, r7
 800a0a4:	f001 fd58 	bl	800bb58 <__mcmp>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	db25      	blt.n	800a0f8 <quorem+0xf4>
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	f04f 0c00 	mov.w	ip, #0
 800a0b2:	3601      	adds	r6, #1
 800a0b4:	f858 1b04 	ldr.w	r1, [r8], #4
 800a0b8:	f8d0 e000 	ldr.w	lr, [r0]
 800a0bc:	b28b      	uxth	r3, r1
 800a0be:	ebac 0303 	sub.w	r3, ip, r3
 800a0c2:	fa1f f28e 	uxth.w	r2, lr
 800a0c6:	4413      	add	r3, r2
 800a0c8:	0c0a      	lsrs	r2, r1, #16
 800a0ca:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0d8:	45c1      	cmp	r9, r8
 800a0da:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0de:	f840 3b04 	str.w	r3, [r0], #4
 800a0e2:	d2e7      	bcs.n	800a0b4 <quorem+0xb0>
 800a0e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0ec:	b922      	cbnz	r2, 800a0f8 <quorem+0xf4>
 800a0ee:	3b04      	subs	r3, #4
 800a0f0:	429d      	cmp	r5, r3
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	d30a      	bcc.n	800a10c <quorem+0x108>
 800a0f6:	613c      	str	r4, [r7, #16]
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	b003      	add	sp, #12
 800a0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a100:	6812      	ldr	r2, [r2, #0]
 800a102:	3b04      	subs	r3, #4
 800a104:	2a00      	cmp	r2, #0
 800a106:	d1cb      	bne.n	800a0a0 <quorem+0x9c>
 800a108:	3c01      	subs	r4, #1
 800a10a:	e7c6      	b.n	800a09a <quorem+0x96>
 800a10c:	6812      	ldr	r2, [r2, #0]
 800a10e:	3b04      	subs	r3, #4
 800a110:	2a00      	cmp	r2, #0
 800a112:	d1f0      	bne.n	800a0f6 <quorem+0xf2>
 800a114:	3c01      	subs	r4, #1
 800a116:	e7eb      	b.n	800a0f0 <quorem+0xec>
 800a118:	2000      	movs	r0, #0
 800a11a:	e7ee      	b.n	800a0fa <quorem+0xf6>
 800a11c:	0000      	movs	r0, r0
	...

0800a120 <_dtoa_r>:
 800a120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a124:	4616      	mov	r6, r2
 800a126:	461f      	mov	r7, r3
 800a128:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a12a:	b099      	sub	sp, #100	; 0x64
 800a12c:	4605      	mov	r5, r0
 800a12e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a132:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a136:	b974      	cbnz	r4, 800a156 <_dtoa_r+0x36>
 800a138:	2010      	movs	r0, #16
 800a13a:	f7fe faed 	bl	8008718 <malloc>
 800a13e:	4602      	mov	r2, r0
 800a140:	6268      	str	r0, [r5, #36]	; 0x24
 800a142:	b920      	cbnz	r0, 800a14e <_dtoa_r+0x2e>
 800a144:	21ea      	movs	r1, #234	; 0xea
 800a146:	4ba8      	ldr	r3, [pc, #672]	; (800a3e8 <_dtoa_r+0x2c8>)
 800a148:	48a8      	ldr	r0, [pc, #672]	; (800a3ec <_dtoa_r+0x2cc>)
 800a14a:	f002 f89f 	bl	800c28c <__assert_func>
 800a14e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a152:	6004      	str	r4, [r0, #0]
 800a154:	60c4      	str	r4, [r0, #12]
 800a156:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a158:	6819      	ldr	r1, [r3, #0]
 800a15a:	b151      	cbz	r1, 800a172 <_dtoa_r+0x52>
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	2301      	movs	r3, #1
 800a160:	4093      	lsls	r3, r2
 800a162:	604a      	str	r2, [r1, #4]
 800a164:	608b      	str	r3, [r1, #8]
 800a166:	4628      	mov	r0, r5
 800a168:	f001 fa6e 	bl	800b648 <_Bfree>
 800a16c:	2200      	movs	r2, #0
 800a16e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a170:	601a      	str	r2, [r3, #0]
 800a172:	1e3b      	subs	r3, r7, #0
 800a174:	bfaf      	iteee	ge
 800a176:	2300      	movge	r3, #0
 800a178:	2201      	movlt	r2, #1
 800a17a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a17e:	9305      	strlt	r3, [sp, #20]
 800a180:	bfa8      	it	ge
 800a182:	f8c8 3000 	strge.w	r3, [r8]
 800a186:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a18a:	4b99      	ldr	r3, [pc, #612]	; (800a3f0 <_dtoa_r+0x2d0>)
 800a18c:	bfb8      	it	lt
 800a18e:	f8c8 2000 	strlt.w	r2, [r8]
 800a192:	ea33 0309 	bics.w	r3, r3, r9
 800a196:	d119      	bne.n	800a1cc <_dtoa_r+0xac>
 800a198:	f242 730f 	movw	r3, #9999	; 0x270f
 800a19c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a19e:	6013      	str	r3, [r2, #0]
 800a1a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1a4:	4333      	orrs	r3, r6
 800a1a6:	f000 857f 	beq.w	800aca8 <_dtoa_r+0xb88>
 800a1aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1ac:	b953      	cbnz	r3, 800a1c4 <_dtoa_r+0xa4>
 800a1ae:	4b91      	ldr	r3, [pc, #580]	; (800a3f4 <_dtoa_r+0x2d4>)
 800a1b0:	e022      	b.n	800a1f8 <_dtoa_r+0xd8>
 800a1b2:	4b91      	ldr	r3, [pc, #580]	; (800a3f8 <_dtoa_r+0x2d8>)
 800a1b4:	9303      	str	r3, [sp, #12]
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	9803      	ldr	r0, [sp, #12]
 800a1be:	b019      	add	sp, #100	; 0x64
 800a1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c4:	4b8b      	ldr	r3, [pc, #556]	; (800a3f4 <_dtoa_r+0x2d4>)
 800a1c6:	9303      	str	r3, [sp, #12]
 800a1c8:	3303      	adds	r3, #3
 800a1ca:	e7f5      	b.n	800a1b8 <_dtoa_r+0x98>
 800a1cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a1d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a1d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f7f6 fd08 	bl	8000bf0 <__aeabi_dcmpeq>
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	b158      	cbz	r0, 800a1fc <_dtoa_r+0xdc>
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a1e8:	6013      	str	r3, [r2, #0]
 800a1ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f000 8558 	beq.w	800aca2 <_dtoa_r+0xb82>
 800a1f2:	4882      	ldr	r0, [pc, #520]	; (800a3fc <_dtoa_r+0x2dc>)
 800a1f4:	6018      	str	r0, [r3, #0]
 800a1f6:	1e43      	subs	r3, r0, #1
 800a1f8:	9303      	str	r3, [sp, #12]
 800a1fa:	e7df      	b.n	800a1bc <_dtoa_r+0x9c>
 800a1fc:	ab16      	add	r3, sp, #88	; 0x58
 800a1fe:	9301      	str	r3, [sp, #4]
 800a200:	ab17      	add	r3, sp, #92	; 0x5c
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	4628      	mov	r0, r5
 800a206:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a20a:	f001 fdc7 	bl	800bd9c <__d2b>
 800a20e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a212:	4683      	mov	fp, r0
 800a214:	2c00      	cmp	r4, #0
 800a216:	d07f      	beq.n	800a318 <_dtoa_r+0x1f8>
 800a218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a21c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a21e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a226:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a22a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a22e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a232:	2200      	movs	r2, #0
 800a234:	4b72      	ldr	r3, [pc, #456]	; (800a400 <_dtoa_r+0x2e0>)
 800a236:	f7f6 f8bb 	bl	80003b0 <__aeabi_dsub>
 800a23a:	a365      	add	r3, pc, #404	; (adr r3, 800a3d0 <_dtoa_r+0x2b0>)
 800a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a240:	f7f6 fa6e 	bl	8000720 <__aeabi_dmul>
 800a244:	a364      	add	r3, pc, #400	; (adr r3, 800a3d8 <_dtoa_r+0x2b8>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	f7f6 f8b3 	bl	80003b4 <__adddf3>
 800a24e:	4606      	mov	r6, r0
 800a250:	4620      	mov	r0, r4
 800a252:	460f      	mov	r7, r1
 800a254:	f7f6 f9fa 	bl	800064c <__aeabi_i2d>
 800a258:	a361      	add	r3, pc, #388	; (adr r3, 800a3e0 <_dtoa_r+0x2c0>)
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	f7f6 fa5f 	bl	8000720 <__aeabi_dmul>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4630      	mov	r0, r6
 800a268:	4639      	mov	r1, r7
 800a26a:	f7f6 f8a3 	bl	80003b4 <__adddf3>
 800a26e:	4606      	mov	r6, r0
 800a270:	460f      	mov	r7, r1
 800a272:	f7f6 fd05 	bl	8000c80 <__aeabi_d2iz>
 800a276:	2200      	movs	r2, #0
 800a278:	4682      	mov	sl, r0
 800a27a:	2300      	movs	r3, #0
 800a27c:	4630      	mov	r0, r6
 800a27e:	4639      	mov	r1, r7
 800a280:	f7f6 fcc0 	bl	8000c04 <__aeabi_dcmplt>
 800a284:	b148      	cbz	r0, 800a29a <_dtoa_r+0x17a>
 800a286:	4650      	mov	r0, sl
 800a288:	f7f6 f9e0 	bl	800064c <__aeabi_i2d>
 800a28c:	4632      	mov	r2, r6
 800a28e:	463b      	mov	r3, r7
 800a290:	f7f6 fcae 	bl	8000bf0 <__aeabi_dcmpeq>
 800a294:	b908      	cbnz	r0, 800a29a <_dtoa_r+0x17a>
 800a296:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a29a:	f1ba 0f16 	cmp.w	sl, #22
 800a29e:	d858      	bhi.n	800a352 <_dtoa_r+0x232>
 800a2a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2a4:	4b57      	ldr	r3, [pc, #348]	; (800a404 <_dtoa_r+0x2e4>)
 800a2a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	f7f6 fca9 	bl	8000c04 <__aeabi_dcmplt>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d04f      	beq.n	800a356 <_dtoa_r+0x236>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a2c0:	1b1c      	subs	r4, r3, r4
 800a2c2:	1e63      	subs	r3, r4, #1
 800a2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c6:	bf49      	itett	mi
 800a2c8:	f1c4 0301 	rsbmi	r3, r4, #1
 800a2cc:	2300      	movpl	r3, #0
 800a2ce:	9306      	strmi	r3, [sp, #24]
 800a2d0:	2300      	movmi	r3, #0
 800a2d2:	bf54      	ite	pl
 800a2d4:	9306      	strpl	r3, [sp, #24]
 800a2d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a2d8:	f1ba 0f00 	cmp.w	sl, #0
 800a2dc:	db3d      	blt.n	800a35a <_dtoa_r+0x23a>
 800a2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a2e4:	4453      	add	r3, sl
 800a2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a2ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2ee:	2b09      	cmp	r3, #9
 800a2f0:	f200 808c 	bhi.w	800a40c <_dtoa_r+0x2ec>
 800a2f4:	2b05      	cmp	r3, #5
 800a2f6:	bfc4      	itt	gt
 800a2f8:	3b04      	subgt	r3, #4
 800a2fa:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a2fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2fe:	bfc8      	it	gt
 800a300:	2400      	movgt	r4, #0
 800a302:	f1a3 0302 	sub.w	r3, r3, #2
 800a306:	bfd8      	it	le
 800a308:	2401      	movle	r4, #1
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	f200 808a 	bhi.w	800a424 <_dtoa_r+0x304>
 800a310:	e8df f003 	tbb	[pc, r3]
 800a314:	5b4d4f2d 	.word	0x5b4d4f2d
 800a318:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a31c:	441c      	add	r4, r3
 800a31e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a322:	2b20      	cmp	r3, #32
 800a324:	bfc3      	ittte	gt
 800a326:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a32a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a32e:	fa09 f303 	lslgt.w	r3, r9, r3
 800a332:	f1c3 0320 	rsble	r3, r3, #32
 800a336:	bfc6      	itte	gt
 800a338:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a33c:	4318      	orrgt	r0, r3
 800a33e:	fa06 f003 	lslle.w	r0, r6, r3
 800a342:	f7f6 f973 	bl	800062c <__aeabi_ui2d>
 800a346:	2301      	movs	r3, #1
 800a348:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a34c:	3c01      	subs	r4, #1
 800a34e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a350:	e76f      	b.n	800a232 <_dtoa_r+0x112>
 800a352:	2301      	movs	r3, #1
 800a354:	e7b2      	b.n	800a2bc <_dtoa_r+0x19c>
 800a356:	900f      	str	r0, [sp, #60]	; 0x3c
 800a358:	e7b1      	b.n	800a2be <_dtoa_r+0x19e>
 800a35a:	9b06      	ldr	r3, [sp, #24]
 800a35c:	eba3 030a 	sub.w	r3, r3, sl
 800a360:	9306      	str	r3, [sp, #24]
 800a362:	f1ca 0300 	rsb	r3, sl, #0
 800a366:	930a      	str	r3, [sp, #40]	; 0x28
 800a368:	2300      	movs	r3, #0
 800a36a:	930e      	str	r3, [sp, #56]	; 0x38
 800a36c:	e7be      	b.n	800a2ec <_dtoa_r+0x1cc>
 800a36e:	2300      	movs	r3, #0
 800a370:	930b      	str	r3, [sp, #44]	; 0x2c
 800a372:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a374:	2b00      	cmp	r3, #0
 800a376:	dc58      	bgt.n	800a42a <_dtoa_r+0x30a>
 800a378:	f04f 0901 	mov.w	r9, #1
 800a37c:	464b      	mov	r3, r9
 800a37e:	f8cd 9020 	str.w	r9, [sp, #32]
 800a382:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a386:	2200      	movs	r2, #0
 800a388:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a38a:	6042      	str	r2, [r0, #4]
 800a38c:	2204      	movs	r2, #4
 800a38e:	f102 0614 	add.w	r6, r2, #20
 800a392:	429e      	cmp	r6, r3
 800a394:	6841      	ldr	r1, [r0, #4]
 800a396:	d94e      	bls.n	800a436 <_dtoa_r+0x316>
 800a398:	4628      	mov	r0, r5
 800a39a:	f001 f915 	bl	800b5c8 <_Balloc>
 800a39e:	9003      	str	r0, [sp, #12]
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d14c      	bne.n	800a43e <_dtoa_r+0x31e>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a3aa:	4b17      	ldr	r3, [pc, #92]	; (800a408 <_dtoa_r+0x2e8>)
 800a3ac:	e6cc      	b.n	800a148 <_dtoa_r+0x28>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e7de      	b.n	800a370 <_dtoa_r+0x250>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a3b8:	eb0a 0903 	add.w	r9, sl, r3
 800a3bc:	f109 0301 	add.w	r3, r9, #1
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	9308      	str	r3, [sp, #32]
 800a3c4:	bfb8      	it	lt
 800a3c6:	2301      	movlt	r3, #1
 800a3c8:	e7dd      	b.n	800a386 <_dtoa_r+0x266>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e7f2      	b.n	800a3b4 <_dtoa_r+0x294>
 800a3ce:	bf00      	nop
 800a3d0:	636f4361 	.word	0x636f4361
 800a3d4:	3fd287a7 	.word	0x3fd287a7
 800a3d8:	8b60c8b3 	.word	0x8b60c8b3
 800a3dc:	3fc68a28 	.word	0x3fc68a28
 800a3e0:	509f79fb 	.word	0x509f79fb
 800a3e4:	3fd34413 	.word	0x3fd34413
 800a3e8:	0800da45 	.word	0x0800da45
 800a3ec:	0800da5c 	.word	0x0800da5c
 800a3f0:	7ff00000 	.word	0x7ff00000
 800a3f4:	0800da41 	.word	0x0800da41
 800a3f8:	0800da38 	.word	0x0800da38
 800a3fc:	0800d9c5 	.word	0x0800d9c5
 800a400:	3ff80000 	.word	0x3ff80000
 800a404:	0800dbc8 	.word	0x0800dbc8
 800a408:	0800dab7 	.word	0x0800dab7
 800a40c:	2401      	movs	r4, #1
 800a40e:	2300      	movs	r3, #0
 800a410:	940b      	str	r4, [sp, #44]	; 0x2c
 800a412:	9322      	str	r3, [sp, #136]	; 0x88
 800a414:	f04f 39ff 	mov.w	r9, #4294967295
 800a418:	2200      	movs	r2, #0
 800a41a:	2312      	movs	r3, #18
 800a41c:	f8cd 9020 	str.w	r9, [sp, #32]
 800a420:	9223      	str	r2, [sp, #140]	; 0x8c
 800a422:	e7b0      	b.n	800a386 <_dtoa_r+0x266>
 800a424:	2301      	movs	r3, #1
 800a426:	930b      	str	r3, [sp, #44]	; 0x2c
 800a428:	e7f4      	b.n	800a414 <_dtoa_r+0x2f4>
 800a42a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a42e:	464b      	mov	r3, r9
 800a430:	f8cd 9020 	str.w	r9, [sp, #32]
 800a434:	e7a7      	b.n	800a386 <_dtoa_r+0x266>
 800a436:	3101      	adds	r1, #1
 800a438:	6041      	str	r1, [r0, #4]
 800a43a:	0052      	lsls	r2, r2, #1
 800a43c:	e7a7      	b.n	800a38e <_dtoa_r+0x26e>
 800a43e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a440:	9a03      	ldr	r2, [sp, #12]
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	9b08      	ldr	r3, [sp, #32]
 800a446:	2b0e      	cmp	r3, #14
 800a448:	f200 80a8 	bhi.w	800a59c <_dtoa_r+0x47c>
 800a44c:	2c00      	cmp	r4, #0
 800a44e:	f000 80a5 	beq.w	800a59c <_dtoa_r+0x47c>
 800a452:	f1ba 0f00 	cmp.w	sl, #0
 800a456:	dd34      	ble.n	800a4c2 <_dtoa_r+0x3a2>
 800a458:	4a9a      	ldr	r2, [pc, #616]	; (800a6c4 <_dtoa_r+0x5a4>)
 800a45a:	f00a 030f 	and.w	r3, sl, #15
 800a45e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a462:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a466:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a46a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a46e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a472:	d016      	beq.n	800a4a2 <_dtoa_r+0x382>
 800a474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a478:	4b93      	ldr	r3, [pc, #588]	; (800a6c8 <_dtoa_r+0x5a8>)
 800a47a:	2703      	movs	r7, #3
 800a47c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a480:	f7f6 fa78 	bl	8000974 <__aeabi_ddiv>
 800a484:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a488:	f004 040f 	and.w	r4, r4, #15
 800a48c:	4e8e      	ldr	r6, [pc, #568]	; (800a6c8 <_dtoa_r+0x5a8>)
 800a48e:	b954      	cbnz	r4, 800a4a6 <_dtoa_r+0x386>
 800a490:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a498:	f7f6 fa6c 	bl	8000974 <__aeabi_ddiv>
 800a49c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4a0:	e029      	b.n	800a4f6 <_dtoa_r+0x3d6>
 800a4a2:	2702      	movs	r7, #2
 800a4a4:	e7f2      	b.n	800a48c <_dtoa_r+0x36c>
 800a4a6:	07e1      	lsls	r1, r4, #31
 800a4a8:	d508      	bpl.n	800a4bc <_dtoa_r+0x39c>
 800a4aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4b2:	f7f6 f935 	bl	8000720 <__aeabi_dmul>
 800a4b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a4ba:	3701      	adds	r7, #1
 800a4bc:	1064      	asrs	r4, r4, #1
 800a4be:	3608      	adds	r6, #8
 800a4c0:	e7e5      	b.n	800a48e <_dtoa_r+0x36e>
 800a4c2:	f000 80a5 	beq.w	800a610 <_dtoa_r+0x4f0>
 800a4c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4ca:	f1ca 0400 	rsb	r4, sl, #0
 800a4ce:	4b7d      	ldr	r3, [pc, #500]	; (800a6c4 <_dtoa_r+0x5a4>)
 800a4d0:	f004 020f 	and.w	r2, r4, #15
 800a4d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4dc:	f7f6 f920 	bl	8000720 <__aeabi_dmul>
 800a4e0:	2702      	movs	r7, #2
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4e8:	4e77      	ldr	r6, [pc, #476]	; (800a6c8 <_dtoa_r+0x5a8>)
 800a4ea:	1124      	asrs	r4, r4, #4
 800a4ec:	2c00      	cmp	r4, #0
 800a4ee:	f040 8084 	bne.w	800a5fa <_dtoa_r+0x4da>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1d2      	bne.n	800a49c <_dtoa_r+0x37c>
 800a4f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 808b 	beq.w	800a614 <_dtoa_r+0x4f4>
 800a4fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a502:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a506:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a50a:	2200      	movs	r2, #0
 800a50c:	4b6f      	ldr	r3, [pc, #444]	; (800a6cc <_dtoa_r+0x5ac>)
 800a50e:	f7f6 fb79 	bl	8000c04 <__aeabi_dcmplt>
 800a512:	2800      	cmp	r0, #0
 800a514:	d07e      	beq.n	800a614 <_dtoa_r+0x4f4>
 800a516:	9b08      	ldr	r3, [sp, #32]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d07b      	beq.n	800a614 <_dtoa_r+0x4f4>
 800a51c:	f1b9 0f00 	cmp.w	r9, #0
 800a520:	dd38      	ble.n	800a594 <_dtoa_r+0x474>
 800a522:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a526:	2200      	movs	r2, #0
 800a528:	4b69      	ldr	r3, [pc, #420]	; (800a6d0 <_dtoa_r+0x5b0>)
 800a52a:	f7f6 f8f9 	bl	8000720 <__aeabi_dmul>
 800a52e:	464c      	mov	r4, r9
 800a530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a534:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a538:	3701      	adds	r7, #1
 800a53a:	4638      	mov	r0, r7
 800a53c:	f7f6 f886 	bl	800064c <__aeabi_i2d>
 800a540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a544:	f7f6 f8ec 	bl	8000720 <__aeabi_dmul>
 800a548:	2200      	movs	r2, #0
 800a54a:	4b62      	ldr	r3, [pc, #392]	; (800a6d4 <_dtoa_r+0x5b4>)
 800a54c:	f7f5 ff32 	bl	80003b4 <__adddf3>
 800a550:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a554:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a558:	9611      	str	r6, [sp, #68]	; 0x44
 800a55a:	2c00      	cmp	r4, #0
 800a55c:	d15d      	bne.n	800a61a <_dtoa_r+0x4fa>
 800a55e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a562:	2200      	movs	r2, #0
 800a564:	4b5c      	ldr	r3, [pc, #368]	; (800a6d8 <_dtoa_r+0x5b8>)
 800a566:	f7f5 ff23 	bl	80003b0 <__aeabi_dsub>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a572:	4633      	mov	r3, r6
 800a574:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a576:	f7f6 fb63 	bl	8000c40 <__aeabi_dcmpgt>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	f040 829c 	bne.w	800aab8 <_dtoa_r+0x998>
 800a580:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a584:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a586:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a58a:	f7f6 fb3b 	bl	8000c04 <__aeabi_dcmplt>
 800a58e:	2800      	cmp	r0, #0
 800a590:	f040 8290 	bne.w	800aab4 <_dtoa_r+0x994>
 800a594:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a598:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a59c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f2c0 8152 	blt.w	800a848 <_dtoa_r+0x728>
 800a5a4:	f1ba 0f0e 	cmp.w	sl, #14
 800a5a8:	f300 814e 	bgt.w	800a848 <_dtoa_r+0x728>
 800a5ac:	4b45      	ldr	r3, [pc, #276]	; (800a6c4 <_dtoa_r+0x5a4>)
 800a5ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a5b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a5ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f280 80db 	bge.w	800a778 <_dtoa_r+0x658>
 800a5c2:	9b08      	ldr	r3, [sp, #32]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f300 80d7 	bgt.w	800a778 <_dtoa_r+0x658>
 800a5ca:	f040 8272 	bne.w	800aab2 <_dtoa_r+0x992>
 800a5ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	4b40      	ldr	r3, [pc, #256]	; (800a6d8 <_dtoa_r+0x5b8>)
 800a5d6:	f7f6 f8a3 	bl	8000720 <__aeabi_dmul>
 800a5da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5de:	f7f6 fb25 	bl	8000c2c <__aeabi_dcmpge>
 800a5e2:	9c08      	ldr	r4, [sp, #32]
 800a5e4:	4626      	mov	r6, r4
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f040 8248 	bne.w	800aa7c <_dtoa_r+0x95c>
 800a5ec:	2331      	movs	r3, #49	; 0x31
 800a5ee:	9f03      	ldr	r7, [sp, #12]
 800a5f0:	f10a 0a01 	add.w	sl, sl, #1
 800a5f4:	f807 3b01 	strb.w	r3, [r7], #1
 800a5f8:	e244      	b.n	800aa84 <_dtoa_r+0x964>
 800a5fa:	07e2      	lsls	r2, r4, #31
 800a5fc:	d505      	bpl.n	800a60a <_dtoa_r+0x4ea>
 800a5fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a602:	f7f6 f88d 	bl	8000720 <__aeabi_dmul>
 800a606:	2301      	movs	r3, #1
 800a608:	3701      	adds	r7, #1
 800a60a:	1064      	asrs	r4, r4, #1
 800a60c:	3608      	adds	r6, #8
 800a60e:	e76d      	b.n	800a4ec <_dtoa_r+0x3cc>
 800a610:	2702      	movs	r7, #2
 800a612:	e770      	b.n	800a4f6 <_dtoa_r+0x3d6>
 800a614:	46d0      	mov	r8, sl
 800a616:	9c08      	ldr	r4, [sp, #32]
 800a618:	e78f      	b.n	800a53a <_dtoa_r+0x41a>
 800a61a:	9903      	ldr	r1, [sp, #12]
 800a61c:	4b29      	ldr	r3, [pc, #164]	; (800a6c4 <_dtoa_r+0x5a4>)
 800a61e:	4421      	add	r1, r4
 800a620:	9112      	str	r1, [sp, #72]	; 0x48
 800a622:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a624:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a628:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a62c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a630:	2900      	cmp	r1, #0
 800a632:	d055      	beq.n	800a6e0 <_dtoa_r+0x5c0>
 800a634:	2000      	movs	r0, #0
 800a636:	4929      	ldr	r1, [pc, #164]	; (800a6dc <_dtoa_r+0x5bc>)
 800a638:	f7f6 f99c 	bl	8000974 <__aeabi_ddiv>
 800a63c:	463b      	mov	r3, r7
 800a63e:	4632      	mov	r2, r6
 800a640:	f7f5 feb6 	bl	80003b0 <__aeabi_dsub>
 800a644:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a648:	9f03      	ldr	r7, [sp, #12]
 800a64a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a64e:	f7f6 fb17 	bl	8000c80 <__aeabi_d2iz>
 800a652:	4604      	mov	r4, r0
 800a654:	f7f5 fffa 	bl	800064c <__aeabi_i2d>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a660:	f7f5 fea6 	bl	80003b0 <__aeabi_dsub>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	3430      	adds	r4, #48	; 0x30
 800a66a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a66e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a672:	f807 4b01 	strb.w	r4, [r7], #1
 800a676:	f7f6 fac5 	bl	8000c04 <__aeabi_dcmplt>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d174      	bne.n	800a768 <_dtoa_r+0x648>
 800a67e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a682:	2000      	movs	r0, #0
 800a684:	4911      	ldr	r1, [pc, #68]	; (800a6cc <_dtoa_r+0x5ac>)
 800a686:	f7f5 fe93 	bl	80003b0 <__aeabi_dsub>
 800a68a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a68e:	f7f6 fab9 	bl	8000c04 <__aeabi_dcmplt>
 800a692:	2800      	cmp	r0, #0
 800a694:	f040 80b7 	bne.w	800a806 <_dtoa_r+0x6e6>
 800a698:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a69a:	429f      	cmp	r7, r3
 800a69c:	f43f af7a 	beq.w	800a594 <_dtoa_r+0x474>
 800a6a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	4b0a      	ldr	r3, [pc, #40]	; (800a6d0 <_dtoa_r+0x5b0>)
 800a6a8:	f7f6 f83a 	bl	8000720 <__aeabi_dmul>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a6b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6b6:	4b06      	ldr	r3, [pc, #24]	; (800a6d0 <_dtoa_r+0x5b0>)
 800a6b8:	f7f6 f832 	bl	8000720 <__aeabi_dmul>
 800a6bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6c0:	e7c3      	b.n	800a64a <_dtoa_r+0x52a>
 800a6c2:	bf00      	nop
 800a6c4:	0800dbc8 	.word	0x0800dbc8
 800a6c8:	0800dba0 	.word	0x0800dba0
 800a6cc:	3ff00000 	.word	0x3ff00000
 800a6d0:	40240000 	.word	0x40240000
 800a6d4:	401c0000 	.word	0x401c0000
 800a6d8:	40140000 	.word	0x40140000
 800a6dc:	3fe00000 	.word	0x3fe00000
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	f7f6 f81c 	bl	8000720 <__aeabi_dmul>
 800a6e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a6ee:	9c03      	ldr	r4, [sp, #12]
 800a6f0:	9314      	str	r3, [sp, #80]	; 0x50
 800a6f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6f6:	f7f6 fac3 	bl	8000c80 <__aeabi_d2iz>
 800a6fa:	9015      	str	r0, [sp, #84]	; 0x54
 800a6fc:	f7f5 ffa6 	bl	800064c <__aeabi_i2d>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a708:	f7f5 fe52 	bl	80003b0 <__aeabi_dsub>
 800a70c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a70e:	4606      	mov	r6, r0
 800a710:	3330      	adds	r3, #48	; 0x30
 800a712:	f804 3b01 	strb.w	r3, [r4], #1
 800a716:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a718:	460f      	mov	r7, r1
 800a71a:	429c      	cmp	r4, r3
 800a71c:	f04f 0200 	mov.w	r2, #0
 800a720:	d124      	bne.n	800a76c <_dtoa_r+0x64c>
 800a722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a726:	4bb0      	ldr	r3, [pc, #704]	; (800a9e8 <_dtoa_r+0x8c8>)
 800a728:	f7f5 fe44 	bl	80003b4 <__adddf3>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	4630      	mov	r0, r6
 800a732:	4639      	mov	r1, r7
 800a734:	f7f6 fa84 	bl	8000c40 <__aeabi_dcmpgt>
 800a738:	2800      	cmp	r0, #0
 800a73a:	d163      	bne.n	800a804 <_dtoa_r+0x6e4>
 800a73c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a740:	2000      	movs	r0, #0
 800a742:	49a9      	ldr	r1, [pc, #676]	; (800a9e8 <_dtoa_r+0x8c8>)
 800a744:	f7f5 fe34 	bl	80003b0 <__aeabi_dsub>
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	4630      	mov	r0, r6
 800a74e:	4639      	mov	r1, r7
 800a750:	f7f6 fa58 	bl	8000c04 <__aeabi_dcmplt>
 800a754:	2800      	cmp	r0, #0
 800a756:	f43f af1d 	beq.w	800a594 <_dtoa_r+0x474>
 800a75a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a75c:	1e7b      	subs	r3, r7, #1
 800a75e:	9314      	str	r3, [sp, #80]	; 0x50
 800a760:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a764:	2b30      	cmp	r3, #48	; 0x30
 800a766:	d0f8      	beq.n	800a75a <_dtoa_r+0x63a>
 800a768:	46c2      	mov	sl, r8
 800a76a:	e03b      	b.n	800a7e4 <_dtoa_r+0x6c4>
 800a76c:	4b9f      	ldr	r3, [pc, #636]	; (800a9ec <_dtoa_r+0x8cc>)
 800a76e:	f7f5 ffd7 	bl	8000720 <__aeabi_dmul>
 800a772:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a776:	e7bc      	b.n	800a6f2 <_dtoa_r+0x5d2>
 800a778:	9f03      	ldr	r7, [sp, #12]
 800a77a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a77e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a782:	4640      	mov	r0, r8
 800a784:	4649      	mov	r1, r9
 800a786:	f7f6 f8f5 	bl	8000974 <__aeabi_ddiv>
 800a78a:	f7f6 fa79 	bl	8000c80 <__aeabi_d2iz>
 800a78e:	4604      	mov	r4, r0
 800a790:	f7f5 ff5c 	bl	800064c <__aeabi_i2d>
 800a794:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a798:	f7f5 ffc2 	bl	8000720 <__aeabi_dmul>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	4649      	mov	r1, r9
 800a7a4:	f7f5 fe04 	bl	80003b0 <__aeabi_dsub>
 800a7a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a7ac:	f807 6b01 	strb.w	r6, [r7], #1
 800a7b0:	9e03      	ldr	r6, [sp, #12]
 800a7b2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a7b6:	1bbe      	subs	r6, r7, r6
 800a7b8:	45b4      	cmp	ip, r6
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	d136      	bne.n	800a82e <_dtoa_r+0x70e>
 800a7c0:	f7f5 fdf8 	bl	80003b4 <__adddf3>
 800a7c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7c8:	4680      	mov	r8, r0
 800a7ca:	4689      	mov	r9, r1
 800a7cc:	f7f6 fa38 	bl	8000c40 <__aeabi_dcmpgt>
 800a7d0:	bb58      	cbnz	r0, 800a82a <_dtoa_r+0x70a>
 800a7d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	4649      	mov	r1, r9
 800a7da:	f7f6 fa09 	bl	8000bf0 <__aeabi_dcmpeq>
 800a7de:	b108      	cbz	r0, 800a7e4 <_dtoa_r+0x6c4>
 800a7e0:	07e1      	lsls	r1, r4, #31
 800a7e2:	d422      	bmi.n	800a82a <_dtoa_r+0x70a>
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	4659      	mov	r1, fp
 800a7e8:	f000 ff2e 	bl	800b648 <_Bfree>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	703b      	strb	r3, [r7, #0]
 800a7f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a7f2:	f10a 0001 	add.w	r0, sl, #1
 800a7f6:	6018      	str	r0, [r3, #0]
 800a7f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f43f acde 	beq.w	800a1bc <_dtoa_r+0x9c>
 800a800:	601f      	str	r7, [r3, #0]
 800a802:	e4db      	b.n	800a1bc <_dtoa_r+0x9c>
 800a804:	4627      	mov	r7, r4
 800a806:	463b      	mov	r3, r7
 800a808:	461f      	mov	r7, r3
 800a80a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a80e:	2a39      	cmp	r2, #57	; 0x39
 800a810:	d107      	bne.n	800a822 <_dtoa_r+0x702>
 800a812:	9a03      	ldr	r2, [sp, #12]
 800a814:	429a      	cmp	r2, r3
 800a816:	d1f7      	bne.n	800a808 <_dtoa_r+0x6e8>
 800a818:	2230      	movs	r2, #48	; 0x30
 800a81a:	9903      	ldr	r1, [sp, #12]
 800a81c:	f108 0801 	add.w	r8, r8, #1
 800a820:	700a      	strb	r2, [r1, #0]
 800a822:	781a      	ldrb	r2, [r3, #0]
 800a824:	3201      	adds	r2, #1
 800a826:	701a      	strb	r2, [r3, #0]
 800a828:	e79e      	b.n	800a768 <_dtoa_r+0x648>
 800a82a:	46d0      	mov	r8, sl
 800a82c:	e7eb      	b.n	800a806 <_dtoa_r+0x6e6>
 800a82e:	2200      	movs	r2, #0
 800a830:	4b6e      	ldr	r3, [pc, #440]	; (800a9ec <_dtoa_r+0x8cc>)
 800a832:	f7f5 ff75 	bl	8000720 <__aeabi_dmul>
 800a836:	2200      	movs	r2, #0
 800a838:	2300      	movs	r3, #0
 800a83a:	4680      	mov	r8, r0
 800a83c:	4689      	mov	r9, r1
 800a83e:	f7f6 f9d7 	bl	8000bf0 <__aeabi_dcmpeq>
 800a842:	2800      	cmp	r0, #0
 800a844:	d09b      	beq.n	800a77e <_dtoa_r+0x65e>
 800a846:	e7cd      	b.n	800a7e4 <_dtoa_r+0x6c4>
 800a848:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a84a:	2a00      	cmp	r2, #0
 800a84c:	f000 80d0 	beq.w	800a9f0 <_dtoa_r+0x8d0>
 800a850:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a852:	2a01      	cmp	r2, #1
 800a854:	f300 80ae 	bgt.w	800a9b4 <_dtoa_r+0x894>
 800a858:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a85a:	2a00      	cmp	r2, #0
 800a85c:	f000 80a6 	beq.w	800a9ac <_dtoa_r+0x88c>
 800a860:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a864:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a866:	9f06      	ldr	r7, [sp, #24]
 800a868:	9a06      	ldr	r2, [sp, #24]
 800a86a:	2101      	movs	r1, #1
 800a86c:	441a      	add	r2, r3
 800a86e:	9206      	str	r2, [sp, #24]
 800a870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a872:	4628      	mov	r0, r5
 800a874:	441a      	add	r2, r3
 800a876:	9209      	str	r2, [sp, #36]	; 0x24
 800a878:	f000 ffe6 	bl	800b848 <__i2b>
 800a87c:	4606      	mov	r6, r0
 800a87e:	2f00      	cmp	r7, #0
 800a880:	dd0c      	ble.n	800a89c <_dtoa_r+0x77c>
 800a882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a884:	2b00      	cmp	r3, #0
 800a886:	dd09      	ble.n	800a89c <_dtoa_r+0x77c>
 800a888:	42bb      	cmp	r3, r7
 800a88a:	bfa8      	it	ge
 800a88c:	463b      	movge	r3, r7
 800a88e:	9a06      	ldr	r2, [sp, #24]
 800a890:	1aff      	subs	r7, r7, r3
 800a892:	1ad2      	subs	r2, r2, r3
 800a894:	9206      	str	r2, [sp, #24]
 800a896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	9309      	str	r3, [sp, #36]	; 0x24
 800a89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a89e:	b1f3      	cbz	r3, 800a8de <_dtoa_r+0x7be>
 800a8a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 80a8 	beq.w	800a9f8 <_dtoa_r+0x8d8>
 800a8a8:	2c00      	cmp	r4, #0
 800a8aa:	dd10      	ble.n	800a8ce <_dtoa_r+0x7ae>
 800a8ac:	4631      	mov	r1, r6
 800a8ae:	4622      	mov	r2, r4
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	f001 f887 	bl	800b9c4 <__pow5mult>
 800a8b6:	465a      	mov	r2, fp
 800a8b8:	4601      	mov	r1, r0
 800a8ba:	4606      	mov	r6, r0
 800a8bc:	4628      	mov	r0, r5
 800a8be:	f000 ffd9 	bl	800b874 <__multiply>
 800a8c2:	4680      	mov	r8, r0
 800a8c4:	4659      	mov	r1, fp
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f000 febe 	bl	800b648 <_Bfree>
 800a8cc:	46c3      	mov	fp, r8
 800a8ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8d0:	1b1a      	subs	r2, r3, r4
 800a8d2:	d004      	beq.n	800a8de <_dtoa_r+0x7be>
 800a8d4:	4659      	mov	r1, fp
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	f001 f874 	bl	800b9c4 <__pow5mult>
 800a8dc:	4683      	mov	fp, r0
 800a8de:	2101      	movs	r1, #1
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f000 ffb1 	bl	800b848 <__i2b>
 800a8e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f340 8086 	ble.w	800a9fc <_dtoa_r+0x8dc>
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	4601      	mov	r1, r0
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	f001 f865 	bl	800b9c4 <__pow5mult>
 800a8fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	dd7f      	ble.n	800aa02 <_dtoa_r+0x8e2>
 800a902:	f04f 0800 	mov.w	r8, #0
 800a906:	6923      	ldr	r3, [r4, #16]
 800a908:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a90c:	6918      	ldr	r0, [r3, #16]
 800a90e:	f000 ff4d 	bl	800b7ac <__hi0bits>
 800a912:	f1c0 0020 	rsb	r0, r0, #32
 800a916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a918:	4418      	add	r0, r3
 800a91a:	f010 001f 	ands.w	r0, r0, #31
 800a91e:	f000 8092 	beq.w	800aa46 <_dtoa_r+0x926>
 800a922:	f1c0 0320 	rsb	r3, r0, #32
 800a926:	2b04      	cmp	r3, #4
 800a928:	f340 808a 	ble.w	800aa40 <_dtoa_r+0x920>
 800a92c:	f1c0 001c 	rsb	r0, r0, #28
 800a930:	9b06      	ldr	r3, [sp, #24]
 800a932:	4407      	add	r7, r0
 800a934:	4403      	add	r3, r0
 800a936:	9306      	str	r3, [sp, #24]
 800a938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a93a:	4403      	add	r3, r0
 800a93c:	9309      	str	r3, [sp, #36]	; 0x24
 800a93e:	9b06      	ldr	r3, [sp, #24]
 800a940:	2b00      	cmp	r3, #0
 800a942:	dd05      	ble.n	800a950 <_dtoa_r+0x830>
 800a944:	4659      	mov	r1, fp
 800a946:	461a      	mov	r2, r3
 800a948:	4628      	mov	r0, r5
 800a94a:	f001 f895 	bl	800ba78 <__lshift>
 800a94e:	4683      	mov	fp, r0
 800a950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a952:	2b00      	cmp	r3, #0
 800a954:	dd05      	ble.n	800a962 <_dtoa_r+0x842>
 800a956:	4621      	mov	r1, r4
 800a958:	461a      	mov	r2, r3
 800a95a:	4628      	mov	r0, r5
 800a95c:	f001 f88c 	bl	800ba78 <__lshift>
 800a960:	4604      	mov	r4, r0
 800a962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a964:	2b00      	cmp	r3, #0
 800a966:	d070      	beq.n	800aa4a <_dtoa_r+0x92a>
 800a968:	4621      	mov	r1, r4
 800a96a:	4658      	mov	r0, fp
 800a96c:	f001 f8f4 	bl	800bb58 <__mcmp>
 800a970:	2800      	cmp	r0, #0
 800a972:	da6a      	bge.n	800aa4a <_dtoa_r+0x92a>
 800a974:	2300      	movs	r3, #0
 800a976:	4659      	mov	r1, fp
 800a978:	220a      	movs	r2, #10
 800a97a:	4628      	mov	r0, r5
 800a97c:	f000 fe86 	bl	800b68c <__multadd>
 800a980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a982:	4683      	mov	fp, r0
 800a984:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 8194 	beq.w	800acb6 <_dtoa_r+0xb96>
 800a98e:	4631      	mov	r1, r6
 800a990:	2300      	movs	r3, #0
 800a992:	220a      	movs	r2, #10
 800a994:	4628      	mov	r0, r5
 800a996:	f000 fe79 	bl	800b68c <__multadd>
 800a99a:	f1b9 0f00 	cmp.w	r9, #0
 800a99e:	4606      	mov	r6, r0
 800a9a0:	f300 8093 	bgt.w	800aaca <_dtoa_r+0x9aa>
 800a9a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	dc57      	bgt.n	800aa5a <_dtoa_r+0x93a>
 800a9aa:	e08e      	b.n	800aaca <_dtoa_r+0x9aa>
 800a9ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a9ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9b2:	e757      	b.n	800a864 <_dtoa_r+0x744>
 800a9b4:	9b08      	ldr	r3, [sp, #32]
 800a9b6:	1e5c      	subs	r4, r3, #1
 800a9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ba:	42a3      	cmp	r3, r4
 800a9bc:	bfb7      	itett	lt
 800a9be:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a9c0:	1b1c      	subge	r4, r3, r4
 800a9c2:	1ae2      	sublt	r2, r4, r3
 800a9c4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a9c6:	bfbe      	ittt	lt
 800a9c8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a9ca:	189b      	addlt	r3, r3, r2
 800a9cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a9ce:	9b08      	ldr	r3, [sp, #32]
 800a9d0:	bfb8      	it	lt
 800a9d2:	2400      	movlt	r4, #0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	bfbb      	ittet	lt
 800a9d8:	9b06      	ldrlt	r3, [sp, #24]
 800a9da:	9a08      	ldrlt	r2, [sp, #32]
 800a9dc:	9f06      	ldrge	r7, [sp, #24]
 800a9de:	1a9f      	sublt	r7, r3, r2
 800a9e0:	bfac      	ite	ge
 800a9e2:	9b08      	ldrge	r3, [sp, #32]
 800a9e4:	2300      	movlt	r3, #0
 800a9e6:	e73f      	b.n	800a868 <_dtoa_r+0x748>
 800a9e8:	3fe00000 	.word	0x3fe00000
 800a9ec:	40240000 	.word	0x40240000
 800a9f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a9f2:	9f06      	ldr	r7, [sp, #24]
 800a9f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a9f6:	e742      	b.n	800a87e <_dtoa_r+0x75e>
 800a9f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9fa:	e76b      	b.n	800a8d4 <_dtoa_r+0x7b4>
 800a9fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	dc19      	bgt.n	800aa36 <_dtoa_r+0x916>
 800aa02:	9b04      	ldr	r3, [sp, #16]
 800aa04:	b9bb      	cbnz	r3, 800aa36 <_dtoa_r+0x916>
 800aa06:	9b05      	ldr	r3, [sp, #20]
 800aa08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa0c:	b99b      	cbnz	r3, 800aa36 <_dtoa_r+0x916>
 800aa0e:	9b05      	ldr	r3, [sp, #20]
 800aa10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa14:	0d1b      	lsrs	r3, r3, #20
 800aa16:	051b      	lsls	r3, r3, #20
 800aa18:	b183      	cbz	r3, 800aa3c <_dtoa_r+0x91c>
 800aa1a:	f04f 0801 	mov.w	r8, #1
 800aa1e:	9b06      	ldr	r3, [sp, #24]
 800aa20:	3301      	adds	r3, #1
 800aa22:	9306      	str	r3, [sp, #24]
 800aa24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa26:	3301      	adds	r3, #1
 800aa28:	9309      	str	r3, [sp, #36]	; 0x24
 800aa2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f47f af6a 	bne.w	800a906 <_dtoa_r+0x7e6>
 800aa32:	2001      	movs	r0, #1
 800aa34:	e76f      	b.n	800a916 <_dtoa_r+0x7f6>
 800aa36:	f04f 0800 	mov.w	r8, #0
 800aa3a:	e7f6      	b.n	800aa2a <_dtoa_r+0x90a>
 800aa3c:	4698      	mov	r8, r3
 800aa3e:	e7f4      	b.n	800aa2a <_dtoa_r+0x90a>
 800aa40:	f43f af7d 	beq.w	800a93e <_dtoa_r+0x81e>
 800aa44:	4618      	mov	r0, r3
 800aa46:	301c      	adds	r0, #28
 800aa48:	e772      	b.n	800a930 <_dtoa_r+0x810>
 800aa4a:	9b08      	ldr	r3, [sp, #32]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	dc36      	bgt.n	800aabe <_dtoa_r+0x99e>
 800aa50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	dd33      	ble.n	800aabe <_dtoa_r+0x99e>
 800aa56:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa5a:	f1b9 0f00 	cmp.w	r9, #0
 800aa5e:	d10d      	bne.n	800aa7c <_dtoa_r+0x95c>
 800aa60:	4621      	mov	r1, r4
 800aa62:	464b      	mov	r3, r9
 800aa64:	2205      	movs	r2, #5
 800aa66:	4628      	mov	r0, r5
 800aa68:	f000 fe10 	bl	800b68c <__multadd>
 800aa6c:	4601      	mov	r1, r0
 800aa6e:	4604      	mov	r4, r0
 800aa70:	4658      	mov	r0, fp
 800aa72:	f001 f871 	bl	800bb58 <__mcmp>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	f73f adb8 	bgt.w	800a5ec <_dtoa_r+0x4cc>
 800aa7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa7e:	9f03      	ldr	r7, [sp, #12]
 800aa80:	ea6f 0a03 	mvn.w	sl, r3
 800aa84:	f04f 0800 	mov.w	r8, #0
 800aa88:	4621      	mov	r1, r4
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	f000 fddc 	bl	800b648 <_Bfree>
 800aa90:	2e00      	cmp	r6, #0
 800aa92:	f43f aea7 	beq.w	800a7e4 <_dtoa_r+0x6c4>
 800aa96:	f1b8 0f00 	cmp.w	r8, #0
 800aa9a:	d005      	beq.n	800aaa8 <_dtoa_r+0x988>
 800aa9c:	45b0      	cmp	r8, r6
 800aa9e:	d003      	beq.n	800aaa8 <_dtoa_r+0x988>
 800aaa0:	4641      	mov	r1, r8
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f000 fdd0 	bl	800b648 <_Bfree>
 800aaa8:	4631      	mov	r1, r6
 800aaaa:	4628      	mov	r0, r5
 800aaac:	f000 fdcc 	bl	800b648 <_Bfree>
 800aab0:	e698      	b.n	800a7e4 <_dtoa_r+0x6c4>
 800aab2:	2400      	movs	r4, #0
 800aab4:	4626      	mov	r6, r4
 800aab6:	e7e1      	b.n	800aa7c <_dtoa_r+0x95c>
 800aab8:	46c2      	mov	sl, r8
 800aaba:	4626      	mov	r6, r4
 800aabc:	e596      	b.n	800a5ec <_dtoa_r+0x4cc>
 800aabe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aac0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f000 80fd 	beq.w	800acc4 <_dtoa_r+0xba4>
 800aaca:	2f00      	cmp	r7, #0
 800aacc:	dd05      	ble.n	800aada <_dtoa_r+0x9ba>
 800aace:	4631      	mov	r1, r6
 800aad0:	463a      	mov	r2, r7
 800aad2:	4628      	mov	r0, r5
 800aad4:	f000 ffd0 	bl	800ba78 <__lshift>
 800aad8:	4606      	mov	r6, r0
 800aada:	f1b8 0f00 	cmp.w	r8, #0
 800aade:	d05c      	beq.n	800ab9a <_dtoa_r+0xa7a>
 800aae0:	4628      	mov	r0, r5
 800aae2:	6871      	ldr	r1, [r6, #4]
 800aae4:	f000 fd70 	bl	800b5c8 <_Balloc>
 800aae8:	4607      	mov	r7, r0
 800aaea:	b928      	cbnz	r0, 800aaf8 <_dtoa_r+0x9d8>
 800aaec:	4602      	mov	r2, r0
 800aaee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aaf2:	4b7f      	ldr	r3, [pc, #508]	; (800acf0 <_dtoa_r+0xbd0>)
 800aaf4:	f7ff bb28 	b.w	800a148 <_dtoa_r+0x28>
 800aaf8:	6932      	ldr	r2, [r6, #16]
 800aafa:	f106 010c 	add.w	r1, r6, #12
 800aafe:	3202      	adds	r2, #2
 800ab00:	0092      	lsls	r2, r2, #2
 800ab02:	300c      	adds	r0, #12
 800ab04:	f7fd fe18 	bl	8008738 <memcpy>
 800ab08:	2201      	movs	r2, #1
 800ab0a:	4639      	mov	r1, r7
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	f000 ffb3 	bl	800ba78 <__lshift>
 800ab12:	46b0      	mov	r8, r6
 800ab14:	4606      	mov	r6, r0
 800ab16:	9b03      	ldr	r3, [sp, #12]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	9308      	str	r3, [sp, #32]
 800ab1c:	9b03      	ldr	r3, [sp, #12]
 800ab1e:	444b      	add	r3, r9
 800ab20:	930a      	str	r3, [sp, #40]	; 0x28
 800ab22:	9b04      	ldr	r3, [sp, #16]
 800ab24:	f003 0301 	and.w	r3, r3, #1
 800ab28:	9309      	str	r3, [sp, #36]	; 0x24
 800ab2a:	9b08      	ldr	r3, [sp, #32]
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	4658      	mov	r0, fp
 800ab32:	9304      	str	r3, [sp, #16]
 800ab34:	f7ff fa66 	bl	800a004 <quorem>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	4641      	mov	r1, r8
 800ab3c:	3330      	adds	r3, #48	; 0x30
 800ab3e:	9006      	str	r0, [sp, #24]
 800ab40:	4658      	mov	r0, fp
 800ab42:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab44:	f001 f808 	bl	800bb58 <__mcmp>
 800ab48:	4632      	mov	r2, r6
 800ab4a:	4681      	mov	r9, r0
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	4628      	mov	r0, r5
 800ab50:	f001 f81e 	bl	800bb90 <__mdiff>
 800ab54:	68c2      	ldr	r2, [r0, #12]
 800ab56:	4607      	mov	r7, r0
 800ab58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab5a:	bb02      	cbnz	r2, 800ab9e <_dtoa_r+0xa7e>
 800ab5c:	4601      	mov	r1, r0
 800ab5e:	4658      	mov	r0, fp
 800ab60:	f000 fffa 	bl	800bb58 <__mcmp>
 800ab64:	4602      	mov	r2, r0
 800ab66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab68:	4639      	mov	r1, r7
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ab70:	f000 fd6a 	bl	800b648 <_Bfree>
 800ab74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab78:	9f08      	ldr	r7, [sp, #32]
 800ab7a:	ea43 0102 	orr.w	r1, r3, r2
 800ab7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab80:	430b      	orrs	r3, r1
 800ab82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab84:	d10d      	bne.n	800aba2 <_dtoa_r+0xa82>
 800ab86:	2b39      	cmp	r3, #57	; 0x39
 800ab88:	d029      	beq.n	800abde <_dtoa_r+0xabe>
 800ab8a:	f1b9 0f00 	cmp.w	r9, #0
 800ab8e:	dd01      	ble.n	800ab94 <_dtoa_r+0xa74>
 800ab90:	9b06      	ldr	r3, [sp, #24]
 800ab92:	3331      	adds	r3, #49	; 0x31
 800ab94:	9a04      	ldr	r2, [sp, #16]
 800ab96:	7013      	strb	r3, [r2, #0]
 800ab98:	e776      	b.n	800aa88 <_dtoa_r+0x968>
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	e7b9      	b.n	800ab12 <_dtoa_r+0x9f2>
 800ab9e:	2201      	movs	r2, #1
 800aba0:	e7e2      	b.n	800ab68 <_dtoa_r+0xa48>
 800aba2:	f1b9 0f00 	cmp.w	r9, #0
 800aba6:	db06      	blt.n	800abb6 <_dtoa_r+0xa96>
 800aba8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800abaa:	ea41 0909 	orr.w	r9, r1, r9
 800abae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abb0:	ea59 0101 	orrs.w	r1, r9, r1
 800abb4:	d120      	bne.n	800abf8 <_dtoa_r+0xad8>
 800abb6:	2a00      	cmp	r2, #0
 800abb8:	ddec      	ble.n	800ab94 <_dtoa_r+0xa74>
 800abba:	4659      	mov	r1, fp
 800abbc:	2201      	movs	r2, #1
 800abbe:	4628      	mov	r0, r5
 800abc0:	9308      	str	r3, [sp, #32]
 800abc2:	f000 ff59 	bl	800ba78 <__lshift>
 800abc6:	4621      	mov	r1, r4
 800abc8:	4683      	mov	fp, r0
 800abca:	f000 ffc5 	bl	800bb58 <__mcmp>
 800abce:	2800      	cmp	r0, #0
 800abd0:	9b08      	ldr	r3, [sp, #32]
 800abd2:	dc02      	bgt.n	800abda <_dtoa_r+0xaba>
 800abd4:	d1de      	bne.n	800ab94 <_dtoa_r+0xa74>
 800abd6:	07da      	lsls	r2, r3, #31
 800abd8:	d5dc      	bpl.n	800ab94 <_dtoa_r+0xa74>
 800abda:	2b39      	cmp	r3, #57	; 0x39
 800abdc:	d1d8      	bne.n	800ab90 <_dtoa_r+0xa70>
 800abde:	2339      	movs	r3, #57	; 0x39
 800abe0:	9a04      	ldr	r2, [sp, #16]
 800abe2:	7013      	strb	r3, [r2, #0]
 800abe4:	463b      	mov	r3, r7
 800abe6:	461f      	mov	r7, r3
 800abe8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800abec:	3b01      	subs	r3, #1
 800abee:	2a39      	cmp	r2, #57	; 0x39
 800abf0:	d050      	beq.n	800ac94 <_dtoa_r+0xb74>
 800abf2:	3201      	adds	r2, #1
 800abf4:	701a      	strb	r2, [r3, #0]
 800abf6:	e747      	b.n	800aa88 <_dtoa_r+0x968>
 800abf8:	2a00      	cmp	r2, #0
 800abfa:	dd03      	ble.n	800ac04 <_dtoa_r+0xae4>
 800abfc:	2b39      	cmp	r3, #57	; 0x39
 800abfe:	d0ee      	beq.n	800abde <_dtoa_r+0xabe>
 800ac00:	3301      	adds	r3, #1
 800ac02:	e7c7      	b.n	800ab94 <_dtoa_r+0xa74>
 800ac04:	9a08      	ldr	r2, [sp, #32]
 800ac06:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac08:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ac0c:	428a      	cmp	r2, r1
 800ac0e:	d02a      	beq.n	800ac66 <_dtoa_r+0xb46>
 800ac10:	4659      	mov	r1, fp
 800ac12:	2300      	movs	r3, #0
 800ac14:	220a      	movs	r2, #10
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 fd38 	bl	800b68c <__multadd>
 800ac1c:	45b0      	cmp	r8, r6
 800ac1e:	4683      	mov	fp, r0
 800ac20:	f04f 0300 	mov.w	r3, #0
 800ac24:	f04f 020a 	mov.w	r2, #10
 800ac28:	4641      	mov	r1, r8
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	d107      	bne.n	800ac3e <_dtoa_r+0xb1e>
 800ac2e:	f000 fd2d 	bl	800b68c <__multadd>
 800ac32:	4680      	mov	r8, r0
 800ac34:	4606      	mov	r6, r0
 800ac36:	9b08      	ldr	r3, [sp, #32]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	9308      	str	r3, [sp, #32]
 800ac3c:	e775      	b.n	800ab2a <_dtoa_r+0xa0a>
 800ac3e:	f000 fd25 	bl	800b68c <__multadd>
 800ac42:	4631      	mov	r1, r6
 800ac44:	4680      	mov	r8, r0
 800ac46:	2300      	movs	r3, #0
 800ac48:	220a      	movs	r2, #10
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f000 fd1e 	bl	800b68c <__multadd>
 800ac50:	4606      	mov	r6, r0
 800ac52:	e7f0      	b.n	800ac36 <_dtoa_r+0xb16>
 800ac54:	f1b9 0f00 	cmp.w	r9, #0
 800ac58:	bfcc      	ite	gt
 800ac5a:	464f      	movgt	r7, r9
 800ac5c:	2701      	movle	r7, #1
 800ac5e:	f04f 0800 	mov.w	r8, #0
 800ac62:	9a03      	ldr	r2, [sp, #12]
 800ac64:	4417      	add	r7, r2
 800ac66:	4659      	mov	r1, fp
 800ac68:	2201      	movs	r2, #1
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	9308      	str	r3, [sp, #32]
 800ac6e:	f000 ff03 	bl	800ba78 <__lshift>
 800ac72:	4621      	mov	r1, r4
 800ac74:	4683      	mov	fp, r0
 800ac76:	f000 ff6f 	bl	800bb58 <__mcmp>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	dcb2      	bgt.n	800abe4 <_dtoa_r+0xac4>
 800ac7e:	d102      	bne.n	800ac86 <_dtoa_r+0xb66>
 800ac80:	9b08      	ldr	r3, [sp, #32]
 800ac82:	07db      	lsls	r3, r3, #31
 800ac84:	d4ae      	bmi.n	800abe4 <_dtoa_r+0xac4>
 800ac86:	463b      	mov	r3, r7
 800ac88:	461f      	mov	r7, r3
 800ac8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac8e:	2a30      	cmp	r2, #48	; 0x30
 800ac90:	d0fa      	beq.n	800ac88 <_dtoa_r+0xb68>
 800ac92:	e6f9      	b.n	800aa88 <_dtoa_r+0x968>
 800ac94:	9a03      	ldr	r2, [sp, #12]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d1a5      	bne.n	800abe6 <_dtoa_r+0xac6>
 800ac9a:	2331      	movs	r3, #49	; 0x31
 800ac9c:	f10a 0a01 	add.w	sl, sl, #1
 800aca0:	e779      	b.n	800ab96 <_dtoa_r+0xa76>
 800aca2:	4b14      	ldr	r3, [pc, #80]	; (800acf4 <_dtoa_r+0xbd4>)
 800aca4:	f7ff baa8 	b.w	800a1f8 <_dtoa_r+0xd8>
 800aca8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f47f aa81 	bne.w	800a1b2 <_dtoa_r+0x92>
 800acb0:	4b11      	ldr	r3, [pc, #68]	; (800acf8 <_dtoa_r+0xbd8>)
 800acb2:	f7ff baa1 	b.w	800a1f8 <_dtoa_r+0xd8>
 800acb6:	f1b9 0f00 	cmp.w	r9, #0
 800acba:	dc03      	bgt.n	800acc4 <_dtoa_r+0xba4>
 800acbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	f73f aecb 	bgt.w	800aa5a <_dtoa_r+0x93a>
 800acc4:	9f03      	ldr	r7, [sp, #12]
 800acc6:	4621      	mov	r1, r4
 800acc8:	4658      	mov	r0, fp
 800acca:	f7ff f99b 	bl	800a004 <quorem>
 800acce:	9a03      	ldr	r2, [sp, #12]
 800acd0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800acd4:	f807 3b01 	strb.w	r3, [r7], #1
 800acd8:	1aba      	subs	r2, r7, r2
 800acda:	4591      	cmp	r9, r2
 800acdc:	ddba      	ble.n	800ac54 <_dtoa_r+0xb34>
 800acde:	4659      	mov	r1, fp
 800ace0:	2300      	movs	r3, #0
 800ace2:	220a      	movs	r2, #10
 800ace4:	4628      	mov	r0, r5
 800ace6:	f000 fcd1 	bl	800b68c <__multadd>
 800acea:	4683      	mov	fp, r0
 800acec:	e7eb      	b.n	800acc6 <_dtoa_r+0xba6>
 800acee:	bf00      	nop
 800acf0:	0800dab7 	.word	0x0800dab7
 800acf4:	0800d9c4 	.word	0x0800d9c4
 800acf8:	0800da38 	.word	0x0800da38

0800acfc <__sflush_r>:
 800acfc:	898a      	ldrh	r2, [r1, #12]
 800acfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad00:	4605      	mov	r5, r0
 800ad02:	0710      	lsls	r0, r2, #28
 800ad04:	460c      	mov	r4, r1
 800ad06:	d457      	bmi.n	800adb8 <__sflush_r+0xbc>
 800ad08:	684b      	ldr	r3, [r1, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	dc04      	bgt.n	800ad18 <__sflush_r+0x1c>
 800ad0e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	dc01      	bgt.n	800ad18 <__sflush_r+0x1c>
 800ad14:	2000      	movs	r0, #0
 800ad16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad1a:	2e00      	cmp	r6, #0
 800ad1c:	d0fa      	beq.n	800ad14 <__sflush_r+0x18>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad24:	682f      	ldr	r7, [r5, #0]
 800ad26:	602b      	str	r3, [r5, #0]
 800ad28:	d032      	beq.n	800ad90 <__sflush_r+0x94>
 800ad2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad2c:	89a3      	ldrh	r3, [r4, #12]
 800ad2e:	075a      	lsls	r2, r3, #29
 800ad30:	d505      	bpl.n	800ad3e <__sflush_r+0x42>
 800ad32:	6863      	ldr	r3, [r4, #4]
 800ad34:	1ac0      	subs	r0, r0, r3
 800ad36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad38:	b10b      	cbz	r3, 800ad3e <__sflush_r+0x42>
 800ad3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad3c:	1ac0      	subs	r0, r0, r3
 800ad3e:	2300      	movs	r3, #0
 800ad40:	4602      	mov	r2, r0
 800ad42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad44:	4628      	mov	r0, r5
 800ad46:	6a21      	ldr	r1, [r4, #32]
 800ad48:	47b0      	blx	r6
 800ad4a:	1c43      	adds	r3, r0, #1
 800ad4c:	89a3      	ldrh	r3, [r4, #12]
 800ad4e:	d106      	bne.n	800ad5e <__sflush_r+0x62>
 800ad50:	6829      	ldr	r1, [r5, #0]
 800ad52:	291d      	cmp	r1, #29
 800ad54:	d82c      	bhi.n	800adb0 <__sflush_r+0xb4>
 800ad56:	4a29      	ldr	r2, [pc, #164]	; (800adfc <__sflush_r+0x100>)
 800ad58:	40ca      	lsrs	r2, r1
 800ad5a:	07d6      	lsls	r6, r2, #31
 800ad5c:	d528      	bpl.n	800adb0 <__sflush_r+0xb4>
 800ad5e:	2200      	movs	r2, #0
 800ad60:	6062      	str	r2, [r4, #4]
 800ad62:	6922      	ldr	r2, [r4, #16]
 800ad64:	04d9      	lsls	r1, r3, #19
 800ad66:	6022      	str	r2, [r4, #0]
 800ad68:	d504      	bpl.n	800ad74 <__sflush_r+0x78>
 800ad6a:	1c42      	adds	r2, r0, #1
 800ad6c:	d101      	bne.n	800ad72 <__sflush_r+0x76>
 800ad6e:	682b      	ldr	r3, [r5, #0]
 800ad70:	b903      	cbnz	r3, 800ad74 <__sflush_r+0x78>
 800ad72:	6560      	str	r0, [r4, #84]	; 0x54
 800ad74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad76:	602f      	str	r7, [r5, #0]
 800ad78:	2900      	cmp	r1, #0
 800ad7a:	d0cb      	beq.n	800ad14 <__sflush_r+0x18>
 800ad7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad80:	4299      	cmp	r1, r3
 800ad82:	d002      	beq.n	800ad8a <__sflush_r+0x8e>
 800ad84:	4628      	mov	r0, r5
 800ad86:	f7fd fced 	bl	8008764 <_free_r>
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad8e:	e7c2      	b.n	800ad16 <__sflush_r+0x1a>
 800ad90:	6a21      	ldr	r1, [r4, #32]
 800ad92:	2301      	movs	r3, #1
 800ad94:	4628      	mov	r0, r5
 800ad96:	47b0      	blx	r6
 800ad98:	1c41      	adds	r1, r0, #1
 800ad9a:	d1c7      	bne.n	800ad2c <__sflush_r+0x30>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d0c4      	beq.n	800ad2c <__sflush_r+0x30>
 800ada2:	2b1d      	cmp	r3, #29
 800ada4:	d001      	beq.n	800adaa <__sflush_r+0xae>
 800ada6:	2b16      	cmp	r3, #22
 800ada8:	d101      	bne.n	800adae <__sflush_r+0xb2>
 800adaa:	602f      	str	r7, [r5, #0]
 800adac:	e7b2      	b.n	800ad14 <__sflush_r+0x18>
 800adae:	89a3      	ldrh	r3, [r4, #12]
 800adb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adb4:	81a3      	strh	r3, [r4, #12]
 800adb6:	e7ae      	b.n	800ad16 <__sflush_r+0x1a>
 800adb8:	690f      	ldr	r7, [r1, #16]
 800adba:	2f00      	cmp	r7, #0
 800adbc:	d0aa      	beq.n	800ad14 <__sflush_r+0x18>
 800adbe:	0793      	lsls	r3, r2, #30
 800adc0:	bf18      	it	ne
 800adc2:	2300      	movne	r3, #0
 800adc4:	680e      	ldr	r6, [r1, #0]
 800adc6:	bf08      	it	eq
 800adc8:	694b      	ldreq	r3, [r1, #20]
 800adca:	1bf6      	subs	r6, r6, r7
 800adcc:	600f      	str	r7, [r1, #0]
 800adce:	608b      	str	r3, [r1, #8]
 800add0:	2e00      	cmp	r6, #0
 800add2:	dd9f      	ble.n	800ad14 <__sflush_r+0x18>
 800add4:	4633      	mov	r3, r6
 800add6:	463a      	mov	r2, r7
 800add8:	4628      	mov	r0, r5
 800adda:	6a21      	ldr	r1, [r4, #32]
 800addc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ade0:	47e0      	blx	ip
 800ade2:	2800      	cmp	r0, #0
 800ade4:	dc06      	bgt.n	800adf4 <__sflush_r+0xf8>
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	f04f 30ff 	mov.w	r0, #4294967295
 800adec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	e790      	b.n	800ad16 <__sflush_r+0x1a>
 800adf4:	4407      	add	r7, r0
 800adf6:	1a36      	subs	r6, r6, r0
 800adf8:	e7ea      	b.n	800add0 <__sflush_r+0xd4>
 800adfa:	bf00      	nop
 800adfc:	20400001 	.word	0x20400001

0800ae00 <_fflush_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	690b      	ldr	r3, [r1, #16]
 800ae04:	4605      	mov	r5, r0
 800ae06:	460c      	mov	r4, r1
 800ae08:	b913      	cbnz	r3, 800ae10 <_fflush_r+0x10>
 800ae0a:	2500      	movs	r5, #0
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	b118      	cbz	r0, 800ae1a <_fflush_r+0x1a>
 800ae12:	6983      	ldr	r3, [r0, #24]
 800ae14:	b90b      	cbnz	r3, 800ae1a <_fflush_r+0x1a>
 800ae16:	f7fd fbb9 	bl	800858c <__sinit>
 800ae1a:	4b14      	ldr	r3, [pc, #80]	; (800ae6c <_fflush_r+0x6c>)
 800ae1c:	429c      	cmp	r4, r3
 800ae1e:	d11b      	bne.n	800ae58 <_fflush_r+0x58>
 800ae20:	686c      	ldr	r4, [r5, #4]
 800ae22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d0ef      	beq.n	800ae0a <_fflush_r+0xa>
 800ae2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae2c:	07d0      	lsls	r0, r2, #31
 800ae2e:	d404      	bmi.n	800ae3a <_fflush_r+0x3a>
 800ae30:	0599      	lsls	r1, r3, #22
 800ae32:	d402      	bmi.n	800ae3a <_fflush_r+0x3a>
 800ae34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae36:	f7fd fc6c 	bl	8008712 <__retarget_lock_acquire_recursive>
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	f7ff ff5d 	bl	800acfc <__sflush_r>
 800ae42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae44:	4605      	mov	r5, r0
 800ae46:	07da      	lsls	r2, r3, #31
 800ae48:	d4e0      	bmi.n	800ae0c <_fflush_r+0xc>
 800ae4a:	89a3      	ldrh	r3, [r4, #12]
 800ae4c:	059b      	lsls	r3, r3, #22
 800ae4e:	d4dd      	bmi.n	800ae0c <_fflush_r+0xc>
 800ae50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae52:	f7fd fc5f 	bl	8008714 <__retarget_lock_release_recursive>
 800ae56:	e7d9      	b.n	800ae0c <_fflush_r+0xc>
 800ae58:	4b05      	ldr	r3, [pc, #20]	; (800ae70 <_fflush_r+0x70>)
 800ae5a:	429c      	cmp	r4, r3
 800ae5c:	d101      	bne.n	800ae62 <_fflush_r+0x62>
 800ae5e:	68ac      	ldr	r4, [r5, #8]
 800ae60:	e7df      	b.n	800ae22 <_fflush_r+0x22>
 800ae62:	4b04      	ldr	r3, [pc, #16]	; (800ae74 <_fflush_r+0x74>)
 800ae64:	429c      	cmp	r4, r3
 800ae66:	bf08      	it	eq
 800ae68:	68ec      	ldreq	r4, [r5, #12]
 800ae6a:	e7da      	b.n	800ae22 <_fflush_r+0x22>
 800ae6c:	0800d970 	.word	0x0800d970
 800ae70:	0800d990 	.word	0x0800d990
 800ae74:	0800d950 	.word	0x0800d950

0800ae78 <rshift>:
 800ae78:	6903      	ldr	r3, [r0, #16]
 800ae7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae82:	f100 0414 	add.w	r4, r0, #20
 800ae86:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae8a:	dd46      	ble.n	800af1a <rshift+0xa2>
 800ae8c:	f011 011f 	ands.w	r1, r1, #31
 800ae90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae98:	d10c      	bne.n	800aeb4 <rshift+0x3c>
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	f100 0710 	add.w	r7, r0, #16
 800aea0:	42b1      	cmp	r1, r6
 800aea2:	d335      	bcc.n	800af10 <rshift+0x98>
 800aea4:	1a9b      	subs	r3, r3, r2
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	1eea      	subs	r2, r5, #3
 800aeaa:	4296      	cmp	r6, r2
 800aeac:	bf38      	it	cc
 800aeae:	2300      	movcc	r3, #0
 800aeb0:	4423      	add	r3, r4
 800aeb2:	e015      	b.n	800aee0 <rshift+0x68>
 800aeb4:	46a1      	mov	r9, r4
 800aeb6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aeba:	f1c1 0820 	rsb	r8, r1, #32
 800aebe:	40cf      	lsrs	r7, r1
 800aec0:	f105 0e04 	add.w	lr, r5, #4
 800aec4:	4576      	cmp	r6, lr
 800aec6:	46f4      	mov	ip, lr
 800aec8:	d816      	bhi.n	800aef8 <rshift+0x80>
 800aeca:	1a9a      	subs	r2, r3, r2
 800aecc:	0092      	lsls	r2, r2, #2
 800aece:	3a04      	subs	r2, #4
 800aed0:	3501      	adds	r5, #1
 800aed2:	42ae      	cmp	r6, r5
 800aed4:	bf38      	it	cc
 800aed6:	2200      	movcc	r2, #0
 800aed8:	18a3      	adds	r3, r4, r2
 800aeda:	50a7      	str	r7, [r4, r2]
 800aedc:	b107      	cbz	r7, 800aee0 <rshift+0x68>
 800aede:	3304      	adds	r3, #4
 800aee0:	42a3      	cmp	r3, r4
 800aee2:	eba3 0204 	sub.w	r2, r3, r4
 800aee6:	bf08      	it	eq
 800aee8:	2300      	moveq	r3, #0
 800aeea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aeee:	6102      	str	r2, [r0, #16]
 800aef0:	bf08      	it	eq
 800aef2:	6143      	streq	r3, [r0, #20]
 800aef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aef8:	f8dc c000 	ldr.w	ip, [ip]
 800aefc:	fa0c fc08 	lsl.w	ip, ip, r8
 800af00:	ea4c 0707 	orr.w	r7, ip, r7
 800af04:	f849 7b04 	str.w	r7, [r9], #4
 800af08:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af0c:	40cf      	lsrs	r7, r1
 800af0e:	e7d9      	b.n	800aec4 <rshift+0x4c>
 800af10:	f851 cb04 	ldr.w	ip, [r1], #4
 800af14:	f847 cf04 	str.w	ip, [r7, #4]!
 800af18:	e7c2      	b.n	800aea0 <rshift+0x28>
 800af1a:	4623      	mov	r3, r4
 800af1c:	e7e0      	b.n	800aee0 <rshift+0x68>

0800af1e <__hexdig_fun>:
 800af1e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af22:	2b09      	cmp	r3, #9
 800af24:	d802      	bhi.n	800af2c <__hexdig_fun+0xe>
 800af26:	3820      	subs	r0, #32
 800af28:	b2c0      	uxtb	r0, r0
 800af2a:	4770      	bx	lr
 800af2c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af30:	2b05      	cmp	r3, #5
 800af32:	d801      	bhi.n	800af38 <__hexdig_fun+0x1a>
 800af34:	3847      	subs	r0, #71	; 0x47
 800af36:	e7f7      	b.n	800af28 <__hexdig_fun+0xa>
 800af38:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af3c:	2b05      	cmp	r3, #5
 800af3e:	d801      	bhi.n	800af44 <__hexdig_fun+0x26>
 800af40:	3827      	subs	r0, #39	; 0x27
 800af42:	e7f1      	b.n	800af28 <__hexdig_fun+0xa>
 800af44:	2000      	movs	r0, #0
 800af46:	4770      	bx	lr

0800af48 <__gethex>:
 800af48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4c:	b08b      	sub	sp, #44	; 0x2c
 800af4e:	9305      	str	r3, [sp, #20]
 800af50:	4bb2      	ldr	r3, [pc, #712]	; (800b21c <__gethex+0x2d4>)
 800af52:	9002      	str	r0, [sp, #8]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	468b      	mov	fp, r1
 800af58:	4618      	mov	r0, r3
 800af5a:	4690      	mov	r8, r2
 800af5c:	9303      	str	r3, [sp, #12]
 800af5e:	f7f5 f967 	bl	8000230 <strlen>
 800af62:	4682      	mov	sl, r0
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	f8db 2000 	ldr.w	r2, [fp]
 800af6a:	4403      	add	r3, r0
 800af6c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800af70:	9306      	str	r3, [sp, #24]
 800af72:	1c93      	adds	r3, r2, #2
 800af74:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af78:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af7c:	32fe      	adds	r2, #254	; 0xfe
 800af7e:	18d1      	adds	r1, r2, r3
 800af80:	461f      	mov	r7, r3
 800af82:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af86:	9101      	str	r1, [sp, #4]
 800af88:	2830      	cmp	r0, #48	; 0x30
 800af8a:	d0f8      	beq.n	800af7e <__gethex+0x36>
 800af8c:	f7ff ffc7 	bl	800af1e <__hexdig_fun>
 800af90:	4604      	mov	r4, r0
 800af92:	2800      	cmp	r0, #0
 800af94:	d13a      	bne.n	800b00c <__gethex+0xc4>
 800af96:	4652      	mov	r2, sl
 800af98:	4638      	mov	r0, r7
 800af9a:	9903      	ldr	r1, [sp, #12]
 800af9c:	f001 f954 	bl	800c248 <strncmp>
 800afa0:	4605      	mov	r5, r0
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d166      	bne.n	800b074 <__gethex+0x12c>
 800afa6:	f817 000a 	ldrb.w	r0, [r7, sl]
 800afaa:	eb07 060a 	add.w	r6, r7, sl
 800afae:	f7ff ffb6 	bl	800af1e <__hexdig_fun>
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d060      	beq.n	800b078 <__gethex+0x130>
 800afb6:	4633      	mov	r3, r6
 800afb8:	7818      	ldrb	r0, [r3, #0]
 800afba:	461f      	mov	r7, r3
 800afbc:	2830      	cmp	r0, #48	; 0x30
 800afbe:	f103 0301 	add.w	r3, r3, #1
 800afc2:	d0f9      	beq.n	800afb8 <__gethex+0x70>
 800afc4:	f7ff ffab 	bl	800af1e <__hexdig_fun>
 800afc8:	2301      	movs	r3, #1
 800afca:	fab0 f480 	clz	r4, r0
 800afce:	4635      	mov	r5, r6
 800afd0:	0964      	lsrs	r4, r4, #5
 800afd2:	9301      	str	r3, [sp, #4]
 800afd4:	463a      	mov	r2, r7
 800afd6:	4616      	mov	r6, r2
 800afd8:	7830      	ldrb	r0, [r6, #0]
 800afda:	3201      	adds	r2, #1
 800afdc:	f7ff ff9f 	bl	800af1e <__hexdig_fun>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d1f8      	bne.n	800afd6 <__gethex+0x8e>
 800afe4:	4652      	mov	r2, sl
 800afe6:	4630      	mov	r0, r6
 800afe8:	9903      	ldr	r1, [sp, #12]
 800afea:	f001 f92d 	bl	800c248 <strncmp>
 800afee:	b980      	cbnz	r0, 800b012 <__gethex+0xca>
 800aff0:	b94d      	cbnz	r5, 800b006 <__gethex+0xbe>
 800aff2:	eb06 050a 	add.w	r5, r6, sl
 800aff6:	462a      	mov	r2, r5
 800aff8:	4616      	mov	r6, r2
 800affa:	7830      	ldrb	r0, [r6, #0]
 800affc:	3201      	adds	r2, #1
 800affe:	f7ff ff8e 	bl	800af1e <__hexdig_fun>
 800b002:	2800      	cmp	r0, #0
 800b004:	d1f8      	bne.n	800aff8 <__gethex+0xb0>
 800b006:	1bad      	subs	r5, r5, r6
 800b008:	00ad      	lsls	r5, r5, #2
 800b00a:	e004      	b.n	800b016 <__gethex+0xce>
 800b00c:	2400      	movs	r4, #0
 800b00e:	4625      	mov	r5, r4
 800b010:	e7e0      	b.n	800afd4 <__gethex+0x8c>
 800b012:	2d00      	cmp	r5, #0
 800b014:	d1f7      	bne.n	800b006 <__gethex+0xbe>
 800b016:	7833      	ldrb	r3, [r6, #0]
 800b018:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b01c:	2b50      	cmp	r3, #80	; 0x50
 800b01e:	d139      	bne.n	800b094 <__gethex+0x14c>
 800b020:	7873      	ldrb	r3, [r6, #1]
 800b022:	2b2b      	cmp	r3, #43	; 0x2b
 800b024:	d02a      	beq.n	800b07c <__gethex+0x134>
 800b026:	2b2d      	cmp	r3, #45	; 0x2d
 800b028:	d02c      	beq.n	800b084 <__gethex+0x13c>
 800b02a:	f04f 0900 	mov.w	r9, #0
 800b02e:	1c71      	adds	r1, r6, #1
 800b030:	7808      	ldrb	r0, [r1, #0]
 800b032:	f7ff ff74 	bl	800af1e <__hexdig_fun>
 800b036:	1e43      	subs	r3, r0, #1
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	2b18      	cmp	r3, #24
 800b03c:	d82a      	bhi.n	800b094 <__gethex+0x14c>
 800b03e:	f1a0 0210 	sub.w	r2, r0, #16
 800b042:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b046:	f7ff ff6a 	bl	800af1e <__hexdig_fun>
 800b04a:	1e43      	subs	r3, r0, #1
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2b18      	cmp	r3, #24
 800b050:	d91b      	bls.n	800b08a <__gethex+0x142>
 800b052:	f1b9 0f00 	cmp.w	r9, #0
 800b056:	d000      	beq.n	800b05a <__gethex+0x112>
 800b058:	4252      	negs	r2, r2
 800b05a:	4415      	add	r5, r2
 800b05c:	f8cb 1000 	str.w	r1, [fp]
 800b060:	b1d4      	cbz	r4, 800b098 <__gethex+0x150>
 800b062:	9b01      	ldr	r3, [sp, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	bf14      	ite	ne
 800b068:	2700      	movne	r7, #0
 800b06a:	2706      	moveq	r7, #6
 800b06c:	4638      	mov	r0, r7
 800b06e:	b00b      	add	sp, #44	; 0x2c
 800b070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b074:	463e      	mov	r6, r7
 800b076:	4625      	mov	r5, r4
 800b078:	2401      	movs	r4, #1
 800b07a:	e7cc      	b.n	800b016 <__gethex+0xce>
 800b07c:	f04f 0900 	mov.w	r9, #0
 800b080:	1cb1      	adds	r1, r6, #2
 800b082:	e7d5      	b.n	800b030 <__gethex+0xe8>
 800b084:	f04f 0901 	mov.w	r9, #1
 800b088:	e7fa      	b.n	800b080 <__gethex+0x138>
 800b08a:	230a      	movs	r3, #10
 800b08c:	fb03 0202 	mla	r2, r3, r2, r0
 800b090:	3a10      	subs	r2, #16
 800b092:	e7d6      	b.n	800b042 <__gethex+0xfa>
 800b094:	4631      	mov	r1, r6
 800b096:	e7e1      	b.n	800b05c <__gethex+0x114>
 800b098:	4621      	mov	r1, r4
 800b09a:	1bf3      	subs	r3, r6, r7
 800b09c:	3b01      	subs	r3, #1
 800b09e:	2b07      	cmp	r3, #7
 800b0a0:	dc0a      	bgt.n	800b0b8 <__gethex+0x170>
 800b0a2:	9802      	ldr	r0, [sp, #8]
 800b0a4:	f000 fa90 	bl	800b5c8 <_Balloc>
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	b940      	cbnz	r0, 800b0be <__gethex+0x176>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	21de      	movs	r1, #222	; 0xde
 800b0b0:	4b5b      	ldr	r3, [pc, #364]	; (800b220 <__gethex+0x2d8>)
 800b0b2:	485c      	ldr	r0, [pc, #368]	; (800b224 <__gethex+0x2dc>)
 800b0b4:	f001 f8ea 	bl	800c28c <__assert_func>
 800b0b8:	3101      	adds	r1, #1
 800b0ba:	105b      	asrs	r3, r3, #1
 800b0bc:	e7ef      	b.n	800b09e <__gethex+0x156>
 800b0be:	f04f 0b00 	mov.w	fp, #0
 800b0c2:	f100 0914 	add.w	r9, r0, #20
 800b0c6:	f1ca 0301 	rsb	r3, sl, #1
 800b0ca:	f8cd 9010 	str.w	r9, [sp, #16]
 800b0ce:	f8cd b004 	str.w	fp, [sp, #4]
 800b0d2:	9308      	str	r3, [sp, #32]
 800b0d4:	42b7      	cmp	r7, r6
 800b0d6:	d33f      	bcc.n	800b158 <__gethex+0x210>
 800b0d8:	9f04      	ldr	r7, [sp, #16]
 800b0da:	9b01      	ldr	r3, [sp, #4]
 800b0dc:	f847 3b04 	str.w	r3, [r7], #4
 800b0e0:	eba7 0709 	sub.w	r7, r7, r9
 800b0e4:	10bf      	asrs	r7, r7, #2
 800b0e6:	6127      	str	r7, [r4, #16]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 fb5f 	bl	800b7ac <__hi0bits>
 800b0ee:	017f      	lsls	r7, r7, #5
 800b0f0:	f8d8 6000 	ldr.w	r6, [r8]
 800b0f4:	1a3f      	subs	r7, r7, r0
 800b0f6:	42b7      	cmp	r7, r6
 800b0f8:	dd62      	ble.n	800b1c0 <__gethex+0x278>
 800b0fa:	1bbf      	subs	r7, r7, r6
 800b0fc:	4639      	mov	r1, r7
 800b0fe:	4620      	mov	r0, r4
 800b100:	f000 fef9 	bl	800bef6 <__any_on>
 800b104:	4682      	mov	sl, r0
 800b106:	b1a8      	cbz	r0, 800b134 <__gethex+0x1ec>
 800b108:	f04f 0a01 	mov.w	sl, #1
 800b10c:	1e7b      	subs	r3, r7, #1
 800b10e:	1159      	asrs	r1, r3, #5
 800b110:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b114:	f003 021f 	and.w	r2, r3, #31
 800b118:	fa0a f202 	lsl.w	r2, sl, r2
 800b11c:	420a      	tst	r2, r1
 800b11e:	d009      	beq.n	800b134 <__gethex+0x1ec>
 800b120:	4553      	cmp	r3, sl
 800b122:	dd05      	ble.n	800b130 <__gethex+0x1e8>
 800b124:	4620      	mov	r0, r4
 800b126:	1eb9      	subs	r1, r7, #2
 800b128:	f000 fee5 	bl	800bef6 <__any_on>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d144      	bne.n	800b1ba <__gethex+0x272>
 800b130:	f04f 0a02 	mov.w	sl, #2
 800b134:	4639      	mov	r1, r7
 800b136:	4620      	mov	r0, r4
 800b138:	f7ff fe9e 	bl	800ae78 <rshift>
 800b13c:	443d      	add	r5, r7
 800b13e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b142:	42ab      	cmp	r3, r5
 800b144:	da4a      	bge.n	800b1dc <__gethex+0x294>
 800b146:	4621      	mov	r1, r4
 800b148:	9802      	ldr	r0, [sp, #8]
 800b14a:	f000 fa7d 	bl	800b648 <_Bfree>
 800b14e:	2300      	movs	r3, #0
 800b150:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b152:	27a3      	movs	r7, #163	; 0xa3
 800b154:	6013      	str	r3, [r2, #0]
 800b156:	e789      	b.n	800b06c <__gethex+0x124>
 800b158:	1e73      	subs	r3, r6, #1
 800b15a:	9a06      	ldr	r2, [sp, #24]
 800b15c:	9307      	str	r3, [sp, #28]
 800b15e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b162:	4293      	cmp	r3, r2
 800b164:	d019      	beq.n	800b19a <__gethex+0x252>
 800b166:	f1bb 0f20 	cmp.w	fp, #32
 800b16a:	d107      	bne.n	800b17c <__gethex+0x234>
 800b16c:	9b04      	ldr	r3, [sp, #16]
 800b16e:	9a01      	ldr	r2, [sp, #4]
 800b170:	f843 2b04 	str.w	r2, [r3], #4
 800b174:	9304      	str	r3, [sp, #16]
 800b176:	2300      	movs	r3, #0
 800b178:	469b      	mov	fp, r3
 800b17a:	9301      	str	r3, [sp, #4]
 800b17c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b180:	f7ff fecd 	bl	800af1e <__hexdig_fun>
 800b184:	9b01      	ldr	r3, [sp, #4]
 800b186:	f000 000f 	and.w	r0, r0, #15
 800b18a:	fa00 f00b 	lsl.w	r0, r0, fp
 800b18e:	4303      	orrs	r3, r0
 800b190:	9301      	str	r3, [sp, #4]
 800b192:	f10b 0b04 	add.w	fp, fp, #4
 800b196:	9b07      	ldr	r3, [sp, #28]
 800b198:	e00d      	b.n	800b1b6 <__gethex+0x26e>
 800b19a:	9a08      	ldr	r2, [sp, #32]
 800b19c:	1e73      	subs	r3, r6, #1
 800b19e:	4413      	add	r3, r2
 800b1a0:	42bb      	cmp	r3, r7
 800b1a2:	d3e0      	bcc.n	800b166 <__gethex+0x21e>
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	4652      	mov	r2, sl
 800b1a8:	9903      	ldr	r1, [sp, #12]
 800b1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ac:	f001 f84c 	bl	800c248 <strncmp>
 800b1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d1d7      	bne.n	800b166 <__gethex+0x21e>
 800b1b6:	461e      	mov	r6, r3
 800b1b8:	e78c      	b.n	800b0d4 <__gethex+0x18c>
 800b1ba:	f04f 0a03 	mov.w	sl, #3
 800b1be:	e7b9      	b.n	800b134 <__gethex+0x1ec>
 800b1c0:	da09      	bge.n	800b1d6 <__gethex+0x28e>
 800b1c2:	1bf7      	subs	r7, r6, r7
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	463a      	mov	r2, r7
 800b1c8:	9802      	ldr	r0, [sp, #8]
 800b1ca:	f000 fc55 	bl	800ba78 <__lshift>
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	1bed      	subs	r5, r5, r7
 800b1d2:	f100 0914 	add.w	r9, r0, #20
 800b1d6:	f04f 0a00 	mov.w	sl, #0
 800b1da:	e7b0      	b.n	800b13e <__gethex+0x1f6>
 800b1dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b1e0:	42a8      	cmp	r0, r5
 800b1e2:	dd72      	ble.n	800b2ca <__gethex+0x382>
 800b1e4:	1b45      	subs	r5, r0, r5
 800b1e6:	42ae      	cmp	r6, r5
 800b1e8:	dc35      	bgt.n	800b256 <__gethex+0x30e>
 800b1ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d029      	beq.n	800b246 <__gethex+0x2fe>
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	d02b      	beq.n	800b24e <__gethex+0x306>
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d11c      	bne.n	800b234 <__gethex+0x2ec>
 800b1fa:	42ae      	cmp	r6, r5
 800b1fc:	d11a      	bne.n	800b234 <__gethex+0x2ec>
 800b1fe:	2e01      	cmp	r6, #1
 800b200:	d112      	bne.n	800b228 <__gethex+0x2e0>
 800b202:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b206:	9a05      	ldr	r2, [sp, #20]
 800b208:	2762      	movs	r7, #98	; 0x62
 800b20a:	6013      	str	r3, [r2, #0]
 800b20c:	2301      	movs	r3, #1
 800b20e:	6123      	str	r3, [r4, #16]
 800b210:	f8c9 3000 	str.w	r3, [r9]
 800b214:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b216:	601c      	str	r4, [r3, #0]
 800b218:	e728      	b.n	800b06c <__gethex+0x124>
 800b21a:	bf00      	nop
 800b21c:	0800db30 	.word	0x0800db30
 800b220:	0800dab7 	.word	0x0800dab7
 800b224:	0800dac8 	.word	0x0800dac8
 800b228:	4620      	mov	r0, r4
 800b22a:	1e71      	subs	r1, r6, #1
 800b22c:	f000 fe63 	bl	800bef6 <__any_on>
 800b230:	2800      	cmp	r0, #0
 800b232:	d1e6      	bne.n	800b202 <__gethex+0x2ba>
 800b234:	4621      	mov	r1, r4
 800b236:	9802      	ldr	r0, [sp, #8]
 800b238:	f000 fa06 	bl	800b648 <_Bfree>
 800b23c:	2300      	movs	r3, #0
 800b23e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b240:	2750      	movs	r7, #80	; 0x50
 800b242:	6013      	str	r3, [r2, #0]
 800b244:	e712      	b.n	800b06c <__gethex+0x124>
 800b246:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1f3      	bne.n	800b234 <__gethex+0x2ec>
 800b24c:	e7d9      	b.n	800b202 <__gethex+0x2ba>
 800b24e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1d6      	bne.n	800b202 <__gethex+0x2ba>
 800b254:	e7ee      	b.n	800b234 <__gethex+0x2ec>
 800b256:	1e6f      	subs	r7, r5, #1
 800b258:	f1ba 0f00 	cmp.w	sl, #0
 800b25c:	d132      	bne.n	800b2c4 <__gethex+0x37c>
 800b25e:	b127      	cbz	r7, 800b26a <__gethex+0x322>
 800b260:	4639      	mov	r1, r7
 800b262:	4620      	mov	r0, r4
 800b264:	f000 fe47 	bl	800bef6 <__any_on>
 800b268:	4682      	mov	sl, r0
 800b26a:	2101      	movs	r1, #1
 800b26c:	117b      	asrs	r3, r7, #5
 800b26e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b272:	f007 071f 	and.w	r7, r7, #31
 800b276:	fa01 f707 	lsl.w	r7, r1, r7
 800b27a:	421f      	tst	r7, r3
 800b27c:	f04f 0702 	mov.w	r7, #2
 800b280:	4629      	mov	r1, r5
 800b282:	4620      	mov	r0, r4
 800b284:	bf18      	it	ne
 800b286:	f04a 0a02 	orrne.w	sl, sl, #2
 800b28a:	1b76      	subs	r6, r6, r5
 800b28c:	f7ff fdf4 	bl	800ae78 <rshift>
 800b290:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b294:	f1ba 0f00 	cmp.w	sl, #0
 800b298:	d048      	beq.n	800b32c <__gethex+0x3e4>
 800b29a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d015      	beq.n	800b2ce <__gethex+0x386>
 800b2a2:	2b03      	cmp	r3, #3
 800b2a4:	d017      	beq.n	800b2d6 <__gethex+0x38e>
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d109      	bne.n	800b2be <__gethex+0x376>
 800b2aa:	f01a 0f02 	tst.w	sl, #2
 800b2ae:	d006      	beq.n	800b2be <__gethex+0x376>
 800b2b0:	f8d9 0000 	ldr.w	r0, [r9]
 800b2b4:	ea4a 0a00 	orr.w	sl, sl, r0
 800b2b8:	f01a 0f01 	tst.w	sl, #1
 800b2bc:	d10e      	bne.n	800b2dc <__gethex+0x394>
 800b2be:	f047 0710 	orr.w	r7, r7, #16
 800b2c2:	e033      	b.n	800b32c <__gethex+0x3e4>
 800b2c4:	f04f 0a01 	mov.w	sl, #1
 800b2c8:	e7cf      	b.n	800b26a <__gethex+0x322>
 800b2ca:	2701      	movs	r7, #1
 800b2cc:	e7e2      	b.n	800b294 <__gethex+0x34c>
 800b2ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2d0:	f1c3 0301 	rsb	r3, r3, #1
 800b2d4:	9315      	str	r3, [sp, #84]	; 0x54
 800b2d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d0f0      	beq.n	800b2be <__gethex+0x376>
 800b2dc:	f04f 0c00 	mov.w	ip, #0
 800b2e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2e4:	f104 0314 	add.w	r3, r4, #20
 800b2e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b2fa:	d01c      	beq.n	800b336 <__gethex+0x3ee>
 800b2fc:	3201      	adds	r2, #1
 800b2fe:	6002      	str	r2, [r0, #0]
 800b300:	2f02      	cmp	r7, #2
 800b302:	f104 0314 	add.w	r3, r4, #20
 800b306:	d13d      	bne.n	800b384 <__gethex+0x43c>
 800b308:	f8d8 2000 	ldr.w	r2, [r8]
 800b30c:	3a01      	subs	r2, #1
 800b30e:	42b2      	cmp	r2, r6
 800b310:	d10a      	bne.n	800b328 <__gethex+0x3e0>
 800b312:	2201      	movs	r2, #1
 800b314:	1171      	asrs	r1, r6, #5
 800b316:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b31a:	f006 061f 	and.w	r6, r6, #31
 800b31e:	fa02 f606 	lsl.w	r6, r2, r6
 800b322:	421e      	tst	r6, r3
 800b324:	bf18      	it	ne
 800b326:	4617      	movne	r7, r2
 800b328:	f047 0720 	orr.w	r7, r7, #32
 800b32c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b32e:	601c      	str	r4, [r3, #0]
 800b330:	9b05      	ldr	r3, [sp, #20]
 800b332:	601d      	str	r5, [r3, #0]
 800b334:	e69a      	b.n	800b06c <__gethex+0x124>
 800b336:	4299      	cmp	r1, r3
 800b338:	f843 cc04 	str.w	ip, [r3, #-4]
 800b33c:	d8d8      	bhi.n	800b2f0 <__gethex+0x3a8>
 800b33e:	68a3      	ldr	r3, [r4, #8]
 800b340:	459b      	cmp	fp, r3
 800b342:	db17      	blt.n	800b374 <__gethex+0x42c>
 800b344:	6861      	ldr	r1, [r4, #4]
 800b346:	9802      	ldr	r0, [sp, #8]
 800b348:	3101      	adds	r1, #1
 800b34a:	f000 f93d 	bl	800b5c8 <_Balloc>
 800b34e:	4681      	mov	r9, r0
 800b350:	b918      	cbnz	r0, 800b35a <__gethex+0x412>
 800b352:	4602      	mov	r2, r0
 800b354:	2184      	movs	r1, #132	; 0x84
 800b356:	4b19      	ldr	r3, [pc, #100]	; (800b3bc <__gethex+0x474>)
 800b358:	e6ab      	b.n	800b0b2 <__gethex+0x16a>
 800b35a:	6922      	ldr	r2, [r4, #16]
 800b35c:	f104 010c 	add.w	r1, r4, #12
 800b360:	3202      	adds	r2, #2
 800b362:	0092      	lsls	r2, r2, #2
 800b364:	300c      	adds	r0, #12
 800b366:	f7fd f9e7 	bl	8008738 <memcpy>
 800b36a:	4621      	mov	r1, r4
 800b36c:	9802      	ldr	r0, [sp, #8]
 800b36e:	f000 f96b 	bl	800b648 <_Bfree>
 800b372:	464c      	mov	r4, r9
 800b374:	6923      	ldr	r3, [r4, #16]
 800b376:	1c5a      	adds	r2, r3, #1
 800b378:	6122      	str	r2, [r4, #16]
 800b37a:	2201      	movs	r2, #1
 800b37c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b380:	615a      	str	r2, [r3, #20]
 800b382:	e7bd      	b.n	800b300 <__gethex+0x3b8>
 800b384:	6922      	ldr	r2, [r4, #16]
 800b386:	455a      	cmp	r2, fp
 800b388:	dd0b      	ble.n	800b3a2 <__gethex+0x45a>
 800b38a:	2101      	movs	r1, #1
 800b38c:	4620      	mov	r0, r4
 800b38e:	f7ff fd73 	bl	800ae78 <rshift>
 800b392:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b396:	3501      	adds	r5, #1
 800b398:	42ab      	cmp	r3, r5
 800b39a:	f6ff aed4 	blt.w	800b146 <__gethex+0x1fe>
 800b39e:	2701      	movs	r7, #1
 800b3a0:	e7c2      	b.n	800b328 <__gethex+0x3e0>
 800b3a2:	f016 061f 	ands.w	r6, r6, #31
 800b3a6:	d0fa      	beq.n	800b39e <__gethex+0x456>
 800b3a8:	4453      	add	r3, sl
 800b3aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b3ae:	f000 f9fd 	bl	800b7ac <__hi0bits>
 800b3b2:	f1c6 0620 	rsb	r6, r6, #32
 800b3b6:	42b0      	cmp	r0, r6
 800b3b8:	dbe7      	blt.n	800b38a <__gethex+0x442>
 800b3ba:	e7f0      	b.n	800b39e <__gethex+0x456>
 800b3bc:	0800dab7 	.word	0x0800dab7

0800b3c0 <L_shift>:
 800b3c0:	f1c2 0208 	rsb	r2, r2, #8
 800b3c4:	0092      	lsls	r2, r2, #2
 800b3c6:	b570      	push	{r4, r5, r6, lr}
 800b3c8:	f1c2 0620 	rsb	r6, r2, #32
 800b3cc:	6843      	ldr	r3, [r0, #4]
 800b3ce:	6804      	ldr	r4, [r0, #0]
 800b3d0:	fa03 f506 	lsl.w	r5, r3, r6
 800b3d4:	432c      	orrs	r4, r5
 800b3d6:	40d3      	lsrs	r3, r2
 800b3d8:	6004      	str	r4, [r0, #0]
 800b3da:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3de:	4288      	cmp	r0, r1
 800b3e0:	d3f4      	bcc.n	800b3cc <L_shift+0xc>
 800b3e2:	bd70      	pop	{r4, r5, r6, pc}

0800b3e4 <__match>:
 800b3e4:	b530      	push	{r4, r5, lr}
 800b3e6:	6803      	ldr	r3, [r0, #0]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ee:	b914      	cbnz	r4, 800b3f6 <__match+0x12>
 800b3f0:	6003      	str	r3, [r0, #0]
 800b3f2:	2001      	movs	r0, #1
 800b3f4:	bd30      	pop	{r4, r5, pc}
 800b3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b3fe:	2d19      	cmp	r5, #25
 800b400:	bf98      	it	ls
 800b402:	3220      	addls	r2, #32
 800b404:	42a2      	cmp	r2, r4
 800b406:	d0f0      	beq.n	800b3ea <__match+0x6>
 800b408:	2000      	movs	r0, #0
 800b40a:	e7f3      	b.n	800b3f4 <__match+0x10>

0800b40c <__hexnan>:
 800b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	2500      	movs	r5, #0
 800b412:	680b      	ldr	r3, [r1, #0]
 800b414:	4682      	mov	sl, r0
 800b416:	115e      	asrs	r6, r3, #5
 800b418:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b41c:	f013 031f 	ands.w	r3, r3, #31
 800b420:	bf18      	it	ne
 800b422:	3604      	addne	r6, #4
 800b424:	1f37      	subs	r7, r6, #4
 800b426:	46b9      	mov	r9, r7
 800b428:	463c      	mov	r4, r7
 800b42a:	46ab      	mov	fp, r5
 800b42c:	b087      	sub	sp, #28
 800b42e:	4690      	mov	r8, r2
 800b430:	6802      	ldr	r2, [r0, #0]
 800b432:	9301      	str	r3, [sp, #4]
 800b434:	f846 5c04 	str.w	r5, [r6, #-4]
 800b438:	9502      	str	r5, [sp, #8]
 800b43a:	7851      	ldrb	r1, [r2, #1]
 800b43c:	1c53      	adds	r3, r2, #1
 800b43e:	9303      	str	r3, [sp, #12]
 800b440:	b341      	cbz	r1, 800b494 <__hexnan+0x88>
 800b442:	4608      	mov	r0, r1
 800b444:	9205      	str	r2, [sp, #20]
 800b446:	9104      	str	r1, [sp, #16]
 800b448:	f7ff fd69 	bl	800af1e <__hexdig_fun>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d14f      	bne.n	800b4f0 <__hexnan+0xe4>
 800b450:	9904      	ldr	r1, [sp, #16]
 800b452:	9a05      	ldr	r2, [sp, #20]
 800b454:	2920      	cmp	r1, #32
 800b456:	d818      	bhi.n	800b48a <__hexnan+0x7e>
 800b458:	9b02      	ldr	r3, [sp, #8]
 800b45a:	459b      	cmp	fp, r3
 800b45c:	dd13      	ble.n	800b486 <__hexnan+0x7a>
 800b45e:	454c      	cmp	r4, r9
 800b460:	d206      	bcs.n	800b470 <__hexnan+0x64>
 800b462:	2d07      	cmp	r5, #7
 800b464:	dc04      	bgt.n	800b470 <__hexnan+0x64>
 800b466:	462a      	mov	r2, r5
 800b468:	4649      	mov	r1, r9
 800b46a:	4620      	mov	r0, r4
 800b46c:	f7ff ffa8 	bl	800b3c0 <L_shift>
 800b470:	4544      	cmp	r4, r8
 800b472:	d950      	bls.n	800b516 <__hexnan+0x10a>
 800b474:	2300      	movs	r3, #0
 800b476:	f1a4 0904 	sub.w	r9, r4, #4
 800b47a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b47e:	461d      	mov	r5, r3
 800b480:	464c      	mov	r4, r9
 800b482:	f8cd b008 	str.w	fp, [sp, #8]
 800b486:	9a03      	ldr	r2, [sp, #12]
 800b488:	e7d7      	b.n	800b43a <__hexnan+0x2e>
 800b48a:	2929      	cmp	r1, #41	; 0x29
 800b48c:	d156      	bne.n	800b53c <__hexnan+0x130>
 800b48e:	3202      	adds	r2, #2
 800b490:	f8ca 2000 	str.w	r2, [sl]
 800b494:	f1bb 0f00 	cmp.w	fp, #0
 800b498:	d050      	beq.n	800b53c <__hexnan+0x130>
 800b49a:	454c      	cmp	r4, r9
 800b49c:	d206      	bcs.n	800b4ac <__hexnan+0xa0>
 800b49e:	2d07      	cmp	r5, #7
 800b4a0:	dc04      	bgt.n	800b4ac <__hexnan+0xa0>
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f7ff ff8a 	bl	800b3c0 <L_shift>
 800b4ac:	4544      	cmp	r4, r8
 800b4ae:	d934      	bls.n	800b51a <__hexnan+0x10e>
 800b4b0:	4623      	mov	r3, r4
 800b4b2:	f1a8 0204 	sub.w	r2, r8, #4
 800b4b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4ba:	429f      	cmp	r7, r3
 800b4bc:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4c0:	d2f9      	bcs.n	800b4b6 <__hexnan+0xaa>
 800b4c2:	1b3b      	subs	r3, r7, r4
 800b4c4:	f023 0303 	bic.w	r3, r3, #3
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	3401      	adds	r4, #1
 800b4cc:	3e03      	subs	r6, #3
 800b4ce:	42b4      	cmp	r4, r6
 800b4d0:	bf88      	it	hi
 800b4d2:	2304      	movhi	r3, #4
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	4443      	add	r3, r8
 800b4d8:	f843 2b04 	str.w	r2, [r3], #4
 800b4dc:	429f      	cmp	r7, r3
 800b4de:	d2fb      	bcs.n	800b4d8 <__hexnan+0xcc>
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	b91b      	cbnz	r3, 800b4ec <__hexnan+0xe0>
 800b4e4:	4547      	cmp	r7, r8
 800b4e6:	d127      	bne.n	800b538 <__hexnan+0x12c>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	603b      	str	r3, [r7, #0]
 800b4ec:	2005      	movs	r0, #5
 800b4ee:	e026      	b.n	800b53e <__hexnan+0x132>
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	2d08      	cmp	r5, #8
 800b4f4:	f10b 0b01 	add.w	fp, fp, #1
 800b4f8:	dd06      	ble.n	800b508 <__hexnan+0xfc>
 800b4fa:	4544      	cmp	r4, r8
 800b4fc:	d9c3      	bls.n	800b486 <__hexnan+0x7a>
 800b4fe:	2300      	movs	r3, #0
 800b500:	2501      	movs	r5, #1
 800b502:	f844 3c04 	str.w	r3, [r4, #-4]
 800b506:	3c04      	subs	r4, #4
 800b508:	6822      	ldr	r2, [r4, #0]
 800b50a:	f000 000f 	and.w	r0, r0, #15
 800b50e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b512:	6022      	str	r2, [r4, #0]
 800b514:	e7b7      	b.n	800b486 <__hexnan+0x7a>
 800b516:	2508      	movs	r5, #8
 800b518:	e7b5      	b.n	800b486 <__hexnan+0x7a>
 800b51a:	9b01      	ldr	r3, [sp, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d0df      	beq.n	800b4e0 <__hexnan+0xd4>
 800b520:	f04f 32ff 	mov.w	r2, #4294967295
 800b524:	f1c3 0320 	rsb	r3, r3, #32
 800b528:	fa22 f303 	lsr.w	r3, r2, r3
 800b52c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b530:	401a      	ands	r2, r3
 800b532:	f846 2c04 	str.w	r2, [r6, #-4]
 800b536:	e7d3      	b.n	800b4e0 <__hexnan+0xd4>
 800b538:	3f04      	subs	r7, #4
 800b53a:	e7d1      	b.n	800b4e0 <__hexnan+0xd4>
 800b53c:	2004      	movs	r0, #4
 800b53e:	b007      	add	sp, #28
 800b540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b544 <_localeconv_r>:
 800b544:	4800      	ldr	r0, [pc, #0]	; (800b548 <_localeconv_r+0x4>)
 800b546:	4770      	bx	lr
 800b548:	20000168 	.word	0x20000168

0800b54c <_lseek_r>:
 800b54c:	b538      	push	{r3, r4, r5, lr}
 800b54e:	4604      	mov	r4, r0
 800b550:	4608      	mov	r0, r1
 800b552:	4611      	mov	r1, r2
 800b554:	2200      	movs	r2, #0
 800b556:	4d05      	ldr	r5, [pc, #20]	; (800b56c <_lseek_r+0x20>)
 800b558:	602a      	str	r2, [r5, #0]
 800b55a:	461a      	mov	r2, r3
 800b55c:	f7f7 fd0e 	bl	8002f7c <_lseek>
 800b560:	1c43      	adds	r3, r0, #1
 800b562:	d102      	bne.n	800b56a <_lseek_r+0x1e>
 800b564:	682b      	ldr	r3, [r5, #0]
 800b566:	b103      	cbz	r3, 800b56a <_lseek_r+0x1e>
 800b568:	6023      	str	r3, [r4, #0]
 800b56a:	bd38      	pop	{r3, r4, r5, pc}
 800b56c:	200008cc 	.word	0x200008cc

0800b570 <__ascii_mbtowc>:
 800b570:	b082      	sub	sp, #8
 800b572:	b901      	cbnz	r1, 800b576 <__ascii_mbtowc+0x6>
 800b574:	a901      	add	r1, sp, #4
 800b576:	b142      	cbz	r2, 800b58a <__ascii_mbtowc+0x1a>
 800b578:	b14b      	cbz	r3, 800b58e <__ascii_mbtowc+0x1e>
 800b57a:	7813      	ldrb	r3, [r2, #0]
 800b57c:	600b      	str	r3, [r1, #0]
 800b57e:	7812      	ldrb	r2, [r2, #0]
 800b580:	1e10      	subs	r0, r2, #0
 800b582:	bf18      	it	ne
 800b584:	2001      	movne	r0, #1
 800b586:	b002      	add	sp, #8
 800b588:	4770      	bx	lr
 800b58a:	4610      	mov	r0, r2
 800b58c:	e7fb      	b.n	800b586 <__ascii_mbtowc+0x16>
 800b58e:	f06f 0001 	mvn.w	r0, #1
 800b592:	e7f8      	b.n	800b586 <__ascii_mbtowc+0x16>

0800b594 <memchr>:
 800b594:	4603      	mov	r3, r0
 800b596:	b510      	push	{r4, lr}
 800b598:	b2c9      	uxtb	r1, r1
 800b59a:	4402      	add	r2, r0
 800b59c:	4293      	cmp	r3, r2
 800b59e:	4618      	mov	r0, r3
 800b5a0:	d101      	bne.n	800b5a6 <memchr+0x12>
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	e003      	b.n	800b5ae <memchr+0x1a>
 800b5a6:	7804      	ldrb	r4, [r0, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	428c      	cmp	r4, r1
 800b5ac:	d1f6      	bne.n	800b59c <memchr+0x8>
 800b5ae:	bd10      	pop	{r4, pc}

0800b5b0 <__malloc_lock>:
 800b5b0:	4801      	ldr	r0, [pc, #4]	; (800b5b8 <__malloc_lock+0x8>)
 800b5b2:	f7fd b8ae 	b.w	8008712 <__retarget_lock_acquire_recursive>
 800b5b6:	bf00      	nop
 800b5b8:	200008c0 	.word	0x200008c0

0800b5bc <__malloc_unlock>:
 800b5bc:	4801      	ldr	r0, [pc, #4]	; (800b5c4 <__malloc_unlock+0x8>)
 800b5be:	f7fd b8a9 	b.w	8008714 <__retarget_lock_release_recursive>
 800b5c2:	bf00      	nop
 800b5c4:	200008c0 	.word	0x200008c0

0800b5c8 <_Balloc>:
 800b5c8:	b570      	push	{r4, r5, r6, lr}
 800b5ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	460d      	mov	r5, r1
 800b5d0:	b976      	cbnz	r6, 800b5f0 <_Balloc+0x28>
 800b5d2:	2010      	movs	r0, #16
 800b5d4:	f7fd f8a0 	bl	8008718 <malloc>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	6260      	str	r0, [r4, #36]	; 0x24
 800b5dc:	b920      	cbnz	r0, 800b5e8 <_Balloc+0x20>
 800b5de:	2166      	movs	r1, #102	; 0x66
 800b5e0:	4b17      	ldr	r3, [pc, #92]	; (800b640 <_Balloc+0x78>)
 800b5e2:	4818      	ldr	r0, [pc, #96]	; (800b644 <_Balloc+0x7c>)
 800b5e4:	f000 fe52 	bl	800c28c <__assert_func>
 800b5e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5ec:	6006      	str	r6, [r0, #0]
 800b5ee:	60c6      	str	r6, [r0, #12]
 800b5f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b5f2:	68f3      	ldr	r3, [r6, #12]
 800b5f4:	b183      	cbz	r3, 800b618 <_Balloc+0x50>
 800b5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5fe:	b9b8      	cbnz	r0, 800b630 <_Balloc+0x68>
 800b600:	2101      	movs	r1, #1
 800b602:	fa01 f605 	lsl.w	r6, r1, r5
 800b606:	1d72      	adds	r2, r6, #5
 800b608:	4620      	mov	r0, r4
 800b60a:	0092      	lsls	r2, r2, #2
 800b60c:	f000 fc94 	bl	800bf38 <_calloc_r>
 800b610:	b160      	cbz	r0, 800b62c <_Balloc+0x64>
 800b612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b616:	e00e      	b.n	800b636 <_Balloc+0x6e>
 800b618:	2221      	movs	r2, #33	; 0x21
 800b61a:	2104      	movs	r1, #4
 800b61c:	4620      	mov	r0, r4
 800b61e:	f000 fc8b 	bl	800bf38 <_calloc_r>
 800b622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b624:	60f0      	str	r0, [r6, #12]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1e4      	bne.n	800b5f6 <_Balloc+0x2e>
 800b62c:	2000      	movs	r0, #0
 800b62e:	bd70      	pop	{r4, r5, r6, pc}
 800b630:	6802      	ldr	r2, [r0, #0]
 800b632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b636:	2300      	movs	r3, #0
 800b638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b63c:	e7f7      	b.n	800b62e <_Balloc+0x66>
 800b63e:	bf00      	nop
 800b640:	0800da45 	.word	0x0800da45
 800b644:	0800db44 	.word	0x0800db44

0800b648 <_Bfree>:
 800b648:	b570      	push	{r4, r5, r6, lr}
 800b64a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b64c:	4605      	mov	r5, r0
 800b64e:	460c      	mov	r4, r1
 800b650:	b976      	cbnz	r6, 800b670 <_Bfree+0x28>
 800b652:	2010      	movs	r0, #16
 800b654:	f7fd f860 	bl	8008718 <malloc>
 800b658:	4602      	mov	r2, r0
 800b65a:	6268      	str	r0, [r5, #36]	; 0x24
 800b65c:	b920      	cbnz	r0, 800b668 <_Bfree+0x20>
 800b65e:	218a      	movs	r1, #138	; 0x8a
 800b660:	4b08      	ldr	r3, [pc, #32]	; (800b684 <_Bfree+0x3c>)
 800b662:	4809      	ldr	r0, [pc, #36]	; (800b688 <_Bfree+0x40>)
 800b664:	f000 fe12 	bl	800c28c <__assert_func>
 800b668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b66c:	6006      	str	r6, [r0, #0]
 800b66e:	60c6      	str	r6, [r0, #12]
 800b670:	b13c      	cbz	r4, 800b682 <_Bfree+0x3a>
 800b672:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b674:	6862      	ldr	r2, [r4, #4]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b67c:	6021      	str	r1, [r4, #0]
 800b67e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b682:	bd70      	pop	{r4, r5, r6, pc}
 800b684:	0800da45 	.word	0x0800da45
 800b688:	0800db44 	.word	0x0800db44

0800b68c <__multadd>:
 800b68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b690:	4607      	mov	r7, r0
 800b692:	460c      	mov	r4, r1
 800b694:	461e      	mov	r6, r3
 800b696:	2000      	movs	r0, #0
 800b698:	690d      	ldr	r5, [r1, #16]
 800b69a:	f101 0c14 	add.w	ip, r1, #20
 800b69e:	f8dc 3000 	ldr.w	r3, [ip]
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	b299      	uxth	r1, r3
 800b6a6:	fb02 6101 	mla	r1, r2, r1, r6
 800b6aa:	0c1e      	lsrs	r6, r3, #16
 800b6ac:	0c0b      	lsrs	r3, r1, #16
 800b6ae:	fb02 3306 	mla	r3, r2, r6, r3
 800b6b2:	b289      	uxth	r1, r1
 800b6b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b6b8:	4285      	cmp	r5, r0
 800b6ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b6be:	f84c 1b04 	str.w	r1, [ip], #4
 800b6c2:	dcec      	bgt.n	800b69e <__multadd+0x12>
 800b6c4:	b30e      	cbz	r6, 800b70a <__multadd+0x7e>
 800b6c6:	68a3      	ldr	r3, [r4, #8]
 800b6c8:	42ab      	cmp	r3, r5
 800b6ca:	dc19      	bgt.n	800b700 <__multadd+0x74>
 800b6cc:	6861      	ldr	r1, [r4, #4]
 800b6ce:	4638      	mov	r0, r7
 800b6d0:	3101      	adds	r1, #1
 800b6d2:	f7ff ff79 	bl	800b5c8 <_Balloc>
 800b6d6:	4680      	mov	r8, r0
 800b6d8:	b928      	cbnz	r0, 800b6e6 <__multadd+0x5a>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	21b5      	movs	r1, #181	; 0xb5
 800b6de:	4b0c      	ldr	r3, [pc, #48]	; (800b710 <__multadd+0x84>)
 800b6e0:	480c      	ldr	r0, [pc, #48]	; (800b714 <__multadd+0x88>)
 800b6e2:	f000 fdd3 	bl	800c28c <__assert_func>
 800b6e6:	6922      	ldr	r2, [r4, #16]
 800b6e8:	f104 010c 	add.w	r1, r4, #12
 800b6ec:	3202      	adds	r2, #2
 800b6ee:	0092      	lsls	r2, r2, #2
 800b6f0:	300c      	adds	r0, #12
 800b6f2:	f7fd f821 	bl	8008738 <memcpy>
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4638      	mov	r0, r7
 800b6fa:	f7ff ffa5 	bl	800b648 <_Bfree>
 800b6fe:	4644      	mov	r4, r8
 800b700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b704:	3501      	adds	r5, #1
 800b706:	615e      	str	r6, [r3, #20]
 800b708:	6125      	str	r5, [r4, #16]
 800b70a:	4620      	mov	r0, r4
 800b70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b710:	0800dab7 	.word	0x0800dab7
 800b714:	0800db44 	.word	0x0800db44

0800b718 <__s2b>:
 800b718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b71c:	4615      	mov	r5, r2
 800b71e:	2209      	movs	r2, #9
 800b720:	461f      	mov	r7, r3
 800b722:	3308      	adds	r3, #8
 800b724:	460c      	mov	r4, r1
 800b726:	fb93 f3f2 	sdiv	r3, r3, r2
 800b72a:	4606      	mov	r6, r0
 800b72c:	2201      	movs	r2, #1
 800b72e:	2100      	movs	r1, #0
 800b730:	429a      	cmp	r2, r3
 800b732:	db09      	blt.n	800b748 <__s2b+0x30>
 800b734:	4630      	mov	r0, r6
 800b736:	f7ff ff47 	bl	800b5c8 <_Balloc>
 800b73a:	b940      	cbnz	r0, 800b74e <__s2b+0x36>
 800b73c:	4602      	mov	r2, r0
 800b73e:	21ce      	movs	r1, #206	; 0xce
 800b740:	4b18      	ldr	r3, [pc, #96]	; (800b7a4 <__s2b+0x8c>)
 800b742:	4819      	ldr	r0, [pc, #100]	; (800b7a8 <__s2b+0x90>)
 800b744:	f000 fda2 	bl	800c28c <__assert_func>
 800b748:	0052      	lsls	r2, r2, #1
 800b74a:	3101      	adds	r1, #1
 800b74c:	e7f0      	b.n	800b730 <__s2b+0x18>
 800b74e:	9b08      	ldr	r3, [sp, #32]
 800b750:	2d09      	cmp	r5, #9
 800b752:	6143      	str	r3, [r0, #20]
 800b754:	f04f 0301 	mov.w	r3, #1
 800b758:	6103      	str	r3, [r0, #16]
 800b75a:	dd16      	ble.n	800b78a <__s2b+0x72>
 800b75c:	f104 0909 	add.w	r9, r4, #9
 800b760:	46c8      	mov	r8, r9
 800b762:	442c      	add	r4, r5
 800b764:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b768:	4601      	mov	r1, r0
 800b76a:	220a      	movs	r2, #10
 800b76c:	4630      	mov	r0, r6
 800b76e:	3b30      	subs	r3, #48	; 0x30
 800b770:	f7ff ff8c 	bl	800b68c <__multadd>
 800b774:	45a0      	cmp	r8, r4
 800b776:	d1f5      	bne.n	800b764 <__s2b+0x4c>
 800b778:	f1a5 0408 	sub.w	r4, r5, #8
 800b77c:	444c      	add	r4, r9
 800b77e:	1b2d      	subs	r5, r5, r4
 800b780:	1963      	adds	r3, r4, r5
 800b782:	42bb      	cmp	r3, r7
 800b784:	db04      	blt.n	800b790 <__s2b+0x78>
 800b786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b78a:	2509      	movs	r5, #9
 800b78c:	340a      	adds	r4, #10
 800b78e:	e7f6      	b.n	800b77e <__s2b+0x66>
 800b790:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b794:	4601      	mov	r1, r0
 800b796:	220a      	movs	r2, #10
 800b798:	4630      	mov	r0, r6
 800b79a:	3b30      	subs	r3, #48	; 0x30
 800b79c:	f7ff ff76 	bl	800b68c <__multadd>
 800b7a0:	e7ee      	b.n	800b780 <__s2b+0x68>
 800b7a2:	bf00      	nop
 800b7a4:	0800dab7 	.word	0x0800dab7
 800b7a8:	0800db44 	.word	0x0800db44

0800b7ac <__hi0bits>:
 800b7ac:	0c02      	lsrs	r2, r0, #16
 800b7ae:	0412      	lsls	r2, r2, #16
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	b9ca      	cbnz	r2, 800b7e8 <__hi0bits+0x3c>
 800b7b4:	0403      	lsls	r3, r0, #16
 800b7b6:	2010      	movs	r0, #16
 800b7b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b7bc:	bf04      	itt	eq
 800b7be:	021b      	lsleq	r3, r3, #8
 800b7c0:	3008      	addeq	r0, #8
 800b7c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b7c6:	bf04      	itt	eq
 800b7c8:	011b      	lsleq	r3, r3, #4
 800b7ca:	3004      	addeq	r0, #4
 800b7cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b7d0:	bf04      	itt	eq
 800b7d2:	009b      	lsleq	r3, r3, #2
 800b7d4:	3002      	addeq	r0, #2
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	db05      	blt.n	800b7e6 <__hi0bits+0x3a>
 800b7da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b7de:	f100 0001 	add.w	r0, r0, #1
 800b7e2:	bf08      	it	eq
 800b7e4:	2020      	moveq	r0, #32
 800b7e6:	4770      	bx	lr
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	e7e5      	b.n	800b7b8 <__hi0bits+0xc>

0800b7ec <__lo0bits>:
 800b7ec:	6803      	ldr	r3, [r0, #0]
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	f013 0007 	ands.w	r0, r3, #7
 800b7f4:	d00b      	beq.n	800b80e <__lo0bits+0x22>
 800b7f6:	07d9      	lsls	r1, r3, #31
 800b7f8:	d421      	bmi.n	800b83e <__lo0bits+0x52>
 800b7fa:	0798      	lsls	r0, r3, #30
 800b7fc:	bf49      	itett	mi
 800b7fe:	085b      	lsrmi	r3, r3, #1
 800b800:	089b      	lsrpl	r3, r3, #2
 800b802:	2001      	movmi	r0, #1
 800b804:	6013      	strmi	r3, [r2, #0]
 800b806:	bf5c      	itt	pl
 800b808:	2002      	movpl	r0, #2
 800b80a:	6013      	strpl	r3, [r2, #0]
 800b80c:	4770      	bx	lr
 800b80e:	b299      	uxth	r1, r3
 800b810:	b909      	cbnz	r1, 800b816 <__lo0bits+0x2a>
 800b812:	2010      	movs	r0, #16
 800b814:	0c1b      	lsrs	r3, r3, #16
 800b816:	b2d9      	uxtb	r1, r3
 800b818:	b909      	cbnz	r1, 800b81e <__lo0bits+0x32>
 800b81a:	3008      	adds	r0, #8
 800b81c:	0a1b      	lsrs	r3, r3, #8
 800b81e:	0719      	lsls	r1, r3, #28
 800b820:	bf04      	itt	eq
 800b822:	091b      	lsreq	r3, r3, #4
 800b824:	3004      	addeq	r0, #4
 800b826:	0799      	lsls	r1, r3, #30
 800b828:	bf04      	itt	eq
 800b82a:	089b      	lsreq	r3, r3, #2
 800b82c:	3002      	addeq	r0, #2
 800b82e:	07d9      	lsls	r1, r3, #31
 800b830:	d403      	bmi.n	800b83a <__lo0bits+0x4e>
 800b832:	085b      	lsrs	r3, r3, #1
 800b834:	f100 0001 	add.w	r0, r0, #1
 800b838:	d003      	beq.n	800b842 <__lo0bits+0x56>
 800b83a:	6013      	str	r3, [r2, #0]
 800b83c:	4770      	bx	lr
 800b83e:	2000      	movs	r0, #0
 800b840:	4770      	bx	lr
 800b842:	2020      	movs	r0, #32
 800b844:	4770      	bx	lr
	...

0800b848 <__i2b>:
 800b848:	b510      	push	{r4, lr}
 800b84a:	460c      	mov	r4, r1
 800b84c:	2101      	movs	r1, #1
 800b84e:	f7ff febb 	bl	800b5c8 <_Balloc>
 800b852:	4602      	mov	r2, r0
 800b854:	b928      	cbnz	r0, 800b862 <__i2b+0x1a>
 800b856:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b85a:	4b04      	ldr	r3, [pc, #16]	; (800b86c <__i2b+0x24>)
 800b85c:	4804      	ldr	r0, [pc, #16]	; (800b870 <__i2b+0x28>)
 800b85e:	f000 fd15 	bl	800c28c <__assert_func>
 800b862:	2301      	movs	r3, #1
 800b864:	6144      	str	r4, [r0, #20]
 800b866:	6103      	str	r3, [r0, #16]
 800b868:	bd10      	pop	{r4, pc}
 800b86a:	bf00      	nop
 800b86c:	0800dab7 	.word	0x0800dab7
 800b870:	0800db44 	.word	0x0800db44

0800b874 <__multiply>:
 800b874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b878:	4691      	mov	r9, r2
 800b87a:	690a      	ldr	r2, [r1, #16]
 800b87c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b880:	460c      	mov	r4, r1
 800b882:	429a      	cmp	r2, r3
 800b884:	bfbe      	ittt	lt
 800b886:	460b      	movlt	r3, r1
 800b888:	464c      	movlt	r4, r9
 800b88a:	4699      	movlt	r9, r3
 800b88c:	6927      	ldr	r7, [r4, #16]
 800b88e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b892:	68a3      	ldr	r3, [r4, #8]
 800b894:	6861      	ldr	r1, [r4, #4]
 800b896:	eb07 060a 	add.w	r6, r7, sl
 800b89a:	42b3      	cmp	r3, r6
 800b89c:	b085      	sub	sp, #20
 800b89e:	bfb8      	it	lt
 800b8a0:	3101      	addlt	r1, #1
 800b8a2:	f7ff fe91 	bl	800b5c8 <_Balloc>
 800b8a6:	b930      	cbnz	r0, 800b8b6 <__multiply+0x42>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	f240 115d 	movw	r1, #349	; 0x15d
 800b8ae:	4b43      	ldr	r3, [pc, #268]	; (800b9bc <__multiply+0x148>)
 800b8b0:	4843      	ldr	r0, [pc, #268]	; (800b9c0 <__multiply+0x14c>)
 800b8b2:	f000 fceb 	bl	800c28c <__assert_func>
 800b8b6:	f100 0514 	add.w	r5, r0, #20
 800b8ba:	462b      	mov	r3, r5
 800b8bc:	2200      	movs	r2, #0
 800b8be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b8c2:	4543      	cmp	r3, r8
 800b8c4:	d321      	bcc.n	800b90a <__multiply+0x96>
 800b8c6:	f104 0314 	add.w	r3, r4, #20
 800b8ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b8ce:	f109 0314 	add.w	r3, r9, #20
 800b8d2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b8d6:	9202      	str	r2, [sp, #8]
 800b8d8:	1b3a      	subs	r2, r7, r4
 800b8da:	3a15      	subs	r2, #21
 800b8dc:	f022 0203 	bic.w	r2, r2, #3
 800b8e0:	3204      	adds	r2, #4
 800b8e2:	f104 0115 	add.w	r1, r4, #21
 800b8e6:	428f      	cmp	r7, r1
 800b8e8:	bf38      	it	cc
 800b8ea:	2204      	movcc	r2, #4
 800b8ec:	9201      	str	r2, [sp, #4]
 800b8ee:	9a02      	ldr	r2, [sp, #8]
 800b8f0:	9303      	str	r3, [sp, #12]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d80c      	bhi.n	800b910 <__multiply+0x9c>
 800b8f6:	2e00      	cmp	r6, #0
 800b8f8:	dd03      	ble.n	800b902 <__multiply+0x8e>
 800b8fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d059      	beq.n	800b9b6 <__multiply+0x142>
 800b902:	6106      	str	r6, [r0, #16]
 800b904:	b005      	add	sp, #20
 800b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90a:	f843 2b04 	str.w	r2, [r3], #4
 800b90e:	e7d8      	b.n	800b8c2 <__multiply+0x4e>
 800b910:	f8b3 a000 	ldrh.w	sl, [r3]
 800b914:	f1ba 0f00 	cmp.w	sl, #0
 800b918:	d023      	beq.n	800b962 <__multiply+0xee>
 800b91a:	46a9      	mov	r9, r5
 800b91c:	f04f 0c00 	mov.w	ip, #0
 800b920:	f104 0e14 	add.w	lr, r4, #20
 800b924:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b928:	f8d9 1000 	ldr.w	r1, [r9]
 800b92c:	fa1f fb82 	uxth.w	fp, r2
 800b930:	b289      	uxth	r1, r1
 800b932:	fb0a 110b 	mla	r1, sl, fp, r1
 800b936:	4461      	add	r1, ip
 800b938:	f8d9 c000 	ldr.w	ip, [r9]
 800b93c:	0c12      	lsrs	r2, r2, #16
 800b93e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b942:	fb0a c202 	mla	r2, sl, r2, ip
 800b946:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b94a:	b289      	uxth	r1, r1
 800b94c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b950:	4577      	cmp	r7, lr
 800b952:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b956:	f849 1b04 	str.w	r1, [r9], #4
 800b95a:	d8e3      	bhi.n	800b924 <__multiply+0xb0>
 800b95c:	9a01      	ldr	r2, [sp, #4]
 800b95e:	f845 c002 	str.w	ip, [r5, r2]
 800b962:	9a03      	ldr	r2, [sp, #12]
 800b964:	3304      	adds	r3, #4
 800b966:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b96a:	f1b9 0f00 	cmp.w	r9, #0
 800b96e:	d020      	beq.n	800b9b2 <__multiply+0x13e>
 800b970:	46ae      	mov	lr, r5
 800b972:	f04f 0a00 	mov.w	sl, #0
 800b976:	6829      	ldr	r1, [r5, #0]
 800b978:	f104 0c14 	add.w	ip, r4, #20
 800b97c:	f8bc b000 	ldrh.w	fp, [ip]
 800b980:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b984:	b289      	uxth	r1, r1
 800b986:	fb09 220b 	mla	r2, r9, fp, r2
 800b98a:	4492      	add	sl, r2
 800b98c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b990:	f84e 1b04 	str.w	r1, [lr], #4
 800b994:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b998:	f8be 1000 	ldrh.w	r1, [lr]
 800b99c:	0c12      	lsrs	r2, r2, #16
 800b99e:	fb09 1102 	mla	r1, r9, r2, r1
 800b9a2:	4567      	cmp	r7, ip
 800b9a4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b9a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9ac:	d8e6      	bhi.n	800b97c <__multiply+0x108>
 800b9ae:	9a01      	ldr	r2, [sp, #4]
 800b9b0:	50a9      	str	r1, [r5, r2]
 800b9b2:	3504      	adds	r5, #4
 800b9b4:	e79b      	b.n	800b8ee <__multiply+0x7a>
 800b9b6:	3e01      	subs	r6, #1
 800b9b8:	e79d      	b.n	800b8f6 <__multiply+0x82>
 800b9ba:	bf00      	nop
 800b9bc:	0800dab7 	.word	0x0800dab7
 800b9c0:	0800db44 	.word	0x0800db44

0800b9c4 <__pow5mult>:
 800b9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c8:	4615      	mov	r5, r2
 800b9ca:	f012 0203 	ands.w	r2, r2, #3
 800b9ce:	4606      	mov	r6, r0
 800b9d0:	460f      	mov	r7, r1
 800b9d2:	d007      	beq.n	800b9e4 <__pow5mult+0x20>
 800b9d4:	4c25      	ldr	r4, [pc, #148]	; (800ba6c <__pow5mult+0xa8>)
 800b9d6:	3a01      	subs	r2, #1
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9de:	f7ff fe55 	bl	800b68c <__multadd>
 800b9e2:	4607      	mov	r7, r0
 800b9e4:	10ad      	asrs	r5, r5, #2
 800b9e6:	d03d      	beq.n	800ba64 <__pow5mult+0xa0>
 800b9e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b9ea:	b97c      	cbnz	r4, 800ba0c <__pow5mult+0x48>
 800b9ec:	2010      	movs	r0, #16
 800b9ee:	f7fc fe93 	bl	8008718 <malloc>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	6270      	str	r0, [r6, #36]	; 0x24
 800b9f6:	b928      	cbnz	r0, 800ba04 <__pow5mult+0x40>
 800b9f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b9fc:	4b1c      	ldr	r3, [pc, #112]	; (800ba70 <__pow5mult+0xac>)
 800b9fe:	481d      	ldr	r0, [pc, #116]	; (800ba74 <__pow5mult+0xb0>)
 800ba00:	f000 fc44 	bl	800c28c <__assert_func>
 800ba04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba08:	6004      	str	r4, [r0, #0]
 800ba0a:	60c4      	str	r4, [r0, #12]
 800ba0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba14:	b94c      	cbnz	r4, 800ba2a <__pow5mult+0x66>
 800ba16:	f240 2171 	movw	r1, #625	; 0x271
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	f7ff ff14 	bl	800b848 <__i2b>
 800ba20:	2300      	movs	r3, #0
 800ba22:	4604      	mov	r4, r0
 800ba24:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba28:	6003      	str	r3, [r0, #0]
 800ba2a:	f04f 0900 	mov.w	r9, #0
 800ba2e:	07eb      	lsls	r3, r5, #31
 800ba30:	d50a      	bpl.n	800ba48 <__pow5mult+0x84>
 800ba32:	4639      	mov	r1, r7
 800ba34:	4622      	mov	r2, r4
 800ba36:	4630      	mov	r0, r6
 800ba38:	f7ff ff1c 	bl	800b874 <__multiply>
 800ba3c:	4680      	mov	r8, r0
 800ba3e:	4639      	mov	r1, r7
 800ba40:	4630      	mov	r0, r6
 800ba42:	f7ff fe01 	bl	800b648 <_Bfree>
 800ba46:	4647      	mov	r7, r8
 800ba48:	106d      	asrs	r5, r5, #1
 800ba4a:	d00b      	beq.n	800ba64 <__pow5mult+0xa0>
 800ba4c:	6820      	ldr	r0, [r4, #0]
 800ba4e:	b938      	cbnz	r0, 800ba60 <__pow5mult+0x9c>
 800ba50:	4622      	mov	r2, r4
 800ba52:	4621      	mov	r1, r4
 800ba54:	4630      	mov	r0, r6
 800ba56:	f7ff ff0d 	bl	800b874 <__multiply>
 800ba5a:	6020      	str	r0, [r4, #0]
 800ba5c:	f8c0 9000 	str.w	r9, [r0]
 800ba60:	4604      	mov	r4, r0
 800ba62:	e7e4      	b.n	800ba2e <__pow5mult+0x6a>
 800ba64:	4638      	mov	r0, r7
 800ba66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba6a:	bf00      	nop
 800ba6c:	0800dc90 	.word	0x0800dc90
 800ba70:	0800da45 	.word	0x0800da45
 800ba74:	0800db44 	.word	0x0800db44

0800ba78 <__lshift>:
 800ba78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba7c:	460c      	mov	r4, r1
 800ba7e:	4607      	mov	r7, r0
 800ba80:	4691      	mov	r9, r2
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	6849      	ldr	r1, [r1, #4]
 800ba86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba8a:	68a3      	ldr	r3, [r4, #8]
 800ba8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba90:	f108 0601 	add.w	r6, r8, #1
 800ba94:	42b3      	cmp	r3, r6
 800ba96:	db0b      	blt.n	800bab0 <__lshift+0x38>
 800ba98:	4638      	mov	r0, r7
 800ba9a:	f7ff fd95 	bl	800b5c8 <_Balloc>
 800ba9e:	4605      	mov	r5, r0
 800baa0:	b948      	cbnz	r0, 800bab6 <__lshift+0x3e>
 800baa2:	4602      	mov	r2, r0
 800baa4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800baa8:	4b29      	ldr	r3, [pc, #164]	; (800bb50 <__lshift+0xd8>)
 800baaa:	482a      	ldr	r0, [pc, #168]	; (800bb54 <__lshift+0xdc>)
 800baac:	f000 fbee 	bl	800c28c <__assert_func>
 800bab0:	3101      	adds	r1, #1
 800bab2:	005b      	lsls	r3, r3, #1
 800bab4:	e7ee      	b.n	800ba94 <__lshift+0x1c>
 800bab6:	2300      	movs	r3, #0
 800bab8:	f100 0114 	add.w	r1, r0, #20
 800babc:	f100 0210 	add.w	r2, r0, #16
 800bac0:	4618      	mov	r0, r3
 800bac2:	4553      	cmp	r3, sl
 800bac4:	db37      	blt.n	800bb36 <__lshift+0xbe>
 800bac6:	6920      	ldr	r0, [r4, #16]
 800bac8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bacc:	f104 0314 	add.w	r3, r4, #20
 800bad0:	f019 091f 	ands.w	r9, r9, #31
 800bad4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bad8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800badc:	d02f      	beq.n	800bb3e <__lshift+0xc6>
 800bade:	468a      	mov	sl, r1
 800bae0:	f04f 0c00 	mov.w	ip, #0
 800bae4:	f1c9 0e20 	rsb	lr, r9, #32
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	fa02 f209 	lsl.w	r2, r2, r9
 800baee:	ea42 020c 	orr.w	r2, r2, ip
 800baf2:	f84a 2b04 	str.w	r2, [sl], #4
 800baf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bafa:	4298      	cmp	r0, r3
 800bafc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bb00:	d8f2      	bhi.n	800bae8 <__lshift+0x70>
 800bb02:	1b03      	subs	r3, r0, r4
 800bb04:	3b15      	subs	r3, #21
 800bb06:	f023 0303 	bic.w	r3, r3, #3
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	f104 0215 	add.w	r2, r4, #21
 800bb10:	4290      	cmp	r0, r2
 800bb12:	bf38      	it	cc
 800bb14:	2304      	movcc	r3, #4
 800bb16:	f841 c003 	str.w	ip, [r1, r3]
 800bb1a:	f1bc 0f00 	cmp.w	ip, #0
 800bb1e:	d001      	beq.n	800bb24 <__lshift+0xac>
 800bb20:	f108 0602 	add.w	r6, r8, #2
 800bb24:	3e01      	subs	r6, #1
 800bb26:	4638      	mov	r0, r7
 800bb28:	4621      	mov	r1, r4
 800bb2a:	612e      	str	r6, [r5, #16]
 800bb2c:	f7ff fd8c 	bl	800b648 <_Bfree>
 800bb30:	4628      	mov	r0, r5
 800bb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb36:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	e7c1      	b.n	800bac2 <__lshift+0x4a>
 800bb3e:	3904      	subs	r1, #4
 800bb40:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb44:	4298      	cmp	r0, r3
 800bb46:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb4a:	d8f9      	bhi.n	800bb40 <__lshift+0xc8>
 800bb4c:	e7ea      	b.n	800bb24 <__lshift+0xac>
 800bb4e:	bf00      	nop
 800bb50:	0800dab7 	.word	0x0800dab7
 800bb54:	0800db44 	.word	0x0800db44

0800bb58 <__mcmp>:
 800bb58:	4603      	mov	r3, r0
 800bb5a:	690a      	ldr	r2, [r1, #16]
 800bb5c:	6900      	ldr	r0, [r0, #16]
 800bb5e:	b530      	push	{r4, r5, lr}
 800bb60:	1a80      	subs	r0, r0, r2
 800bb62:	d10d      	bne.n	800bb80 <__mcmp+0x28>
 800bb64:	3314      	adds	r3, #20
 800bb66:	3114      	adds	r1, #20
 800bb68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bb6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bb70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb78:	4295      	cmp	r5, r2
 800bb7a:	d002      	beq.n	800bb82 <__mcmp+0x2a>
 800bb7c:	d304      	bcc.n	800bb88 <__mcmp+0x30>
 800bb7e:	2001      	movs	r0, #1
 800bb80:	bd30      	pop	{r4, r5, pc}
 800bb82:	42a3      	cmp	r3, r4
 800bb84:	d3f4      	bcc.n	800bb70 <__mcmp+0x18>
 800bb86:	e7fb      	b.n	800bb80 <__mcmp+0x28>
 800bb88:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8c:	e7f8      	b.n	800bb80 <__mcmp+0x28>
	...

0800bb90 <__mdiff>:
 800bb90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	460d      	mov	r5, r1
 800bb96:	4607      	mov	r7, r0
 800bb98:	4611      	mov	r1, r2
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	4614      	mov	r4, r2
 800bb9e:	f7ff ffdb 	bl	800bb58 <__mcmp>
 800bba2:	1e06      	subs	r6, r0, #0
 800bba4:	d111      	bne.n	800bbca <__mdiff+0x3a>
 800bba6:	4631      	mov	r1, r6
 800bba8:	4638      	mov	r0, r7
 800bbaa:	f7ff fd0d 	bl	800b5c8 <_Balloc>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	b928      	cbnz	r0, 800bbbe <__mdiff+0x2e>
 800bbb2:	f240 2132 	movw	r1, #562	; 0x232
 800bbb6:	4b3a      	ldr	r3, [pc, #232]	; (800bca0 <__mdiff+0x110>)
 800bbb8:	483a      	ldr	r0, [pc, #232]	; (800bca4 <__mdiff+0x114>)
 800bbba:	f000 fb67 	bl	800c28c <__assert_func>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbca:	bfa4      	itt	ge
 800bbcc:	4623      	movge	r3, r4
 800bbce:	462c      	movge	r4, r5
 800bbd0:	4638      	mov	r0, r7
 800bbd2:	6861      	ldr	r1, [r4, #4]
 800bbd4:	bfa6      	itte	ge
 800bbd6:	461d      	movge	r5, r3
 800bbd8:	2600      	movge	r6, #0
 800bbda:	2601      	movlt	r6, #1
 800bbdc:	f7ff fcf4 	bl	800b5c8 <_Balloc>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	b918      	cbnz	r0, 800bbec <__mdiff+0x5c>
 800bbe4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bbe8:	4b2d      	ldr	r3, [pc, #180]	; (800bca0 <__mdiff+0x110>)
 800bbea:	e7e5      	b.n	800bbb8 <__mdiff+0x28>
 800bbec:	f102 0814 	add.w	r8, r2, #20
 800bbf0:	46c2      	mov	sl, r8
 800bbf2:	f04f 0c00 	mov.w	ip, #0
 800bbf6:	6927      	ldr	r7, [r4, #16]
 800bbf8:	60c6      	str	r6, [r0, #12]
 800bbfa:	692e      	ldr	r6, [r5, #16]
 800bbfc:	f104 0014 	add.w	r0, r4, #20
 800bc00:	f105 0914 	add.w	r9, r5, #20
 800bc04:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800bc08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc0c:	3410      	adds	r4, #16
 800bc0e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800bc12:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc16:	fa1f f18b 	uxth.w	r1, fp
 800bc1a:	448c      	add	ip, r1
 800bc1c:	b299      	uxth	r1, r3
 800bc1e:	0c1b      	lsrs	r3, r3, #16
 800bc20:	ebac 0101 	sub.w	r1, ip, r1
 800bc24:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc28:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bc2c:	b289      	uxth	r1, r1
 800bc2e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bc32:	454e      	cmp	r6, r9
 800bc34:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bc38:	f84a 3b04 	str.w	r3, [sl], #4
 800bc3c:	d8e7      	bhi.n	800bc0e <__mdiff+0x7e>
 800bc3e:	1b73      	subs	r3, r6, r5
 800bc40:	3b15      	subs	r3, #21
 800bc42:	f023 0303 	bic.w	r3, r3, #3
 800bc46:	3515      	adds	r5, #21
 800bc48:	3304      	adds	r3, #4
 800bc4a:	42ae      	cmp	r6, r5
 800bc4c:	bf38      	it	cc
 800bc4e:	2304      	movcc	r3, #4
 800bc50:	4418      	add	r0, r3
 800bc52:	4443      	add	r3, r8
 800bc54:	461e      	mov	r6, r3
 800bc56:	4605      	mov	r5, r0
 800bc58:	4575      	cmp	r5, lr
 800bc5a:	d30e      	bcc.n	800bc7a <__mdiff+0xea>
 800bc5c:	f10e 0103 	add.w	r1, lr, #3
 800bc60:	1a09      	subs	r1, r1, r0
 800bc62:	f021 0103 	bic.w	r1, r1, #3
 800bc66:	3803      	subs	r0, #3
 800bc68:	4586      	cmp	lr, r0
 800bc6a:	bf38      	it	cc
 800bc6c:	2100      	movcc	r1, #0
 800bc6e:	4419      	add	r1, r3
 800bc70:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bc74:	b18b      	cbz	r3, 800bc9a <__mdiff+0x10a>
 800bc76:	6117      	str	r7, [r2, #16]
 800bc78:	e7a4      	b.n	800bbc4 <__mdiff+0x34>
 800bc7a:	f855 8b04 	ldr.w	r8, [r5], #4
 800bc7e:	fa1f f188 	uxth.w	r1, r8
 800bc82:	4461      	add	r1, ip
 800bc84:	140c      	asrs	r4, r1, #16
 800bc86:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc8a:	b289      	uxth	r1, r1
 800bc8c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bc90:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800bc94:	f846 1b04 	str.w	r1, [r6], #4
 800bc98:	e7de      	b.n	800bc58 <__mdiff+0xc8>
 800bc9a:	3f01      	subs	r7, #1
 800bc9c:	e7e8      	b.n	800bc70 <__mdiff+0xe0>
 800bc9e:	bf00      	nop
 800bca0:	0800dab7 	.word	0x0800dab7
 800bca4:	0800db44 	.word	0x0800db44

0800bca8 <__ulp>:
 800bca8:	4b11      	ldr	r3, [pc, #68]	; (800bcf0 <__ulp+0x48>)
 800bcaa:	400b      	ands	r3, r1
 800bcac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	dd02      	ble.n	800bcba <__ulp+0x12>
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	4770      	bx	lr
 800bcba:	425b      	negs	r3, r3
 800bcbc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bcc0:	f04f 0000 	mov.w	r0, #0
 800bcc4:	f04f 0100 	mov.w	r1, #0
 800bcc8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bccc:	da04      	bge.n	800bcd8 <__ulp+0x30>
 800bcce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bcd2:	fa43 f102 	asr.w	r1, r3, r2
 800bcd6:	4770      	bx	lr
 800bcd8:	f1a2 0314 	sub.w	r3, r2, #20
 800bcdc:	2b1e      	cmp	r3, #30
 800bcde:	bfd6      	itet	le
 800bce0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bce4:	2301      	movgt	r3, #1
 800bce6:	fa22 f303 	lsrle.w	r3, r2, r3
 800bcea:	4618      	mov	r0, r3
 800bcec:	4770      	bx	lr
 800bcee:	bf00      	nop
 800bcf0:	7ff00000 	.word	0x7ff00000

0800bcf4 <__b2d>:
 800bcf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcf8:	6907      	ldr	r7, [r0, #16]
 800bcfa:	f100 0914 	add.w	r9, r0, #20
 800bcfe:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800bd02:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800bd06:	f1a7 0804 	sub.w	r8, r7, #4
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	f7ff fd4e 	bl	800b7ac <__hi0bits>
 800bd10:	f1c0 0320 	rsb	r3, r0, #32
 800bd14:	280a      	cmp	r0, #10
 800bd16:	600b      	str	r3, [r1, #0]
 800bd18:	491f      	ldr	r1, [pc, #124]	; (800bd98 <__b2d+0xa4>)
 800bd1a:	dc17      	bgt.n	800bd4c <__b2d+0x58>
 800bd1c:	45c1      	cmp	r9, r8
 800bd1e:	bf28      	it	cs
 800bd20:	2200      	movcs	r2, #0
 800bd22:	f1c0 0c0b 	rsb	ip, r0, #11
 800bd26:	fa26 f30c 	lsr.w	r3, r6, ip
 800bd2a:	bf38      	it	cc
 800bd2c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bd30:	ea43 0501 	orr.w	r5, r3, r1
 800bd34:	f100 0315 	add.w	r3, r0, #21
 800bd38:	fa06 f303 	lsl.w	r3, r6, r3
 800bd3c:	fa22 f20c 	lsr.w	r2, r2, ip
 800bd40:	ea43 0402 	orr.w	r4, r3, r2
 800bd44:	4620      	mov	r0, r4
 800bd46:	4629      	mov	r1, r5
 800bd48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd4c:	45c1      	cmp	r9, r8
 800bd4e:	bf2e      	itee	cs
 800bd50:	2200      	movcs	r2, #0
 800bd52:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bd56:	f1a7 0808 	subcc.w	r8, r7, #8
 800bd5a:	f1b0 030b 	subs.w	r3, r0, #11
 800bd5e:	d016      	beq.n	800bd8e <__b2d+0x9a>
 800bd60:	f1c3 0720 	rsb	r7, r3, #32
 800bd64:	fa22 f107 	lsr.w	r1, r2, r7
 800bd68:	45c8      	cmp	r8, r9
 800bd6a:	fa06 f603 	lsl.w	r6, r6, r3
 800bd6e:	ea46 0601 	orr.w	r6, r6, r1
 800bd72:	bf94      	ite	ls
 800bd74:	2100      	movls	r1, #0
 800bd76:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800bd7a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800bd7e:	fa02 f003 	lsl.w	r0, r2, r3
 800bd82:	40f9      	lsrs	r1, r7
 800bd84:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bd88:	ea40 0401 	orr.w	r4, r0, r1
 800bd8c:	e7da      	b.n	800bd44 <__b2d+0x50>
 800bd8e:	4614      	mov	r4, r2
 800bd90:	ea46 0501 	orr.w	r5, r6, r1
 800bd94:	e7d6      	b.n	800bd44 <__b2d+0x50>
 800bd96:	bf00      	nop
 800bd98:	3ff00000 	.word	0x3ff00000

0800bd9c <__d2b>:
 800bd9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bda0:	2101      	movs	r1, #1
 800bda2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bda6:	4690      	mov	r8, r2
 800bda8:	461d      	mov	r5, r3
 800bdaa:	f7ff fc0d 	bl	800b5c8 <_Balloc>
 800bdae:	4604      	mov	r4, r0
 800bdb0:	b930      	cbnz	r0, 800bdc0 <__d2b+0x24>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	f240 310a 	movw	r1, #778	; 0x30a
 800bdb8:	4b24      	ldr	r3, [pc, #144]	; (800be4c <__d2b+0xb0>)
 800bdba:	4825      	ldr	r0, [pc, #148]	; (800be50 <__d2b+0xb4>)
 800bdbc:	f000 fa66 	bl	800c28c <__assert_func>
 800bdc0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bdc4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bdc8:	bb2d      	cbnz	r5, 800be16 <__d2b+0x7a>
 800bdca:	9301      	str	r3, [sp, #4]
 800bdcc:	f1b8 0300 	subs.w	r3, r8, #0
 800bdd0:	d026      	beq.n	800be20 <__d2b+0x84>
 800bdd2:	4668      	mov	r0, sp
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	f7ff fd09 	bl	800b7ec <__lo0bits>
 800bdda:	9900      	ldr	r1, [sp, #0]
 800bddc:	b1f0      	cbz	r0, 800be1c <__d2b+0x80>
 800bdde:	9a01      	ldr	r2, [sp, #4]
 800bde0:	f1c0 0320 	rsb	r3, r0, #32
 800bde4:	fa02 f303 	lsl.w	r3, r2, r3
 800bde8:	430b      	orrs	r3, r1
 800bdea:	40c2      	lsrs	r2, r0
 800bdec:	6163      	str	r3, [r4, #20]
 800bdee:	9201      	str	r2, [sp, #4]
 800bdf0:	9b01      	ldr	r3, [sp, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	bf14      	ite	ne
 800bdf6:	2102      	movne	r1, #2
 800bdf8:	2101      	moveq	r1, #1
 800bdfa:	61a3      	str	r3, [r4, #24]
 800bdfc:	6121      	str	r1, [r4, #16]
 800bdfe:	b1c5      	cbz	r5, 800be32 <__d2b+0x96>
 800be00:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be04:	4405      	add	r5, r0
 800be06:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be0a:	603d      	str	r5, [r7, #0]
 800be0c:	6030      	str	r0, [r6, #0]
 800be0e:	4620      	mov	r0, r4
 800be10:	b002      	add	sp, #8
 800be12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be1a:	e7d6      	b.n	800bdca <__d2b+0x2e>
 800be1c:	6161      	str	r1, [r4, #20]
 800be1e:	e7e7      	b.n	800bdf0 <__d2b+0x54>
 800be20:	a801      	add	r0, sp, #4
 800be22:	f7ff fce3 	bl	800b7ec <__lo0bits>
 800be26:	2101      	movs	r1, #1
 800be28:	9b01      	ldr	r3, [sp, #4]
 800be2a:	6121      	str	r1, [r4, #16]
 800be2c:	6163      	str	r3, [r4, #20]
 800be2e:	3020      	adds	r0, #32
 800be30:	e7e5      	b.n	800bdfe <__d2b+0x62>
 800be32:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800be36:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be3a:	6038      	str	r0, [r7, #0]
 800be3c:	6918      	ldr	r0, [r3, #16]
 800be3e:	f7ff fcb5 	bl	800b7ac <__hi0bits>
 800be42:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800be46:	6031      	str	r1, [r6, #0]
 800be48:	e7e1      	b.n	800be0e <__d2b+0x72>
 800be4a:	bf00      	nop
 800be4c:	0800dab7 	.word	0x0800dab7
 800be50:	0800db44 	.word	0x0800db44

0800be54 <__ratio>:
 800be54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be58:	4688      	mov	r8, r1
 800be5a:	4669      	mov	r1, sp
 800be5c:	4681      	mov	r9, r0
 800be5e:	f7ff ff49 	bl	800bcf4 <__b2d>
 800be62:	460f      	mov	r7, r1
 800be64:	4604      	mov	r4, r0
 800be66:	460d      	mov	r5, r1
 800be68:	4640      	mov	r0, r8
 800be6a:	a901      	add	r1, sp, #4
 800be6c:	f7ff ff42 	bl	800bcf4 <__b2d>
 800be70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be74:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800be78:	468b      	mov	fp, r1
 800be7a:	eba3 0c02 	sub.w	ip, r3, r2
 800be7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be82:	1a9b      	subs	r3, r3, r2
 800be84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be88:	2b00      	cmp	r3, #0
 800be8a:	bfd5      	itete	le
 800be8c:	460a      	movle	r2, r1
 800be8e:	462a      	movgt	r2, r5
 800be90:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be94:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be98:	bfd8      	it	le
 800be9a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be9e:	465b      	mov	r3, fp
 800bea0:	4602      	mov	r2, r0
 800bea2:	4639      	mov	r1, r7
 800bea4:	4620      	mov	r0, r4
 800bea6:	f7f4 fd65 	bl	8000974 <__aeabi_ddiv>
 800beaa:	b003      	add	sp, #12
 800beac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800beb0 <__copybits>:
 800beb0:	3901      	subs	r1, #1
 800beb2:	b570      	push	{r4, r5, r6, lr}
 800beb4:	1149      	asrs	r1, r1, #5
 800beb6:	6914      	ldr	r4, [r2, #16]
 800beb8:	3101      	adds	r1, #1
 800beba:	f102 0314 	add.w	r3, r2, #20
 800bebe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bec2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bec6:	1f05      	subs	r5, r0, #4
 800bec8:	42a3      	cmp	r3, r4
 800beca:	d30c      	bcc.n	800bee6 <__copybits+0x36>
 800becc:	1aa3      	subs	r3, r4, r2
 800bece:	3b11      	subs	r3, #17
 800bed0:	f023 0303 	bic.w	r3, r3, #3
 800bed4:	3211      	adds	r2, #17
 800bed6:	42a2      	cmp	r2, r4
 800bed8:	bf88      	it	hi
 800beda:	2300      	movhi	r3, #0
 800bedc:	4418      	add	r0, r3
 800bede:	2300      	movs	r3, #0
 800bee0:	4288      	cmp	r0, r1
 800bee2:	d305      	bcc.n	800bef0 <__copybits+0x40>
 800bee4:	bd70      	pop	{r4, r5, r6, pc}
 800bee6:	f853 6b04 	ldr.w	r6, [r3], #4
 800beea:	f845 6f04 	str.w	r6, [r5, #4]!
 800beee:	e7eb      	b.n	800bec8 <__copybits+0x18>
 800bef0:	f840 3b04 	str.w	r3, [r0], #4
 800bef4:	e7f4      	b.n	800bee0 <__copybits+0x30>

0800bef6 <__any_on>:
 800bef6:	f100 0214 	add.w	r2, r0, #20
 800befa:	6900      	ldr	r0, [r0, #16]
 800befc:	114b      	asrs	r3, r1, #5
 800befe:	4298      	cmp	r0, r3
 800bf00:	b510      	push	{r4, lr}
 800bf02:	db11      	blt.n	800bf28 <__any_on+0x32>
 800bf04:	dd0a      	ble.n	800bf1c <__any_on+0x26>
 800bf06:	f011 011f 	ands.w	r1, r1, #31
 800bf0a:	d007      	beq.n	800bf1c <__any_on+0x26>
 800bf0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bf10:	fa24 f001 	lsr.w	r0, r4, r1
 800bf14:	fa00 f101 	lsl.w	r1, r0, r1
 800bf18:	428c      	cmp	r4, r1
 800bf1a:	d10b      	bne.n	800bf34 <__any_on+0x3e>
 800bf1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d803      	bhi.n	800bf2c <__any_on+0x36>
 800bf24:	2000      	movs	r0, #0
 800bf26:	bd10      	pop	{r4, pc}
 800bf28:	4603      	mov	r3, r0
 800bf2a:	e7f7      	b.n	800bf1c <__any_on+0x26>
 800bf2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf30:	2900      	cmp	r1, #0
 800bf32:	d0f5      	beq.n	800bf20 <__any_on+0x2a>
 800bf34:	2001      	movs	r0, #1
 800bf36:	e7f6      	b.n	800bf26 <__any_on+0x30>

0800bf38 <_calloc_r>:
 800bf38:	b570      	push	{r4, r5, r6, lr}
 800bf3a:	fba1 5402 	umull	r5, r4, r1, r2
 800bf3e:	b934      	cbnz	r4, 800bf4e <_calloc_r+0x16>
 800bf40:	4629      	mov	r1, r5
 800bf42:	f7fc fc77 	bl	8008834 <_malloc_r>
 800bf46:	4606      	mov	r6, r0
 800bf48:	b928      	cbnz	r0, 800bf56 <_calloc_r+0x1e>
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	bd70      	pop	{r4, r5, r6, pc}
 800bf4e:	220c      	movs	r2, #12
 800bf50:	2600      	movs	r6, #0
 800bf52:	6002      	str	r2, [r0, #0]
 800bf54:	e7f9      	b.n	800bf4a <_calloc_r+0x12>
 800bf56:	462a      	mov	r2, r5
 800bf58:	4621      	mov	r1, r4
 800bf5a:	f7fc fbfb 	bl	8008754 <memset>
 800bf5e:	e7f4      	b.n	800bf4a <_calloc_r+0x12>

0800bf60 <__ssputs_r>:
 800bf60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf64:	688e      	ldr	r6, [r1, #8]
 800bf66:	4682      	mov	sl, r0
 800bf68:	429e      	cmp	r6, r3
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	4690      	mov	r8, r2
 800bf6e:	461f      	mov	r7, r3
 800bf70:	d838      	bhi.n	800bfe4 <__ssputs_r+0x84>
 800bf72:	898a      	ldrh	r2, [r1, #12]
 800bf74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf78:	d032      	beq.n	800bfe0 <__ssputs_r+0x80>
 800bf7a:	6825      	ldr	r5, [r4, #0]
 800bf7c:	6909      	ldr	r1, [r1, #16]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	eba5 0901 	sub.w	r9, r5, r1
 800bf84:	6965      	ldr	r5, [r4, #20]
 800bf86:	444b      	add	r3, r9
 800bf88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf90:	106d      	asrs	r5, r5, #1
 800bf92:	429d      	cmp	r5, r3
 800bf94:	bf38      	it	cc
 800bf96:	461d      	movcc	r5, r3
 800bf98:	0553      	lsls	r3, r2, #21
 800bf9a:	d531      	bpl.n	800c000 <__ssputs_r+0xa0>
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	f7fc fc49 	bl	8008834 <_malloc_r>
 800bfa2:	4606      	mov	r6, r0
 800bfa4:	b950      	cbnz	r0, 800bfbc <__ssputs_r+0x5c>
 800bfa6:	230c      	movs	r3, #12
 800bfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfac:	f8ca 3000 	str.w	r3, [sl]
 800bfb0:	89a3      	ldrh	r3, [r4, #12]
 800bfb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfb6:	81a3      	strh	r3, [r4, #12]
 800bfb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfbc:	464a      	mov	r2, r9
 800bfbe:	6921      	ldr	r1, [r4, #16]
 800bfc0:	f7fc fbba 	bl	8008738 <memcpy>
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bfca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfce:	81a3      	strh	r3, [r4, #12]
 800bfd0:	6126      	str	r6, [r4, #16]
 800bfd2:	444e      	add	r6, r9
 800bfd4:	6026      	str	r6, [r4, #0]
 800bfd6:	463e      	mov	r6, r7
 800bfd8:	6165      	str	r5, [r4, #20]
 800bfda:	eba5 0509 	sub.w	r5, r5, r9
 800bfde:	60a5      	str	r5, [r4, #8]
 800bfe0:	42be      	cmp	r6, r7
 800bfe2:	d900      	bls.n	800bfe6 <__ssputs_r+0x86>
 800bfe4:	463e      	mov	r6, r7
 800bfe6:	4632      	mov	r2, r6
 800bfe8:	4641      	mov	r1, r8
 800bfea:	6820      	ldr	r0, [r4, #0]
 800bfec:	f000 f97e 	bl	800c2ec <memmove>
 800bff0:	68a3      	ldr	r3, [r4, #8]
 800bff2:	2000      	movs	r0, #0
 800bff4:	1b9b      	subs	r3, r3, r6
 800bff6:	60a3      	str	r3, [r4, #8]
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	4433      	add	r3, r6
 800bffc:	6023      	str	r3, [r4, #0]
 800bffe:	e7db      	b.n	800bfb8 <__ssputs_r+0x58>
 800c000:	462a      	mov	r2, r5
 800c002:	f000 f98d 	bl	800c320 <_realloc_r>
 800c006:	4606      	mov	r6, r0
 800c008:	2800      	cmp	r0, #0
 800c00a:	d1e1      	bne.n	800bfd0 <__ssputs_r+0x70>
 800c00c:	4650      	mov	r0, sl
 800c00e:	6921      	ldr	r1, [r4, #16]
 800c010:	f7fc fba8 	bl	8008764 <_free_r>
 800c014:	e7c7      	b.n	800bfa6 <__ssputs_r+0x46>
	...

0800c018 <_svfiprintf_r>:
 800c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	4698      	mov	r8, r3
 800c01e:	898b      	ldrh	r3, [r1, #12]
 800c020:	4607      	mov	r7, r0
 800c022:	061b      	lsls	r3, r3, #24
 800c024:	460d      	mov	r5, r1
 800c026:	4614      	mov	r4, r2
 800c028:	b09d      	sub	sp, #116	; 0x74
 800c02a:	d50e      	bpl.n	800c04a <_svfiprintf_r+0x32>
 800c02c:	690b      	ldr	r3, [r1, #16]
 800c02e:	b963      	cbnz	r3, 800c04a <_svfiprintf_r+0x32>
 800c030:	2140      	movs	r1, #64	; 0x40
 800c032:	f7fc fbff 	bl	8008834 <_malloc_r>
 800c036:	6028      	str	r0, [r5, #0]
 800c038:	6128      	str	r0, [r5, #16]
 800c03a:	b920      	cbnz	r0, 800c046 <_svfiprintf_r+0x2e>
 800c03c:	230c      	movs	r3, #12
 800c03e:	603b      	str	r3, [r7, #0]
 800c040:	f04f 30ff 	mov.w	r0, #4294967295
 800c044:	e0d1      	b.n	800c1ea <_svfiprintf_r+0x1d2>
 800c046:	2340      	movs	r3, #64	; 0x40
 800c048:	616b      	str	r3, [r5, #20]
 800c04a:	2300      	movs	r3, #0
 800c04c:	9309      	str	r3, [sp, #36]	; 0x24
 800c04e:	2320      	movs	r3, #32
 800c050:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c054:	2330      	movs	r3, #48	; 0x30
 800c056:	f04f 0901 	mov.w	r9, #1
 800c05a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c05e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c204 <_svfiprintf_r+0x1ec>
 800c062:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c066:	4623      	mov	r3, r4
 800c068:	469a      	mov	sl, r3
 800c06a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c06e:	b10a      	cbz	r2, 800c074 <_svfiprintf_r+0x5c>
 800c070:	2a25      	cmp	r2, #37	; 0x25
 800c072:	d1f9      	bne.n	800c068 <_svfiprintf_r+0x50>
 800c074:	ebba 0b04 	subs.w	fp, sl, r4
 800c078:	d00b      	beq.n	800c092 <_svfiprintf_r+0x7a>
 800c07a:	465b      	mov	r3, fp
 800c07c:	4622      	mov	r2, r4
 800c07e:	4629      	mov	r1, r5
 800c080:	4638      	mov	r0, r7
 800c082:	f7ff ff6d 	bl	800bf60 <__ssputs_r>
 800c086:	3001      	adds	r0, #1
 800c088:	f000 80aa 	beq.w	800c1e0 <_svfiprintf_r+0x1c8>
 800c08c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c08e:	445a      	add	r2, fp
 800c090:	9209      	str	r2, [sp, #36]	; 0x24
 800c092:	f89a 3000 	ldrb.w	r3, [sl]
 800c096:	2b00      	cmp	r3, #0
 800c098:	f000 80a2 	beq.w	800c1e0 <_svfiprintf_r+0x1c8>
 800c09c:	2300      	movs	r3, #0
 800c09e:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0a6:	f10a 0a01 	add.w	sl, sl, #1
 800c0aa:	9304      	str	r3, [sp, #16]
 800c0ac:	9307      	str	r3, [sp, #28]
 800c0ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0b2:	931a      	str	r3, [sp, #104]	; 0x68
 800c0b4:	4654      	mov	r4, sl
 800c0b6:	2205      	movs	r2, #5
 800c0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0bc:	4851      	ldr	r0, [pc, #324]	; (800c204 <_svfiprintf_r+0x1ec>)
 800c0be:	f7ff fa69 	bl	800b594 <memchr>
 800c0c2:	9a04      	ldr	r2, [sp, #16]
 800c0c4:	b9d8      	cbnz	r0, 800c0fe <_svfiprintf_r+0xe6>
 800c0c6:	06d0      	lsls	r0, r2, #27
 800c0c8:	bf44      	itt	mi
 800c0ca:	2320      	movmi	r3, #32
 800c0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0d0:	0711      	lsls	r1, r2, #28
 800c0d2:	bf44      	itt	mi
 800c0d4:	232b      	movmi	r3, #43	; 0x2b
 800c0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0da:	f89a 3000 	ldrb.w	r3, [sl]
 800c0de:	2b2a      	cmp	r3, #42	; 0x2a
 800c0e0:	d015      	beq.n	800c10e <_svfiprintf_r+0xf6>
 800c0e2:	4654      	mov	r4, sl
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	f04f 0c0a 	mov.w	ip, #10
 800c0ea:	9a07      	ldr	r2, [sp, #28]
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0f2:	3b30      	subs	r3, #48	; 0x30
 800c0f4:	2b09      	cmp	r3, #9
 800c0f6:	d94e      	bls.n	800c196 <_svfiprintf_r+0x17e>
 800c0f8:	b1b0      	cbz	r0, 800c128 <_svfiprintf_r+0x110>
 800c0fa:	9207      	str	r2, [sp, #28]
 800c0fc:	e014      	b.n	800c128 <_svfiprintf_r+0x110>
 800c0fe:	eba0 0308 	sub.w	r3, r0, r8
 800c102:	fa09 f303 	lsl.w	r3, r9, r3
 800c106:	4313      	orrs	r3, r2
 800c108:	46a2      	mov	sl, r4
 800c10a:	9304      	str	r3, [sp, #16]
 800c10c:	e7d2      	b.n	800c0b4 <_svfiprintf_r+0x9c>
 800c10e:	9b03      	ldr	r3, [sp, #12]
 800c110:	1d19      	adds	r1, r3, #4
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	9103      	str	r1, [sp, #12]
 800c116:	2b00      	cmp	r3, #0
 800c118:	bfbb      	ittet	lt
 800c11a:	425b      	neglt	r3, r3
 800c11c:	f042 0202 	orrlt.w	r2, r2, #2
 800c120:	9307      	strge	r3, [sp, #28]
 800c122:	9307      	strlt	r3, [sp, #28]
 800c124:	bfb8      	it	lt
 800c126:	9204      	strlt	r2, [sp, #16]
 800c128:	7823      	ldrb	r3, [r4, #0]
 800c12a:	2b2e      	cmp	r3, #46	; 0x2e
 800c12c:	d10c      	bne.n	800c148 <_svfiprintf_r+0x130>
 800c12e:	7863      	ldrb	r3, [r4, #1]
 800c130:	2b2a      	cmp	r3, #42	; 0x2a
 800c132:	d135      	bne.n	800c1a0 <_svfiprintf_r+0x188>
 800c134:	9b03      	ldr	r3, [sp, #12]
 800c136:	3402      	adds	r4, #2
 800c138:	1d1a      	adds	r2, r3, #4
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	9203      	str	r2, [sp, #12]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	bfb8      	it	lt
 800c142:	f04f 33ff 	movlt.w	r3, #4294967295
 800c146:	9305      	str	r3, [sp, #20]
 800c148:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c208 <_svfiprintf_r+0x1f0>
 800c14c:	2203      	movs	r2, #3
 800c14e:	4650      	mov	r0, sl
 800c150:	7821      	ldrb	r1, [r4, #0]
 800c152:	f7ff fa1f 	bl	800b594 <memchr>
 800c156:	b140      	cbz	r0, 800c16a <_svfiprintf_r+0x152>
 800c158:	2340      	movs	r3, #64	; 0x40
 800c15a:	eba0 000a 	sub.w	r0, r0, sl
 800c15e:	fa03 f000 	lsl.w	r0, r3, r0
 800c162:	9b04      	ldr	r3, [sp, #16]
 800c164:	3401      	adds	r4, #1
 800c166:	4303      	orrs	r3, r0
 800c168:	9304      	str	r3, [sp, #16]
 800c16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c16e:	2206      	movs	r2, #6
 800c170:	4826      	ldr	r0, [pc, #152]	; (800c20c <_svfiprintf_r+0x1f4>)
 800c172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c176:	f7ff fa0d 	bl	800b594 <memchr>
 800c17a:	2800      	cmp	r0, #0
 800c17c:	d038      	beq.n	800c1f0 <_svfiprintf_r+0x1d8>
 800c17e:	4b24      	ldr	r3, [pc, #144]	; (800c210 <_svfiprintf_r+0x1f8>)
 800c180:	bb1b      	cbnz	r3, 800c1ca <_svfiprintf_r+0x1b2>
 800c182:	9b03      	ldr	r3, [sp, #12]
 800c184:	3307      	adds	r3, #7
 800c186:	f023 0307 	bic.w	r3, r3, #7
 800c18a:	3308      	adds	r3, #8
 800c18c:	9303      	str	r3, [sp, #12]
 800c18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c190:	4433      	add	r3, r6
 800c192:	9309      	str	r3, [sp, #36]	; 0x24
 800c194:	e767      	b.n	800c066 <_svfiprintf_r+0x4e>
 800c196:	460c      	mov	r4, r1
 800c198:	2001      	movs	r0, #1
 800c19a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c19e:	e7a5      	b.n	800c0ec <_svfiprintf_r+0xd4>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	f04f 0c0a 	mov.w	ip, #10
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	3401      	adds	r4, #1
 800c1aa:	9305      	str	r3, [sp, #20]
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1b2:	3a30      	subs	r2, #48	; 0x30
 800c1b4:	2a09      	cmp	r2, #9
 800c1b6:	d903      	bls.n	800c1c0 <_svfiprintf_r+0x1a8>
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d0c5      	beq.n	800c148 <_svfiprintf_r+0x130>
 800c1bc:	9105      	str	r1, [sp, #20]
 800c1be:	e7c3      	b.n	800c148 <_svfiprintf_r+0x130>
 800c1c0:	4604      	mov	r4, r0
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1c8:	e7f0      	b.n	800c1ac <_svfiprintf_r+0x194>
 800c1ca:	ab03      	add	r3, sp, #12
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	462a      	mov	r2, r5
 800c1d0:	4638      	mov	r0, r7
 800c1d2:	4b10      	ldr	r3, [pc, #64]	; (800c214 <_svfiprintf_r+0x1fc>)
 800c1d4:	a904      	add	r1, sp, #16
 800c1d6:	f7fc fc3f 	bl	8008a58 <_printf_float>
 800c1da:	1c42      	adds	r2, r0, #1
 800c1dc:	4606      	mov	r6, r0
 800c1de:	d1d6      	bne.n	800c18e <_svfiprintf_r+0x176>
 800c1e0:	89ab      	ldrh	r3, [r5, #12]
 800c1e2:	065b      	lsls	r3, r3, #25
 800c1e4:	f53f af2c 	bmi.w	800c040 <_svfiprintf_r+0x28>
 800c1e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1ea:	b01d      	add	sp, #116	; 0x74
 800c1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f0:	ab03      	add	r3, sp, #12
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	462a      	mov	r2, r5
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	4b06      	ldr	r3, [pc, #24]	; (800c214 <_svfiprintf_r+0x1fc>)
 800c1fa:	a904      	add	r1, sp, #16
 800c1fc:	f7fc fec8 	bl	8008f90 <_printf_i>
 800c200:	e7eb      	b.n	800c1da <_svfiprintf_r+0x1c2>
 800c202:	bf00      	nop
 800c204:	0800dc9c 	.word	0x0800dc9c
 800c208:	0800dca2 	.word	0x0800dca2
 800c20c:	0800dca6 	.word	0x0800dca6
 800c210:	08008a59 	.word	0x08008a59
 800c214:	0800bf61 	.word	0x0800bf61

0800c218 <_read_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4604      	mov	r4, r0
 800c21c:	4608      	mov	r0, r1
 800c21e:	4611      	mov	r1, r2
 800c220:	2200      	movs	r2, #0
 800c222:	4d05      	ldr	r5, [pc, #20]	; (800c238 <_read_r+0x20>)
 800c224:	602a      	str	r2, [r5, #0]
 800c226:	461a      	mov	r2, r3
 800c228:	f7f6 fe4b 	bl	8002ec2 <_read>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	d102      	bne.n	800c236 <_read_r+0x1e>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	b103      	cbz	r3, 800c236 <_read_r+0x1e>
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	200008cc 	.word	0x200008cc

0800c23c <nan>:
 800c23c:	2000      	movs	r0, #0
 800c23e:	4901      	ldr	r1, [pc, #4]	; (800c244 <nan+0x8>)
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop
 800c244:	7ff80000 	.word	0x7ff80000

0800c248 <strncmp>:
 800c248:	4603      	mov	r3, r0
 800c24a:	b510      	push	{r4, lr}
 800c24c:	b172      	cbz	r2, 800c26c <strncmp+0x24>
 800c24e:	3901      	subs	r1, #1
 800c250:	1884      	adds	r4, r0, r2
 800c252:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c256:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c25a:	4290      	cmp	r0, r2
 800c25c:	d101      	bne.n	800c262 <strncmp+0x1a>
 800c25e:	42a3      	cmp	r3, r4
 800c260:	d101      	bne.n	800c266 <strncmp+0x1e>
 800c262:	1a80      	subs	r0, r0, r2
 800c264:	bd10      	pop	{r4, pc}
 800c266:	2800      	cmp	r0, #0
 800c268:	d1f3      	bne.n	800c252 <strncmp+0xa>
 800c26a:	e7fa      	b.n	800c262 <strncmp+0x1a>
 800c26c:	4610      	mov	r0, r2
 800c26e:	e7f9      	b.n	800c264 <strncmp+0x1c>

0800c270 <__ascii_wctomb>:
 800c270:	4603      	mov	r3, r0
 800c272:	4608      	mov	r0, r1
 800c274:	b141      	cbz	r1, 800c288 <__ascii_wctomb+0x18>
 800c276:	2aff      	cmp	r2, #255	; 0xff
 800c278:	d904      	bls.n	800c284 <__ascii_wctomb+0x14>
 800c27a:	228a      	movs	r2, #138	; 0x8a
 800c27c:	f04f 30ff 	mov.w	r0, #4294967295
 800c280:	601a      	str	r2, [r3, #0]
 800c282:	4770      	bx	lr
 800c284:	2001      	movs	r0, #1
 800c286:	700a      	strb	r2, [r1, #0]
 800c288:	4770      	bx	lr
	...

0800c28c <__assert_func>:
 800c28c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c28e:	4614      	mov	r4, r2
 800c290:	461a      	mov	r2, r3
 800c292:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <__assert_func+0x2c>)
 800c294:	4605      	mov	r5, r0
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68d8      	ldr	r0, [r3, #12]
 800c29a:	b14c      	cbz	r4, 800c2b0 <__assert_func+0x24>
 800c29c:	4b07      	ldr	r3, [pc, #28]	; (800c2bc <__assert_func+0x30>)
 800c29e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2a2:	9100      	str	r1, [sp, #0]
 800c2a4:	462b      	mov	r3, r5
 800c2a6:	4906      	ldr	r1, [pc, #24]	; (800c2c0 <__assert_func+0x34>)
 800c2a8:	f000 f80e 	bl	800c2c8 <fiprintf>
 800c2ac:	f000 fa7e 	bl	800c7ac <abort>
 800c2b0:	4b04      	ldr	r3, [pc, #16]	; (800c2c4 <__assert_func+0x38>)
 800c2b2:	461c      	mov	r4, r3
 800c2b4:	e7f3      	b.n	800c29e <__assert_func+0x12>
 800c2b6:	bf00      	nop
 800c2b8:	20000010 	.word	0x20000010
 800c2bc:	0800dcad 	.word	0x0800dcad
 800c2c0:	0800dcba 	.word	0x0800dcba
 800c2c4:	0800dce8 	.word	0x0800dce8

0800c2c8 <fiprintf>:
 800c2c8:	b40e      	push	{r1, r2, r3}
 800c2ca:	b503      	push	{r0, r1, lr}
 800c2cc:	4601      	mov	r1, r0
 800c2ce:	ab03      	add	r3, sp, #12
 800c2d0:	4805      	ldr	r0, [pc, #20]	; (800c2e8 <fiprintf+0x20>)
 800c2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2d6:	6800      	ldr	r0, [r0, #0]
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	f000 f877 	bl	800c3cc <_vfiprintf_r>
 800c2de:	b002      	add	sp, #8
 800c2e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2e4:	b003      	add	sp, #12
 800c2e6:	4770      	bx	lr
 800c2e8:	20000010 	.word	0x20000010

0800c2ec <memmove>:
 800c2ec:	4288      	cmp	r0, r1
 800c2ee:	b510      	push	{r4, lr}
 800c2f0:	eb01 0402 	add.w	r4, r1, r2
 800c2f4:	d902      	bls.n	800c2fc <memmove+0x10>
 800c2f6:	4284      	cmp	r4, r0
 800c2f8:	4623      	mov	r3, r4
 800c2fa:	d807      	bhi.n	800c30c <memmove+0x20>
 800c2fc:	1e43      	subs	r3, r0, #1
 800c2fe:	42a1      	cmp	r1, r4
 800c300:	d008      	beq.n	800c314 <memmove+0x28>
 800c302:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c30a:	e7f8      	b.n	800c2fe <memmove+0x12>
 800c30c:	4601      	mov	r1, r0
 800c30e:	4402      	add	r2, r0
 800c310:	428a      	cmp	r2, r1
 800c312:	d100      	bne.n	800c316 <memmove+0x2a>
 800c314:	bd10      	pop	{r4, pc}
 800c316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c31a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c31e:	e7f7      	b.n	800c310 <memmove+0x24>

0800c320 <_realloc_r>:
 800c320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c324:	4680      	mov	r8, r0
 800c326:	4614      	mov	r4, r2
 800c328:	460e      	mov	r6, r1
 800c32a:	b921      	cbnz	r1, 800c336 <_realloc_r+0x16>
 800c32c:	4611      	mov	r1, r2
 800c32e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c332:	f7fc ba7f 	b.w	8008834 <_malloc_r>
 800c336:	b92a      	cbnz	r2, 800c344 <_realloc_r+0x24>
 800c338:	f7fc fa14 	bl	8008764 <_free_r>
 800c33c:	4625      	mov	r5, r4
 800c33e:	4628      	mov	r0, r5
 800c340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c344:	f000 fa9e 	bl	800c884 <_malloc_usable_size_r>
 800c348:	4284      	cmp	r4, r0
 800c34a:	4607      	mov	r7, r0
 800c34c:	d802      	bhi.n	800c354 <_realloc_r+0x34>
 800c34e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c352:	d812      	bhi.n	800c37a <_realloc_r+0x5a>
 800c354:	4621      	mov	r1, r4
 800c356:	4640      	mov	r0, r8
 800c358:	f7fc fa6c 	bl	8008834 <_malloc_r>
 800c35c:	4605      	mov	r5, r0
 800c35e:	2800      	cmp	r0, #0
 800c360:	d0ed      	beq.n	800c33e <_realloc_r+0x1e>
 800c362:	42bc      	cmp	r4, r7
 800c364:	4622      	mov	r2, r4
 800c366:	4631      	mov	r1, r6
 800c368:	bf28      	it	cs
 800c36a:	463a      	movcs	r2, r7
 800c36c:	f7fc f9e4 	bl	8008738 <memcpy>
 800c370:	4631      	mov	r1, r6
 800c372:	4640      	mov	r0, r8
 800c374:	f7fc f9f6 	bl	8008764 <_free_r>
 800c378:	e7e1      	b.n	800c33e <_realloc_r+0x1e>
 800c37a:	4635      	mov	r5, r6
 800c37c:	e7df      	b.n	800c33e <_realloc_r+0x1e>

0800c37e <__sfputc_r>:
 800c37e:	6893      	ldr	r3, [r2, #8]
 800c380:	b410      	push	{r4}
 800c382:	3b01      	subs	r3, #1
 800c384:	2b00      	cmp	r3, #0
 800c386:	6093      	str	r3, [r2, #8]
 800c388:	da07      	bge.n	800c39a <__sfputc_r+0x1c>
 800c38a:	6994      	ldr	r4, [r2, #24]
 800c38c:	42a3      	cmp	r3, r4
 800c38e:	db01      	blt.n	800c394 <__sfputc_r+0x16>
 800c390:	290a      	cmp	r1, #10
 800c392:	d102      	bne.n	800c39a <__sfputc_r+0x1c>
 800c394:	bc10      	pop	{r4}
 800c396:	f000 b949 	b.w	800c62c <__swbuf_r>
 800c39a:	6813      	ldr	r3, [r2, #0]
 800c39c:	1c58      	adds	r0, r3, #1
 800c39e:	6010      	str	r0, [r2, #0]
 800c3a0:	7019      	strb	r1, [r3, #0]
 800c3a2:	4608      	mov	r0, r1
 800c3a4:	bc10      	pop	{r4}
 800c3a6:	4770      	bx	lr

0800c3a8 <__sfputs_r>:
 800c3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3aa:	4606      	mov	r6, r0
 800c3ac:	460f      	mov	r7, r1
 800c3ae:	4614      	mov	r4, r2
 800c3b0:	18d5      	adds	r5, r2, r3
 800c3b2:	42ac      	cmp	r4, r5
 800c3b4:	d101      	bne.n	800c3ba <__sfputs_r+0x12>
 800c3b6:	2000      	movs	r0, #0
 800c3b8:	e007      	b.n	800c3ca <__sfputs_r+0x22>
 800c3ba:	463a      	mov	r2, r7
 800c3bc:	4630      	mov	r0, r6
 800c3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c2:	f7ff ffdc 	bl	800c37e <__sfputc_r>
 800c3c6:	1c43      	adds	r3, r0, #1
 800c3c8:	d1f3      	bne.n	800c3b2 <__sfputs_r+0xa>
 800c3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c3cc <_vfiprintf_r>:
 800c3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d0:	460d      	mov	r5, r1
 800c3d2:	4614      	mov	r4, r2
 800c3d4:	4698      	mov	r8, r3
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	b09d      	sub	sp, #116	; 0x74
 800c3da:	b118      	cbz	r0, 800c3e4 <_vfiprintf_r+0x18>
 800c3dc:	6983      	ldr	r3, [r0, #24]
 800c3de:	b90b      	cbnz	r3, 800c3e4 <_vfiprintf_r+0x18>
 800c3e0:	f7fc f8d4 	bl	800858c <__sinit>
 800c3e4:	4b89      	ldr	r3, [pc, #548]	; (800c60c <_vfiprintf_r+0x240>)
 800c3e6:	429d      	cmp	r5, r3
 800c3e8:	d11b      	bne.n	800c422 <_vfiprintf_r+0x56>
 800c3ea:	6875      	ldr	r5, [r6, #4]
 800c3ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3ee:	07d9      	lsls	r1, r3, #31
 800c3f0:	d405      	bmi.n	800c3fe <_vfiprintf_r+0x32>
 800c3f2:	89ab      	ldrh	r3, [r5, #12]
 800c3f4:	059a      	lsls	r2, r3, #22
 800c3f6:	d402      	bmi.n	800c3fe <_vfiprintf_r+0x32>
 800c3f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3fa:	f7fc f98a 	bl	8008712 <__retarget_lock_acquire_recursive>
 800c3fe:	89ab      	ldrh	r3, [r5, #12]
 800c400:	071b      	lsls	r3, r3, #28
 800c402:	d501      	bpl.n	800c408 <_vfiprintf_r+0x3c>
 800c404:	692b      	ldr	r3, [r5, #16]
 800c406:	b9eb      	cbnz	r3, 800c444 <_vfiprintf_r+0x78>
 800c408:	4629      	mov	r1, r5
 800c40a:	4630      	mov	r0, r6
 800c40c:	f000 f960 	bl	800c6d0 <__swsetup_r>
 800c410:	b1c0      	cbz	r0, 800c444 <_vfiprintf_r+0x78>
 800c412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c414:	07dc      	lsls	r4, r3, #31
 800c416:	d50e      	bpl.n	800c436 <_vfiprintf_r+0x6a>
 800c418:	f04f 30ff 	mov.w	r0, #4294967295
 800c41c:	b01d      	add	sp, #116	; 0x74
 800c41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c422:	4b7b      	ldr	r3, [pc, #492]	; (800c610 <_vfiprintf_r+0x244>)
 800c424:	429d      	cmp	r5, r3
 800c426:	d101      	bne.n	800c42c <_vfiprintf_r+0x60>
 800c428:	68b5      	ldr	r5, [r6, #8]
 800c42a:	e7df      	b.n	800c3ec <_vfiprintf_r+0x20>
 800c42c:	4b79      	ldr	r3, [pc, #484]	; (800c614 <_vfiprintf_r+0x248>)
 800c42e:	429d      	cmp	r5, r3
 800c430:	bf08      	it	eq
 800c432:	68f5      	ldreq	r5, [r6, #12]
 800c434:	e7da      	b.n	800c3ec <_vfiprintf_r+0x20>
 800c436:	89ab      	ldrh	r3, [r5, #12]
 800c438:	0598      	lsls	r0, r3, #22
 800c43a:	d4ed      	bmi.n	800c418 <_vfiprintf_r+0x4c>
 800c43c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c43e:	f7fc f969 	bl	8008714 <__retarget_lock_release_recursive>
 800c442:	e7e9      	b.n	800c418 <_vfiprintf_r+0x4c>
 800c444:	2300      	movs	r3, #0
 800c446:	9309      	str	r3, [sp, #36]	; 0x24
 800c448:	2320      	movs	r3, #32
 800c44a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c44e:	2330      	movs	r3, #48	; 0x30
 800c450:	f04f 0901 	mov.w	r9, #1
 800c454:	f8cd 800c 	str.w	r8, [sp, #12]
 800c458:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c618 <_vfiprintf_r+0x24c>
 800c45c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c460:	4623      	mov	r3, r4
 800c462:	469a      	mov	sl, r3
 800c464:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c468:	b10a      	cbz	r2, 800c46e <_vfiprintf_r+0xa2>
 800c46a:	2a25      	cmp	r2, #37	; 0x25
 800c46c:	d1f9      	bne.n	800c462 <_vfiprintf_r+0x96>
 800c46e:	ebba 0b04 	subs.w	fp, sl, r4
 800c472:	d00b      	beq.n	800c48c <_vfiprintf_r+0xc0>
 800c474:	465b      	mov	r3, fp
 800c476:	4622      	mov	r2, r4
 800c478:	4629      	mov	r1, r5
 800c47a:	4630      	mov	r0, r6
 800c47c:	f7ff ff94 	bl	800c3a8 <__sfputs_r>
 800c480:	3001      	adds	r0, #1
 800c482:	f000 80aa 	beq.w	800c5da <_vfiprintf_r+0x20e>
 800c486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c488:	445a      	add	r2, fp
 800c48a:	9209      	str	r2, [sp, #36]	; 0x24
 800c48c:	f89a 3000 	ldrb.w	r3, [sl]
 800c490:	2b00      	cmp	r3, #0
 800c492:	f000 80a2 	beq.w	800c5da <_vfiprintf_r+0x20e>
 800c496:	2300      	movs	r3, #0
 800c498:	f04f 32ff 	mov.w	r2, #4294967295
 800c49c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4a0:	f10a 0a01 	add.w	sl, sl, #1
 800c4a4:	9304      	str	r3, [sp, #16]
 800c4a6:	9307      	str	r3, [sp, #28]
 800c4a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4ac:	931a      	str	r3, [sp, #104]	; 0x68
 800c4ae:	4654      	mov	r4, sl
 800c4b0:	2205      	movs	r2, #5
 800c4b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b6:	4858      	ldr	r0, [pc, #352]	; (800c618 <_vfiprintf_r+0x24c>)
 800c4b8:	f7ff f86c 	bl	800b594 <memchr>
 800c4bc:	9a04      	ldr	r2, [sp, #16]
 800c4be:	b9d8      	cbnz	r0, 800c4f8 <_vfiprintf_r+0x12c>
 800c4c0:	06d1      	lsls	r1, r2, #27
 800c4c2:	bf44      	itt	mi
 800c4c4:	2320      	movmi	r3, #32
 800c4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4ca:	0713      	lsls	r3, r2, #28
 800c4cc:	bf44      	itt	mi
 800c4ce:	232b      	movmi	r3, #43	; 0x2b
 800c4d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4da:	d015      	beq.n	800c508 <_vfiprintf_r+0x13c>
 800c4dc:	4654      	mov	r4, sl
 800c4de:	2000      	movs	r0, #0
 800c4e0:	f04f 0c0a 	mov.w	ip, #10
 800c4e4:	9a07      	ldr	r2, [sp, #28]
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4ec:	3b30      	subs	r3, #48	; 0x30
 800c4ee:	2b09      	cmp	r3, #9
 800c4f0:	d94e      	bls.n	800c590 <_vfiprintf_r+0x1c4>
 800c4f2:	b1b0      	cbz	r0, 800c522 <_vfiprintf_r+0x156>
 800c4f4:	9207      	str	r2, [sp, #28]
 800c4f6:	e014      	b.n	800c522 <_vfiprintf_r+0x156>
 800c4f8:	eba0 0308 	sub.w	r3, r0, r8
 800c4fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c500:	4313      	orrs	r3, r2
 800c502:	46a2      	mov	sl, r4
 800c504:	9304      	str	r3, [sp, #16]
 800c506:	e7d2      	b.n	800c4ae <_vfiprintf_r+0xe2>
 800c508:	9b03      	ldr	r3, [sp, #12]
 800c50a:	1d19      	adds	r1, r3, #4
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	9103      	str	r1, [sp, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	bfbb      	ittet	lt
 800c514:	425b      	neglt	r3, r3
 800c516:	f042 0202 	orrlt.w	r2, r2, #2
 800c51a:	9307      	strge	r3, [sp, #28]
 800c51c:	9307      	strlt	r3, [sp, #28]
 800c51e:	bfb8      	it	lt
 800c520:	9204      	strlt	r2, [sp, #16]
 800c522:	7823      	ldrb	r3, [r4, #0]
 800c524:	2b2e      	cmp	r3, #46	; 0x2e
 800c526:	d10c      	bne.n	800c542 <_vfiprintf_r+0x176>
 800c528:	7863      	ldrb	r3, [r4, #1]
 800c52a:	2b2a      	cmp	r3, #42	; 0x2a
 800c52c:	d135      	bne.n	800c59a <_vfiprintf_r+0x1ce>
 800c52e:	9b03      	ldr	r3, [sp, #12]
 800c530:	3402      	adds	r4, #2
 800c532:	1d1a      	adds	r2, r3, #4
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	9203      	str	r2, [sp, #12]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	bfb8      	it	lt
 800c53c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c540:	9305      	str	r3, [sp, #20]
 800c542:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c61c <_vfiprintf_r+0x250>
 800c546:	2203      	movs	r2, #3
 800c548:	4650      	mov	r0, sl
 800c54a:	7821      	ldrb	r1, [r4, #0]
 800c54c:	f7ff f822 	bl	800b594 <memchr>
 800c550:	b140      	cbz	r0, 800c564 <_vfiprintf_r+0x198>
 800c552:	2340      	movs	r3, #64	; 0x40
 800c554:	eba0 000a 	sub.w	r0, r0, sl
 800c558:	fa03 f000 	lsl.w	r0, r3, r0
 800c55c:	9b04      	ldr	r3, [sp, #16]
 800c55e:	3401      	adds	r4, #1
 800c560:	4303      	orrs	r3, r0
 800c562:	9304      	str	r3, [sp, #16]
 800c564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c568:	2206      	movs	r2, #6
 800c56a:	482d      	ldr	r0, [pc, #180]	; (800c620 <_vfiprintf_r+0x254>)
 800c56c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c570:	f7ff f810 	bl	800b594 <memchr>
 800c574:	2800      	cmp	r0, #0
 800c576:	d03f      	beq.n	800c5f8 <_vfiprintf_r+0x22c>
 800c578:	4b2a      	ldr	r3, [pc, #168]	; (800c624 <_vfiprintf_r+0x258>)
 800c57a:	bb1b      	cbnz	r3, 800c5c4 <_vfiprintf_r+0x1f8>
 800c57c:	9b03      	ldr	r3, [sp, #12]
 800c57e:	3307      	adds	r3, #7
 800c580:	f023 0307 	bic.w	r3, r3, #7
 800c584:	3308      	adds	r3, #8
 800c586:	9303      	str	r3, [sp, #12]
 800c588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c58a:	443b      	add	r3, r7
 800c58c:	9309      	str	r3, [sp, #36]	; 0x24
 800c58e:	e767      	b.n	800c460 <_vfiprintf_r+0x94>
 800c590:	460c      	mov	r4, r1
 800c592:	2001      	movs	r0, #1
 800c594:	fb0c 3202 	mla	r2, ip, r2, r3
 800c598:	e7a5      	b.n	800c4e6 <_vfiprintf_r+0x11a>
 800c59a:	2300      	movs	r3, #0
 800c59c:	f04f 0c0a 	mov.w	ip, #10
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	3401      	adds	r4, #1
 800c5a4:	9305      	str	r3, [sp, #20]
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5ac:	3a30      	subs	r2, #48	; 0x30
 800c5ae:	2a09      	cmp	r2, #9
 800c5b0:	d903      	bls.n	800c5ba <_vfiprintf_r+0x1ee>
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d0c5      	beq.n	800c542 <_vfiprintf_r+0x176>
 800c5b6:	9105      	str	r1, [sp, #20]
 800c5b8:	e7c3      	b.n	800c542 <_vfiprintf_r+0x176>
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	2301      	movs	r3, #1
 800c5be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5c2:	e7f0      	b.n	800c5a6 <_vfiprintf_r+0x1da>
 800c5c4:	ab03      	add	r3, sp, #12
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	462a      	mov	r2, r5
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	4b16      	ldr	r3, [pc, #88]	; (800c628 <_vfiprintf_r+0x25c>)
 800c5ce:	a904      	add	r1, sp, #16
 800c5d0:	f7fc fa42 	bl	8008a58 <_printf_float>
 800c5d4:	4607      	mov	r7, r0
 800c5d6:	1c78      	adds	r0, r7, #1
 800c5d8:	d1d6      	bne.n	800c588 <_vfiprintf_r+0x1bc>
 800c5da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5dc:	07d9      	lsls	r1, r3, #31
 800c5de:	d405      	bmi.n	800c5ec <_vfiprintf_r+0x220>
 800c5e0:	89ab      	ldrh	r3, [r5, #12]
 800c5e2:	059a      	lsls	r2, r3, #22
 800c5e4:	d402      	bmi.n	800c5ec <_vfiprintf_r+0x220>
 800c5e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5e8:	f7fc f894 	bl	8008714 <__retarget_lock_release_recursive>
 800c5ec:	89ab      	ldrh	r3, [r5, #12]
 800c5ee:	065b      	lsls	r3, r3, #25
 800c5f0:	f53f af12 	bmi.w	800c418 <_vfiprintf_r+0x4c>
 800c5f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5f6:	e711      	b.n	800c41c <_vfiprintf_r+0x50>
 800c5f8:	ab03      	add	r3, sp, #12
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	462a      	mov	r2, r5
 800c5fe:	4630      	mov	r0, r6
 800c600:	4b09      	ldr	r3, [pc, #36]	; (800c628 <_vfiprintf_r+0x25c>)
 800c602:	a904      	add	r1, sp, #16
 800c604:	f7fc fcc4 	bl	8008f90 <_printf_i>
 800c608:	e7e4      	b.n	800c5d4 <_vfiprintf_r+0x208>
 800c60a:	bf00      	nop
 800c60c:	0800d970 	.word	0x0800d970
 800c610:	0800d990 	.word	0x0800d990
 800c614:	0800d950 	.word	0x0800d950
 800c618:	0800dc9c 	.word	0x0800dc9c
 800c61c:	0800dca2 	.word	0x0800dca2
 800c620:	0800dca6 	.word	0x0800dca6
 800c624:	08008a59 	.word	0x08008a59
 800c628:	0800c3a9 	.word	0x0800c3a9

0800c62c <__swbuf_r>:
 800c62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62e:	460e      	mov	r6, r1
 800c630:	4614      	mov	r4, r2
 800c632:	4605      	mov	r5, r0
 800c634:	b118      	cbz	r0, 800c63e <__swbuf_r+0x12>
 800c636:	6983      	ldr	r3, [r0, #24]
 800c638:	b90b      	cbnz	r3, 800c63e <__swbuf_r+0x12>
 800c63a:	f7fb ffa7 	bl	800858c <__sinit>
 800c63e:	4b21      	ldr	r3, [pc, #132]	; (800c6c4 <__swbuf_r+0x98>)
 800c640:	429c      	cmp	r4, r3
 800c642:	d12b      	bne.n	800c69c <__swbuf_r+0x70>
 800c644:	686c      	ldr	r4, [r5, #4]
 800c646:	69a3      	ldr	r3, [r4, #24]
 800c648:	60a3      	str	r3, [r4, #8]
 800c64a:	89a3      	ldrh	r3, [r4, #12]
 800c64c:	071a      	lsls	r2, r3, #28
 800c64e:	d52f      	bpl.n	800c6b0 <__swbuf_r+0x84>
 800c650:	6923      	ldr	r3, [r4, #16]
 800c652:	b36b      	cbz	r3, 800c6b0 <__swbuf_r+0x84>
 800c654:	6923      	ldr	r3, [r4, #16]
 800c656:	6820      	ldr	r0, [r4, #0]
 800c658:	b2f6      	uxtb	r6, r6
 800c65a:	1ac0      	subs	r0, r0, r3
 800c65c:	6963      	ldr	r3, [r4, #20]
 800c65e:	4637      	mov	r7, r6
 800c660:	4283      	cmp	r3, r0
 800c662:	dc04      	bgt.n	800c66e <__swbuf_r+0x42>
 800c664:	4621      	mov	r1, r4
 800c666:	4628      	mov	r0, r5
 800c668:	f7fe fbca 	bl	800ae00 <_fflush_r>
 800c66c:	bb30      	cbnz	r0, 800c6bc <__swbuf_r+0x90>
 800c66e:	68a3      	ldr	r3, [r4, #8]
 800c670:	3001      	adds	r0, #1
 800c672:	3b01      	subs	r3, #1
 800c674:	60a3      	str	r3, [r4, #8]
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	1c5a      	adds	r2, r3, #1
 800c67a:	6022      	str	r2, [r4, #0]
 800c67c:	701e      	strb	r6, [r3, #0]
 800c67e:	6963      	ldr	r3, [r4, #20]
 800c680:	4283      	cmp	r3, r0
 800c682:	d004      	beq.n	800c68e <__swbuf_r+0x62>
 800c684:	89a3      	ldrh	r3, [r4, #12]
 800c686:	07db      	lsls	r3, r3, #31
 800c688:	d506      	bpl.n	800c698 <__swbuf_r+0x6c>
 800c68a:	2e0a      	cmp	r6, #10
 800c68c:	d104      	bne.n	800c698 <__swbuf_r+0x6c>
 800c68e:	4621      	mov	r1, r4
 800c690:	4628      	mov	r0, r5
 800c692:	f7fe fbb5 	bl	800ae00 <_fflush_r>
 800c696:	b988      	cbnz	r0, 800c6bc <__swbuf_r+0x90>
 800c698:	4638      	mov	r0, r7
 800c69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c69c:	4b0a      	ldr	r3, [pc, #40]	; (800c6c8 <__swbuf_r+0x9c>)
 800c69e:	429c      	cmp	r4, r3
 800c6a0:	d101      	bne.n	800c6a6 <__swbuf_r+0x7a>
 800c6a2:	68ac      	ldr	r4, [r5, #8]
 800c6a4:	e7cf      	b.n	800c646 <__swbuf_r+0x1a>
 800c6a6:	4b09      	ldr	r3, [pc, #36]	; (800c6cc <__swbuf_r+0xa0>)
 800c6a8:	429c      	cmp	r4, r3
 800c6aa:	bf08      	it	eq
 800c6ac:	68ec      	ldreq	r4, [r5, #12]
 800c6ae:	e7ca      	b.n	800c646 <__swbuf_r+0x1a>
 800c6b0:	4621      	mov	r1, r4
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	f000 f80c 	bl	800c6d0 <__swsetup_r>
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d0cb      	beq.n	800c654 <__swbuf_r+0x28>
 800c6bc:	f04f 37ff 	mov.w	r7, #4294967295
 800c6c0:	e7ea      	b.n	800c698 <__swbuf_r+0x6c>
 800c6c2:	bf00      	nop
 800c6c4:	0800d970 	.word	0x0800d970
 800c6c8:	0800d990 	.word	0x0800d990
 800c6cc:	0800d950 	.word	0x0800d950

0800c6d0 <__swsetup_r>:
 800c6d0:	4b32      	ldr	r3, [pc, #200]	; (800c79c <__swsetup_r+0xcc>)
 800c6d2:	b570      	push	{r4, r5, r6, lr}
 800c6d4:	681d      	ldr	r5, [r3, #0]
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	460c      	mov	r4, r1
 800c6da:	b125      	cbz	r5, 800c6e6 <__swsetup_r+0x16>
 800c6dc:	69ab      	ldr	r3, [r5, #24]
 800c6de:	b913      	cbnz	r3, 800c6e6 <__swsetup_r+0x16>
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	f7fb ff53 	bl	800858c <__sinit>
 800c6e6:	4b2e      	ldr	r3, [pc, #184]	; (800c7a0 <__swsetup_r+0xd0>)
 800c6e8:	429c      	cmp	r4, r3
 800c6ea:	d10f      	bne.n	800c70c <__swsetup_r+0x3c>
 800c6ec:	686c      	ldr	r4, [r5, #4]
 800c6ee:	89a3      	ldrh	r3, [r4, #12]
 800c6f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6f4:	0719      	lsls	r1, r3, #28
 800c6f6:	d42c      	bmi.n	800c752 <__swsetup_r+0x82>
 800c6f8:	06dd      	lsls	r5, r3, #27
 800c6fa:	d411      	bmi.n	800c720 <__swsetup_r+0x50>
 800c6fc:	2309      	movs	r3, #9
 800c6fe:	6033      	str	r3, [r6, #0]
 800c700:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c704:	f04f 30ff 	mov.w	r0, #4294967295
 800c708:	81a3      	strh	r3, [r4, #12]
 800c70a:	e03e      	b.n	800c78a <__swsetup_r+0xba>
 800c70c:	4b25      	ldr	r3, [pc, #148]	; (800c7a4 <__swsetup_r+0xd4>)
 800c70e:	429c      	cmp	r4, r3
 800c710:	d101      	bne.n	800c716 <__swsetup_r+0x46>
 800c712:	68ac      	ldr	r4, [r5, #8]
 800c714:	e7eb      	b.n	800c6ee <__swsetup_r+0x1e>
 800c716:	4b24      	ldr	r3, [pc, #144]	; (800c7a8 <__swsetup_r+0xd8>)
 800c718:	429c      	cmp	r4, r3
 800c71a:	bf08      	it	eq
 800c71c:	68ec      	ldreq	r4, [r5, #12]
 800c71e:	e7e6      	b.n	800c6ee <__swsetup_r+0x1e>
 800c720:	0758      	lsls	r0, r3, #29
 800c722:	d512      	bpl.n	800c74a <__swsetup_r+0x7a>
 800c724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c726:	b141      	cbz	r1, 800c73a <__swsetup_r+0x6a>
 800c728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c72c:	4299      	cmp	r1, r3
 800c72e:	d002      	beq.n	800c736 <__swsetup_r+0x66>
 800c730:	4630      	mov	r0, r6
 800c732:	f7fc f817 	bl	8008764 <_free_r>
 800c736:	2300      	movs	r3, #0
 800c738:	6363      	str	r3, [r4, #52]	; 0x34
 800c73a:	89a3      	ldrh	r3, [r4, #12]
 800c73c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c740:	81a3      	strh	r3, [r4, #12]
 800c742:	2300      	movs	r3, #0
 800c744:	6063      	str	r3, [r4, #4]
 800c746:	6923      	ldr	r3, [r4, #16]
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	89a3      	ldrh	r3, [r4, #12]
 800c74c:	f043 0308 	orr.w	r3, r3, #8
 800c750:	81a3      	strh	r3, [r4, #12]
 800c752:	6923      	ldr	r3, [r4, #16]
 800c754:	b94b      	cbnz	r3, 800c76a <__swsetup_r+0x9a>
 800c756:	89a3      	ldrh	r3, [r4, #12]
 800c758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c75c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c760:	d003      	beq.n	800c76a <__swsetup_r+0x9a>
 800c762:	4621      	mov	r1, r4
 800c764:	4630      	mov	r0, r6
 800c766:	f000 f84d 	bl	800c804 <__smakebuf_r>
 800c76a:	89a0      	ldrh	r0, [r4, #12]
 800c76c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c770:	f010 0301 	ands.w	r3, r0, #1
 800c774:	d00a      	beq.n	800c78c <__swsetup_r+0xbc>
 800c776:	2300      	movs	r3, #0
 800c778:	60a3      	str	r3, [r4, #8]
 800c77a:	6963      	ldr	r3, [r4, #20]
 800c77c:	425b      	negs	r3, r3
 800c77e:	61a3      	str	r3, [r4, #24]
 800c780:	6923      	ldr	r3, [r4, #16]
 800c782:	b943      	cbnz	r3, 800c796 <__swsetup_r+0xc6>
 800c784:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c788:	d1ba      	bne.n	800c700 <__swsetup_r+0x30>
 800c78a:	bd70      	pop	{r4, r5, r6, pc}
 800c78c:	0781      	lsls	r1, r0, #30
 800c78e:	bf58      	it	pl
 800c790:	6963      	ldrpl	r3, [r4, #20]
 800c792:	60a3      	str	r3, [r4, #8]
 800c794:	e7f4      	b.n	800c780 <__swsetup_r+0xb0>
 800c796:	2000      	movs	r0, #0
 800c798:	e7f7      	b.n	800c78a <__swsetup_r+0xba>
 800c79a:	bf00      	nop
 800c79c:	20000010 	.word	0x20000010
 800c7a0:	0800d970 	.word	0x0800d970
 800c7a4:	0800d990 	.word	0x0800d990
 800c7a8:	0800d950 	.word	0x0800d950

0800c7ac <abort>:
 800c7ac:	2006      	movs	r0, #6
 800c7ae:	b508      	push	{r3, lr}
 800c7b0:	f000 f898 	bl	800c8e4 <raise>
 800c7b4:	2001      	movs	r0, #1
 800c7b6:	f7f6 fb7a 	bl	8002eae <_exit>

0800c7ba <__swhatbuf_r>:
 800c7ba:	b570      	push	{r4, r5, r6, lr}
 800c7bc:	460e      	mov	r6, r1
 800c7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c2:	4614      	mov	r4, r2
 800c7c4:	2900      	cmp	r1, #0
 800c7c6:	461d      	mov	r5, r3
 800c7c8:	b096      	sub	sp, #88	; 0x58
 800c7ca:	da08      	bge.n	800c7de <__swhatbuf_r+0x24>
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c7d2:	602a      	str	r2, [r5, #0]
 800c7d4:	061a      	lsls	r2, r3, #24
 800c7d6:	d410      	bmi.n	800c7fa <__swhatbuf_r+0x40>
 800c7d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7dc:	e00e      	b.n	800c7fc <__swhatbuf_r+0x42>
 800c7de:	466a      	mov	r2, sp
 800c7e0:	f000 f89c 	bl	800c91c <_fstat_r>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	dbf1      	blt.n	800c7cc <__swhatbuf_r+0x12>
 800c7e8:	9a01      	ldr	r2, [sp, #4]
 800c7ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c7ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c7f2:	425a      	negs	r2, r3
 800c7f4:	415a      	adcs	r2, r3
 800c7f6:	602a      	str	r2, [r5, #0]
 800c7f8:	e7ee      	b.n	800c7d8 <__swhatbuf_r+0x1e>
 800c7fa:	2340      	movs	r3, #64	; 0x40
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	6023      	str	r3, [r4, #0]
 800c800:	b016      	add	sp, #88	; 0x58
 800c802:	bd70      	pop	{r4, r5, r6, pc}

0800c804 <__smakebuf_r>:
 800c804:	898b      	ldrh	r3, [r1, #12]
 800c806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c808:	079d      	lsls	r5, r3, #30
 800c80a:	4606      	mov	r6, r0
 800c80c:	460c      	mov	r4, r1
 800c80e:	d507      	bpl.n	800c820 <__smakebuf_r+0x1c>
 800c810:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	6123      	str	r3, [r4, #16]
 800c818:	2301      	movs	r3, #1
 800c81a:	6163      	str	r3, [r4, #20]
 800c81c:	b002      	add	sp, #8
 800c81e:	bd70      	pop	{r4, r5, r6, pc}
 800c820:	466a      	mov	r2, sp
 800c822:	ab01      	add	r3, sp, #4
 800c824:	f7ff ffc9 	bl	800c7ba <__swhatbuf_r>
 800c828:	9900      	ldr	r1, [sp, #0]
 800c82a:	4605      	mov	r5, r0
 800c82c:	4630      	mov	r0, r6
 800c82e:	f7fc f801 	bl	8008834 <_malloc_r>
 800c832:	b948      	cbnz	r0, 800c848 <__smakebuf_r+0x44>
 800c834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c838:	059a      	lsls	r2, r3, #22
 800c83a:	d4ef      	bmi.n	800c81c <__smakebuf_r+0x18>
 800c83c:	f023 0303 	bic.w	r3, r3, #3
 800c840:	f043 0302 	orr.w	r3, r3, #2
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	e7e3      	b.n	800c810 <__smakebuf_r+0xc>
 800c848:	4b0d      	ldr	r3, [pc, #52]	; (800c880 <__smakebuf_r+0x7c>)
 800c84a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c84c:	89a3      	ldrh	r3, [r4, #12]
 800c84e:	6020      	str	r0, [r4, #0]
 800c850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c854:	81a3      	strh	r3, [r4, #12]
 800c856:	9b00      	ldr	r3, [sp, #0]
 800c858:	6120      	str	r0, [r4, #16]
 800c85a:	6163      	str	r3, [r4, #20]
 800c85c:	9b01      	ldr	r3, [sp, #4]
 800c85e:	b15b      	cbz	r3, 800c878 <__smakebuf_r+0x74>
 800c860:	4630      	mov	r0, r6
 800c862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c866:	f000 f86b 	bl	800c940 <_isatty_r>
 800c86a:	b128      	cbz	r0, 800c878 <__smakebuf_r+0x74>
 800c86c:	89a3      	ldrh	r3, [r4, #12]
 800c86e:	f023 0303 	bic.w	r3, r3, #3
 800c872:	f043 0301 	orr.w	r3, r3, #1
 800c876:	81a3      	strh	r3, [r4, #12]
 800c878:	89a0      	ldrh	r0, [r4, #12]
 800c87a:	4305      	orrs	r5, r0
 800c87c:	81a5      	strh	r5, [r4, #12]
 800c87e:	e7cd      	b.n	800c81c <__smakebuf_r+0x18>
 800c880:	08008525 	.word	0x08008525

0800c884 <_malloc_usable_size_r>:
 800c884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c888:	1f18      	subs	r0, r3, #4
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	bfbc      	itt	lt
 800c88e:	580b      	ldrlt	r3, [r1, r0]
 800c890:	18c0      	addlt	r0, r0, r3
 800c892:	4770      	bx	lr

0800c894 <_raise_r>:
 800c894:	291f      	cmp	r1, #31
 800c896:	b538      	push	{r3, r4, r5, lr}
 800c898:	4604      	mov	r4, r0
 800c89a:	460d      	mov	r5, r1
 800c89c:	d904      	bls.n	800c8a8 <_raise_r+0x14>
 800c89e:	2316      	movs	r3, #22
 800c8a0:	6003      	str	r3, [r0, #0]
 800c8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a6:	bd38      	pop	{r3, r4, r5, pc}
 800c8a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c8aa:	b112      	cbz	r2, 800c8b2 <_raise_r+0x1e>
 800c8ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8b0:	b94b      	cbnz	r3, 800c8c6 <_raise_r+0x32>
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	f000 f830 	bl	800c918 <_getpid_r>
 800c8b8:	462a      	mov	r2, r5
 800c8ba:	4601      	mov	r1, r0
 800c8bc:	4620      	mov	r0, r4
 800c8be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8c2:	f000 b817 	b.w	800c8f4 <_kill_r>
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d00a      	beq.n	800c8e0 <_raise_r+0x4c>
 800c8ca:	1c59      	adds	r1, r3, #1
 800c8cc:	d103      	bne.n	800c8d6 <_raise_r+0x42>
 800c8ce:	2316      	movs	r3, #22
 800c8d0:	6003      	str	r3, [r0, #0]
 800c8d2:	2001      	movs	r0, #1
 800c8d4:	e7e7      	b.n	800c8a6 <_raise_r+0x12>
 800c8d6:	2400      	movs	r4, #0
 800c8d8:	4628      	mov	r0, r5
 800c8da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c8de:	4798      	blx	r3
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	e7e0      	b.n	800c8a6 <_raise_r+0x12>

0800c8e4 <raise>:
 800c8e4:	4b02      	ldr	r3, [pc, #8]	; (800c8f0 <raise+0xc>)
 800c8e6:	4601      	mov	r1, r0
 800c8e8:	6818      	ldr	r0, [r3, #0]
 800c8ea:	f7ff bfd3 	b.w	800c894 <_raise_r>
 800c8ee:	bf00      	nop
 800c8f0:	20000010 	.word	0x20000010

0800c8f4 <_kill_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	4d06      	ldr	r5, [pc, #24]	; (800c914 <_kill_r+0x20>)
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	4608      	mov	r0, r1
 800c8fe:	4611      	mov	r1, r2
 800c900:	602b      	str	r3, [r5, #0]
 800c902:	f7f6 fac4 	bl	8002e8e <_kill>
 800c906:	1c43      	adds	r3, r0, #1
 800c908:	d102      	bne.n	800c910 <_kill_r+0x1c>
 800c90a:	682b      	ldr	r3, [r5, #0]
 800c90c:	b103      	cbz	r3, 800c910 <_kill_r+0x1c>
 800c90e:	6023      	str	r3, [r4, #0]
 800c910:	bd38      	pop	{r3, r4, r5, pc}
 800c912:	bf00      	nop
 800c914:	200008cc 	.word	0x200008cc

0800c918 <_getpid_r>:
 800c918:	f7f6 bab2 	b.w	8002e80 <_getpid>

0800c91c <_fstat_r>:
 800c91c:	b538      	push	{r3, r4, r5, lr}
 800c91e:	2300      	movs	r3, #0
 800c920:	4d06      	ldr	r5, [pc, #24]	; (800c93c <_fstat_r+0x20>)
 800c922:	4604      	mov	r4, r0
 800c924:	4608      	mov	r0, r1
 800c926:	4611      	mov	r1, r2
 800c928:	602b      	str	r3, [r5, #0]
 800c92a:	f7f6 fb0e 	bl	8002f4a <_fstat>
 800c92e:	1c43      	adds	r3, r0, #1
 800c930:	d102      	bne.n	800c938 <_fstat_r+0x1c>
 800c932:	682b      	ldr	r3, [r5, #0]
 800c934:	b103      	cbz	r3, 800c938 <_fstat_r+0x1c>
 800c936:	6023      	str	r3, [r4, #0]
 800c938:	bd38      	pop	{r3, r4, r5, pc}
 800c93a:	bf00      	nop
 800c93c:	200008cc 	.word	0x200008cc

0800c940 <_isatty_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	2300      	movs	r3, #0
 800c944:	4d05      	ldr	r5, [pc, #20]	; (800c95c <_isatty_r+0x1c>)
 800c946:	4604      	mov	r4, r0
 800c948:	4608      	mov	r0, r1
 800c94a:	602b      	str	r3, [r5, #0]
 800c94c:	f7f6 fb0c 	bl	8002f68 <_isatty>
 800c950:	1c43      	adds	r3, r0, #1
 800c952:	d102      	bne.n	800c95a <_isatty_r+0x1a>
 800c954:	682b      	ldr	r3, [r5, #0]
 800c956:	b103      	cbz	r3, 800c95a <_isatty_r+0x1a>
 800c958:	6023      	str	r3, [r4, #0]
 800c95a:	bd38      	pop	{r3, r4, r5, pc}
 800c95c:	200008cc 	.word	0x200008cc

0800c960 <pow>:
 800c960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c964:	4614      	mov	r4, r2
 800c966:	461d      	mov	r5, r3
 800c968:	4680      	mov	r8, r0
 800c96a:	4689      	mov	r9, r1
 800c96c:	f000 f884 	bl	800ca78 <__ieee754_pow>
 800c970:	4622      	mov	r2, r4
 800c972:	4606      	mov	r6, r0
 800c974:	460f      	mov	r7, r1
 800c976:	462b      	mov	r3, r5
 800c978:	4620      	mov	r0, r4
 800c97a:	4629      	mov	r1, r5
 800c97c:	f7f4 f96a 	bl	8000c54 <__aeabi_dcmpun>
 800c980:	bbc8      	cbnz	r0, 800c9f6 <pow+0x96>
 800c982:	2200      	movs	r2, #0
 800c984:	2300      	movs	r3, #0
 800c986:	4640      	mov	r0, r8
 800c988:	4649      	mov	r1, r9
 800c98a:	f7f4 f931 	bl	8000bf0 <__aeabi_dcmpeq>
 800c98e:	b1b8      	cbz	r0, 800c9c0 <pow+0x60>
 800c990:	2200      	movs	r2, #0
 800c992:	2300      	movs	r3, #0
 800c994:	4620      	mov	r0, r4
 800c996:	4629      	mov	r1, r5
 800c998:	f7f4 f92a 	bl	8000bf0 <__aeabi_dcmpeq>
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d141      	bne.n	800ca24 <pow+0xc4>
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	f000 fe5d 	bl	800d662 <finite>
 800c9a8:	b328      	cbz	r0, 800c9f6 <pow+0x96>
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	4629      	mov	r1, r5
 800c9b2:	f7f4 f927 	bl	8000c04 <__aeabi_dcmplt>
 800c9b6:	b1f0      	cbz	r0, 800c9f6 <pow+0x96>
 800c9b8:	f7fb fd8a 	bl	80084d0 <__errno>
 800c9bc:	2322      	movs	r3, #34	; 0x22
 800c9be:	e019      	b.n	800c9f4 <pow+0x94>
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	4639      	mov	r1, r7
 800c9c4:	f000 fe4d 	bl	800d662 <finite>
 800c9c8:	b9c8      	cbnz	r0, 800c9fe <pow+0x9e>
 800c9ca:	4640      	mov	r0, r8
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	f000 fe48 	bl	800d662 <finite>
 800c9d2:	b1a0      	cbz	r0, 800c9fe <pow+0x9e>
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	4629      	mov	r1, r5
 800c9d8:	f000 fe43 	bl	800d662 <finite>
 800c9dc:	b178      	cbz	r0, 800c9fe <pow+0x9e>
 800c9de:	4632      	mov	r2, r6
 800c9e0:	463b      	mov	r3, r7
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	4639      	mov	r1, r7
 800c9e6:	f7f4 f935 	bl	8000c54 <__aeabi_dcmpun>
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	d0e4      	beq.n	800c9b8 <pow+0x58>
 800c9ee:	f7fb fd6f 	bl	80084d0 <__errno>
 800c9f2:	2321      	movs	r3, #33	; 0x21
 800c9f4:	6003      	str	r3, [r0, #0]
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	4639      	mov	r1, r7
 800c9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9fe:	2200      	movs	r2, #0
 800ca00:	2300      	movs	r3, #0
 800ca02:	4630      	mov	r0, r6
 800ca04:	4639      	mov	r1, r7
 800ca06:	f7f4 f8f3 	bl	8000bf0 <__aeabi_dcmpeq>
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	d0f3      	beq.n	800c9f6 <pow+0x96>
 800ca0e:	4640      	mov	r0, r8
 800ca10:	4649      	mov	r1, r9
 800ca12:	f000 fe26 	bl	800d662 <finite>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d0ed      	beq.n	800c9f6 <pow+0x96>
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	4629      	mov	r1, r5
 800ca1e:	f000 fe20 	bl	800d662 <finite>
 800ca22:	e7c8      	b.n	800c9b6 <pow+0x56>
 800ca24:	2600      	movs	r6, #0
 800ca26:	4f01      	ldr	r7, [pc, #4]	; (800ca2c <pow+0xcc>)
 800ca28:	e7e5      	b.n	800c9f6 <pow+0x96>
 800ca2a:	bf00      	nop
 800ca2c:	3ff00000 	.word	0x3ff00000

0800ca30 <sqrt>:
 800ca30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca32:	4606      	mov	r6, r0
 800ca34:	460f      	mov	r7, r1
 800ca36:	f000 fd35 	bl	800d4a4 <__ieee754_sqrt>
 800ca3a:	4632      	mov	r2, r6
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	460d      	mov	r5, r1
 800ca40:	463b      	mov	r3, r7
 800ca42:	4630      	mov	r0, r6
 800ca44:	4639      	mov	r1, r7
 800ca46:	f7f4 f905 	bl	8000c54 <__aeabi_dcmpun>
 800ca4a:	b990      	cbnz	r0, 800ca72 <sqrt+0x42>
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	2300      	movs	r3, #0
 800ca50:	4630      	mov	r0, r6
 800ca52:	4639      	mov	r1, r7
 800ca54:	f7f4 f8d6 	bl	8000c04 <__aeabi_dcmplt>
 800ca58:	b158      	cbz	r0, 800ca72 <sqrt+0x42>
 800ca5a:	f7fb fd39 	bl	80084d0 <__errno>
 800ca5e:	2321      	movs	r3, #33	; 0x21
 800ca60:	2200      	movs	r2, #0
 800ca62:	6003      	str	r3, [r0, #0]
 800ca64:	2300      	movs	r3, #0
 800ca66:	4610      	mov	r0, r2
 800ca68:	4619      	mov	r1, r3
 800ca6a:	f7f3 ff83 	bl	8000974 <__aeabi_ddiv>
 800ca6e:	4604      	mov	r4, r0
 800ca70:	460d      	mov	r5, r1
 800ca72:	4620      	mov	r0, r4
 800ca74:	4629      	mov	r1, r5
 800ca76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca78 <__ieee754_pow>:
 800ca78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7c:	b093      	sub	sp, #76	; 0x4c
 800ca7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca82:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800ca86:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800ca8a:	4689      	mov	r9, r1
 800ca8c:	ea56 0102 	orrs.w	r1, r6, r2
 800ca90:	4680      	mov	r8, r0
 800ca92:	d111      	bne.n	800cab8 <__ieee754_pow+0x40>
 800ca94:	1803      	adds	r3, r0, r0
 800ca96:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800ca9a:	4152      	adcs	r2, r2
 800ca9c:	4299      	cmp	r1, r3
 800ca9e:	4b82      	ldr	r3, [pc, #520]	; (800cca8 <__ieee754_pow+0x230>)
 800caa0:	4193      	sbcs	r3, r2
 800caa2:	f080 84b9 	bcs.w	800d418 <__ieee754_pow+0x9a0>
 800caa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800caaa:	4640      	mov	r0, r8
 800caac:	4649      	mov	r1, r9
 800caae:	f7f3 fc81 	bl	80003b4 <__adddf3>
 800cab2:	4683      	mov	fp, r0
 800cab4:	468c      	mov	ip, r1
 800cab6:	e06f      	b.n	800cb98 <__ieee754_pow+0x120>
 800cab8:	4b7c      	ldr	r3, [pc, #496]	; (800ccac <__ieee754_pow+0x234>)
 800caba:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800cabe:	429c      	cmp	r4, r3
 800cac0:	464d      	mov	r5, r9
 800cac2:	4682      	mov	sl, r0
 800cac4:	dc06      	bgt.n	800cad4 <__ieee754_pow+0x5c>
 800cac6:	d101      	bne.n	800cacc <__ieee754_pow+0x54>
 800cac8:	2800      	cmp	r0, #0
 800caca:	d1ec      	bne.n	800caa6 <__ieee754_pow+0x2e>
 800cacc:	429e      	cmp	r6, r3
 800cace:	dc01      	bgt.n	800cad4 <__ieee754_pow+0x5c>
 800cad0:	d10f      	bne.n	800caf2 <__ieee754_pow+0x7a>
 800cad2:	b172      	cbz	r2, 800caf2 <__ieee754_pow+0x7a>
 800cad4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800cad8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800cadc:	ea55 050a 	orrs.w	r5, r5, sl
 800cae0:	d1e1      	bne.n	800caa6 <__ieee754_pow+0x2e>
 800cae2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cae6:	18db      	adds	r3, r3, r3
 800cae8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800caec:	4152      	adcs	r2, r2
 800caee:	429d      	cmp	r5, r3
 800caf0:	e7d5      	b.n	800ca9e <__ieee754_pow+0x26>
 800caf2:	2d00      	cmp	r5, #0
 800caf4:	da39      	bge.n	800cb6a <__ieee754_pow+0xf2>
 800caf6:	4b6e      	ldr	r3, [pc, #440]	; (800ccb0 <__ieee754_pow+0x238>)
 800caf8:	429e      	cmp	r6, r3
 800cafa:	dc52      	bgt.n	800cba2 <__ieee754_pow+0x12a>
 800cafc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cb00:	429e      	cmp	r6, r3
 800cb02:	f340 849c 	ble.w	800d43e <__ieee754_pow+0x9c6>
 800cb06:	1533      	asrs	r3, r6, #20
 800cb08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cb0c:	2b14      	cmp	r3, #20
 800cb0e:	dd0f      	ble.n	800cb30 <__ieee754_pow+0xb8>
 800cb10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cb14:	fa22 f103 	lsr.w	r1, r2, r3
 800cb18:	fa01 f303 	lsl.w	r3, r1, r3
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	f040 848e 	bne.w	800d43e <__ieee754_pow+0x9c6>
 800cb22:	f001 0101 	and.w	r1, r1, #1
 800cb26:	f1c1 0302 	rsb	r3, r1, #2
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	b182      	cbz	r2, 800cb50 <__ieee754_pow+0xd8>
 800cb2e:	e05d      	b.n	800cbec <__ieee754_pow+0x174>
 800cb30:	2a00      	cmp	r2, #0
 800cb32:	d159      	bne.n	800cbe8 <__ieee754_pow+0x170>
 800cb34:	f1c3 0314 	rsb	r3, r3, #20
 800cb38:	fa46 f103 	asr.w	r1, r6, r3
 800cb3c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb40:	42b3      	cmp	r3, r6
 800cb42:	f040 8479 	bne.w	800d438 <__ieee754_pow+0x9c0>
 800cb46:	f001 0101 	and.w	r1, r1, #1
 800cb4a:	f1c1 0302 	rsb	r3, r1, #2
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	4b58      	ldr	r3, [pc, #352]	; (800ccb4 <__ieee754_pow+0x23c>)
 800cb52:	429e      	cmp	r6, r3
 800cb54:	d132      	bne.n	800cbbc <__ieee754_pow+0x144>
 800cb56:	2f00      	cmp	r7, #0
 800cb58:	f280 846a 	bge.w	800d430 <__ieee754_pow+0x9b8>
 800cb5c:	4642      	mov	r2, r8
 800cb5e:	464b      	mov	r3, r9
 800cb60:	2000      	movs	r0, #0
 800cb62:	4954      	ldr	r1, [pc, #336]	; (800ccb4 <__ieee754_pow+0x23c>)
 800cb64:	f7f3 ff06 	bl	8000974 <__aeabi_ddiv>
 800cb68:	e7a3      	b.n	800cab2 <__ieee754_pow+0x3a>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	2a00      	cmp	r2, #0
 800cb70:	d13c      	bne.n	800cbec <__ieee754_pow+0x174>
 800cb72:	4b4e      	ldr	r3, [pc, #312]	; (800ccac <__ieee754_pow+0x234>)
 800cb74:	429e      	cmp	r6, r3
 800cb76:	d1eb      	bne.n	800cb50 <__ieee754_pow+0xd8>
 800cb78:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cb7c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cb80:	ea53 030a 	orrs.w	r3, r3, sl
 800cb84:	f000 8448 	beq.w	800d418 <__ieee754_pow+0x9a0>
 800cb88:	4b4b      	ldr	r3, [pc, #300]	; (800ccb8 <__ieee754_pow+0x240>)
 800cb8a:	429c      	cmp	r4, r3
 800cb8c:	dd0b      	ble.n	800cba6 <__ieee754_pow+0x12e>
 800cb8e:	2f00      	cmp	r7, #0
 800cb90:	f2c0 8448 	blt.w	800d424 <__ieee754_pow+0x9ac>
 800cb94:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800cb98:	4658      	mov	r0, fp
 800cb9a:	4661      	mov	r1, ip
 800cb9c:	b013      	add	sp, #76	; 0x4c
 800cb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba2:	2302      	movs	r3, #2
 800cba4:	e7e2      	b.n	800cb6c <__ieee754_pow+0xf4>
 800cba6:	2f00      	cmp	r7, #0
 800cba8:	f04f 0b00 	mov.w	fp, #0
 800cbac:	f04f 0c00 	mov.w	ip, #0
 800cbb0:	daf2      	bge.n	800cb98 <__ieee754_pow+0x120>
 800cbb2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800cbb6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800cbba:	e7ed      	b.n	800cb98 <__ieee754_pow+0x120>
 800cbbc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800cbc0:	d106      	bne.n	800cbd0 <__ieee754_pow+0x158>
 800cbc2:	4642      	mov	r2, r8
 800cbc4:	464b      	mov	r3, r9
 800cbc6:	4640      	mov	r0, r8
 800cbc8:	4649      	mov	r1, r9
 800cbca:	f7f3 fda9 	bl	8000720 <__aeabi_dmul>
 800cbce:	e770      	b.n	800cab2 <__ieee754_pow+0x3a>
 800cbd0:	4b3a      	ldr	r3, [pc, #232]	; (800ccbc <__ieee754_pow+0x244>)
 800cbd2:	429f      	cmp	r7, r3
 800cbd4:	d10a      	bne.n	800cbec <__ieee754_pow+0x174>
 800cbd6:	2d00      	cmp	r5, #0
 800cbd8:	db08      	blt.n	800cbec <__ieee754_pow+0x174>
 800cbda:	4640      	mov	r0, r8
 800cbdc:	4649      	mov	r1, r9
 800cbde:	b013      	add	sp, #76	; 0x4c
 800cbe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe4:	f000 bc5e 	b.w	800d4a4 <__ieee754_sqrt>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	4640      	mov	r0, r8
 800cbee:	4649      	mov	r1, r9
 800cbf0:	f000 fd34 	bl	800d65c <fabs>
 800cbf4:	4683      	mov	fp, r0
 800cbf6:	468c      	mov	ip, r1
 800cbf8:	f1ba 0f00 	cmp.w	sl, #0
 800cbfc:	d128      	bne.n	800cc50 <__ieee754_pow+0x1d8>
 800cbfe:	b124      	cbz	r4, 800cc0a <__ieee754_pow+0x192>
 800cc00:	4b2c      	ldr	r3, [pc, #176]	; (800ccb4 <__ieee754_pow+0x23c>)
 800cc02:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d122      	bne.n	800cc50 <__ieee754_pow+0x1d8>
 800cc0a:	2f00      	cmp	r7, #0
 800cc0c:	da07      	bge.n	800cc1e <__ieee754_pow+0x1a6>
 800cc0e:	465a      	mov	r2, fp
 800cc10:	4663      	mov	r3, ip
 800cc12:	2000      	movs	r0, #0
 800cc14:	4927      	ldr	r1, [pc, #156]	; (800ccb4 <__ieee754_pow+0x23c>)
 800cc16:	f7f3 fead 	bl	8000974 <__aeabi_ddiv>
 800cc1a:	4683      	mov	fp, r0
 800cc1c:	468c      	mov	ip, r1
 800cc1e:	2d00      	cmp	r5, #0
 800cc20:	daba      	bge.n	800cb98 <__ieee754_pow+0x120>
 800cc22:	9b00      	ldr	r3, [sp, #0]
 800cc24:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cc28:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cc2c:	4323      	orrs	r3, r4
 800cc2e:	d108      	bne.n	800cc42 <__ieee754_pow+0x1ca>
 800cc30:	465a      	mov	r2, fp
 800cc32:	4663      	mov	r3, ip
 800cc34:	4658      	mov	r0, fp
 800cc36:	4661      	mov	r1, ip
 800cc38:	f7f3 fbba 	bl	80003b0 <__aeabi_dsub>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	460b      	mov	r3, r1
 800cc40:	e790      	b.n	800cb64 <__ieee754_pow+0xec>
 800cc42:	9b00      	ldr	r3, [sp, #0]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d1a7      	bne.n	800cb98 <__ieee754_pow+0x120>
 800cc48:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800cc4c:	469c      	mov	ip, r3
 800cc4e:	e7a3      	b.n	800cb98 <__ieee754_pow+0x120>
 800cc50:	0feb      	lsrs	r3, r5, #31
 800cc52:	3b01      	subs	r3, #1
 800cc54:	930c      	str	r3, [sp, #48]	; 0x30
 800cc56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc58:	9b00      	ldr	r3, [sp, #0]
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	d104      	bne.n	800cc68 <__ieee754_pow+0x1f0>
 800cc5e:	4642      	mov	r2, r8
 800cc60:	464b      	mov	r3, r9
 800cc62:	4640      	mov	r0, r8
 800cc64:	4649      	mov	r1, r9
 800cc66:	e7e7      	b.n	800cc38 <__ieee754_pow+0x1c0>
 800cc68:	4b15      	ldr	r3, [pc, #84]	; (800ccc0 <__ieee754_pow+0x248>)
 800cc6a:	429e      	cmp	r6, r3
 800cc6c:	f340 80f6 	ble.w	800ce5c <__ieee754_pow+0x3e4>
 800cc70:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cc74:	429e      	cmp	r6, r3
 800cc76:	4b10      	ldr	r3, [pc, #64]	; (800ccb8 <__ieee754_pow+0x240>)
 800cc78:	dd09      	ble.n	800cc8e <__ieee754_pow+0x216>
 800cc7a:	429c      	cmp	r4, r3
 800cc7c:	dc0c      	bgt.n	800cc98 <__ieee754_pow+0x220>
 800cc7e:	2f00      	cmp	r7, #0
 800cc80:	da0c      	bge.n	800cc9c <__ieee754_pow+0x224>
 800cc82:	2000      	movs	r0, #0
 800cc84:	b013      	add	sp, #76	; 0x4c
 800cc86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc8a:	f000 bce2 	b.w	800d652 <__math_oflow>
 800cc8e:	429c      	cmp	r4, r3
 800cc90:	dbf5      	blt.n	800cc7e <__ieee754_pow+0x206>
 800cc92:	4b08      	ldr	r3, [pc, #32]	; (800ccb4 <__ieee754_pow+0x23c>)
 800cc94:	429c      	cmp	r4, r3
 800cc96:	dd15      	ble.n	800ccc4 <__ieee754_pow+0x24c>
 800cc98:	2f00      	cmp	r7, #0
 800cc9a:	dcf2      	bgt.n	800cc82 <__ieee754_pow+0x20a>
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	b013      	add	sp, #76	; 0x4c
 800cca0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca4:	f000 bcd0 	b.w	800d648 <__math_uflow>
 800cca8:	fff00000 	.word	0xfff00000
 800ccac:	7ff00000 	.word	0x7ff00000
 800ccb0:	433fffff 	.word	0x433fffff
 800ccb4:	3ff00000 	.word	0x3ff00000
 800ccb8:	3fefffff 	.word	0x3fefffff
 800ccbc:	3fe00000 	.word	0x3fe00000
 800ccc0:	41e00000 	.word	0x41e00000
 800ccc4:	4661      	mov	r1, ip
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	4658      	mov	r0, fp
 800ccca:	4b5f      	ldr	r3, [pc, #380]	; (800ce48 <__ieee754_pow+0x3d0>)
 800cccc:	f7f3 fb70 	bl	80003b0 <__aeabi_dsub>
 800ccd0:	a355      	add	r3, pc, #340	; (adr r3, 800ce28 <__ieee754_pow+0x3b0>)
 800ccd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	460d      	mov	r5, r1
 800ccda:	f7f3 fd21 	bl	8000720 <__aeabi_dmul>
 800ccde:	a354      	add	r3, pc, #336	; (adr r3, 800ce30 <__ieee754_pow+0x3b8>)
 800cce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce4:	4606      	mov	r6, r0
 800cce6:	460f      	mov	r7, r1
 800cce8:	4620      	mov	r0, r4
 800ccea:	4629      	mov	r1, r5
 800ccec:	f7f3 fd18 	bl	8000720 <__aeabi_dmul>
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	4682      	mov	sl, r0
 800ccf4:	468b      	mov	fp, r1
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	4b54      	ldr	r3, [pc, #336]	; (800ce4c <__ieee754_pow+0x3d4>)
 800ccfc:	f7f3 fd10 	bl	8000720 <__aeabi_dmul>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	a14c      	add	r1, pc, #304	; (adr r1, 800ce38 <__ieee754_pow+0x3c0>)
 800cd06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd0a:	f7f3 fb51 	bl	80003b0 <__aeabi_dsub>
 800cd0e:	4622      	mov	r2, r4
 800cd10:	462b      	mov	r3, r5
 800cd12:	f7f3 fd05 	bl	8000720 <__aeabi_dmul>
 800cd16:	4602      	mov	r2, r0
 800cd18:	460b      	mov	r3, r1
 800cd1a:	2000      	movs	r0, #0
 800cd1c:	494c      	ldr	r1, [pc, #304]	; (800ce50 <__ieee754_pow+0x3d8>)
 800cd1e:	f7f3 fb47 	bl	80003b0 <__aeabi_dsub>
 800cd22:	4622      	mov	r2, r4
 800cd24:	462b      	mov	r3, r5
 800cd26:	4680      	mov	r8, r0
 800cd28:	4689      	mov	r9, r1
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	f7f3 fcf7 	bl	8000720 <__aeabi_dmul>
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	4640      	mov	r0, r8
 800cd38:	4649      	mov	r1, r9
 800cd3a:	f7f3 fcf1 	bl	8000720 <__aeabi_dmul>
 800cd3e:	a340      	add	r3, pc, #256	; (adr r3, 800ce40 <__ieee754_pow+0x3c8>)
 800cd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd44:	f7f3 fcec 	bl	8000720 <__aeabi_dmul>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4650      	mov	r0, sl
 800cd4e:	4659      	mov	r1, fp
 800cd50:	f7f3 fb2e 	bl	80003b0 <__aeabi_dsub>
 800cd54:	f04f 0a00 	mov.w	sl, #0
 800cd58:	4602      	mov	r2, r0
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	4604      	mov	r4, r0
 800cd5e:	460d      	mov	r5, r1
 800cd60:	4630      	mov	r0, r6
 800cd62:	4639      	mov	r1, r7
 800cd64:	f7f3 fb26 	bl	80003b4 <__adddf3>
 800cd68:	4632      	mov	r2, r6
 800cd6a:	463b      	mov	r3, r7
 800cd6c:	4650      	mov	r0, sl
 800cd6e:	468b      	mov	fp, r1
 800cd70:	f7f3 fb1e 	bl	80003b0 <__aeabi_dsub>
 800cd74:	4602      	mov	r2, r0
 800cd76:	460b      	mov	r3, r1
 800cd78:	4620      	mov	r0, r4
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	f7f3 fb18 	bl	80003b0 <__aeabi_dsub>
 800cd80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cd84:	9b00      	ldr	r3, [sp, #0]
 800cd86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	f04f 0600 	mov.w	r6, #0
 800cd90:	f04f 0200 	mov.w	r2, #0
 800cd94:	bf0c      	ite	eq
 800cd96:	4b2f      	ldreq	r3, [pc, #188]	; (800ce54 <__ieee754_pow+0x3dc>)
 800cd98:	4b2b      	ldrne	r3, [pc, #172]	; (800ce48 <__ieee754_pow+0x3d0>)
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	460d      	mov	r5, r1
 800cd9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cda2:	e9cd 2300 	strd	r2, r3, [sp]
 800cda6:	4632      	mov	r2, r6
 800cda8:	463b      	mov	r3, r7
 800cdaa:	f7f3 fb01 	bl	80003b0 <__aeabi_dsub>
 800cdae:	4652      	mov	r2, sl
 800cdb0:	465b      	mov	r3, fp
 800cdb2:	f7f3 fcb5 	bl	8000720 <__aeabi_dmul>
 800cdb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdba:	4680      	mov	r8, r0
 800cdbc:	4689      	mov	r9, r1
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	f7f3 fcad 	bl	8000720 <__aeabi_dmul>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	4640      	mov	r0, r8
 800cdcc:	4649      	mov	r1, r9
 800cdce:	f7f3 faf1 	bl	80003b4 <__adddf3>
 800cdd2:	4632      	mov	r2, r6
 800cdd4:	463b      	mov	r3, r7
 800cdd6:	4680      	mov	r8, r0
 800cdd8:	4689      	mov	r9, r1
 800cdda:	4650      	mov	r0, sl
 800cddc:	4659      	mov	r1, fp
 800cdde:	f7f3 fc9f 	bl	8000720 <__aeabi_dmul>
 800cde2:	4604      	mov	r4, r0
 800cde4:	460d      	mov	r5, r1
 800cde6:	460b      	mov	r3, r1
 800cde8:	4602      	mov	r2, r0
 800cdea:	4649      	mov	r1, r9
 800cdec:	4640      	mov	r0, r8
 800cdee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cdf2:	f7f3 fadf 	bl	80003b4 <__adddf3>
 800cdf6:	4b18      	ldr	r3, [pc, #96]	; (800ce58 <__ieee754_pow+0x3e0>)
 800cdf8:	4682      	mov	sl, r0
 800cdfa:	4299      	cmp	r1, r3
 800cdfc:	460f      	mov	r7, r1
 800cdfe:	460e      	mov	r6, r1
 800ce00:	f340 82e5 	ble.w	800d3ce <__ieee754_pow+0x956>
 800ce04:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ce08:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ce0c:	4303      	orrs	r3, r0
 800ce0e:	f000 81df 	beq.w	800d1d0 <__ieee754_pow+0x758>
 800ce12:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce16:	2200      	movs	r2, #0
 800ce18:	2300      	movs	r3, #0
 800ce1a:	f7f3 fef3 	bl	8000c04 <__aeabi_dcmplt>
 800ce1e:	3800      	subs	r0, #0
 800ce20:	bf18      	it	ne
 800ce22:	2001      	movne	r0, #1
 800ce24:	e72e      	b.n	800cc84 <__ieee754_pow+0x20c>
 800ce26:	bf00      	nop
 800ce28:	60000000 	.word	0x60000000
 800ce2c:	3ff71547 	.word	0x3ff71547
 800ce30:	f85ddf44 	.word	0xf85ddf44
 800ce34:	3e54ae0b 	.word	0x3e54ae0b
 800ce38:	55555555 	.word	0x55555555
 800ce3c:	3fd55555 	.word	0x3fd55555
 800ce40:	652b82fe 	.word	0x652b82fe
 800ce44:	3ff71547 	.word	0x3ff71547
 800ce48:	3ff00000 	.word	0x3ff00000
 800ce4c:	3fd00000 	.word	0x3fd00000
 800ce50:	3fe00000 	.word	0x3fe00000
 800ce54:	bff00000 	.word	0xbff00000
 800ce58:	408fffff 	.word	0x408fffff
 800ce5c:	4bd2      	ldr	r3, [pc, #840]	; (800d1a8 <__ieee754_pow+0x730>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	402b      	ands	r3, r5
 800ce62:	b943      	cbnz	r3, 800ce76 <__ieee754_pow+0x3fe>
 800ce64:	4658      	mov	r0, fp
 800ce66:	4661      	mov	r1, ip
 800ce68:	4bd0      	ldr	r3, [pc, #832]	; (800d1ac <__ieee754_pow+0x734>)
 800ce6a:	f7f3 fc59 	bl	8000720 <__aeabi_dmul>
 800ce6e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ce72:	4683      	mov	fp, r0
 800ce74:	460c      	mov	r4, r1
 800ce76:	1523      	asrs	r3, r4, #20
 800ce78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ce7c:	4413      	add	r3, r2
 800ce7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce80:	4bcb      	ldr	r3, [pc, #812]	; (800d1b0 <__ieee754_pow+0x738>)
 800ce82:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ce86:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ce8a:	429c      	cmp	r4, r3
 800ce8c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ce90:	dd08      	ble.n	800cea4 <__ieee754_pow+0x42c>
 800ce92:	4bc8      	ldr	r3, [pc, #800]	; (800d1b4 <__ieee754_pow+0x73c>)
 800ce94:	429c      	cmp	r4, r3
 800ce96:	f340 8199 	ble.w	800d1cc <__ieee754_pow+0x754>
 800ce9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce9c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cea0:	3301      	adds	r3, #1
 800cea2:	930b      	str	r3, [sp, #44]	; 0x2c
 800cea4:	2600      	movs	r6, #0
 800cea6:	00f3      	lsls	r3, r6, #3
 800cea8:	930d      	str	r3, [sp, #52]	; 0x34
 800ceaa:	4bc3      	ldr	r3, [pc, #780]	; (800d1b8 <__ieee754_pow+0x740>)
 800ceac:	4658      	mov	r0, fp
 800ceae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ceb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ceb6:	4629      	mov	r1, r5
 800ceb8:	461a      	mov	r2, r3
 800ceba:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800cebe:	4623      	mov	r3, r4
 800cec0:	f7f3 fa76 	bl	80003b0 <__aeabi_dsub>
 800cec4:	46da      	mov	sl, fp
 800cec6:	462b      	mov	r3, r5
 800cec8:	4652      	mov	r2, sl
 800ceca:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800cece:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ced2:	f7f3 fa6f 	bl	80003b4 <__adddf3>
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	2000      	movs	r0, #0
 800cedc:	49b7      	ldr	r1, [pc, #732]	; (800d1bc <__ieee754_pow+0x744>)
 800cede:	f7f3 fd49 	bl	8000974 <__aeabi_ddiv>
 800cee2:	4602      	mov	r2, r0
 800cee4:	460b      	mov	r3, r1
 800cee6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ceea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ceee:	f7f3 fc17 	bl	8000720 <__aeabi_dmul>
 800cef2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cef6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800cefa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cefe:	2300      	movs	r3, #0
 800cf00:	2200      	movs	r2, #0
 800cf02:	46ab      	mov	fp, r5
 800cf04:	106d      	asrs	r5, r5, #1
 800cf06:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cf0a:	9304      	str	r3, [sp, #16]
 800cf0c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cf10:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cf14:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800cf18:	4640      	mov	r0, r8
 800cf1a:	4649      	mov	r1, r9
 800cf1c:	4614      	mov	r4, r2
 800cf1e:	461d      	mov	r5, r3
 800cf20:	f7f3 fbfe 	bl	8000720 <__aeabi_dmul>
 800cf24:	4602      	mov	r2, r0
 800cf26:	460b      	mov	r3, r1
 800cf28:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cf2c:	f7f3 fa40 	bl	80003b0 <__aeabi_dsub>
 800cf30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cf34:	4606      	mov	r6, r0
 800cf36:	460f      	mov	r7, r1
 800cf38:	4620      	mov	r0, r4
 800cf3a:	4629      	mov	r1, r5
 800cf3c:	f7f3 fa38 	bl	80003b0 <__aeabi_dsub>
 800cf40:	4602      	mov	r2, r0
 800cf42:	460b      	mov	r3, r1
 800cf44:	4650      	mov	r0, sl
 800cf46:	4659      	mov	r1, fp
 800cf48:	f7f3 fa32 	bl	80003b0 <__aeabi_dsub>
 800cf4c:	4642      	mov	r2, r8
 800cf4e:	464b      	mov	r3, r9
 800cf50:	f7f3 fbe6 	bl	8000720 <__aeabi_dmul>
 800cf54:	4602      	mov	r2, r0
 800cf56:	460b      	mov	r3, r1
 800cf58:	4630      	mov	r0, r6
 800cf5a:	4639      	mov	r1, r7
 800cf5c:	f7f3 fa28 	bl	80003b0 <__aeabi_dsub>
 800cf60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cf64:	f7f3 fbdc 	bl	8000720 <__aeabi_dmul>
 800cf68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cf70:	4610      	mov	r0, r2
 800cf72:	4619      	mov	r1, r3
 800cf74:	f7f3 fbd4 	bl	8000720 <__aeabi_dmul>
 800cf78:	a379      	add	r3, pc, #484	; (adr r3, 800d160 <__ieee754_pow+0x6e8>)
 800cf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7e:	4604      	mov	r4, r0
 800cf80:	460d      	mov	r5, r1
 800cf82:	f7f3 fbcd 	bl	8000720 <__aeabi_dmul>
 800cf86:	a378      	add	r3, pc, #480	; (adr r3, 800d168 <__ieee754_pow+0x6f0>)
 800cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8c:	f7f3 fa12 	bl	80003b4 <__adddf3>
 800cf90:	4622      	mov	r2, r4
 800cf92:	462b      	mov	r3, r5
 800cf94:	f7f3 fbc4 	bl	8000720 <__aeabi_dmul>
 800cf98:	a375      	add	r3, pc, #468	; (adr r3, 800d170 <__ieee754_pow+0x6f8>)
 800cf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9e:	f7f3 fa09 	bl	80003b4 <__adddf3>
 800cfa2:	4622      	mov	r2, r4
 800cfa4:	462b      	mov	r3, r5
 800cfa6:	f7f3 fbbb 	bl	8000720 <__aeabi_dmul>
 800cfaa:	a373      	add	r3, pc, #460	; (adr r3, 800d178 <__ieee754_pow+0x700>)
 800cfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb0:	f7f3 fa00 	bl	80003b4 <__adddf3>
 800cfb4:	4622      	mov	r2, r4
 800cfb6:	462b      	mov	r3, r5
 800cfb8:	f7f3 fbb2 	bl	8000720 <__aeabi_dmul>
 800cfbc:	a370      	add	r3, pc, #448	; (adr r3, 800d180 <__ieee754_pow+0x708>)
 800cfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc2:	f7f3 f9f7 	bl	80003b4 <__adddf3>
 800cfc6:	4622      	mov	r2, r4
 800cfc8:	462b      	mov	r3, r5
 800cfca:	f7f3 fba9 	bl	8000720 <__aeabi_dmul>
 800cfce:	a36e      	add	r3, pc, #440	; (adr r3, 800d188 <__ieee754_pow+0x710>)
 800cfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd4:	f7f3 f9ee 	bl	80003b4 <__adddf3>
 800cfd8:	4622      	mov	r2, r4
 800cfda:	4606      	mov	r6, r0
 800cfdc:	460f      	mov	r7, r1
 800cfde:	462b      	mov	r3, r5
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	f7f3 fb9c 	bl	8000720 <__aeabi_dmul>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	460b      	mov	r3, r1
 800cfec:	4630      	mov	r0, r6
 800cfee:	4639      	mov	r1, r7
 800cff0:	f7f3 fb96 	bl	8000720 <__aeabi_dmul>
 800cff4:	4604      	mov	r4, r0
 800cff6:	460d      	mov	r5, r1
 800cff8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cffc:	4642      	mov	r2, r8
 800cffe:	464b      	mov	r3, r9
 800d000:	f7f3 f9d8 	bl	80003b4 <__adddf3>
 800d004:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d008:	f7f3 fb8a 	bl	8000720 <__aeabi_dmul>
 800d00c:	4622      	mov	r2, r4
 800d00e:	462b      	mov	r3, r5
 800d010:	f7f3 f9d0 	bl	80003b4 <__adddf3>
 800d014:	4642      	mov	r2, r8
 800d016:	4606      	mov	r6, r0
 800d018:	460f      	mov	r7, r1
 800d01a:	464b      	mov	r3, r9
 800d01c:	4640      	mov	r0, r8
 800d01e:	4649      	mov	r1, r9
 800d020:	f7f3 fb7e 	bl	8000720 <__aeabi_dmul>
 800d024:	2200      	movs	r2, #0
 800d026:	4b66      	ldr	r3, [pc, #408]	; (800d1c0 <__ieee754_pow+0x748>)
 800d028:	4682      	mov	sl, r0
 800d02a:	468b      	mov	fp, r1
 800d02c:	f7f3 f9c2 	bl	80003b4 <__adddf3>
 800d030:	4632      	mov	r2, r6
 800d032:	463b      	mov	r3, r7
 800d034:	f7f3 f9be 	bl	80003b4 <__adddf3>
 800d038:	2400      	movs	r4, #0
 800d03a:	460d      	mov	r5, r1
 800d03c:	4622      	mov	r2, r4
 800d03e:	460b      	mov	r3, r1
 800d040:	4640      	mov	r0, r8
 800d042:	4649      	mov	r1, r9
 800d044:	f7f3 fb6c 	bl	8000720 <__aeabi_dmul>
 800d048:	2200      	movs	r2, #0
 800d04a:	4680      	mov	r8, r0
 800d04c:	4689      	mov	r9, r1
 800d04e:	4620      	mov	r0, r4
 800d050:	4629      	mov	r1, r5
 800d052:	4b5b      	ldr	r3, [pc, #364]	; (800d1c0 <__ieee754_pow+0x748>)
 800d054:	f7f3 f9ac 	bl	80003b0 <__aeabi_dsub>
 800d058:	4652      	mov	r2, sl
 800d05a:	465b      	mov	r3, fp
 800d05c:	f7f3 f9a8 	bl	80003b0 <__aeabi_dsub>
 800d060:	4602      	mov	r2, r0
 800d062:	460b      	mov	r3, r1
 800d064:	4630      	mov	r0, r6
 800d066:	4639      	mov	r1, r7
 800d068:	f7f3 f9a2 	bl	80003b0 <__aeabi_dsub>
 800d06c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d070:	f7f3 fb56 	bl	8000720 <__aeabi_dmul>
 800d074:	4622      	mov	r2, r4
 800d076:	4606      	mov	r6, r0
 800d078:	460f      	mov	r7, r1
 800d07a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d07e:	462b      	mov	r3, r5
 800d080:	f7f3 fb4e 	bl	8000720 <__aeabi_dmul>
 800d084:	4602      	mov	r2, r0
 800d086:	460b      	mov	r3, r1
 800d088:	4630      	mov	r0, r6
 800d08a:	4639      	mov	r1, r7
 800d08c:	f7f3 f992 	bl	80003b4 <__adddf3>
 800d090:	2400      	movs	r4, #0
 800d092:	4606      	mov	r6, r0
 800d094:	460f      	mov	r7, r1
 800d096:	4602      	mov	r2, r0
 800d098:	460b      	mov	r3, r1
 800d09a:	4640      	mov	r0, r8
 800d09c:	4649      	mov	r1, r9
 800d09e:	f7f3 f989 	bl	80003b4 <__adddf3>
 800d0a2:	a33b      	add	r3, pc, #236	; (adr r3, 800d190 <__ieee754_pow+0x718>)
 800d0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	460d      	mov	r5, r1
 800d0ac:	f7f3 fb38 	bl	8000720 <__aeabi_dmul>
 800d0b0:	4642      	mov	r2, r8
 800d0b2:	464b      	mov	r3, r9
 800d0b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	f7f3 f978 	bl	80003b0 <__aeabi_dsub>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	4639      	mov	r1, r7
 800d0c8:	f7f3 f972 	bl	80003b0 <__aeabi_dsub>
 800d0cc:	a332      	add	r3, pc, #200	; (adr r3, 800d198 <__ieee754_pow+0x720>)
 800d0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d2:	f7f3 fb25 	bl	8000720 <__aeabi_dmul>
 800d0d6:	a332      	add	r3, pc, #200	; (adr r3, 800d1a0 <__ieee754_pow+0x728>)
 800d0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0dc:	4606      	mov	r6, r0
 800d0de:	460f      	mov	r7, r1
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	4629      	mov	r1, r5
 800d0e4:	f7f3 fb1c 	bl	8000720 <__aeabi_dmul>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	4639      	mov	r1, r7
 800d0f0:	f7f3 f960 	bl	80003b4 <__adddf3>
 800d0f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0f6:	4b33      	ldr	r3, [pc, #204]	; (800d1c4 <__ieee754_pow+0x74c>)
 800d0f8:	f04f 0a00 	mov.w	sl, #0
 800d0fc:	4413      	add	r3, r2
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	f7f3 f957 	bl	80003b4 <__adddf3>
 800d106:	4680      	mov	r8, r0
 800d108:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d10a:	4689      	mov	r9, r1
 800d10c:	f7f3 fa9e 	bl	800064c <__aeabi_i2d>
 800d110:	4604      	mov	r4, r0
 800d112:	460d      	mov	r5, r1
 800d114:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d116:	4b2c      	ldr	r3, [pc, #176]	; (800d1c8 <__ieee754_pow+0x750>)
 800d118:	4413      	add	r3, r2
 800d11a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d11e:	4642      	mov	r2, r8
 800d120:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d124:	464b      	mov	r3, r9
 800d126:	f7f3 f945 	bl	80003b4 <__adddf3>
 800d12a:	4632      	mov	r2, r6
 800d12c:	463b      	mov	r3, r7
 800d12e:	f7f3 f941 	bl	80003b4 <__adddf3>
 800d132:	4622      	mov	r2, r4
 800d134:	462b      	mov	r3, r5
 800d136:	f7f3 f93d 	bl	80003b4 <__adddf3>
 800d13a:	4622      	mov	r2, r4
 800d13c:	462b      	mov	r3, r5
 800d13e:	4650      	mov	r0, sl
 800d140:	468b      	mov	fp, r1
 800d142:	f7f3 f935 	bl	80003b0 <__aeabi_dsub>
 800d146:	4632      	mov	r2, r6
 800d148:	463b      	mov	r3, r7
 800d14a:	f7f3 f931 	bl	80003b0 <__aeabi_dsub>
 800d14e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d152:	f7f3 f92d 	bl	80003b0 <__aeabi_dsub>
 800d156:	4602      	mov	r2, r0
 800d158:	460b      	mov	r3, r1
 800d15a:	4640      	mov	r0, r8
 800d15c:	4649      	mov	r1, r9
 800d15e:	e60d      	b.n	800cd7c <__ieee754_pow+0x304>
 800d160:	4a454eef 	.word	0x4a454eef
 800d164:	3fca7e28 	.word	0x3fca7e28
 800d168:	93c9db65 	.word	0x93c9db65
 800d16c:	3fcd864a 	.word	0x3fcd864a
 800d170:	a91d4101 	.word	0xa91d4101
 800d174:	3fd17460 	.word	0x3fd17460
 800d178:	518f264d 	.word	0x518f264d
 800d17c:	3fd55555 	.word	0x3fd55555
 800d180:	db6fabff 	.word	0xdb6fabff
 800d184:	3fdb6db6 	.word	0x3fdb6db6
 800d188:	33333303 	.word	0x33333303
 800d18c:	3fe33333 	.word	0x3fe33333
 800d190:	e0000000 	.word	0xe0000000
 800d194:	3feec709 	.word	0x3feec709
 800d198:	dc3a03fd 	.word	0xdc3a03fd
 800d19c:	3feec709 	.word	0x3feec709
 800d1a0:	145b01f5 	.word	0x145b01f5
 800d1a4:	be3e2fe0 	.word	0xbe3e2fe0
 800d1a8:	7ff00000 	.word	0x7ff00000
 800d1ac:	43400000 	.word	0x43400000
 800d1b0:	0003988e 	.word	0x0003988e
 800d1b4:	000bb679 	.word	0x000bb679
 800d1b8:	0800ddf0 	.word	0x0800ddf0
 800d1bc:	3ff00000 	.word	0x3ff00000
 800d1c0:	40080000 	.word	0x40080000
 800d1c4:	0800de10 	.word	0x0800de10
 800d1c8:	0800de00 	.word	0x0800de00
 800d1cc:	2601      	movs	r6, #1
 800d1ce:	e66a      	b.n	800cea6 <__ieee754_pow+0x42e>
 800d1d0:	a39d      	add	r3, pc, #628	; (adr r3, 800d448 <__ieee754_pow+0x9d0>)
 800d1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d6:	4640      	mov	r0, r8
 800d1d8:	4649      	mov	r1, r9
 800d1da:	f7f3 f8eb 	bl	80003b4 <__adddf3>
 800d1de:	4622      	mov	r2, r4
 800d1e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1e4:	462b      	mov	r3, r5
 800d1e6:	4650      	mov	r0, sl
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	f7f3 f8e1 	bl	80003b0 <__aeabi_dsub>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1f6:	f7f3 fd23 	bl	8000c40 <__aeabi_dcmpgt>
 800d1fa:	2800      	cmp	r0, #0
 800d1fc:	f47f ae09 	bne.w	800ce12 <__ieee754_pow+0x39a>
 800d200:	4aa3      	ldr	r2, [pc, #652]	; (800d490 <__ieee754_pow+0xa18>)
 800d202:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d206:	4293      	cmp	r3, r2
 800d208:	f340 8101 	ble.w	800d40e <__ieee754_pow+0x996>
 800d20c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d210:	2000      	movs	r0, #0
 800d212:	151b      	asrs	r3, r3, #20
 800d214:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d218:	fa4a f303 	asr.w	r3, sl, r3
 800d21c:	4433      	add	r3, r6
 800d21e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d222:	4f9c      	ldr	r7, [pc, #624]	; (800d494 <__ieee754_pow+0xa1c>)
 800d224:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d228:	4117      	asrs	r7, r2
 800d22a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d22e:	ea23 0107 	bic.w	r1, r3, r7
 800d232:	f1c2 0214 	rsb	r2, r2, #20
 800d236:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d23a:	460b      	mov	r3, r1
 800d23c:	fa4a fa02 	asr.w	sl, sl, r2
 800d240:	2e00      	cmp	r6, #0
 800d242:	4602      	mov	r2, r0
 800d244:	4629      	mov	r1, r5
 800d246:	4620      	mov	r0, r4
 800d248:	bfb8      	it	lt
 800d24a:	f1ca 0a00 	rsblt	sl, sl, #0
 800d24e:	f7f3 f8af 	bl	80003b0 <__aeabi_dsub>
 800d252:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d25a:	2400      	movs	r4, #0
 800d25c:	4642      	mov	r2, r8
 800d25e:	464b      	mov	r3, r9
 800d260:	f7f3 f8a8 	bl	80003b4 <__adddf3>
 800d264:	a37a      	add	r3, pc, #488	; (adr r3, 800d450 <__ieee754_pow+0x9d8>)
 800d266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26a:	4620      	mov	r0, r4
 800d26c:	460d      	mov	r5, r1
 800d26e:	f7f3 fa57 	bl	8000720 <__aeabi_dmul>
 800d272:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d276:	4606      	mov	r6, r0
 800d278:	460f      	mov	r7, r1
 800d27a:	4620      	mov	r0, r4
 800d27c:	4629      	mov	r1, r5
 800d27e:	f7f3 f897 	bl	80003b0 <__aeabi_dsub>
 800d282:	4602      	mov	r2, r0
 800d284:	460b      	mov	r3, r1
 800d286:	4640      	mov	r0, r8
 800d288:	4649      	mov	r1, r9
 800d28a:	f7f3 f891 	bl	80003b0 <__aeabi_dsub>
 800d28e:	a372      	add	r3, pc, #456	; (adr r3, 800d458 <__ieee754_pow+0x9e0>)
 800d290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d294:	f7f3 fa44 	bl	8000720 <__aeabi_dmul>
 800d298:	a371      	add	r3, pc, #452	; (adr r3, 800d460 <__ieee754_pow+0x9e8>)
 800d29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29e:	4680      	mov	r8, r0
 800d2a0:	4689      	mov	r9, r1
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	f7f3 fa3b 	bl	8000720 <__aeabi_dmul>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	4640      	mov	r0, r8
 800d2b0:	4649      	mov	r1, r9
 800d2b2:	f7f3 f87f 	bl	80003b4 <__adddf3>
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	460d      	mov	r5, r1
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	460b      	mov	r3, r1
 800d2be:	4630      	mov	r0, r6
 800d2c0:	4639      	mov	r1, r7
 800d2c2:	f7f3 f877 	bl	80003b4 <__adddf3>
 800d2c6:	4632      	mov	r2, r6
 800d2c8:	463b      	mov	r3, r7
 800d2ca:	4680      	mov	r8, r0
 800d2cc:	4689      	mov	r9, r1
 800d2ce:	f7f3 f86f 	bl	80003b0 <__aeabi_dsub>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	4629      	mov	r1, r5
 800d2da:	f7f3 f869 	bl	80003b0 <__aeabi_dsub>
 800d2de:	4642      	mov	r2, r8
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	460f      	mov	r7, r1
 800d2e4:	464b      	mov	r3, r9
 800d2e6:	4640      	mov	r0, r8
 800d2e8:	4649      	mov	r1, r9
 800d2ea:	f7f3 fa19 	bl	8000720 <__aeabi_dmul>
 800d2ee:	a35e      	add	r3, pc, #376	; (adr r3, 800d468 <__ieee754_pow+0x9f0>)
 800d2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f4:	4604      	mov	r4, r0
 800d2f6:	460d      	mov	r5, r1
 800d2f8:	f7f3 fa12 	bl	8000720 <__aeabi_dmul>
 800d2fc:	a35c      	add	r3, pc, #368	; (adr r3, 800d470 <__ieee754_pow+0x9f8>)
 800d2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d302:	f7f3 f855 	bl	80003b0 <__aeabi_dsub>
 800d306:	4622      	mov	r2, r4
 800d308:	462b      	mov	r3, r5
 800d30a:	f7f3 fa09 	bl	8000720 <__aeabi_dmul>
 800d30e:	a35a      	add	r3, pc, #360	; (adr r3, 800d478 <__ieee754_pow+0xa00>)
 800d310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d314:	f7f3 f84e 	bl	80003b4 <__adddf3>
 800d318:	4622      	mov	r2, r4
 800d31a:	462b      	mov	r3, r5
 800d31c:	f7f3 fa00 	bl	8000720 <__aeabi_dmul>
 800d320:	a357      	add	r3, pc, #348	; (adr r3, 800d480 <__ieee754_pow+0xa08>)
 800d322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d326:	f7f3 f843 	bl	80003b0 <__aeabi_dsub>
 800d32a:	4622      	mov	r2, r4
 800d32c:	462b      	mov	r3, r5
 800d32e:	f7f3 f9f7 	bl	8000720 <__aeabi_dmul>
 800d332:	a355      	add	r3, pc, #340	; (adr r3, 800d488 <__ieee754_pow+0xa10>)
 800d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d338:	f7f3 f83c 	bl	80003b4 <__adddf3>
 800d33c:	4622      	mov	r2, r4
 800d33e:	462b      	mov	r3, r5
 800d340:	f7f3 f9ee 	bl	8000720 <__aeabi_dmul>
 800d344:	4602      	mov	r2, r0
 800d346:	460b      	mov	r3, r1
 800d348:	4640      	mov	r0, r8
 800d34a:	4649      	mov	r1, r9
 800d34c:	f7f3 f830 	bl	80003b0 <__aeabi_dsub>
 800d350:	4604      	mov	r4, r0
 800d352:	460d      	mov	r5, r1
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	4640      	mov	r0, r8
 800d35a:	4649      	mov	r1, r9
 800d35c:	f7f3 f9e0 	bl	8000720 <__aeabi_dmul>
 800d360:	2200      	movs	r2, #0
 800d362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d36a:	4620      	mov	r0, r4
 800d36c:	4629      	mov	r1, r5
 800d36e:	f7f3 f81f 	bl	80003b0 <__aeabi_dsub>
 800d372:	4602      	mov	r2, r0
 800d374:	460b      	mov	r3, r1
 800d376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d37a:	f7f3 fafb 	bl	8000974 <__aeabi_ddiv>
 800d37e:	4632      	mov	r2, r6
 800d380:	4604      	mov	r4, r0
 800d382:	460d      	mov	r5, r1
 800d384:	463b      	mov	r3, r7
 800d386:	4640      	mov	r0, r8
 800d388:	4649      	mov	r1, r9
 800d38a:	f7f3 f9c9 	bl	8000720 <__aeabi_dmul>
 800d38e:	4632      	mov	r2, r6
 800d390:	463b      	mov	r3, r7
 800d392:	f7f3 f80f 	bl	80003b4 <__adddf3>
 800d396:	4602      	mov	r2, r0
 800d398:	460b      	mov	r3, r1
 800d39a:	4620      	mov	r0, r4
 800d39c:	4629      	mov	r1, r5
 800d39e:	f7f3 f807 	bl	80003b0 <__aeabi_dsub>
 800d3a2:	4642      	mov	r2, r8
 800d3a4:	464b      	mov	r3, r9
 800d3a6:	f7f3 f803 	bl	80003b0 <__aeabi_dsub>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	2000      	movs	r0, #0
 800d3b0:	4939      	ldr	r1, [pc, #228]	; (800d498 <__ieee754_pow+0xa20>)
 800d3b2:	f7f2 fffd 	bl	80003b0 <__aeabi_dsub>
 800d3b6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d3ba:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d3be:	da29      	bge.n	800d414 <__ieee754_pow+0x99c>
 800d3c0:	4652      	mov	r2, sl
 800d3c2:	f000 f955 	bl	800d670 <scalbn>
 800d3c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3ca:	f7ff bbfe 	b.w	800cbca <__ieee754_pow+0x152>
 800d3ce:	4b33      	ldr	r3, [pc, #204]	; (800d49c <__ieee754_pow+0xa24>)
 800d3d0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d3d4:	429f      	cmp	r7, r3
 800d3d6:	f77f af13 	ble.w	800d200 <__ieee754_pow+0x788>
 800d3da:	4b31      	ldr	r3, [pc, #196]	; (800d4a0 <__ieee754_pow+0xa28>)
 800d3dc:	440b      	add	r3, r1
 800d3de:	4303      	orrs	r3, r0
 800d3e0:	d009      	beq.n	800d3f6 <__ieee754_pow+0x97e>
 800d3e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	f7f3 fc0b 	bl	8000c04 <__aeabi_dcmplt>
 800d3ee:	3800      	subs	r0, #0
 800d3f0:	bf18      	it	ne
 800d3f2:	2001      	movne	r0, #1
 800d3f4:	e453      	b.n	800cc9e <__ieee754_pow+0x226>
 800d3f6:	4622      	mov	r2, r4
 800d3f8:	462b      	mov	r3, r5
 800d3fa:	f7f2 ffd9 	bl	80003b0 <__aeabi_dsub>
 800d3fe:	4642      	mov	r2, r8
 800d400:	464b      	mov	r3, r9
 800d402:	f7f3 fc13 	bl	8000c2c <__aeabi_dcmpge>
 800d406:	2800      	cmp	r0, #0
 800d408:	f43f aefa 	beq.w	800d200 <__ieee754_pow+0x788>
 800d40c:	e7e9      	b.n	800d3e2 <__ieee754_pow+0x96a>
 800d40e:	f04f 0a00 	mov.w	sl, #0
 800d412:	e720      	b.n	800d256 <__ieee754_pow+0x7de>
 800d414:	4621      	mov	r1, r4
 800d416:	e7d6      	b.n	800d3c6 <__ieee754_pow+0x94e>
 800d418:	f04f 0b00 	mov.w	fp, #0
 800d41c:	f8df c078 	ldr.w	ip, [pc, #120]	; 800d498 <__ieee754_pow+0xa20>
 800d420:	f7ff bbba 	b.w	800cb98 <__ieee754_pow+0x120>
 800d424:	f04f 0b00 	mov.w	fp, #0
 800d428:	f04f 0c00 	mov.w	ip, #0
 800d42c:	f7ff bbb4 	b.w	800cb98 <__ieee754_pow+0x120>
 800d430:	4640      	mov	r0, r8
 800d432:	4649      	mov	r1, r9
 800d434:	f7ff bb3d 	b.w	800cab2 <__ieee754_pow+0x3a>
 800d438:	9200      	str	r2, [sp, #0]
 800d43a:	f7ff bb89 	b.w	800cb50 <__ieee754_pow+0xd8>
 800d43e:	2300      	movs	r3, #0
 800d440:	f7ff bb73 	b.w	800cb2a <__ieee754_pow+0xb2>
 800d444:	f3af 8000 	nop.w
 800d448:	652b82fe 	.word	0x652b82fe
 800d44c:	3c971547 	.word	0x3c971547
 800d450:	00000000 	.word	0x00000000
 800d454:	3fe62e43 	.word	0x3fe62e43
 800d458:	fefa39ef 	.word	0xfefa39ef
 800d45c:	3fe62e42 	.word	0x3fe62e42
 800d460:	0ca86c39 	.word	0x0ca86c39
 800d464:	be205c61 	.word	0xbe205c61
 800d468:	72bea4d0 	.word	0x72bea4d0
 800d46c:	3e663769 	.word	0x3e663769
 800d470:	c5d26bf1 	.word	0xc5d26bf1
 800d474:	3ebbbd41 	.word	0x3ebbbd41
 800d478:	af25de2c 	.word	0xaf25de2c
 800d47c:	3f11566a 	.word	0x3f11566a
 800d480:	16bebd93 	.word	0x16bebd93
 800d484:	3f66c16c 	.word	0x3f66c16c
 800d488:	5555553e 	.word	0x5555553e
 800d48c:	3fc55555 	.word	0x3fc55555
 800d490:	3fe00000 	.word	0x3fe00000
 800d494:	000fffff 	.word	0x000fffff
 800d498:	3ff00000 	.word	0x3ff00000
 800d49c:	4090cbff 	.word	0x4090cbff
 800d4a0:	3f6f3400 	.word	0x3f6f3400

0800d4a4 <__ieee754_sqrt>:
 800d4a4:	f8df c158 	ldr.w	ip, [pc, #344]	; 800d600 <__ieee754_sqrt+0x15c>
 800d4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ac:	ea3c 0c01 	bics.w	ip, ip, r1
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	460d      	mov	r5, r1
 800d4b4:	460c      	mov	r4, r1
 800d4b6:	460a      	mov	r2, r1
 800d4b8:	4607      	mov	r7, r0
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	d10f      	bne.n	800d4de <__ieee754_sqrt+0x3a>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	f7f3 f92d 	bl	8000720 <__aeabi_dmul>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	4630      	mov	r0, r6
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	f7f2 ff71 	bl	80003b4 <__adddf3>
 800d4d2:	4606      	mov	r6, r0
 800d4d4:	460d      	mov	r5, r1
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	4629      	mov	r1, r5
 800d4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4de:	2900      	cmp	r1, #0
 800d4e0:	dc0e      	bgt.n	800d500 <__ieee754_sqrt+0x5c>
 800d4e2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d4e6:	ea5c 0707 	orrs.w	r7, ip, r7
 800d4ea:	d0f4      	beq.n	800d4d6 <__ieee754_sqrt+0x32>
 800d4ec:	b141      	cbz	r1, 800d500 <__ieee754_sqrt+0x5c>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	f7f2 ff5d 	bl	80003b0 <__aeabi_dsub>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	f7f3 fa3b 	bl	8000974 <__aeabi_ddiv>
 800d4fe:	e7e8      	b.n	800d4d2 <__ieee754_sqrt+0x2e>
 800d500:	1521      	asrs	r1, r4, #20
 800d502:	d075      	beq.n	800d5f0 <__ieee754_sqrt+0x14c>
 800d504:	07cc      	lsls	r4, r1, #31
 800d506:	f04f 0400 	mov.w	r4, #0
 800d50a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d50e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800d512:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d516:	bf5e      	ittt	pl
 800d518:	0fd9      	lsrpl	r1, r3, #31
 800d51a:	005b      	lslpl	r3, r3, #1
 800d51c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800d520:	0fd9      	lsrs	r1, r3, #31
 800d522:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d526:	2516      	movs	r5, #22
 800d528:	4620      	mov	r0, r4
 800d52a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d52e:	107f      	asrs	r7, r7, #1
 800d530:	005b      	lsls	r3, r3, #1
 800d532:	1846      	adds	r6, r0, r1
 800d534:	4296      	cmp	r6, r2
 800d536:	bfde      	ittt	le
 800d538:	1b92      	suble	r2, r2, r6
 800d53a:	1870      	addle	r0, r6, r1
 800d53c:	1864      	addle	r4, r4, r1
 800d53e:	0052      	lsls	r2, r2, #1
 800d540:	3d01      	subs	r5, #1
 800d542:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d546:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d54a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d54e:	d1f0      	bne.n	800d532 <__ieee754_sqrt+0x8e>
 800d550:	4629      	mov	r1, r5
 800d552:	f04f 0e20 	mov.w	lr, #32
 800d556:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d55a:	4282      	cmp	r2, r0
 800d55c:	eb06 0c05 	add.w	ip, r6, r5
 800d560:	dc02      	bgt.n	800d568 <__ieee754_sqrt+0xc4>
 800d562:	d113      	bne.n	800d58c <__ieee754_sqrt+0xe8>
 800d564:	459c      	cmp	ip, r3
 800d566:	d811      	bhi.n	800d58c <__ieee754_sqrt+0xe8>
 800d568:	f1bc 0f00 	cmp.w	ip, #0
 800d56c:	eb0c 0506 	add.w	r5, ip, r6
 800d570:	da43      	bge.n	800d5fa <__ieee754_sqrt+0x156>
 800d572:	2d00      	cmp	r5, #0
 800d574:	db41      	blt.n	800d5fa <__ieee754_sqrt+0x156>
 800d576:	f100 0801 	add.w	r8, r0, #1
 800d57a:	1a12      	subs	r2, r2, r0
 800d57c:	4640      	mov	r0, r8
 800d57e:	459c      	cmp	ip, r3
 800d580:	bf88      	it	hi
 800d582:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d586:	eba3 030c 	sub.w	r3, r3, ip
 800d58a:	4431      	add	r1, r6
 800d58c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d590:	f1be 0e01 	subs.w	lr, lr, #1
 800d594:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800d598:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d59c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d5a0:	d1db      	bne.n	800d55a <__ieee754_sqrt+0xb6>
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	d006      	beq.n	800d5b4 <__ieee754_sqrt+0x110>
 800d5a6:	1c48      	adds	r0, r1, #1
 800d5a8:	bf0b      	itete	eq
 800d5aa:	4671      	moveq	r1, lr
 800d5ac:	3101      	addne	r1, #1
 800d5ae:	3401      	addeq	r4, #1
 800d5b0:	f021 0101 	bicne.w	r1, r1, #1
 800d5b4:	1063      	asrs	r3, r4, #1
 800d5b6:	0849      	lsrs	r1, r1, #1
 800d5b8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d5bc:	07e2      	lsls	r2, r4, #31
 800d5be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d5c2:	bf48      	it	mi
 800d5c4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d5c8:	460e      	mov	r6, r1
 800d5ca:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d5ce:	e782      	b.n	800d4d6 <__ieee754_sqrt+0x32>
 800d5d0:	0ada      	lsrs	r2, r3, #11
 800d5d2:	3815      	subs	r0, #21
 800d5d4:	055b      	lsls	r3, r3, #21
 800d5d6:	2a00      	cmp	r2, #0
 800d5d8:	d0fa      	beq.n	800d5d0 <__ieee754_sqrt+0x12c>
 800d5da:	02d5      	lsls	r5, r2, #11
 800d5dc:	d50a      	bpl.n	800d5f4 <__ieee754_sqrt+0x150>
 800d5de:	f1c1 0420 	rsb	r4, r1, #32
 800d5e2:	fa23 f404 	lsr.w	r4, r3, r4
 800d5e6:	1e4d      	subs	r5, r1, #1
 800d5e8:	408b      	lsls	r3, r1
 800d5ea:	4322      	orrs	r2, r4
 800d5ec:	1b41      	subs	r1, r0, r5
 800d5ee:	e789      	b.n	800d504 <__ieee754_sqrt+0x60>
 800d5f0:	4608      	mov	r0, r1
 800d5f2:	e7f0      	b.n	800d5d6 <__ieee754_sqrt+0x132>
 800d5f4:	0052      	lsls	r2, r2, #1
 800d5f6:	3101      	adds	r1, #1
 800d5f8:	e7ef      	b.n	800d5da <__ieee754_sqrt+0x136>
 800d5fa:	4680      	mov	r8, r0
 800d5fc:	e7bd      	b.n	800d57a <__ieee754_sqrt+0xd6>
 800d5fe:	bf00      	nop
 800d600:	7ff00000 	.word	0x7ff00000

0800d604 <with_errno>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	4604      	mov	r4, r0
 800d608:	460d      	mov	r5, r1
 800d60a:	4616      	mov	r6, r2
 800d60c:	f7fa ff60 	bl	80084d0 <__errno>
 800d610:	4629      	mov	r1, r5
 800d612:	6006      	str	r6, [r0, #0]
 800d614:	4620      	mov	r0, r4
 800d616:	bd70      	pop	{r4, r5, r6, pc}

0800d618 <xflow>:
 800d618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d61a:	4615      	mov	r5, r2
 800d61c:	461c      	mov	r4, r3
 800d61e:	b180      	cbz	r0, 800d642 <xflow+0x2a>
 800d620:	4610      	mov	r0, r2
 800d622:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d626:	e9cd 0100 	strd	r0, r1, [sp]
 800d62a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d62e:	4628      	mov	r0, r5
 800d630:	4621      	mov	r1, r4
 800d632:	f7f3 f875 	bl	8000720 <__aeabi_dmul>
 800d636:	2222      	movs	r2, #34	; 0x22
 800d638:	b003      	add	sp, #12
 800d63a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d63e:	f7ff bfe1 	b.w	800d604 <with_errno>
 800d642:	4610      	mov	r0, r2
 800d644:	4619      	mov	r1, r3
 800d646:	e7ee      	b.n	800d626 <xflow+0xe>

0800d648 <__math_uflow>:
 800d648:	2200      	movs	r2, #0
 800d64a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d64e:	f7ff bfe3 	b.w	800d618 <xflow>

0800d652 <__math_oflow>:
 800d652:	2200      	movs	r2, #0
 800d654:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d658:	f7ff bfde 	b.w	800d618 <xflow>

0800d65c <fabs>:
 800d65c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d660:	4770      	bx	lr

0800d662 <finite>:
 800d662:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800d666:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d66a:	0fc0      	lsrs	r0, r0, #31
 800d66c:	4770      	bx	lr
	...

0800d670 <scalbn>:
 800d670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d672:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800d676:	4604      	mov	r4, r0
 800d678:	460d      	mov	r5, r1
 800d67a:	4617      	mov	r7, r2
 800d67c:	460b      	mov	r3, r1
 800d67e:	b996      	cbnz	r6, 800d6a6 <scalbn+0x36>
 800d680:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d684:	4303      	orrs	r3, r0
 800d686:	d039      	beq.n	800d6fc <scalbn+0x8c>
 800d688:	4b33      	ldr	r3, [pc, #204]	; (800d758 <scalbn+0xe8>)
 800d68a:	2200      	movs	r2, #0
 800d68c:	f7f3 f848 	bl	8000720 <__aeabi_dmul>
 800d690:	4b32      	ldr	r3, [pc, #200]	; (800d75c <scalbn+0xec>)
 800d692:	4604      	mov	r4, r0
 800d694:	429f      	cmp	r7, r3
 800d696:	460d      	mov	r5, r1
 800d698:	da0f      	bge.n	800d6ba <scalbn+0x4a>
 800d69a:	a32b      	add	r3, pc, #172	; (adr r3, 800d748 <scalbn+0xd8>)
 800d69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a0:	f7f3 f83e 	bl	8000720 <__aeabi_dmul>
 800d6a4:	e006      	b.n	800d6b4 <scalbn+0x44>
 800d6a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d6aa:	4296      	cmp	r6, r2
 800d6ac:	d10a      	bne.n	800d6c4 <scalbn+0x54>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	f7f2 fe80 	bl	80003b4 <__adddf3>
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	460d      	mov	r5, r1
 800d6b8:	e020      	b.n	800d6fc <scalbn+0x8c>
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d6c0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800d6c4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d6c8:	19b9      	adds	r1, r7, r6
 800d6ca:	4291      	cmp	r1, r2
 800d6cc:	dd0e      	ble.n	800d6ec <scalbn+0x7c>
 800d6ce:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d6d2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800d6d6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800d6da:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800d6de:	4820      	ldr	r0, [pc, #128]	; (800d760 <scalbn+0xf0>)
 800d6e0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800d6e4:	a31a      	add	r3, pc, #104	; (adr r3, 800d750 <scalbn+0xe0>)
 800d6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ea:	e7d9      	b.n	800d6a0 <scalbn+0x30>
 800d6ec:	2900      	cmp	r1, #0
 800d6ee:	dd08      	ble.n	800d702 <scalbn+0x92>
 800d6f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d6f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d6f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	4629      	mov	r1, r5
 800d700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d702:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800d706:	da12      	bge.n	800d72e <scalbn+0xbe>
 800d708:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d70c:	429f      	cmp	r7, r3
 800d70e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800d712:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800d716:	dcdc      	bgt.n	800d6d2 <scalbn+0x62>
 800d718:	a30b      	add	r3, pc, #44	; (adr r3, 800d748 <scalbn+0xd8>)
 800d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800d722:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800d726:	480f      	ldr	r0, [pc, #60]	; (800d764 <scalbn+0xf4>)
 800d728:	f041 011f 	orr.w	r1, r1, #31
 800d72c:	e7b8      	b.n	800d6a0 <scalbn+0x30>
 800d72e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d732:	3136      	adds	r1, #54	; 0x36
 800d734:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d738:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d73c:	4620      	mov	r0, r4
 800d73e:	4629      	mov	r1, r5
 800d740:	2200      	movs	r2, #0
 800d742:	4b09      	ldr	r3, [pc, #36]	; (800d768 <scalbn+0xf8>)
 800d744:	e7ac      	b.n	800d6a0 <scalbn+0x30>
 800d746:	bf00      	nop
 800d748:	c2f8f359 	.word	0xc2f8f359
 800d74c:	01a56e1f 	.word	0x01a56e1f
 800d750:	8800759c 	.word	0x8800759c
 800d754:	7e37e43c 	.word	0x7e37e43c
 800d758:	43500000 	.word	0x43500000
 800d75c:	ffff3cb0 	.word	0xffff3cb0
 800d760:	8800759c 	.word	0x8800759c
 800d764:	c2f8f359 	.word	0xc2f8f359
 800d768:	3c900000 	.word	0x3c900000

0800d76c <_init>:
 800d76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76e:	bf00      	nop
 800d770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d772:	bc08      	pop	{r3}
 800d774:	469e      	mov	lr, r3
 800d776:	4770      	bx	lr

0800d778 <_fini>:
 800d778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d77a:	bf00      	nop
 800d77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d77e:	bc08      	pop	{r3}
 800d780:	469e      	mov	lr, r3
 800d782:	4770      	bx	lr
